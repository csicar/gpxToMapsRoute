// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../output/Main/foreign.js":[function(require,module,exports) {
exports._fileFromInput = function (ev) {
  return function (onError, onSuccess) {
    var file = ev.target.files[0];
    var reader = new FileReader();
    reader.readAsText(file, "UTF-8");

    reader.onload = function (evt) {
      onSuccess(evt.target.result);
    };

    reader.onerror = function (evt) {
      onError(evt.target.error);
    };

    return function (cancelError, onCancelerError, onCancelerSuccess) {// no way to cancel filereader
    };
  };
};
},{}],"output/Control.Bind/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayBind = function (arr) {
  return function (f) {
    var result = [];

    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }

    return result;
  };
};
},{}],"output/Control.Apply/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayApply = function (fs) {
  return function (xs) {
    var l = fs.length;
    var k = xs.length;
    var result = new Array(l * k);
    var n = 0;

    for (var i = 0; i < l; i++) {
      var f = fs[i];

      for (var j = 0; j < k; j++) {
        result[n++] = f(xs[j]);
      }
    }

    return result;
  };
};
},{}],"output/Control.Semigroupoid/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Semigroupoid = function Semigroupoid(compose) {
  this.compose = compose;
};

var semigroupoidFn = new Semigroupoid(function (f) {
  return function (g) {
    return function (x) {
      return f(g(x));
    };
  };
});

var compose = function compose(dict) {
  return dict.compose;
};

var composeFlipped = function composeFlipped(dictSemigroupoid) {
  return function (f) {
    return function (g) {
      return compose(dictSemigroupoid)(g)(f);
    };
  };
};

module.exports = {
  compose: compose,
  Semigroupoid: Semigroupoid,
  composeFlipped: composeFlipped,
  semigroupoidFn: semigroupoidFn
};
},{}],"output/Control.Category/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Category = function Category(Semigroupoid0, identity) {
  this.Semigroupoid0 = Semigroupoid0;
  this.identity = identity;
};

var identity = function identity(dict) {
  return dict.identity;
};

var categoryFn = new Category(function () {
  return Control_Semigroupoid.semigroupoidFn;
}, function (x) {
  return x;
});
module.exports = {
  Category: Category,
  identity: identity,
  categoryFn: categoryFn
};
},{"../Control.Semigroupoid/index.js":"output/Control.Semigroupoid/index.js"}],"output/Data.Boolean/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var otherwise = true;
module.exports = {
  otherwise: otherwise
};
},{}],"output/Data.Function/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Boolean = require("../Data.Boolean/index.js");

var on = function on(f) {
  return function (g) {
    return function (x) {
      return function (y) {
        return f(g(x))(g(y));
      };
    };
  };
};

var flip = function flip(f) {
  return function (b) {
    return function (a) {
      return f(a)(b);
    };
  };
};

var $$const = function $$const(a) {
  return function (v) {
    return a;
  };
};

var applyN = function applyN(f) {
  var go = function go($copy_n) {
    return function ($copy_acc) {
      var $tco_var_n = $copy_n;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(n, acc) {
        if (n <= 0) {
          $tco_done = true;
          return acc;
        }

        ;

        if (Data_Boolean.otherwise) {
          $tco_var_n = n - 1 | 0;
          $copy_acc = f(acc);
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Function (line 94, column 3 - line 96, column 37): " + [n.constructor.name, acc.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_n, $copy_acc);
      }

      ;
      return $tco_result;
    };
  };

  return go;
};

var applyFlipped = function applyFlipped(x) {
  return function (f) {
    return f(x);
  };
};

var apply = function apply(f) {
  return function (x) {
    return f(x);
  };
};

module.exports = {
  flip: flip,
  "const": $$const,
  apply: apply,
  applyFlipped: applyFlipped,
  applyN: applyN,
  on: on
};
},{"../Data.Boolean/index.js":"output/Data.Boolean/index.js"}],"output/Data.Functor/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);

    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }

    return result;
  };
};
},{}],"output/Data.Unit/foreign.js":[function(require,module,exports) {
"use strict";

exports.unit = {};
},{}],"output/Data.Show/foreign.js":[function(require,module,exports) {
"use strict";

exports.showIntImpl = function (n) {
  return n.toString();
};

exports.showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};

exports.showCharImpl = function (c) {
  var code = c.charCodeAt(0);

  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\x07":
        return "'\\a'";

      case "\b":
        return "'\\b'";

      case "\f":
        return "'\\f'";

      case "\n":
        return "'\\n'";

      case "\r":
        return "'\\r'";

      case "\t":
        return "'\\t'";

      case "\v":
        return "'\\v'";
    }

    return "'\\" + code.toString(10) + "'";
  }

  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

exports.showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(/[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
  function (c, i) {
    switch (c) {
      case "\"":
      case "\\":
        return "\\" + c;

      case "\x07":
        return "\\a";

      case "\b":
        return "\\b";

      case "\f":
        return "\\f";

      case "\n":
        return "\\n";

      case "\r":
        return "\\r";

      case "\t":
        return "\\t";

      case "\v":
        return "\\v";
    }

    var k = i + 1;
    var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
    return "\\" + c.charCodeAt(0).toString(10) + empty;
  }) + "\"";
};

exports.showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];

    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }

    return "[" + ss.join(",") + "]";
  };
};

exports.cons = function (head) {
  return function (tail) {
    return [head].concat(tail);
  };
};

exports.join = function (separator) {
  return function (xs) {
    return xs.join(separator);
  };
};
},{}],"output/Data.Symbol/foreign.js":[function(require,module,exports) {
"use strict"; // module Data.Symbol

exports.unsafeCoerce = function (arg) {
  return arg;
};
},{}],"output/Data.Symbol/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var SProxy = function () {
  function SProxy() {}

  ;
  SProxy.value = new SProxy();
  return SProxy;
}();

var IsSymbol = function IsSymbol(reflectSymbol) {
  this.reflectSymbol = reflectSymbol;
};

var reifySymbol = function reifySymbol(s) {
  return function (f) {
    return $foreign.unsafeCoerce(function (dictIsSymbol) {
      return f(dictIsSymbol);
    })({
      reflectSymbol: function reflectSymbol(v) {
        return s;
      }
    })(SProxy.value);
  };
};

var reflectSymbol = function reflectSymbol(dict) {
  return dict.reflectSymbol;
};

module.exports = {
  IsSymbol: IsSymbol,
  reflectSymbol: reflectSymbol,
  reifySymbol: reifySymbol,
  SProxy: SProxy
};
},{"./foreign.js":"output/Data.Symbol/foreign.js"}],"output/Record.Unsafe/foreign.js":[function(require,module,exports) {
"use strict";

exports.unsafeHas = function (label) {
  return function (rec) {
    return {}.hasOwnProperty.call(rec, label);
  };
};

exports.unsafeGet = function (label) {
  return function (rec) {
    return rec[label];
  };
};

exports.unsafeSet = function (label) {
  return function (value) {
    return function (rec) {
      var copy = {};

      for (var key in rec) {
        if ({}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }

      copy[label] = value;
      return copy;
    };
  };
};

exports.unsafeDelete = function (label) {
  return function (rec) {
    var copy = {};

    for (var key in rec) {
      if (key !== label && {}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }

    return copy;
  };
};
},{}],"output/Record.Unsafe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  unsafeHas: $foreign.unsafeHas,
  unsafeGet: $foreign.unsafeGet,
  unsafeSet: $foreign.unsafeSet,
  unsafeDelete: $foreign.unsafeDelete
};
},{"./foreign.js":"output/Record.Unsafe/foreign.js"}],"output/Type.Data.RowList/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var RLProxy = function () {
  function RLProxy() {}

  ;
  RLProxy.value = new RLProxy();
  return RLProxy;
}();

module.exports = {
  RLProxy: RLProxy
};
},{}],"output/Data.Show/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var ShowRecordFields = function ShowRecordFields(showRecordFields) {
  this.showRecordFields = showRecordFields;
};

var Show = function Show(show) {
  this.show = show;
};

var showString = new Show($foreign.showStringImpl);
var showRecordFieldsNil = new ShowRecordFields(function (v) {
  return function (v1) {
    return [];
  };
});

var showRecordFields = function showRecordFields(dict) {
  return dict.showRecordFields;
};

var showRecord = function showRecord(dictRowToList) {
  return function (dictShowRecordFields) {
    return new Show(function (record) {
      var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);

      if (v.length === 0) {
        return "{}";
      }

      ;
      return $foreign.join(" ")(["{", $foreign.join(", ")(v), "}"]);
    });
  };
};

var showNumber = new Show($foreign.showNumberImpl);
var showInt = new Show($foreign.showIntImpl);
var showChar = new Show($foreign.showCharImpl);
var showBoolean = new Show(function (v) {
  if (v) {
    return "true";
  }

  ;

  if (!v) {
    return "false";
  }

  ;
  throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [v.constructor.name]);
});

var show = function show(dict) {
  return dict.show;
};

var showArray = function showArray(dictShow) {
  return new Show($foreign.showArrayImpl(show(dictShow)));
};

var showRecordFieldsCons = function showRecordFieldsCons(dictIsSymbol) {
  return function (dictShowRecordFields) {
    return function (dictShow) {
      return new ShowRecordFields(function (v) {
        return function (record) {
          var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
          var focus = Record_Unsafe.unsafeGet(key)(record);
          return $foreign.cons($foreign.join(": ")([key, show(dictShow)(focus)]))(tail);
        };
      });
    };
  };
};

module.exports = {
  Show: Show,
  show: show,
  ShowRecordFields: ShowRecordFields,
  showRecordFields: showRecordFields,
  showBoolean: showBoolean,
  showInt: showInt,
  showNumber: showNumber,
  showChar: showChar,
  showString: showString,
  showArray: showArray,
  showRecord: showRecord,
  showRecordFieldsNil: showRecordFieldsNil,
  showRecordFieldsCons: showRecordFieldsCons
};
},{"./foreign.js":"output/Data.Show/foreign.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"output/Type.Data.RowList/index.js"}],"output/Data.Unit/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Show = require("../Data.Show/index.js");

var showUnit = new Data_Show.Show(function (v) {
  return "unit";
});
module.exports = {
  showUnit: showUnit,
  unit: $foreign.unit
};
},{"./foreign.js":"output/Data.Unit/foreign.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Functor/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Functor = function Functor(map) {
  this.map = map;
};

var map = function map(dict) {
  return dict.map;
};

var mapFlipped = function mapFlipped(dictFunctor) {
  return function (fa) {
    return function (f) {
      return map(dictFunctor)(f)(fa);
    };
  };
};

var $$void = function $$void(dictFunctor) {
  return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
};

var voidLeft = function voidLeft(dictFunctor) {
  return function (f) {
    return function (x) {
      return map(dictFunctor)(Data_Function["const"](x))(f);
    };
  };
};

var voidRight = function voidRight(dictFunctor) {
  return function (x) {
    return map(dictFunctor)(Data_Function["const"](x));
  };
};

var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var functorArray = new Functor($foreign.arrayMap);

var flap = function flap(dictFunctor) {
  return function (ff) {
    return function (x) {
      return map(dictFunctor)(function (f) {
        return f(x);
      })(ff);
    };
  };
};

module.exports = {
  Functor: Functor,
  map: map,
  mapFlipped: mapFlipped,
  "void": $$void,
  voidRight: voidRight,
  voidLeft: voidLeft,
  flap: flap,
  functorFn: functorFn,
  functorArray: functorArray
};
},{"./foreign.js":"output/Data.Functor/foreign.js","../Control.Semigroupoid/index.js":"output/Control.Semigroupoid/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Control.Apply/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Apply = function Apply(Functor0, apply) {
  this.Functor0 = Functor0;
  this.apply = apply;
};

var applyFn = new Apply(function () {
  return Data_Functor.functorFn;
}, function (f) {
  return function (g) {
    return function (x) {
      return f(x)(g(x));
    };
  };
});
var applyArray = new Apply(function () {
  return Data_Functor.functorArray;
}, $foreign.arrayApply);

var apply = function apply(dict) {
  return dict.apply;
};

var applyFirst = function applyFirst(dictApply) {
  return function (a) {
    return function (b) {
      return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
    };
  };
};

var applySecond = function applySecond(dictApply) {
  return function (a) {
    return function (b) {
      return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
    };
  };
};

var lift2 = function lift2(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
      };
    };
  };
};

var lift3 = function lift3(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
        };
      };
    };
  };
};

var lift4 = function lift4(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
          };
        };
      };
    };
  };
};

var lift5 = function lift5(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
            };
          };
        };
      };
    };
  };
};

module.exports = {
  Apply: Apply,
  apply: apply,
  applyFirst: applyFirst,
  applySecond: applySecond,
  lift2: lift2,
  lift3: lift3,
  lift4: lift4,
  lift5: lift5,
  applyFn: applyFn,
  applyArray: applyArray
};
},{"./foreign.js":"output/Control.Apply/foreign.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js"}],"output/Control.Bind/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Function = require("../Data.Function/index.js");

var Discard = function Discard(discard) {
  this.discard = discard;
};

var Bind = function Bind(Apply0, bind) {
  this.Apply0 = Apply0;
  this.bind = bind;
};

var discard = function discard(dict) {
  return dict.discard;
};

var bindFn = new Bind(function () {
  return Control_Apply.applyFn;
}, function (m) {
  return function (f) {
    return function (x) {
      return f(m(x))(x);
    };
  };
});
var bindArray = new Bind(function () {
  return Control_Apply.applyArray;
}, $foreign.arrayBind);

var bind = function bind(dict) {
  return dict.bind;
};

var bindFlipped = function bindFlipped(dictBind) {
  return Data_Function.flip(bind(dictBind));
};

var composeKleisliFlipped = function composeKleisliFlipped(dictBind) {
  return function (f) {
    return function (g) {
      return function (a) {
        return bindFlipped(dictBind)(f)(g(a));
      };
    };
  };
};

var composeKleisli = function composeKleisli(dictBind) {
  return function (f) {
    return function (g) {
      return function (a) {
        return bind(dictBind)(f(a))(g);
      };
    };
  };
};

var discardUnit = new Discard(function (dictBind) {
  return bind(dictBind);
});

var ifM = function ifM(dictBind) {
  return function (cond) {
    return function (t) {
      return function (f) {
        return bind(dictBind)(cond)(function (cond$prime) {
          if (cond$prime) {
            return t;
          }

          ;
          return f;
        });
      };
    };
  };
};

var join = function join(dictBind) {
  return function (m) {
    return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
  };
};

module.exports = {
  Bind: Bind,
  bind: bind,
  bindFlipped: bindFlipped,
  Discard: Discard,
  discard: discard,
  join: join,
  composeKleisli: composeKleisli,
  composeKleisliFlipped: composeKleisliFlipped,
  ifM: ifM,
  bindFn: bindFn,
  bindArray: bindArray,
  discardUnit: discardUnit
};
},{"./foreign.js":"output/Control.Bind/foreign.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Function/index.js":"output/Data.Function/index.js"}],"output/Control.Applicative/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Apply = require("../Control.Apply/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Applicative = function Applicative(Apply0, pure) {
  this.Apply0 = Apply0;
  this.pure = pure;
};

var pure = function pure(dict) {
  return dict.pure;
};

var unless = function unless(dictApplicative) {
  return function (v) {
    return function (v1) {
      if (!v) {
        return v1;
      }

      ;

      if (v) {
        return pure(dictApplicative)(Data_Unit.unit);
      }

      ;
      throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

var when = function when(dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v) {
        return v1;
      }

      ;

      if (!v) {
        return pure(dictApplicative)(Data_Unit.unit);
      }

      ;
      throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

var liftA1 = function liftA1(dictApplicative) {
  return function (f) {
    return function (a) {
      return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
    };
  };
};

var applicativeFn = new Applicative(function () {
  return Control_Apply.applyFn;
}, function (x) {
  return function (v) {
    return x;
  };
});
var applicativeArray = new Applicative(function () {
  return Control_Apply.applyArray;
}, function (x) {
  return [x];
});
module.exports = {
  Applicative: Applicative,
  pure: pure,
  liftA1: liftA1,
  unless: unless,
  when: when,
  applicativeFn: applicativeFn,
  applicativeArray: applicativeArray
};
},{"../Control.Apply/index.js":"output/Control.Apply/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Control.Biapplicative/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Biapplicative = function Biapplicative(Biapply0, bipure) {
  this.Biapply0 = Biapply0;
  this.bipure = bipure;
};

var bipure = function bipure(dict) {
  return dict.bipure;
};

module.exports = {
  bipure: bipure,
  Biapplicative: Biapplicative
};
},{}],"output/Data.Bifunctor/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Bifunctor = function Bifunctor(bimap) {
  this.bimap = bimap;
};

var bimap = function bimap(dict) {
  return dict.bimap;
};

var lmap = function lmap(dictBifunctor) {
  return function (f) {
    return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var rmap = function rmap(dictBifunctor) {
  return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
};

module.exports = {
  bimap: bimap,
  Bifunctor: Bifunctor,
  lmap: lmap,
  rmap: rmap
};
},{"../Control.Category/index.js":"output/Control.Category/index.js"}],"output/Control.Biapply/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Function = require("../Data.Function/index.js");

var Biapply = function Biapply(Bifunctor0, biapply) {
  this.Bifunctor0 = Bifunctor0;
  this.biapply = biapply;
};

var biapply = function biapply(dict) {
  return dict.biapply;
};

var biapplyFirst = function biapplyFirst(dictBiapply) {
  return function (a) {
    return function (b) {
      return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))))(a))(b);
    };
  };
};

var biapplySecond = function biapplySecond(dictBiapply) {
  return function (a) {
    return function (b) {
      return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
    };
  };
};

var bilift2 = function bilift2(dictBiapply) {
  return function (f) {
    return function (g) {
      return function (a) {
        return function (b) {
          return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
        };
      };
    };
  };
};

var bilift3 = function bilift3(dictBiapply) {
  return function (f) {
    return function (g) {
      return function (a) {
        return function (b) {
          return function (c) {
            return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
          };
        };
      };
    };
  };
};

module.exports = {
  biapply: biapply,
  Biapply: Biapply,
  biapplyFirst: biapplyFirst,
  biapplySecond: biapplySecond,
  bilift2: bilift2,
  bilift3: bilift3
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Function/index.js":"output/Data.Function/index.js"}],"output/Control.Comonad/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Comonad = function Comonad(Extend0, extract) {
  this.Extend0 = Extend0;
  this.extract = extract;
};

var extract = function extract(dict) {
  return dict.extract;
};

module.exports = {
  Comonad: Comonad,
  extract: extract
};
},{}],"output/Control.Extend/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayExtend = function (f) {
  return function (xs) {
    return xs.map(function (_, i, xs) {
      return f(xs.slice(i));
    });
  };
};
},{}],"output/Data.Semigroup/foreign.js":[function(require,module,exports) {
"use strict";

exports.concatString = function (s1) {
  return function (s2) {
    return s1 + s2;
  };
};

exports.concatArray = function (xs) {
  return function (ys) {
    if (xs.length === 0) return ys;
    if (ys.length === 0) return xs;
    return xs.concat(ys);
  };
};
},{}],"output/Data.Void/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Show = require("../Data.Show/index.js");

var Void = function Void(x) {
  return x;
};

var absurd = function absurd(a) {
  var spin = function spin($copy_v) {
    var $tco_result;

    function $tco_loop(v) {
      $copy_v = v;
      return;
    }

    ;

    while (!false) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return spin(a);
};

var showVoid = new Data_Show.Show(absurd);
module.exports = {
  absurd: absurd,
  showVoid: showVoid
};
},{"../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Semigroup/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Data_Void = require("../Data.Void/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var SemigroupRecord = function SemigroupRecord(appendRecord) {
  this.appendRecord = appendRecord;
};

var Semigroup = function Semigroup(append) {
  this.append = append;
};

var semigroupVoid = new Semigroup(function (v) {
  return Data_Void.absurd;
});
var semigroupUnit = new Semigroup(function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
});
var semigroupString = new Semigroup($foreign.concatString);
var semigroupRecordNil = new SemigroupRecord(function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
});
var semigroupArray = new Semigroup($foreign.concatArray);

var appendRecord = function appendRecord(dict) {
  return dict.appendRecord;
};

var semigroupRecord = function semigroupRecord(dictRowToList) {
  return function (dictSemigroupRecord) {
    return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
  };
};

var append = function append(dict) {
  return dict.append;
};

var semigroupFn = function semigroupFn(dictSemigroup) {
  return new Semigroup(function (f) {
    return function (g) {
      return function (x) {
        return append(dictSemigroup)(f(x))(g(x));
      };
    };
  });
};

var semigroupRecordCons = function semigroupRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictSemigroupRecord) {
      return function (dictSemigroup) {
        return new SemigroupRecord(function (v) {
          return function (ra) {
            return function (rb) {
              var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
            };
          };
        });
      };
    };
  };
};

module.exports = {
  Semigroup: Semigroup,
  append: append,
  SemigroupRecord: SemigroupRecord,
  appendRecord: appendRecord,
  semigroupString: semigroupString,
  semigroupUnit: semigroupUnit,
  semigroupVoid: semigroupVoid,
  semigroupFn: semigroupFn,
  semigroupArray: semigroupArray,
  semigroupRecord: semigroupRecord,
  semigroupRecordNil: semigroupRecordNil,
  semigroupRecordCons: semigroupRecordCons
};
},{"./foreign.js":"output/Data.Semigroup/foreign.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Data.Void/index.js":"output/Data.Void/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"output/Type.Data.RowList/index.js"}],"output/Control.Extend/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Extend = function Extend(Functor0, extend) {
  this.Functor0 = Functor0;
  this.extend = extend;
};

var extendFn = function extendFn(dictSemigroup) {
  return new Extend(function () {
    return Data_Functor.functorFn;
  }, function (f) {
    return function (g) {
      return function (w) {
        return f(function (w$prime) {
          return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
        });
      };
    };
  });
};

var extendArray = new Extend(function () {
  return Data_Functor.functorArray;
}, $foreign.arrayExtend);

var extend = function extend(dict) {
  return dict.extend;
};

var extendFlipped = function extendFlipped(dictExtend) {
  return function (w) {
    return function (f) {
      return extend(dictExtend)(f)(w);
    };
  };
};

var duplicate = function duplicate(dictExtend) {
  return extend(dictExtend)(Control_Category.identity(Control_Category.categoryFn));
};

var composeCoKleisliFlipped = function composeCoKleisliFlipped(dictExtend) {
  return function (f) {
    return function (g) {
      return function (w) {
        return f(extend(dictExtend)(g)(w));
      };
    };
  };
};

var composeCoKleisli = function composeCoKleisli(dictExtend) {
  return function (f) {
    return function (g) {
      return function (w) {
        return g(extend(dictExtend)(f)(w));
      };
    };
  };
};

module.exports = {
  Extend: Extend,
  extend: extend,
  extendFlipped: extendFlipped,
  composeCoKleisli: composeCoKleisli,
  composeCoKleisliFlipped: composeCoKleisliFlipped,
  duplicate: duplicate,
  extendFn: extendFn,
  extendArray: extendArray
};
},{"./foreign.js":"output/Control.Extend/foreign.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js"}],"output/Control.Lazy/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Unit = require("../Data.Unit/index.js");

var Lazy = function Lazy(defer) {
  this.defer = defer;
};

var lazyUnit = new Lazy(function (v) {
  return Data_Unit.unit;
});
var lazyFn = new Lazy(function (f) {
  return function (x) {
    return f(Data_Unit.unit)(x);
  };
});

var defer = function defer(dict) {
  return dict.defer;
};

var fix = function fix(dictLazy) {
  return function (f) {
    var go = defer(dictLazy)(function (v) {
      return f(go);
    });
    return go;
  };
};

module.exports = {
  defer: defer,
  Lazy: Lazy,
  fix: fix,
  lazyFn: lazyFn,
  lazyUnit: lazyUnit
};
},{"../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Control.Monad/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Monad = function Monad(Applicative0, Bind1) {
  this.Applicative0 = Applicative0;
  this.Bind1 = Bind1;
};

var whenM = function whenM(dictMonad) {
  return function (mb) {
    return function (m) {
      return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
        return Control_Applicative.when(dictMonad.Applicative0())(b)(m);
      });
    };
  };
};

var unlessM = function unlessM(dictMonad) {
  return function (mb) {
    return function (m) {
      return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
        return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
      });
    };
  };
};

var monadFn = new Monad(function () {
  return Control_Applicative.applicativeFn;
}, function () {
  return Control_Bind.bindFn;
});
var monadArray = new Monad(function () {
  return Control_Applicative.applicativeArray;
}, function () {
  return Control_Bind.bindArray;
});

var liftM1 = function liftM1(dictMonad) {
  return function (f) {
    return function (a) {
      return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
        return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
      });
    };
  };
};

var ap = function ap(dictMonad) {
  return function (f) {
    return function (a) {
      return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
        return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
          return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
        });
      });
    };
  };
};

module.exports = {
  Monad: Monad,
  liftM1: liftM1,
  ap: ap,
  whenM: whenM,
  unlessM: unlessM,
  monadFn: monadFn,
  monadArray: monadArray
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js"}],"output/Data.Foldable/foreign.js":[function(require,module,exports) {
"use strict";

exports.foldrArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;

      for (var i = len - 1; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }

      return acc;
    };
  };
};

exports.foldlArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;

      for (var i = 0; i < len; i++) {
        acc = f(acc)(xs[i]);
      }

      return acc;
    };
  };
};
},{}],"output/Control.Alt/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Alt = function Alt(Functor0, alt) {
  this.Functor0 = Functor0;
  this.alt = alt;
};

var altArray = new Alt(function () {
  return Data_Functor.functorArray;
}, Data_Semigroup.append(Data_Semigroup.semigroupArray));

var alt = function alt(dict) {
  return dict.alt;
};

module.exports = {
  Alt: Alt,
  alt: alt,
  altArray: altArray
};
},{"../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js"}],"output/Control.Plus/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Plus = function Plus(Alt0, empty) {
  this.Alt0 = Alt0;
  this.empty = empty;
};

var plusArray = new Plus(function () {
  return Control_Alt.altArray;
}, []);

var empty = function empty(dict) {
  return dict.empty;
};

module.exports = {
  Plus: Plus,
  empty: empty,
  plusArray: plusArray
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js"}],"output/Data.Eq/foreign.js":[function(require,module,exports) {
"use strict";

var refEq = function refEq(r1) {
  return function (r2) {
    return r1 === r2;
  };
};

exports.eqBooleanImpl = refEq;
exports.eqIntImpl = refEq;
exports.eqNumberImpl = refEq;
exports.eqCharImpl = refEq;
exports.eqStringImpl = refEq;

exports.eqArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      if (xs === ys) return true;
      if (xs.length !== ys.length) return false;

      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }

      return true;
    };
  };
};
},{}],"output/Data.Eq/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var EqRecord = function EqRecord(eqRecord) {
  this.eqRecord = eqRecord;
};

var Eq1 = function Eq1(eq1) {
  this.eq1 = eq1;
};

var Eq = function Eq(eq) {
  this.eq = eq;
};

var eqVoid = new Eq(function (v) {
  return function (v1) {
    return true;
  };
});
var eqUnit = new Eq(function (v) {
  return function (v1) {
    return true;
  };
});
var eqString = new Eq($foreign.eqStringImpl);
var eqRowNil = new EqRecord(function (v) {
  return function (v1) {
    return function (v2) {
      return true;
    };
  };
});

var eqRecord = function eqRecord(dict) {
  return dict.eqRecord;
};

var eqRec = function eqRec(dictRowToList) {
  return function (dictEqRecord) {
    return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
  };
};

var eqNumber = new Eq($foreign.eqNumberImpl);
var eqInt = new Eq($foreign.eqIntImpl);
var eqChar = new Eq($foreign.eqCharImpl);
var eqBoolean = new Eq($foreign.eqBooleanImpl);

var eq1 = function eq1(dict) {
  return dict.eq1;
};

var eq = function eq(dict) {
  return dict.eq;
};

var eqArray = function eqArray(dictEq) {
  return new Eq($foreign.eqArrayImpl(eq(dictEq)));
};

var eq1Array = new Eq1(function (dictEq) {
  return eq(eqArray(dictEq));
});

var eqRowCons = function eqRowCons(dictEqRecord) {
  return function (dictCons) {
    return function (dictIsSymbol) {
      return function (dictEq) {
        return new EqRecord(function (v) {
          return function (ra) {
            return function (rb) {
              var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var get = Record_Unsafe.unsafeGet(key);
              return eq(dictEq)(get(ra))(get(rb)) && tail;
            };
          };
        });
      };
    };
  };
};

var notEq = function notEq(dictEq) {
  return function (x) {
    return function (y) {
      return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
    };
  };
};

var notEq1 = function notEq1(dictEq1) {
  return function (dictEq) {
    return function (x) {
      return function (y) {
        return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
      };
    };
  };
};

module.exports = {
  Eq: Eq,
  eq: eq,
  notEq: notEq,
  Eq1: Eq1,
  eq1: eq1,
  notEq1: notEq1,
  EqRecord: EqRecord,
  eqRecord: eqRecord,
  eqBoolean: eqBoolean,
  eqInt: eqInt,
  eqNumber: eqNumber,
  eqChar: eqChar,
  eqString: eqString,
  eqUnit: eqUnit,
  eqVoid: eqVoid,
  eqArray: eqArray,
  eqRec: eqRec,
  eq1Array: eq1Array,
  eqRowNil: eqRowNil,
  eqRowCons: eqRowCons
};
},{"./foreign.js":"output/Data.Eq/foreign.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"output/Type.Data.RowList/index.js"}],"output/Data.HeytingAlgebra/foreign.js":[function(require,module,exports) {
"use strict";

exports.boolConj = function (b1) {
  return function (b2) {
    return b1 && b2;
  };
};

exports.boolDisj = function (b1) {
  return function (b2) {
    return b1 || b2;
  };
};

exports.boolNot = function (b) {
  return !b;
};
},{}],"output/Type.Data.Row/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var RProxy = function () {
  function RProxy() {}

  ;
  RProxy.value = new RProxy();
  return RProxy;
}();

module.exports = {
  RProxy: RProxy
};
},{}],"output/Data.HeytingAlgebra/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_Row = require("../Type.Data.Row/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var HeytingAlgebraRecord = function HeytingAlgebraRecord(conjRecord, disjRecord, ffRecord, impliesRecord, notRecord, ttRecord) {
  this.conjRecord = conjRecord;
  this.disjRecord = disjRecord;
  this.ffRecord = ffRecord;
  this.impliesRecord = impliesRecord;
  this.notRecord = notRecord;
  this.ttRecord = ttRecord;
};

var HeytingAlgebra = function HeytingAlgebra(conj, disj, ff, implies, not, tt) {
  this.conj = conj;
  this.disj = disj;
  this.ff = ff;
  this.implies = implies;
  this.not = not;
  this.tt = tt;
};

var ttRecord = function ttRecord(dict) {
  return dict.ttRecord;
};

var tt = function tt(dict) {
  return dict.tt;
};

var notRecord = function notRecord(dict) {
  return dict.notRecord;
};

var not = function not(dict) {
  return dict.not;
};

var impliesRecord = function impliesRecord(dict) {
  return dict.impliesRecord;
};

var implies = function implies(dict) {
  return dict.implies;
};

var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
}, function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
}, Data_Unit.unit, function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
}, function (v) {
  return Data_Unit.unit;
}, Data_Unit.unit);
var heytingAlgebraRecordNil = new HeytingAlgebraRecord(function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
}, function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
}, function (v) {
  return function (v1) {
    return {};
  };
}, function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
}, function (v) {
  return function (v1) {
    return {};
  };
}, function (v) {
  return function (v1) {
    return {};
  };
});

var ffRecord = function ffRecord(dict) {
  return dict.ffRecord;
};

var ff = function ff(dict) {
  return dict.ff;
};

var disjRecord = function disjRecord(dict) {
  return dict.disjRecord;
};

var disj = function disj(dict) {
  return dict.disj;
};

var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
  return function (b) {
    return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
  };
}, $foreign.boolNot, true);

var conjRecord = function conjRecord(dict) {
  return dict.conjRecord;
};

var heytingAlgebraRecord = function heytingAlgebraRecord(dictRowToList) {
  return function (dictHeytingAlgebraRecord) {
    return new HeytingAlgebra(conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
  };
};

var conj = function conj(dict) {
  return dict.conj;
};

var heytingAlgebraFunction = function heytingAlgebraFunction(dictHeytingAlgebra) {
  return new HeytingAlgebra(function (f) {
    return function (g) {
      return function (a) {
        return conj(dictHeytingAlgebra)(f(a))(g(a));
      };
    };
  }, function (f) {
    return function (g) {
      return function (a) {
        return disj(dictHeytingAlgebra)(f(a))(g(a));
      };
    };
  }, function (v) {
    return ff(dictHeytingAlgebra);
  }, function (f) {
    return function (g) {
      return function (a) {
        return implies(dictHeytingAlgebra)(f(a))(g(a));
      };
    };
  }, function (f) {
    return function (a) {
      return not(dictHeytingAlgebra)(f(a));
    };
  }, function (v) {
    return tt(dictHeytingAlgebra);
  });
};

var heytingAlgebraRecordCons = function heytingAlgebraRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictHeytingAlgebraRecord) {
      return function (dictHeytingAlgebra) {
        return new HeytingAlgebraRecord(function (v) {
          return function (ra) {
            return function (rb) {
              var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
            };
          };
        }, function (v) {
          return function (ra) {
            return function (rb) {
              var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
            };
          };
        }, function (v) {
          return function (row) {
            var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var insert = Record_Unsafe.unsafeSet(key);
            return insert(ff(dictHeytingAlgebra))(tail);
          };
        }, function (v) {
          return function (ra) {
            return function (rb) {
              var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
            };
          };
        }, function (v) {
          return function (row) {
            var tail = notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var insert = Record_Unsafe.unsafeSet(key);
            var get = Record_Unsafe.unsafeGet(key);
            return insert(not(dictHeytingAlgebra)(get(row)))(tail);
          };
        }, function (v) {
          return function (row) {
            var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var insert = Record_Unsafe.unsafeSet(key);
            return insert(tt(dictHeytingAlgebra))(tail);
          };
        });
      };
    };
  };
};

module.exports = {
  HeytingAlgebra: HeytingAlgebra,
  tt: tt,
  ff: ff,
  implies: implies,
  conj: conj,
  disj: disj,
  not: not,
  HeytingAlgebraRecord: HeytingAlgebraRecord,
  ffRecord: ffRecord,
  ttRecord: ttRecord,
  impliesRecord: impliesRecord,
  conjRecord: conjRecord,
  disjRecord: disjRecord,
  notRecord: notRecord,
  heytingAlgebraBoolean: heytingAlgebraBoolean,
  heytingAlgebraUnit: heytingAlgebraUnit,
  heytingAlgebraFunction: heytingAlgebraFunction,
  heytingAlgebraRecord: heytingAlgebraRecord,
  heytingAlgebraRecordNil: heytingAlgebraRecordNil,
  heytingAlgebraRecordCons: heytingAlgebraRecordCons
};
},{"./foreign.js":"output/Data.HeytingAlgebra/foreign.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Data.Row/index.js":"output/Type.Data.Row/index.js","../Type.Data.RowList/index.js":"output/Type.Data.RowList/index.js"}],"output/Control.Alternative/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Alternative = function Alternative(Applicative0, Plus1) {
  this.Applicative0 = Applicative0;
  this.Plus1 = Plus1;
};

var alternativeArray = new Alternative(function () {
  return Control_Applicative.applicativeArray;
}, function () {
  return Control_Plus.plusArray;
});
module.exports = {
  Alternative: Alternative,
  alternativeArray: alternativeArray
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js"}],"output/Control.MonadZero/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var MonadZero = function MonadZero(Alternative1, Monad0) {
  this.Alternative1 = Alternative1;
  this.Monad0 = Monad0;
};

var monadZeroArray = new MonadZero(function () {
  return Control_Alternative.alternativeArray;
}, function () {
  return Control_Monad.monadArray;
});

var guard = function guard(dictMonadZero) {
  return function (v) {
    if (v) {
      return Control_Applicative.pure(dictMonadZero.Alternative1().Applicative0())(Data_Unit.unit);
    }

    ;

    if (!v) {
      return Control_Plus.empty(dictMonadZero.Alternative1().Plus1());
    }

    ;
    throw new Error("Failed pattern match at Control.MonadZero (line 54, column 1 - line 54, column 52): " + [v.constructor.name]);
  };
};

module.exports = {
  MonadZero: MonadZero,
  guard: guard,
  monadZeroArray: monadZeroArray
};
},{"../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Bounded/foreign.js":[function(require,module,exports) {
"use strict";

exports.topInt = 2147483647;
exports.bottomInt = -2147483648;
exports.topChar = String.fromCharCode(65535);
exports.bottomChar = String.fromCharCode(0);
exports.topNumber = Number.POSITIVE_INFINITY;
exports.bottomNumber = Number.NEGATIVE_INFINITY;
},{}],"output/Data.Ord/foreign.js":[function(require,module,exports) {
"use strict";

var unsafeCompareImpl = function unsafeCompareImpl(lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x === y ? eq : gt;
        };
      };
    };
  };
};

exports.ordBooleanImpl = unsafeCompareImpl;
exports.ordIntImpl = unsafeCompareImpl;
exports.ordNumberImpl = unsafeCompareImpl;
exports.ordStringImpl = unsafeCompareImpl;
exports.ordCharImpl = unsafeCompareImpl;

exports.ordArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;

      while (i < xlen && i < ylen) {
        var x = xs[i];
        var y = ys[i];
        var o = f(x)(y);

        if (o !== 0) {
          return o;
        }

        i++;
      }

      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};
},{}],"output/Data.Ordering/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var LT = function () {
  function LT() {}

  ;
  LT.value = new LT();
  return LT;
}();

var GT = function () {
  function GT() {}

  ;
  GT.value = new GT();
  return GT;
}();

var EQ = function () {
  function EQ() {}

  ;
  EQ.value = new EQ();
  return EQ;
}();

var showOrdering = new Data_Show.Show(function (v) {
  if (v instanceof LT) {
    return "LT";
  }

  ;

  if (v instanceof GT) {
    return "GT";
  }

  ;

  if (v instanceof EQ) {
    return "EQ";
  }

  ;
  throw new Error("Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17): " + [v.constructor.name]);
});
var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    if (v instanceof LT) {
      return LT.value;
    }

    ;

    if (v instanceof GT) {
      return GT.value;
    }

    ;

    if (v instanceof EQ) {
      return v1;
    }

    ;
    throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): " + [v.constructor.name, v1.constructor.name]);
  };
});

var invert = function invert(v) {
  if (v instanceof GT) {
    return LT.value;
  }

  ;

  if (v instanceof EQ) {
    return EQ.value;
  }

  ;

  if (v instanceof LT) {
    return GT.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [v.constructor.name]);
};

var eqOrdering = new Data_Eq.Eq(function (v) {
  return function (v1) {
    if (v instanceof LT && v1 instanceof LT) {
      return true;
    }

    ;

    if (v instanceof GT && v1 instanceof GT) {
      return true;
    }

    ;

    if (v instanceof EQ && v1 instanceof EQ) {
      return true;
    }

    ;
    return false;
  };
});
module.exports = {
  LT: LT,
  GT: GT,
  EQ: EQ,
  invert: invert,
  eqOrdering: eqOrdering,
  semigroupOrdering: semigroupOrdering,
  showOrdering: showOrdering
};
},{"../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Ring/foreign.js":[function(require,module,exports) {
"use strict";

exports.intSub = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x - y | 0;
  };
};

exports.numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};
},{}],"output/Data.Semiring/foreign.js":[function(require,module,exports) {
"use strict";

exports.intAdd = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x + y | 0;
  };
};

exports.intMul = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x * y | 0;
  };
};

exports.numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

exports.numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
};
},{}],"output/Data.Semiring/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_Row = require("../Type.Data.Row/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var SemiringRecord = function SemiringRecord(addRecord, mulRecord, oneRecord, zeroRecord) {
  this.addRecord = addRecord;
  this.mulRecord = mulRecord;
  this.oneRecord = oneRecord;
  this.zeroRecord = zeroRecord;
};

var Semiring = function Semiring(add, mul, one, zero) {
  this.add = add;
  this.mul = mul;
  this.one = one;
  this.zero = zero;
};

var zeroRecord = function zeroRecord(dict) {
  return dict.zeroRecord;
};

var zero = function zero(dict) {
  return dict.zero;
};

var semiringUnit = new Semiring(function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
}, function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
}, Data_Unit.unit, Data_Unit.unit);
var semiringRecordNil = new SemiringRecord(function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
}, function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
}, function (v) {
  return function (v1) {
    return {};
  };
}, function (v) {
  return function (v1) {
    return {};
  };
});
var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);

var oneRecord = function oneRecord(dict) {
  return dict.oneRecord;
};

var one = function one(dict) {
  return dict.one;
};

var mulRecord = function mulRecord(dict) {
  return dict.mulRecord;
};

var mul = function mul(dict) {
  return dict.mul;
};

var addRecord = function addRecord(dict) {
  return dict.addRecord;
};

var semiringRecord = function semiringRecord(dictRowToList) {
  return function (dictSemiringRecord) {
    return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
  };
};

var add = function add(dict) {
  return dict.add;
};

var semiringFn = function semiringFn(dictSemiring) {
  return new Semiring(function (f) {
    return function (g) {
      return function (x) {
        return add(dictSemiring)(f(x))(g(x));
      };
    };
  }, function (f) {
    return function (g) {
      return function (x) {
        return mul(dictSemiring)(f(x))(g(x));
      };
    };
  }, function (v) {
    return one(dictSemiring);
  }, function (v) {
    return zero(dictSemiring);
  });
};

var semiringRecordCons = function semiringRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictSemiringRecord) {
      return function (dictSemiring) {
        return new SemiringRecord(function (v) {
          return function (ra) {
            return function (rb) {
              var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
            };
          };
        }, function (v) {
          return function (ra) {
            return function (rb) {
              var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
            };
          };
        }, function (v) {
          return function (v1) {
            var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var insert = Record_Unsafe.unsafeSet(key);
            return insert(one(dictSemiring))(tail);
          };
        }, function (v) {
          return function (v1) {
            var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var insert = Record_Unsafe.unsafeSet(key);
            return insert(zero(dictSemiring))(tail);
          };
        });
      };
    };
  };
};

module.exports = {
  Semiring: Semiring,
  add: add,
  zero: zero,
  mul: mul,
  one: one,
  SemiringRecord: SemiringRecord,
  addRecord: addRecord,
  mulRecord: mulRecord,
  oneRecord: oneRecord,
  zeroRecord: zeroRecord,
  semiringInt: semiringInt,
  semiringNumber: semiringNumber,
  semiringFn: semiringFn,
  semiringUnit: semiringUnit,
  semiringRecord: semiringRecord,
  semiringRecordNil: semiringRecordNil,
  semiringRecordCons: semiringRecordCons
};
},{"./foreign.js":"output/Data.Semiring/foreign.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Data.Row/index.js":"output/Type.Data.Row/index.js","../Type.Data.RowList/index.js":"output/Type.Data.RowList/index.js"}],"output/Data.Ring/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var RingRecord = function RingRecord(SemiringRecord0, subRecord) {
  this.SemiringRecord0 = SemiringRecord0;
  this.subRecord = subRecord;
};

var Ring = function Ring(Semiring0, sub) {
  this.Semiring0 = Semiring0;
  this.sub = sub;
};

var subRecord = function subRecord(dict) {
  return dict.subRecord;
};

var sub = function sub(dict) {
  return dict.sub;
};

var ringUnit = new Ring(function () {
  return Data_Semiring.semiringUnit;
}, function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
});
var ringRecordNil = new RingRecord(function () {
  return Data_Semiring.semiringRecordNil;
}, function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
});

var ringRecordCons = function ringRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictRingRecord) {
      return function (dictRing) {
        return new RingRecord(function () {
          return Data_Semiring.semiringRecordCons(dictIsSymbol)()(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
        }, function (v) {
          return function (ra) {
            return function (rb) {
              var tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
            };
          };
        });
      };
    };
  };
};

var ringRecord = function ringRecord(dictRowToList) {
  return function (dictRingRecord) {
    return new Ring(function () {
      return Data_Semiring.semiringRecord()(dictRingRecord.SemiringRecord0());
    }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value));
  };
};

var ringNumber = new Ring(function () {
  return Data_Semiring.semiringNumber;
}, $foreign.numSub);
var ringInt = new Ring(function () {
  return Data_Semiring.semiringInt;
}, $foreign.intSub);

var ringFn = function ringFn(dictRing) {
  return new Ring(function () {
    return Data_Semiring.semiringFn(dictRing.Semiring0());
  }, function (f) {
    return function (g) {
      return function (x) {
        return sub(dictRing)(f(x))(g(x));
      };
    };
  });
};

var negate = function negate(dictRing) {
  return function (a) {
    return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
  };
};

module.exports = {
  Ring: Ring,
  sub: sub,
  negate: negate,
  RingRecord: RingRecord,
  subRecord: subRecord,
  ringInt: ringInt,
  ringNumber: ringNumber,
  ringUnit: ringUnit,
  ringFn: ringFn,
  ringRecord: ringRecord,
  ringRecordNil: ringRecordNil,
  ringRecordCons: ringRecordCons
};
},{"./foreign.js":"output/Data.Ring/foreign.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"output/Type.Data.RowList/index.js"}],"output/Data.Ord/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var OrdRecord = function OrdRecord(EqRecord0, compareRecord) {
  this.EqRecord0 = EqRecord0;
  this.compareRecord = compareRecord;
};

var Ord1 = function Ord1(Eq10, compare1) {
  this.Eq10 = Eq10;
  this.compare1 = compare1;
};

var Ord = function Ord(Eq0, compare) {
  this.Eq0 = Eq0;
  this.compare = compare;
};

var ordVoid = new Ord(function () {
  return Data_Eq.eqVoid;
}, function (v) {
  return function (v1) {
    return Data_Ordering.EQ.value;
  };
});
var ordUnit = new Ord(function () {
  return Data_Eq.eqUnit;
}, function (v) {
  return function (v1) {
    return Data_Ordering.EQ.value;
  };
});
var ordString = new Ord(function () {
  return Data_Eq.eqString;
}, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordRecordNil = new OrdRecord(function () {
  return Data_Eq.eqRowNil;
}, function (v) {
  return function (v1) {
    return function (v2) {
      return Data_Ordering.EQ.value;
    };
  };
});
var ordOrdering = new Ord(function () {
  return Data_Ordering.eqOrdering;
}, function (v) {
  return function (v1) {
    if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (v instanceof Data_Ordering.LT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
      return Data_Ordering.GT.value;
    }

    ;

    if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v instanceof Data_Ordering.GT) {
      return Data_Ordering.GT.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Ord (line 112, column 1 - line 119, column 21): " + [v.constructor.name, v1.constructor.name]);
  };
});
var ordNumber = new Ord(function () {
  return Data_Eq.eqNumber;
}, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordInt = new Ord(function () {
  return Data_Eq.eqInt;
}, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordChar = new Ord(function () {
  return Data_Eq.eqChar;
}, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordBoolean = new Ord(function () {
  return Data_Eq.eqBoolean;
}, $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));

var compareRecord = function compareRecord(dict) {
  return dict.compareRecord;
};

var ordRecord = function ordRecord(dictRowToList) {
  return function (dictOrdRecord) {
    return new Ord(function () {
      return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
    }, compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value));
  };
};

var compare1 = function compare1(dict) {
  return dict.compare1;
};

var compare = function compare(dict) {
  return dict.compare;
};

var comparing = function comparing(dictOrd) {
  return function (f) {
    return function (x) {
      return function (y) {
        return compare(dictOrd)(f(x))(f(y));
      };
    };
  };
};

var greaterThan = function greaterThan(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.GT) {
        return true;
      }

      ;
      return false;
    };
  };
};

var greaterThanOrEq = function greaterThanOrEq(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.LT) {
        return false;
      }

      ;
      return true;
    };
  };
};

var signum = function signum(dictOrd) {
  return function (dictRing) {
    return function (x) {
      var $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));

      if ($43) {
        return Data_Semiring.one(dictRing.Semiring0());
      }

      ;
      return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
    };
  };
};

var lessThan = function lessThan(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.LT) {
        return true;
      }

      ;
      return false;
    };
  };
};

var lessThanOrEq = function lessThanOrEq(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.GT) {
        return false;
      }

      ;
      return true;
    };
  };
};

var max = function max(dictOrd) {
  return function (x) {
    return function (y) {
      var v = compare(dictOrd)(x)(y);

      if (v instanceof Data_Ordering.LT) {
        return y;
      }

      ;

      if (v instanceof Data_Ordering.EQ) {
        return x;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return x;
      }

      ;
      throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [v.constructor.name]);
    };
  };
};

var min = function min(dictOrd) {
  return function (x) {
    return function (y) {
      var v = compare(dictOrd)(x)(y);

      if (v instanceof Data_Ordering.LT) {
        return x;
      }

      ;

      if (v instanceof Data_Ordering.EQ) {
        return x;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return y;
      }

      ;
      throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [v.constructor.name]);
    };
  };
};

var ordArray = function ordArray(dictOrd) {
  return new Ord(function () {
    return Data_Eq.eqArray(dictOrd.Eq0());
  }, function () {
    var toDelta = function toDelta(x) {
      return function (y) {
        var v = compare(dictOrd)(x)(y);

        if (v instanceof Data_Ordering.EQ) {
          return 0;
        }

        ;

        if (v instanceof Data_Ordering.LT) {
          return 1;
        }

        ;

        if (v instanceof Data_Ordering.GT) {
          return -1 | 0;
        }

        ;
        throw new Error("Failed pattern match at Data.Ord (line 65, column 7 - line 68, column 17): " + [v.constructor.name]);
      };
    };

    return function (xs) {
      return function (ys) {
        return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
      };
    };
  }());
};

var ord1Array = new Ord1(function () {
  return Data_Eq.eq1Array;
}, function (dictOrd) {
  return compare(ordArray(dictOrd));
});

var ordRecordCons = function ordRecordCons(dictOrdRecord) {
  return function (dictCons) {
    return function (dictIsSymbol) {
      return function (dictOrd) {
        return new OrdRecord(function () {
          return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
        }, function (v) {
          return function (ra) {
            return function (rb) {
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
              var $49 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);

              if ($49) {
                return left;
              }

              ;
              return compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
            };
          };
        });
      };
    };
  };
};

var clamp = function clamp(dictOrd) {
  return function (low) {
    return function (hi) {
      return function (x) {
        return min(dictOrd)(hi)(max(dictOrd)(low)(x));
      };
    };
  };
};

var between = function between(dictOrd) {
  return function (low) {
    return function (hi) {
      return function (x) {
        if (lessThan(dictOrd)(x)(low)) {
          return false;
        }

        ;

        if (greaterThan(dictOrd)(x)(hi)) {
          return false;
        }

        ;
        return true;
      };
    };
  };
};

var abs = function abs(dictOrd) {
  return function (dictRing) {
    return function (x) {
      var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));

      if ($53) {
        return x;
      }

      ;
      return Data_Ring.negate(dictRing)(x);
    };
  };
};

module.exports = {
  Ord: Ord,
  compare: compare,
  Ord1: Ord1,
  compare1: compare1,
  lessThan: lessThan,
  lessThanOrEq: lessThanOrEq,
  greaterThan: greaterThan,
  greaterThanOrEq: greaterThanOrEq,
  comparing: comparing,
  min: min,
  max: max,
  clamp: clamp,
  between: between,
  abs: abs,
  signum: signum,
  OrdRecord: OrdRecord,
  compareRecord: compareRecord,
  ordBoolean: ordBoolean,
  ordInt: ordInt,
  ordNumber: ordNumber,
  ordString: ordString,
  ordChar: ordChar,
  ordUnit: ordUnit,
  ordVoid: ordVoid,
  ordArray: ordArray,
  ordOrdering: ordOrdering,
  ord1Array: ord1Array,
  ordRecordNil: ordRecordNil,
  ordRecordCons: ordRecordCons,
  ordRecord: ordRecord
};
},{"./foreign.js":"output/Data.Ord/foreign.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Ring/index.js":"output/Data.Ring/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"output/Type.Data.RowList/index.js"}],"output/Data.Bounded/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Bounded = function Bounded(Ord0, bottom, top) {
  this.Ord0 = Ord0;
  this.bottom = bottom;
  this.top = top;
};

var top = function top(dict) {
  return dict.top;
};

var boundedUnit = new Bounded(function () {
  return Data_Ord.ordUnit;
}, Data_Unit.unit, Data_Unit.unit);
var boundedOrdering = new Bounded(function () {
  return Data_Ord.ordOrdering;
}, Data_Ordering.LT.value, Data_Ordering.GT.value);
var boundedNumber = new Bounded(function () {
  return Data_Ord.ordNumber;
}, $foreign.bottomNumber, $foreign.topNumber);
var boundedInt = new Bounded(function () {
  return Data_Ord.ordInt;
}, $foreign.bottomInt, $foreign.topInt);
var boundedChar = new Bounded(function () {
  return Data_Ord.ordChar;
}, $foreign.bottomChar, $foreign.topChar);
var boundedBoolean = new Bounded(function () {
  return Data_Ord.ordBoolean;
}, false, true);

var bottom = function bottom(dict) {
  return dict.bottom;
};

module.exports = {
  Bounded: Bounded,
  bottom: bottom,
  top: top,
  boundedBoolean: boundedBoolean,
  boundedInt: boundedInt,
  boundedChar: boundedChar,
  boundedOrdering: boundedOrdering,
  boundedUnit: boundedUnit,
  boundedNumber: boundedNumber
};
},{"./foreign.js":"output/Data.Bounded/foreign.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Functor.Invariant/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Invariant = function Invariant(imap) {
  this.imap = imap;
};

var invariantMultiplicative = new Invariant(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});
var invariantEndo = new Invariant(function (ab) {
  return function (ba) {
    return function (v) {
      return function ($31) {
        return ab(v(ba($31)));
      };
    };
  };
});
var invariantDual = new Invariant(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});
var invariantDisj = new Invariant(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});
var invariantConj = new Invariant(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});
var invariantAdditive = new Invariant(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});

var imapF = function imapF(dictFunctor) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictFunctor)(f);
    };
  };
};

var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
var invariantFn = new Invariant(imapF(Data_Functor.functorFn));

var imap = function imap(dict) {
  return dict.imap;
};

module.exports = {
  imap: imap,
  Invariant: Invariant,
  imapF: imapF,
  invariantFn: invariantFn,
  invariantArray: invariantArray,
  invariantAdditive: invariantAdditive,
  invariantConj: invariantConj,
  invariantDisj: invariantDisj,
  invariantDual: invariantDual,
  invariantEndo: invariantEndo,
  invariantMultiplicative: invariantMultiplicative
};
},{"../Data.Functor/index.js":"output/Data.Functor/index.js"}],"output/Data.EuclideanRing/foreign.js":[function(require,module,exports) {
"use strict";

exports.intDegree = function (x) {
  return Math.min(Math.abs(x), 2147483647);
}; // See the Euclidean definition in
// https://en.m.wikipedia.org/wiki/Modulo_operation.


exports.intDiv = function (x) {
  return function (y) {
    if (y === 0) return 0;
    return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
  };
};

exports.intMod = function (x) {
  return function (y) {
    if (y === 0) return 0;
    var yy = Math.abs(y);
    return (x % yy + yy) % yy;
  };
};

exports.numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
};
},{}],"output/Data.CommutativeRing/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Ring = require("../Data.Ring/index.js");

var CommutativeRingRecord = function CommutativeRingRecord(RingRecord0) {
  this.RingRecord0 = RingRecord0;
};

var CommutativeRing = function CommutativeRing(Ring0) {
  this.Ring0 = Ring0;
};

var commutativeRingUnit = new CommutativeRing(function () {
  return Data_Ring.ringUnit;
});
var commutativeRingRecordNil = new CommutativeRingRecord(function () {
  return Data_Ring.ringRecordNil;
});

var commutativeRingRecordCons = function commutativeRingRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictCommutativeRingRecord) {
      return function (dictCommutativeRing) {
        return new CommutativeRingRecord(function () {
          return Data_Ring.ringRecordCons(dictIsSymbol)()(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
        });
      };
    };
  };
};

var commutativeRingRecord = function commutativeRingRecord(dictRowToList) {
  return function (dictCommutativeRingRecord) {
    return new CommutativeRing(function () {
      return Data_Ring.ringRecord()(dictCommutativeRingRecord.RingRecord0());
    });
  };
};

var commutativeRingNumber = new CommutativeRing(function () {
  return Data_Ring.ringNumber;
});
var commutativeRingInt = new CommutativeRing(function () {
  return Data_Ring.ringInt;
});

var commutativeRingFn = function commutativeRingFn(dictCommutativeRing) {
  return new CommutativeRing(function () {
    return Data_Ring.ringFn(dictCommutativeRing.Ring0());
  });
};

module.exports = {
  CommutativeRing: CommutativeRing,
  CommutativeRingRecord: CommutativeRingRecord,
  commutativeRingInt: commutativeRingInt,
  commutativeRingNumber: commutativeRingNumber,
  commutativeRingUnit: commutativeRingUnit,
  commutativeRingFn: commutativeRingFn,
  commutativeRingRecord: commutativeRingRecord,
  commutativeRingRecordNil: commutativeRingRecordNil,
  commutativeRingRecordCons: commutativeRingRecordCons
};
},{"../Data.Ring/index.js":"output/Data.Ring/index.js"}],"output/Data.EuclideanRing/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var EuclideanRing = function EuclideanRing(CommutativeRing0, degree, div, mod) {
  this.CommutativeRing0 = CommutativeRing0;
  this.degree = degree;
  this.div = div;
  this.mod = mod;
};

var mod = function mod(dict) {
  return dict.mod;
};

var gcd = function gcd($copy_dictEq) {
  return function ($copy_dictEuclideanRing) {
    return function ($copy_a) {
      return function ($copy_b) {
        var $tco_var_dictEq = $copy_dictEq;
        var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
        var $tco_var_a = $copy_a;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(dictEq, dictEuclideanRing, a, b) {
          var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));

          if ($7) {
            $tco_done = true;
            return a;
          }

          ;
          $tco_var_dictEq = dictEq;
          $tco_var_dictEuclideanRing = dictEuclideanRing;
          $tco_var_a = b;
          $copy_b = mod(dictEuclideanRing)(a)(b);
          return;
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
        }

        ;
        return $tco_result;
      };
    };
  };
};

var euclideanRingNumber = new EuclideanRing(function () {
  return Data_CommutativeRing.commutativeRingNumber;
}, function (v) {
  return 1;
}, $foreign.numDiv, function (v) {
  return function (v1) {
    return 0.0;
  };
});
var euclideanRingInt = new EuclideanRing(function () {
  return Data_CommutativeRing.commutativeRingInt;
}, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);

var div = function div(dict) {
  return dict.div;
};

var lcm = function lcm(dictEq) {
  return function (dictEuclideanRing) {
    return function (a) {
      return function (b) {
        var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));

        if ($8) {
          return Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0());
        }

        ;
        return div(dictEuclideanRing)(Data_Semiring.mul(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
      };
    };
  };
};

var degree = function degree(dict) {
  return dict.degree;
};

module.exports = {
  EuclideanRing: EuclideanRing,
  degree: degree,
  div: div,
  mod: mod,
  gcd: gcd,
  lcm: lcm,
  euclideanRingInt: euclideanRingInt,
  euclideanRingNumber: euclideanRingNumber
};
},{"./foreign.js":"output/Data.EuclideanRing/foreign.js","../Data.CommutativeRing/index.js":"output/Data.CommutativeRing/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js"}],"output/Data.Monoid/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var MonoidRecord = function MonoidRecord(SemigroupRecord0, memptyRecord) {
  this.SemigroupRecord0 = SemigroupRecord0;
  this.memptyRecord = memptyRecord;
};

var Monoid = function Monoid(Semigroup0, mempty) {
  this.Semigroup0 = Semigroup0;
  this.mempty = mempty;
};

var monoidUnit = new Monoid(function () {
  return Data_Semigroup.semigroupUnit;
}, Data_Unit.unit);
var monoidString = new Monoid(function () {
  return Data_Semigroup.semigroupString;
}, "");
var monoidRecordNil = new MonoidRecord(function () {
  return Data_Semigroup.semigroupRecordNil;
}, function (v) {
  return {};
});
var monoidOrdering = new Monoid(function () {
  return Data_Ordering.semigroupOrdering;
}, Data_Ordering.EQ.value);
var monoidArray = new Monoid(function () {
  return Data_Semigroup.semigroupArray;
}, []);

var memptyRecord = function memptyRecord(dict) {
  return dict.memptyRecord;
};

var monoidRecord = function monoidRecord(dictRowToList) {
  return function (dictMonoidRecord) {
    return new Monoid(function () {
      return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
    }, memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value));
  };
};

var mempty = function mempty(dict) {
  return dict.mempty;
};

var monoidFn = function monoidFn(dictMonoid) {
  return new Monoid(function () {
    return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
  }, function (v) {
    return mempty(dictMonoid);
  });
};

var monoidRecordCons = function monoidRecordCons(dictIsSymbol) {
  return function (dictMonoid) {
    return function (dictCons) {
      return function (dictMonoidRecord) {
        return new MonoidRecord(function () {
          return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
        }, function (v) {
          var tail = memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value);
          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
          var insert = Record_Unsafe.unsafeSet(key);
          return insert(mempty(dictMonoid))(tail);
        });
      };
    };
  };
};

var power = function power(dictMonoid) {
  return function (x) {
    var go = function go(p) {
      if (p <= 0) {
        return mempty(dictMonoid);
      }

      ;

      if (p === 1) {
        return x;
      }

      ;

      if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
        var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
        return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
      }

      ;

      if (Data_Boolean.otherwise) {
        var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
        return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
      }

      ;
      throw new Error("Failed pattern match at Data.Monoid (line 65, column 3 - line 65, column 17): " + [p.constructor.name]);
    };

    return go;
  };
};

var guard = function guard(dictMonoid) {
  return function (v) {
    return function (v1) {
      if (v) {
        return v1;
      }

      ;

      if (!v) {
        return mempty(dictMonoid);
      }

      ;
      throw new Error("Failed pattern match at Data.Monoid (line 73, column 1 - line 73, column 49): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

module.exports = {
  Monoid: Monoid,
  mempty: mempty,
  power: power,
  guard: guard,
  MonoidRecord: MonoidRecord,
  memptyRecord: memptyRecord,
  monoidUnit: monoidUnit,
  monoidOrdering: monoidOrdering,
  monoidFn: monoidFn,
  monoidString: monoidString,
  monoidArray: monoidArray,
  monoidRecord: monoidRecord,
  monoidRecordNil: monoidRecordNil,
  monoidRecordCons: monoidRecordCons
};
},{"../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.EuclideanRing/index.js":"output/Data.EuclideanRing/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"output/Type.Data.RowList/index.js"}],"output/Data.Maybe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Nothing = function () {
  function Nothing() {}

  ;
  Nothing.value = new Nothing();
  return Nothing;
}();

var Just = function () {
  function Just(value0) {
    this.value0 = value0;
  }

  ;

  Just.create = function (value0) {
    return new Just(value0);
  };

  return Just;
}();

var showMaybe = function showMaybe(dictShow) {
  return new Data_Show.Show(function (v) {
    if (v instanceof Just) {
      return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
    }

    ;

    if (v instanceof Nothing) {
      return "Nothing";
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 207, column 28): " + [v.constructor.name]);
  });
};

var semigroupMaybe = function semigroupMaybe(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      if (v instanceof Nothing) {
        return v1;
      }

      ;

      if (v1 instanceof Nothing) {
        return v;
      }

      ;

      if (v instanceof Just && v1 instanceof Just) {
        return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 174, column 1 - line 177, column 43): " + [v.constructor.name, v1.constructor.name]);
    };
  });
};

var optional = function optional(dictAlternative) {
  return function (a) {
    return Control_Alt.alt(dictAlternative.Plus1().Alt0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Just.create)(a))(Control_Applicative.pure(dictAlternative.Applicative0())(Nothing.value));
  };
};

var monoidMaybe = function monoidMaybe(dictSemigroup) {
  return new Data_Monoid.Monoid(function () {
    return semigroupMaybe(dictSemigroup);
  }, Nothing.value);
};

var maybe$prime = function maybe$prime(v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Nothing) {
        return v(Data_Unit.unit);
      }

      ;

      if (v2 instanceof Just) {
        return v1(v2.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 62): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};

var maybe = function maybe(v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Nothing) {
        return v;
      }

      ;

      if (v2 instanceof Just) {
        return v1(v2.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};

var isNothing = maybe(true)(Data_Function["const"](false));
var isJust = maybe(false)(Data_Function["const"](true));
var functorMaybe = new Data_Functor.Functor(function (v) {
  return function (v1) {
    if (v1 instanceof Just) {
      return new Just(v(v1.value0));
    }

    ;
    return Nothing.value;
  };
});
var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));

var fromMaybe$prime = function fromMaybe$prime(a) {
  return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
};

var fromMaybe = function fromMaybe(a) {
  return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
};

var fromJust = function fromJust(dictPartial) {
  return function (v) {
    if (v instanceof Just) {
      return v.value0;
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [v.constructor.name]);
  };
};

var extendMaybe = new Control_Extend.Extend(function () {
  return functorMaybe;
}, function (v) {
  return function (v1) {
    if (v1 instanceof Nothing) {
      return Nothing.value;
    }

    ;
    return new Just(v(v1));
  };
});

var eqMaybe = function eqMaybe(dictEq) {
  return new Data_Eq.Eq(function (x) {
    return function (y) {
      if (x instanceof Nothing && y instanceof Nothing) {
        return true;
      }

      ;

      if (x instanceof Just && y instanceof Just) {
        return Data_Eq.eq(dictEq)(x.value0)(y.value0);
      }

      ;
      return false;
    };
  });
};

var ordMaybe = function ordMaybe(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqMaybe(dictOrd.Eq0());
  }, function (x) {
    return function (y) {
      if (x instanceof Nothing && y instanceof Nothing) {
        return Data_Ordering.EQ.value;
      }

      ;

      if (x instanceof Nothing) {
        return Data_Ordering.LT.value;
      }

      ;

      if (y instanceof Nothing) {
        return Data_Ordering.GT.value;
      }

      ;

      if (x instanceof Just && y instanceof Just) {
        return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 194, column 1 - line 194, column 51): " + [x.constructor.name, y.constructor.name]);
    };
  });
};

var eq1Maybe = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqMaybe(dictEq));
});
var ord1Maybe = new Data_Ord.Ord1(function () {
  return eq1Maybe;
}, function (dictOrd) {
  return Data_Ord.compare(ordMaybe(dictOrd));
});

var boundedMaybe = function boundedMaybe(dictBounded) {
  return new Data_Bounded.Bounded(function () {
    return ordMaybe(dictBounded.Ord0());
  }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
};

var applyMaybe = new Control_Apply.Apply(function () {
  return functorMaybe;
}, function (v) {
  return function (v1) {
    if (v instanceof Just) {
      return Data_Functor.map(functorMaybe)(v.value0)(v1);
    }

    ;

    if (v instanceof Nothing) {
      return Nothing.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v.constructor.name, v1.constructor.name]);
  };
});
var bindMaybe = new Control_Bind.Bind(function () {
  return applyMaybe;
}, function (v) {
  return function (v1) {
    if (v instanceof Just) {
      return v1(v.value0);
    }

    ;

    if (v instanceof Nothing) {
      return Nothing.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v.constructor.name, v1.constructor.name]);
  };
});
var applicativeMaybe = new Control_Applicative.Applicative(function () {
  return applyMaybe;
}, Just.create);
var monadMaybe = new Control_Monad.Monad(function () {
  return applicativeMaybe;
}, function () {
  return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function () {
  return functorMaybe;
}, function (v) {
  return function (v1) {
    if (v instanceof Nothing) {
      return v1;
    }

    ;
    return v;
  };
});
var plusMaybe = new Control_Plus.Plus(function () {
  return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
  return applicativeMaybe;
}, function () {
  return plusMaybe;
});
var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
  return alternativeMaybe;
}, function () {
  return monadMaybe;
});
module.exports = {
  Nothing: Nothing,
  Just: Just,
  maybe: maybe,
  "maybe'": maybe$prime,
  fromMaybe: fromMaybe,
  "fromMaybe'": fromMaybe$prime,
  isJust: isJust,
  isNothing: isNothing,
  fromJust: fromJust,
  optional: optional,
  functorMaybe: functorMaybe,
  applyMaybe: applyMaybe,
  applicativeMaybe: applicativeMaybe,
  altMaybe: altMaybe,
  plusMaybe: plusMaybe,
  alternativeMaybe: alternativeMaybe,
  bindMaybe: bindMaybe,
  monadMaybe: monadMaybe,
  monadZeroMaybe: monadZeroMaybe,
  extendMaybe: extendMaybe,
  invariantMaybe: invariantMaybe,
  semigroupMaybe: semigroupMaybe,
  monoidMaybe: monoidMaybe,
  eqMaybe: eqMaybe,
  eq1Maybe: eq1Maybe,
  ordMaybe: ordMaybe,
  ord1Maybe: ord1Maybe,
  boundedMaybe: boundedMaybe,
  showMaybe: showMaybe
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Extend/index.js":"output/Control.Extend/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"output/Data.Functor.Invariant/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Monoid.Conj/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Conj = function Conj(x) {
  return x;
};

var showConj = function showConj(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semiringConj = function semiringConj(dictHeytingAlgebra) {
  return new Data_Semiring.Semiring(function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
    };
  }, function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
    };
  }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};

var semigroupConj = function semigroupConj(dictHeytingAlgebra) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
    };
  });
};

var ordConj = function ordConj(dictOrd) {
  return dictOrd;
};

var monoidConj = function monoidConj(dictHeytingAlgebra) {
  return new Data_Monoid.Monoid(function () {
    return semigroupConj(dictHeytingAlgebra);
  }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};

var functorConj = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqConj = function eqConj(dictEq) {
  return dictEq;
};

var eq1Conj = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqConj(dictEq));
});
var ord1Conj = new Data_Ord.Ord1(function () {
  return eq1Conj;
}, function (dictOrd) {
  return Data_Ord.compare(ordConj(dictOrd));
});

var boundedConj = function boundedConj(dictBounded) {
  return dictBounded;
};

var applyConj = new Control_Apply.Apply(function () {
  return functorConj;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindConj = new Control_Bind.Bind(function () {
  return applyConj;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeConj = new Control_Applicative.Applicative(function () {
  return applyConj;
}, Conj);
var monadConj = new Control_Monad.Monad(function () {
  return applicativeConj;
}, function () {
  return bindConj;
});
module.exports = {
  Conj: Conj,
  eqConj: eqConj,
  eq1Conj: eq1Conj,
  ordConj: ordConj,
  ord1Conj: ord1Conj,
  boundedConj: boundedConj,
  showConj: showConj,
  functorConj: functorConj,
  applyConj: applyConj,
  applicativeConj: applicativeConj,
  bindConj: bindConj,
  monadConj: monadConj,
  semigroupConj: semigroupConj,
  monoidConj: monoidConj,
  semiringConj: semiringConj
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Monoid.Disj/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Disj = function Disj(x) {
  return x;
};

var showDisj = function showDisj(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semiringDisj = function semiringDisj(dictHeytingAlgebra) {
  return new Data_Semiring.Semiring(function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
    };
  }, function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
    };
  }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};

var semigroupDisj = function semigroupDisj(dictHeytingAlgebra) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
    };
  });
};

var ordDisj = function ordDisj(dictOrd) {
  return dictOrd;
};

var monoidDisj = function monoidDisj(dictHeytingAlgebra) {
  return new Data_Monoid.Monoid(function () {
    return semigroupDisj(dictHeytingAlgebra);
  }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};

var functorDisj = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqDisj = function eqDisj(dictEq) {
  return dictEq;
};

var eq1Disj = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqDisj(dictEq));
});
var ord1Disj = new Data_Ord.Ord1(function () {
  return eq1Disj;
}, function (dictOrd) {
  return Data_Ord.compare(ordDisj(dictOrd));
});

var boundedDisj = function boundedDisj(dictBounded) {
  return dictBounded;
};

var applyDisj = new Control_Apply.Apply(function () {
  return functorDisj;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindDisj = new Control_Bind.Bind(function () {
  return applyDisj;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeDisj = new Control_Applicative.Applicative(function () {
  return applyDisj;
}, Disj);
var monadDisj = new Control_Monad.Monad(function () {
  return applicativeDisj;
}, function () {
  return bindDisj;
});
module.exports = {
  Disj: Disj,
  eqDisj: eqDisj,
  eq1Disj: eq1Disj,
  ordDisj: ordDisj,
  ord1Disj: ord1Disj,
  boundedDisj: boundedDisj,
  showDisj: showDisj,
  functorDisj: functorDisj,
  applyDisj: applyDisj,
  applicativeDisj: applicativeDisj,
  bindDisj: bindDisj,
  monadDisj: monadDisj,
  semigroupDisj: semigroupDisj,
  monoidDisj: monoidDisj,
  semiringDisj: semiringDisj
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Monoid.Dual/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Dual = function Dual(x) {
  return x;
};

var showDual = function showDual(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupDual = function semigroupDual(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_Semigroup.append(dictSemigroup)(v1)(v);
    };
  });
};

var ordDual = function ordDual(dictOrd) {
  return dictOrd;
};

var monoidDual = function monoidDual(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupDual(dictMonoid.Semigroup0());
  }, Data_Monoid.mempty(dictMonoid));
};

var functorDual = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqDual = function eqDual(dictEq) {
  return dictEq;
};

var eq1Dual = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqDual(dictEq));
});
var ord1Dual = new Data_Ord.Ord1(function () {
  return eq1Dual;
}, function (dictOrd) {
  return Data_Ord.compare(ordDual(dictOrd));
});

var boundedDual = function boundedDual(dictBounded) {
  return dictBounded;
};

var applyDual = new Control_Apply.Apply(function () {
  return functorDual;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindDual = new Control_Bind.Bind(function () {
  return applyDual;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeDual = new Control_Applicative.Applicative(function () {
  return applyDual;
}, Dual);
var monadDual = new Control_Monad.Monad(function () {
  return applicativeDual;
}, function () {
  return bindDual;
});
module.exports = {
  Dual: Dual,
  eqDual: eqDual,
  eq1Dual: eq1Dual,
  ordDual: ordDual,
  ord1Dual: ord1Dual,
  boundedDual: boundedDual,
  showDual: showDual,
  functorDual: functorDual,
  applyDual: applyDual,
  applicativeDual: applicativeDual,
  bindDual: bindDual,
  monadDual: monadDual,
  semigroupDual: semigroupDual,
  monoidDual: monoidDual
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Monoid.Endo/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Endo = function Endo(x) {
  return x;
};

var showEndo = function showEndo(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Endo " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupEndo = function semigroupEndo(dictSemigroupoid) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
    };
  });
};

var ordEndo = function ordEndo(dictOrd) {
  return dictOrd;
};

var monoidEndo = function monoidEndo(dictCategory) {
  return new Data_Monoid.Monoid(function () {
    return semigroupEndo(dictCategory.Semigroupoid0());
  }, Control_Category.identity(dictCategory));
};

var eqEndo = function eqEndo(dictEq) {
  return dictEq;
};

var boundedEndo = function boundedEndo(dictBounded) {
  return dictBounded;
};

module.exports = {
  Endo: Endo,
  eqEndo: eqEndo,
  ordEndo: ordEndo,
  boundedEndo: boundedEndo,
  showEndo: showEndo,
  semigroupEndo: semigroupEndo,
  monoidEndo: monoidEndo
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Control.Semigroupoid/index.js":"output/Control.Semigroupoid/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Monoid.Additive/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Additive = function Additive(x) {
  return x;
};

var showAdditive = function showAdditive(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupAdditive = function semigroupAdditive(dictSemiring) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_Semiring.add(dictSemiring)(v)(v1);
    };
  });
};

var ordAdditive = function ordAdditive(dictOrd) {
  return dictOrd;
};

var monoidAdditive = function monoidAdditive(dictSemiring) {
  return new Data_Monoid.Monoid(function () {
    return semigroupAdditive(dictSemiring);
  }, Data_Semiring.zero(dictSemiring));
};

var functorAdditive = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqAdditive = function eqAdditive(dictEq) {
  return dictEq;
};

var eq1Additive = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqAdditive(dictEq));
});
var ord1Additive = new Data_Ord.Ord1(function () {
  return eq1Additive;
}, function (dictOrd) {
  return Data_Ord.compare(ordAdditive(dictOrd));
});

var boundedAdditive = function boundedAdditive(dictBounded) {
  return dictBounded;
};

var applyAdditive = new Control_Apply.Apply(function () {
  return functorAdditive;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindAdditive = new Control_Bind.Bind(function () {
  return applyAdditive;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeAdditive = new Control_Applicative.Applicative(function () {
  return applyAdditive;
}, Additive);
var monadAdditive = new Control_Monad.Monad(function () {
  return applicativeAdditive;
}, function () {
  return bindAdditive;
});
module.exports = {
  Additive: Additive,
  eqAdditive: eqAdditive,
  eq1Additive: eq1Additive,
  ordAdditive: ordAdditive,
  ord1Additive: ord1Additive,
  boundedAdditive: boundedAdditive,
  showAdditive: showAdditive,
  functorAdditive: functorAdditive,
  applyAdditive: applyAdditive,
  applicativeAdditive: applicativeAdditive,
  bindAdditive: bindAdditive,
  monadAdditive: monadAdditive,
  semigroupAdditive: semigroupAdditive,
  monoidAdditive: monoidAdditive
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Monoid.Multiplicative/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Multiplicative = function Multiplicative(x) {
  return x;
};

var showMultiplicative = function showMultiplicative(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupMultiplicative = function semigroupMultiplicative(dictSemiring) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_Semiring.mul(dictSemiring)(v)(v1);
    };
  });
};

var ordMultiplicative = function ordMultiplicative(dictOrd) {
  return dictOrd;
};

var monoidMultiplicative = function monoidMultiplicative(dictSemiring) {
  return new Data_Monoid.Monoid(function () {
    return semigroupMultiplicative(dictSemiring);
  }, Data_Semiring.one(dictSemiring));
};

var functorMultiplicative = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqMultiplicative = function eqMultiplicative(dictEq) {
  return dictEq;
};

var eq1Multiplicative = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqMultiplicative(dictEq));
});
var ord1Multiplicative = new Data_Ord.Ord1(function () {
  return eq1Multiplicative;
}, function (dictOrd) {
  return Data_Ord.compare(ordMultiplicative(dictOrd));
});

var boundedMultiplicative = function boundedMultiplicative(dictBounded) {
  return dictBounded;
};

var applyMultiplicative = new Control_Apply.Apply(function () {
  return functorMultiplicative;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindMultiplicative = new Control_Bind.Bind(function () {
  return applyMultiplicative;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
  return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Control_Monad.Monad(function () {
  return applicativeMultiplicative;
}, function () {
  return bindMultiplicative;
});
module.exports = {
  Multiplicative: Multiplicative,
  eqMultiplicative: eqMultiplicative,
  eq1Multiplicative: eq1Multiplicative,
  ordMultiplicative: ordMultiplicative,
  ord1Multiplicative: ord1Multiplicative,
  boundedMultiplicative: boundedMultiplicative,
  showMultiplicative: showMultiplicative,
  functorMultiplicative: functorMultiplicative,
  applyMultiplicative: applyMultiplicative,
  applicativeMultiplicative: applicativeMultiplicative,
  bindMultiplicative: bindMultiplicative,
  monadMultiplicative: monadMultiplicative,
  semigroupMultiplicative: semigroupMultiplicative,
  monoidMultiplicative: monoidMultiplicative
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Semigroup.First/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var First = function First(x) {
  return x;
};

var showFirst = function showFirst(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(First " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupFirst = new Data_Semigroup.Semigroup(function (x) {
  return function (v) {
    return x;
  };
});

var ordFirst = function ordFirst(dictOrd) {
  return dictOrd;
};

var functorFirst = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqFirst = function eqFirst(dictEq) {
  return dictEq;
};

var eq1First = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqFirst(dictEq));
});
var ord1First = new Data_Ord.Ord1(function () {
  return eq1First;
}, function (dictOrd) {
  return Data_Ord.compare(ordFirst(dictOrd));
});

var boundedFirst = function boundedFirst(dictBounded) {
  return dictBounded;
};

var applyFirst = new Control_Apply.Apply(function () {
  return functorFirst;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindFirst = new Control_Bind.Bind(function () {
  return applyFirst;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeFirst = new Control_Applicative.Applicative(function () {
  return applyFirst;
}, First);
var monadFirst = new Control_Monad.Monad(function () {
  return applicativeFirst;
}, function () {
  return bindFirst;
});
module.exports = {
  First: First,
  eqFirst: eqFirst,
  eq1First: eq1First,
  ordFirst: ordFirst,
  ord1First: ord1First,
  boundedFirst: boundedFirst,
  showFirst: showFirst,
  functorFirst: functorFirst,
  applyFirst: applyFirst,
  applicativeFirst: applicativeFirst,
  bindFirst: bindFirst,
  monadFirst: monadFirst,
  semigroupFirst: semigroupFirst
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Semigroup.Last/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Last = function Last(x) {
  return x;
};

var showLast = function showLast(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Last " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
  return function (x) {
    return x;
  };
});

var ordLast = function ordLast(dictOrd) {
  return dictOrd;
};

var functorLast = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqLast = function eqLast(dictEq) {
  return dictEq;
};

var eq1Last = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqLast(dictEq));
});
var ord1Last = new Data_Ord.Ord1(function () {
  return eq1Last;
}, function (dictOrd) {
  return Data_Ord.compare(ordLast(dictOrd));
});

var boundedLast = function boundedLast(dictBounded) {
  return dictBounded;
};

var applyLast = new Control_Apply.Apply(function () {
  return functorLast;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindLast = new Control_Bind.Bind(function () {
  return applyLast;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeLast = new Control_Applicative.Applicative(function () {
  return applyLast;
}, Last);
var monadLast = new Control_Monad.Monad(function () {
  return applicativeLast;
}, function () {
  return bindLast;
});
module.exports = {
  Last: Last,
  eqLast: eqLast,
  eq1Last: eq1Last,
  ordLast: ordLast,
  ord1Last: ord1Last,
  boundedLast: boundedLast,
  showLast: showLast,
  functorLast: functorLast,
  applyLast: applyLast,
  applicativeLast: applicativeLast,
  bindLast: bindLast,
  monadLast: monadLast,
  semigroupLast: semigroupLast
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Newtype/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");

var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");

var Data_Semigroup_First = require("../Data.Semigroup.First/index.js");

var Data_Semigroup_Last = require("../Data.Semigroup.Last/index.js");

var Newtype = function Newtype(unwrap, wrap) {
  this.unwrap = unwrap;
  this.wrap = wrap;
};

var wrap = function wrap(dict) {
  return dict.wrap;
};

var unwrap = function unwrap(dict) {
  return dict.unwrap;
};

var underF2 = function underF2(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictNewtype) {
      return function (dictNewtype1) {
        return function (v) {
          return function (f) {
            var $66 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1)));
            var $67 = Data_Function.on(f)(Data_Functor.map(dictFunctor)(wrap(dictNewtype)));
            return function ($68) {
              return $66($67($68));
            };
          };
        };
      };
    };
  };
};

var underF = function underF(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictNewtype) {
      return function (dictNewtype1) {
        return function (v) {
          return function (f) {
            var $69 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
            var $70 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
            return function ($71) {
              return $69(f($70($71)));
            };
          };
        };
      };
    };
  };
};

var under2 = function under2(dictNewtype) {
  return function (dictNewtype1) {
    return function (v) {
      return function (f) {
        var $72 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(unwrap(dictNewtype1));
        var $73 = Data_Function.on(f)(wrap(dictNewtype));
        return function ($74) {
          return $72($73($74));
        };
      };
    };
  };
};

var under = function under(dictNewtype) {
  return function (dictNewtype1) {
    return function (v) {
      return function (f) {
        var $75 = unwrap(dictNewtype1);
        var $76 = wrap(dictNewtype);
        return function ($77) {
          return $75(f($76($77)));
        };
      };
    };
  };
};

var un = function un(dictNewtype) {
  return function (v) {
    return unwrap(dictNewtype);
  };
};

var traverse = function traverse(dictFunctor) {
  return function (dictNewtype) {
    return function (v) {
      return function (f) {
        var $78 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
        var $79 = unwrap(dictNewtype);
        return function ($80) {
          return $78(f($79($80)));
        };
      };
    };
  };
};

var overF2 = function overF2(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictNewtype) {
      return function (dictNewtype1) {
        return function (v) {
          return function (f) {
            var $81 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Functor.map(dictFunctor1)(wrap(dictNewtype1)));
            var $82 = Data_Function.on(f)(Data_Functor.map(dictFunctor)(unwrap(dictNewtype)));
            return function ($83) {
              return $81($82($83));
            };
          };
        };
      };
    };
  };
};

var overF = function overF(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictNewtype) {
      return function (dictNewtype1) {
        return function (v) {
          return function (f) {
            var $84 = Data_Functor.map(dictFunctor1)(wrap(dictNewtype1));
            var $85 = Data_Functor.map(dictFunctor)(unwrap(dictNewtype));
            return function ($86) {
              return $84(f($85($86)));
            };
          };
        };
      };
    };
  };
};

var over2 = function over2(dictNewtype) {
  return function (dictNewtype1) {
    return function (v) {
      return function (f) {
        var $87 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(wrap(dictNewtype1));
        var $88 = Data_Function.on(f)(unwrap(dictNewtype));
        return function ($89) {
          return $87($88($89));
        };
      };
    };
  };
};

var over = function over(dictNewtype) {
  return function (dictNewtype1) {
    return function (v) {
      return function (f) {
        var $90 = wrap(dictNewtype1);
        var $91 = unwrap(dictNewtype);
        return function ($92) {
          return $90(f($91($92)));
        };
      };
    };
  };
};

var op = function op(dictNewtype) {
  return un(dictNewtype);
};

var newtypeMultiplicative = new Newtype(function (v) {
  return v;
}, Data_Monoid_Multiplicative.Multiplicative);
var newtypeLast = new Newtype(function (v) {
  return v;
}, Data_Semigroup_Last.Last);
var newtypeFirst = new Newtype(function (v) {
  return v;
}, Data_Semigroup_First.First);
var newtypeEndo = new Newtype(function (v) {
  return v;
}, Data_Monoid_Endo.Endo);
var newtypeDual = new Newtype(function (v) {
  return v;
}, Data_Monoid_Dual.Dual);
var newtypeDisj = new Newtype(function (v) {
  return v;
}, Data_Monoid_Disj.Disj);
var newtypeConj = new Newtype(function (v) {
  return v;
}, Data_Monoid_Conj.Conj);
var newtypeAdditive = new Newtype(function (v) {
  return v;
}, Data_Monoid_Additive.Additive);

var collect = function collect(dictFunctor) {
  return function (dictNewtype) {
    return function (v) {
      return function (f) {
        var $93 = wrap(dictNewtype);
        var $94 = Data_Functor.map(dictFunctor)(unwrap(dictNewtype));
        return function ($95) {
          return $93(f($94($95)));
        };
      };
    };
  };
};

var alaF = function alaF(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictNewtype) {
      return function (dictNewtype1) {
        return function (v) {
          return function (f) {
            var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
            var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
            return function ($98) {
              return $96(f($97($98)));
            };
          };
        };
      };
    };
  };
};

var ala = function ala(dictFunctor) {
  return function (dictNewtype) {
    return function (dictNewtype1) {
      return function (v) {
        return function (f) {
          return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
        };
      };
    };
  };
};

module.exports = {
  unwrap: unwrap,
  wrap: wrap,
  Newtype: Newtype,
  un: un,
  op: op,
  ala: ala,
  alaF: alaF,
  over: over,
  overF: overF,
  under: under,
  underF: underF,
  over2: over2,
  overF2: overF2,
  under2: under2,
  underF2: underF2,
  traverse: traverse,
  collect: collect,
  newtypeAdditive: newtypeAdditive,
  newtypeMultiplicative: newtypeMultiplicative,
  newtypeConj: newtypeConj,
  newtypeDisj: newtypeDisj,
  newtypeDual: newtypeDual,
  newtypeEndo: newtypeEndo,
  newtypeFirst: newtypeFirst,
  newtypeLast: newtypeLast
};
},{"../Control.Semigroupoid/index.js":"output/Control.Semigroupoid/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid.Additive/index.js":"output/Data.Monoid.Additive/index.js","../Data.Monoid.Conj/index.js":"output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"output/Data.Monoid.Dual/index.js","../Data.Monoid.Endo/index.js":"output/Data.Monoid.Endo/index.js","../Data.Monoid.Multiplicative/index.js":"output/Data.Monoid.Multiplicative/index.js","../Data.Semigroup.First/index.js":"output/Data.Semigroup.First/index.js","../Data.Semigroup.Last/index.js":"output/Data.Semigroup.Last/index.js"}],"output/Data.Foldable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Foldable = function Foldable(foldMap, foldl, foldr) {
  this.foldMap = foldMap;
  this.foldl = foldl;
  this.foldr = foldr;
};

var foldr = function foldr(dict) {
  return dict.foldr;
};

var indexr = function indexr(dictFoldable) {
  return function (idx) {
    var go = function go(a) {
      return function (cursor) {
        if (cursor.elem instanceof Data_Maybe.Just) {
          return cursor;
        }

        ;
        var $106 = cursor.pos === idx;

        if ($106) {
          return {
            elem: new Data_Maybe.Just(a),
            pos: cursor.pos
          };
        }

        ;
        return {
          pos: cursor.pos + 1 | 0,
          elem: cursor.elem
        };
      };
    };

    var $193 = foldr(dictFoldable)(go)({
      elem: Data_Maybe.Nothing.value,
      pos: 0
    });
    return function ($194) {
      return function (v) {
        return v.elem;
      }($193($194));
    };
  };
};

var $$null = function $$null(dictFoldable) {
  return foldr(dictFoldable)(function (v) {
    return function (v1) {
      return false;
    };
  })(true);
};

var oneOf = function oneOf(dictFoldable) {
  return function (dictPlus) {
    return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
  };
};

var oneOfMap = function oneOfMap(dictFoldable) {
  return function (dictPlus) {
    return function (f) {
      return foldr(dictFoldable)(function () {
        var $195 = Control_Alt.alt(dictPlus.Alt0());
        return function ($196) {
          return $195(f($196));
        };
      }())(Control_Plus.empty(dictPlus));
    };
  };
};

var traverse_ = function traverse_(dictApplicative) {
  return function (dictFoldable) {
    return function (f) {
      return foldr(dictFoldable)(function () {
        var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
        return function ($198) {
          return $197(f($198));
        };
      }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
    };
  };
};

var for_ = function for_(dictApplicative) {
  return function (dictFoldable) {
    return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
  };
};

var sequence_ = function sequence_(dictApplicative) {
  return function (dictFoldable) {
    return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var foldl = function foldl(dict) {
  return dict.foldl;
};

var indexl = function indexl(dictFoldable) {
  return function (idx) {
    var go = function go(cursor) {
      return function (a) {
        if (cursor.elem instanceof Data_Maybe.Just) {
          return cursor;
        }

        ;
        var $109 = cursor.pos === idx;

        if ($109) {
          return {
            elem: new Data_Maybe.Just(a),
            pos: cursor.pos
          };
        }

        ;
        return {
          pos: cursor.pos + 1 | 0,
          elem: cursor.elem
        };
      };
    };

    var $199 = foldl(dictFoldable)(go)({
      elem: Data_Maybe.Nothing.value,
      pos: 0
    });
    return function ($200) {
      return function (v) {
        return v.elem;
      }($199($200));
    };
  };
};

var intercalate = function intercalate(dictFoldable) {
  return function (dictMonoid) {
    return function (sep) {
      return function (xs) {
        var go = function go(v) {
          return function (x) {
            if (v.init) {
              return {
                init: false,
                acc: x
              };
            }

            ;
            return {
              init: false,
              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
            };
          };
        };

        return foldl(dictFoldable)(go)({
          init: true,
          acc: Data_Monoid.mempty(dictMonoid)
        })(xs).acc;
      };
    };
  };
};

var length = function length(dictFoldable) {
  return function (dictSemiring) {
    return foldl(dictFoldable)(function (c) {
      return function (v) {
        return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
      };
    })(Data_Semiring.zero(dictSemiring));
  };
};

var maximumBy = function maximumBy(dictFoldable) {
  return function (cmp) {
    var max$prime = function max$prime(v) {
      return function (v1) {
        if (v instanceof Data_Maybe.Nothing) {
          return new Data_Maybe.Just(v1);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return new Data_Maybe.Just(function () {
            var $116 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);

            if ($116) {
              return v.value0;
            }

            ;
            return v1;
          }());
        }

        ;
        throw new Error("Failed pattern match at Data.Foldable (line 389, column 3 - line 389, column 27): " + [v.constructor.name, v1.constructor.name]);
      };
    };

    return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
  };
};

var maximum = function maximum(dictOrd) {
  return function (dictFoldable) {
    return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
  };
};

var minimumBy = function minimumBy(dictFoldable) {
  return function (cmp) {
    var min$prime = function min$prime(v) {
      return function (v1) {
        if (v instanceof Data_Maybe.Nothing) {
          return new Data_Maybe.Just(v1);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return new Data_Maybe.Just(function () {
            var $120 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);

            if ($120) {
              return v.value0;
            }

            ;
            return v1;
          }());
        }

        ;
        throw new Error("Failed pattern match at Data.Foldable (line 402, column 3 - line 402, column 27): " + [v.constructor.name, v1.constructor.name]);
      };
    };

    return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
  };
};

var minimum = function minimum(dictOrd) {
  return function (dictFoldable) {
    return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
  };
};

var product = function product(dictFoldable) {
  return function (dictSemiring) {
    return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
  };
};

var sum = function sum(dictFoldable) {
  return function (dictSemiring) {
    return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
  };
};

var foldableMultiplicative = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});
var foldableMaybe = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      if (v instanceof Data_Maybe.Nothing) {
        return Data_Monoid.mempty(dictMonoid);
      }

      ;

      if (v instanceof Data_Maybe.Just) {
        return f(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [f.constructor.name, v.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Data_Maybe.Nothing) {
        return z;
      }

      ;

      if (v1 instanceof Data_Maybe.Just) {
        return v(z)(v1.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Data_Maybe.Nothing) {
        return z;
      }

      ;

      if (v1 instanceof Data_Maybe.Just) {
        return v(v1.value0)(z);
      }

      ;
      throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
});
var foldableDual = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});
var foldableDisj = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});
var foldableConj = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});
var foldableAdditive = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});

var foldMapDefaultR = function foldMapDefaultR(dictFoldable) {
  return function (dictMonoid) {
    return function (f) {
      return foldr(dictFoldable)(function (x) {
        return function (acc) {
          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
        };
      })(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var foldableArray = new Foldable(function (dictMonoid) {
  return foldMapDefaultR(foldableArray)(dictMonoid);
}, $foreign.foldlArray, $foreign.foldrArray);

var foldMapDefaultL = function foldMapDefaultL(dictFoldable) {
  return function (dictMonoid) {
    return function (f) {
      return foldl(dictFoldable)(function (acc) {
        return function (x) {
          return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
        };
      })(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var foldMap = function foldMap(dict) {
  return dict.foldMap;
};

var foldableFirst = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return foldMap(foldableMaybe)(dictMonoid)(f)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return foldl(foldableMaybe)(f)(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return foldr(foldableMaybe)(f)(z)(v);
    };
  };
});
var foldableLast = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return foldMap(foldableMaybe)(dictMonoid)(f)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return foldl(foldableMaybe)(f)(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return foldr(foldableMaybe)(f)(z)(v);
    };
  };
});

var foldlDefault = function foldlDefault(dictFoldable) {
  return function (c) {
    return function (u) {
      return function (xs) {
        return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function () {
          var $201 = Data_Function.flip(c);
          return function ($202) {
            return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($201($202)));
          };
        }())(xs)))(u);
      };
    };
  };
};

var foldrDefault = function foldrDefault(dictFoldable) {
  return function (c) {
    return function (u) {
      return function (xs) {
        return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($203) {
          return Data_Monoid_Endo.Endo(c($203));
        })(xs))(u);
      };
    };
  };
};

var surroundMap = function surroundMap(dictFoldable) {
  return function (dictSemigroup) {
    return function (d) {
      return function (t) {
        return function (f) {
          var joined = function joined(a) {
            return function (m) {
              return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(a))(m));
            };
          };

          return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
        };
      };
    };
  };
};

var surround = function surround(dictFoldable) {
  return function (dictSemigroup) {
    return function (d) {
      return surroundMap(dictFoldable)(dictSemigroup)(d)(Control_Category.identity(Control_Category.categoryFn));
    };
  };
};

var foldM = function foldM(dictFoldable) {
  return function (dictMonad) {
    return function (f) {
      return function (a0) {
        return foldl(dictFoldable)(function (ma) {
          return function (b) {
            return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
          };
        })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
      };
    };
  };
};

var fold = function fold(dictFoldable) {
  return function (dictMonoid) {
    return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var findMap = function findMap(dictFoldable) {
  return function (p) {
    var go = function go(v) {
      return function (v1) {
        if (v instanceof Data_Maybe.Nothing) {
          return p(v1);
        }

        ;
        return v;
      };
    };

    return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
  };
};

var find = function find(dictFoldable) {
  return function (p) {
    var go = function go(v) {
      return function (v1) {
        if (v instanceof Data_Maybe.Nothing && p(v1)) {
          return new Data_Maybe.Just(v1);
        }

        ;
        return v;
      };
    };

    return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
  };
};

var any = function any(dictFoldable) {
  return function (dictHeytingAlgebra) {
    return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
  };
};

var elem = function elem(dictFoldable) {
  return function (dictEq) {
    var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
    var $205 = Data_Eq.eq(dictEq);
    return function ($206) {
      return $204($205($206));
    };
  };
};

var notElem = function notElem(dictFoldable) {
  return function (dictEq) {
    return function (x) {
      var $207 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
      var $208 = elem(dictFoldable)(dictEq)(x);
      return function ($209) {
        return $207($208($209));
      };
    };
  };
};

var or = function or(dictFoldable) {
  return function (dictHeytingAlgebra) {
    return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var all = function all(dictFoldable) {
  return function (dictHeytingAlgebra) {
    return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
  };
};

var and = function and(dictFoldable) {
  return function (dictHeytingAlgebra) {
    return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
  };
};

module.exports = {
  Foldable: Foldable,
  foldr: foldr,
  foldl: foldl,
  foldMap: foldMap,
  foldrDefault: foldrDefault,
  foldlDefault: foldlDefault,
  foldMapDefaultL: foldMapDefaultL,
  foldMapDefaultR: foldMapDefaultR,
  fold: fold,
  foldM: foldM,
  traverse_: traverse_,
  for_: for_,
  sequence_: sequence_,
  oneOf: oneOf,
  oneOfMap: oneOfMap,
  intercalate: intercalate,
  surroundMap: surroundMap,
  surround: surround,
  and: and,
  or: or,
  all: all,
  any: any,
  sum: sum,
  product: product,
  elem: elem,
  notElem: notElem,
  indexl: indexl,
  indexr: indexr,
  find: find,
  findMap: findMap,
  maximum: maximum,
  maximumBy: maximumBy,
  minimum: minimum,
  minimumBy: minimumBy,
  "null": $$null,
  length: length,
  foldableArray: foldableArray,
  foldableMaybe: foldableMaybe,
  foldableFirst: foldableFirst,
  foldableLast: foldableLast,
  foldableAdditive: foldableAdditive,
  foldableDual: foldableDual,
  foldableDisj: foldableDisj,
  foldableConj: foldableConj,
  foldableMultiplicative: foldableMultiplicative
};
},{"./foreign.js":"output/Data.Foldable/foreign.js","../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Monoid.Conj/index.js":"output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"output/Data.Monoid.Dual/index.js","../Data.Monoid.Endo/index.js":"output/Data.Monoid.Endo/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Bifoldable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Bifoldable = function Bifoldable(bifoldMap, bifoldl, bifoldr) {
  this.bifoldMap = bifoldMap;
  this.bifoldl = bifoldl;
  this.bifoldr = bifoldr;
};

var bifoldr = function bifoldr(dict) {
  return dict.bifoldr;
};

var bitraverse_ = function bitraverse_(dictBifoldable) {
  return function (dictApplicative) {
    return function (f) {
      return function (g) {
        return bifoldr(dictBifoldable)(function () {
          var $97 = Control_Apply.applySecond(dictApplicative.Apply0());
          return function ($98) {
            return $97(f($98));
          };
        }())(function () {
          var $99 = Control_Apply.applySecond(dictApplicative.Apply0());
          return function ($100) {
            return $99(g($100));
          };
        }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
      };
    };
  };
};

var bifor_ = function bifor_(dictBifoldable) {
  return function (dictApplicative) {
    return function (t) {
      return function (f) {
        return function (g) {
          return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
        };
      };
    };
  };
};

var bisequence_ = function bisequence_(dictBifoldable) {
  return function (dictApplicative) {
    return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
  };
};

var bifoldl = function bifoldl(dict) {
  return dict.bifoldl;
};

var bifoldableJoker = function bifoldableJoker(dictFoldable) {
  return new Bifoldable(function (dictMonoid) {
    return function (v) {
      return function (r) {
        return function (v1) {
          return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
        };
      };
    };
  }, function (v) {
    return function (r) {
      return function (u) {
        return function (v1) {
          return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
        };
      };
    };
  }, function (v) {
    return function (r) {
      return function (u) {
        return function (v1) {
          return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
        };
      };
    };
  });
};

var bifoldableClown = function bifoldableClown(dictFoldable) {
  return new Bifoldable(function (dictMonoid) {
    return function (l) {
      return function (v) {
        return function (v1) {
          return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
        };
      };
    };
  }, function (l) {
    return function (v) {
      return function (u) {
        return function (v1) {
          return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
        };
      };
    };
  }, function (l) {
    return function (v) {
      return function (u) {
        return function (v1) {
          return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
        };
      };
    };
  });
};

var bifoldMapDefaultR = function bifoldMapDefaultR(dictBifoldable) {
  return function (dictMonoid) {
    return function (f) {
      return function (g) {
        return bifoldr(dictBifoldable)(function () {
          var $101 = Data_Semigroup.append(dictMonoid.Semigroup0());
          return function ($102) {
            return $101(f($102));
          };
        }())(function () {
          var $103 = Data_Semigroup.append(dictMonoid.Semigroup0());
          return function ($104) {
            return $103(g($104));
          };
        }())(Data_Monoid.mempty(dictMonoid));
      };
    };
  };
};

var bifoldMapDefaultL = function bifoldMapDefaultL(dictBifoldable) {
  return function (dictMonoid) {
    return function (f) {
      return function (g) {
        return bifoldl(dictBifoldable)(function (m) {
          return function (a) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
          };
        })(function (m) {
          return function (b) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
          };
        })(Data_Monoid.mempty(dictMonoid));
      };
    };
  };
};

var bifoldMap = function bifoldMap(dict) {
  return dict.bifoldMap;
};

var bifoldableFlip = function bifoldableFlip(dictBifoldable) {
  return new Bifoldable(function (dictMonoid) {
    return function (r) {
      return function (l) {
        return function (v) {
          return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
        };
      };
    };
  }, function (r) {
    return function (l) {
      return function (u) {
        return function (v) {
          return bifoldl(dictBifoldable)(l)(r)(u)(v);
        };
      };
    };
  }, function (r) {
    return function (l) {
      return function (u) {
        return function (v) {
          return bifoldr(dictBifoldable)(l)(r)(u)(v);
        };
      };
    };
  });
};

var bifoldableWrap = function bifoldableWrap(dictBifoldable) {
  return new Bifoldable(function (dictMonoid) {
    return function (l) {
      return function (r) {
        return function (v) {
          return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
        };
      };
    };
  }, function (l) {
    return function (r) {
      return function (u) {
        return function (v) {
          return bifoldl(dictBifoldable)(l)(r)(u)(v);
        };
      };
    };
  }, function (l) {
    return function (r) {
      return function (u) {
        return function (v) {
          return bifoldr(dictBifoldable)(l)(r)(u)(v);
        };
      };
    };
  });
};

var bifoldlDefault = function bifoldlDefault(dictBifoldable) {
  return function (f) {
    return function (g) {
      return function (z) {
        return function (p) {
          return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function () {
            var $105 = Data_Function.flip(f);
            return function ($106) {
              return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($105($106)));
            };
          }())(function () {
            var $107 = Data_Function.flip(g);
            return function ($108) {
              return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($107($108)));
            };
          }())(p)))(z);
        };
      };
    };
  };
};

var bifoldrDefault = function bifoldrDefault(dictBifoldable) {
  return function (f) {
    return function (g) {
      return function (z) {
        return function (p) {
          return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($109) {
            return Data_Monoid_Endo.Endo(f($109));
          })(function ($110) {
            return Data_Monoid_Endo.Endo(g($110));
          })(p))(z);
        };
      };
    };
  };
};

var bifoldableProduct = function bifoldableProduct(dictBifoldable) {
  return function (dictBifoldable1) {
    return new Bifoldable(function (dictMonoid) {
      return function (l) {
        return function (r) {
          return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
          };
        };
      };
    }, function (l) {
      return function (r) {
        return function (u) {
          return function (m) {
            return bifoldlDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
          };
        };
      };
    }, function (l) {
      return function (r) {
        return function (u) {
          return function (m) {
            return bifoldrDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
          };
        };
      };
    });
  };
};

var bifold = function bifold(dictBifoldable) {
  return function (dictMonoid) {
    return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
  };
};

var biany = function biany(dictBifoldable) {
  return function (dictBooleanAlgebra) {
    return function (p) {
      return function (q) {
        var $111 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
        var $112 = bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($114) {
          return Data_Monoid_Disj.Disj(p($114));
        })(function ($115) {
          return Data_Monoid_Disj.Disj(q($115));
        });
        return function ($113) {
          return $111($112($113));
        };
      };
    };
  };
};

var biall = function biall(dictBifoldable) {
  return function (dictBooleanAlgebra) {
    return function (p) {
      return function (q) {
        var $116 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
        var $117 = bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($119) {
          return Data_Monoid_Conj.Conj(p($119));
        })(function ($120) {
          return Data_Monoid_Conj.Conj(q($120));
        });
        return function ($118) {
          return $116($117($118));
        };
      };
    };
  };
};

module.exports = {
  bifoldMap: bifoldMap,
  bifoldl: bifoldl,
  bifoldr: bifoldr,
  Bifoldable: Bifoldable,
  bifoldrDefault: bifoldrDefault,
  bifoldlDefault: bifoldlDefault,
  bifoldMapDefaultR: bifoldMapDefaultR,
  bifoldMapDefaultL: bifoldMapDefaultL,
  bifold: bifold,
  bitraverse_: bitraverse_,
  bifor_: bifor_,
  bisequence_: bisequence_,
  biany: biany,
  biall: biall,
  bifoldableClown: bifoldableClown,
  bifoldableJoker: bifoldableJoker,
  bifoldableFlip: bifoldableFlip,
  bifoldableProduct: bifoldableProduct,
  bifoldableWrap: bifoldableWrap
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Monoid.Conj/index.js":"output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"output/Data.Monoid.Dual/index.js","../Data.Monoid.Endo/index.js":"output/Data.Monoid.Endo/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Bifunctor.Clown/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Show = require("../Data.Show/index.js");

var Clown = function Clown(x) {
  return x;
};

var showClown = function showClown(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var ordClown = function ordClown(dictOrd) {
  return dictOrd;
};

var newtypeClown = new Data_Newtype.Newtype(function (n) {
  return n;
}, Clown);
var functorClown = new Data_Functor.Functor(function (v) {
  return function (v1) {
    return v1;
  };
});

var eqClown = function eqClown(dictEq) {
  return dictEq;
};

var bifunctorClown = function bifunctorClown(dictFunctor) {
  return new Data_Bifunctor.Bifunctor(function (f) {
    return function (v) {
      return function (v1) {
        return Data_Functor.map(dictFunctor)(f)(v1);
      };
    };
  });
};

var biapplyClown = function biapplyClown(dictApply) {
  return new Control_Biapply.Biapply(function () {
    return bifunctorClown(dictApply.Functor0());
  }, function (v) {
    return function (v1) {
      return Control_Apply.apply(dictApply)(v)(v1);
    };
  });
};

var biapplicativeClown = function biapplicativeClown(dictApplicative) {
  return new Control_Biapplicative.Biapplicative(function () {
    return biapplyClown(dictApplicative.Apply0());
  }, function (a) {
    return function (v) {
      return Control_Applicative.pure(dictApplicative)(a);
    };
  });
};

module.exports = {
  Clown: Clown,
  newtypeClown: newtypeClown,
  eqClown: eqClown,
  ordClown: ordClown,
  showClown: showClown,
  functorClown: functorClown,
  bifunctorClown: bifunctorClown,
  biapplyClown: biapplyClown,
  biapplicativeClown: biapplicativeClown
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Biapplicative/index.js":"output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"output/Control.Biapply/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Bifunctor.Flip/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Show = require("../Data.Show/index.js");

var Flip = function Flip(x) {
  return x;
};

var showFlip = function showFlip(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var ordFlip = function ordFlip(dictOrd) {
  return dictOrd;
};

var newtypeFlip = new Data_Newtype.Newtype(function (n) {
  return n;
}, Flip);

var functorFlip = function functorFlip(dictBifunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
    };
  });
};

var eqFlip = function eqFlip(dictEq) {
  return dictEq;
};

var bifunctorFlip = function bifunctorFlip(dictBifunctor) {
  return new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
      return function (v) {
        return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
      };
    };
  });
};

var biapplyFlip = function biapplyFlip(dictBiapply) {
  return new Control_Biapply.Biapply(function () {
    return bifunctorFlip(dictBiapply.Bifunctor0());
  }, function (v) {
    return function (v1) {
      return Control_Biapply.biapply(dictBiapply)(v)(v1);
    };
  });
};

var biapplicativeFlip = function biapplicativeFlip(dictBiapplicative) {
  return new Control_Biapplicative.Biapplicative(function () {
    return biapplyFlip(dictBiapplicative.Biapply0());
  }, function (a) {
    return function (b) {
      return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
    };
  });
};

module.exports = {
  Flip: Flip,
  newtypeFlip: newtypeFlip,
  eqFlip: eqFlip,
  ordFlip: ordFlip,
  showFlip: showFlip,
  functorFlip: functorFlip,
  bifunctorFlip: bifunctorFlip,
  biapplyFlip: biapplyFlip,
  biapplicativeFlip: biapplicativeFlip
};
},{"../Control.Biapplicative/index.js":"output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"output/Control.Biapply/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Bifunctor.Joker/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Show = require("../Data.Show/index.js");

var Joker = function Joker(x) {
  return x;
};

var showJoker = function showJoker(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var ordJoker = function ordJoker(dictOrd) {
  return dictOrd;
};

var newtypeJoker = new Data_Newtype.Newtype(function (n) {
  return n;
}, Joker);

var functorJoker = function functorJoker(dictFunctor) {
  return new Data_Functor.Functor(function (g) {
    return function (v) {
      return Data_Functor.map(dictFunctor)(g)(v);
    };
  });
};

var eqJoker = function eqJoker(dictEq) {
  return dictEq;
};

var bifunctorJoker = function bifunctorJoker(dictFunctor) {
  return new Data_Bifunctor.Bifunctor(function (v) {
    return function (g) {
      return function (v1) {
        return Data_Functor.map(dictFunctor)(g)(v1);
      };
    };
  });
};

var biapplyJoker = function biapplyJoker(dictApply) {
  return new Control_Biapply.Biapply(function () {
    return bifunctorJoker(dictApply.Functor0());
  }, function (v) {
    return function (v1) {
      return Control_Apply.apply(dictApply)(v)(v1);
    };
  });
};

var biapplicativeJoker = function biapplicativeJoker(dictApplicative) {
  return new Control_Biapplicative.Biapplicative(function () {
    return biapplyJoker(dictApplicative.Apply0());
  }, function (v) {
    return function (b) {
      return Control_Applicative.pure(dictApplicative)(b);
    };
  });
};

module.exports = {
  Joker: Joker,
  newtypeJoker: newtypeJoker,
  eqJoker: eqJoker,
  ordJoker: ordJoker,
  showJoker: showJoker,
  functorJoker: functorJoker,
  bifunctorJoker: bifunctorJoker,
  biapplyJoker: biapplyJoker,
  biapplicativeJoker: biapplicativeJoker
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Biapplicative/index.js":"output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"output/Control.Biapply/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Bifunctor.Product/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Product = function () {
  function Product(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Product.create = function (value0) {
    return function (value1) {
      return new Product(value0, value1);
    };
  };

  return Product;
}();

var showProduct = function showProduct(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (v) {
      return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
    });
  };
};

var eqProduct = function eqProduct(dictEq) {
  return function (dictEq1) {
    return new Data_Eq.Eq(function (x) {
      return function (y) {
        return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
      };
    });
  };
};

var ordProduct = function ordProduct(dictOrd) {
  return function (dictOrd1) {
    return new Data_Ord.Ord(function () {
      return eqProduct(dictOrd.Eq0())(dictOrd1.Eq0());
    }, function (x) {
      return function (y) {
        var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);

        if (v instanceof Data_Ordering.LT) {
          return Data_Ordering.LT.value;
        }

        ;

        if (v instanceof Data_Ordering.GT) {
          return Data_Ordering.GT.value;
        }

        ;
        return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
      };
    });
  };
};

var bifunctorProduct = function bifunctorProduct(dictBifunctor) {
  return function (dictBifunctor1) {
    return new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
        return function (v) {
          return new Product(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
        };
      };
    });
  };
};

var biapplyProduct = function biapplyProduct(dictBiapply) {
  return function (dictBiapply1) {
    return new Control_Biapply.Biapply(function () {
      return bifunctorProduct(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
    }, function (v) {
      return function (v1) {
        return new Product(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
      };
    });
  };
};

var biapplicativeProduct = function biapplicativeProduct(dictBiapplicative) {
  return function (dictBiapplicative1) {
    return new Control_Biapplicative.Biapplicative(function () {
      return biapplyProduct(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
    }, function (a) {
      return function (b) {
        return new Product(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
      };
    });
  };
};

module.exports = {
  Product: Product,
  eqProduct: eqProduct,
  ordProduct: ordProduct,
  showProduct: showProduct,
  bifunctorProduct: bifunctorProduct,
  biapplyProduct: biapplyProduct,
  biapplicativeProduct: biapplicativeProduct
};
},{"../Control.Biapplicative/index.js":"output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"output/Control.Biapply/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Bifunctor.Wrap/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Show = require("../Data.Show/index.js");

var Wrap = function Wrap(x) {
  return x;
};

var showWrap = function showWrap(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Wrap " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var ordWrap = function ordWrap(dictOrd) {
  return dictOrd;
};

var newtypeWrap = new Data_Newtype.Newtype(function (n) {
  return n;
}, Wrap);

var functorWrap = function functorWrap(dictBifunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return Data_Bifunctor.rmap(dictBifunctor)(f)(v);
    };
  });
};

var eqWrap = function eqWrap(dictEq) {
  return dictEq;
};

var bifunctorWrap = function bifunctorWrap(dictBifunctor) {
  return new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
      return function (v) {
        return Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v);
      };
    };
  });
};

var biapplyWrap = function biapplyWrap(dictBiapply) {
  return new Control_Biapply.Biapply(function () {
    return bifunctorWrap(dictBiapply.Bifunctor0());
  }, function (v) {
    return function (v1) {
      return Control_Biapply.biapply(dictBiapply)(v)(v1);
    };
  });
};

var biapplicativeWrap = function biapplicativeWrap(dictBiapplicative) {
  return new Control_Biapplicative.Biapplicative(function () {
    return biapplyWrap(dictBiapplicative.Biapply0());
  }, function (a) {
    return function (b) {
      return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
    };
  });
};

module.exports = {
  Wrap: Wrap,
  newtypeWrap: newtypeWrap,
  eqWrap: eqWrap,
  ordWrap: ordWrap,
  showWrap: showWrap,
  functorWrap: functorWrap,
  bifunctorWrap: bifunctorWrap,
  biapplyWrap: biapplyWrap,
  biapplicativeWrap: biapplicativeWrap
};
},{"../Control.Biapplicative/index.js":"output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"output/Control.Biapply/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Traversable/foreign.js":[function(require,module,exports) {
"use strict"; // jshint maxparams: 3

exports.traverseArrayImpl = function () {
  function array1(a) {
    return [a];
  }

  function array2(a) {
    return function (b) {
      return [a, b];
    };
  }

  function array3(a) {
    return function (b) {
      return function (c) {
        return [a, b, c];
      };
    };
  }

  function concat2(xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  }

  return function (apply) {
    return function (map) {
      return function (pure) {
        return function (f) {
          return function (array) {
            function go(bot, top) {
              switch (top - bot) {
                case 0:
                  return pure([]);

                case 1:
                  return map(array1)(f(array[bot]));

                case 2:
                  return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));

                case 3:
                  return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));

                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
              }
            }

            return go(0, array.length);
          };
        };
      };
    };
  };
}();
},{}],"output/Data.Maybe.First/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var First = function First(x) {
  return x;
};

var showFirst = function showFirst(dictShow) {
  return new Data_Show.Show(function (v) {
    return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
  });
};

var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    if (v instanceof Data_Maybe.Just) {
      return v;
    }

    ;
    return v1;
  };
});

var ordFirst = function ordFirst(dictOrd) {
  return Data_Maybe.ordMaybe(dictOrd);
};

var ord1First = Data_Maybe.ord1Maybe;
var newtypeFirst = new Data_Newtype.Newtype(function (n) {
  return n;
}, First);
var monoidFirst = new Data_Monoid.Monoid(function () {
  return semigroupFirst;
}, Data_Maybe.Nothing.value);
var monadFirst = Data_Maybe.monadMaybe;
var invariantFirst = Data_Maybe.invariantMaybe;
var functorFirst = Data_Maybe.functorMaybe;
var extendFirst = Data_Maybe.extendMaybe;

var eqFirst = function eqFirst(dictEq) {
  return Data_Maybe.eqMaybe(dictEq);
};

var eq1First = Data_Maybe.eq1Maybe;

var boundedFirst = function boundedFirst(dictBounded) {
  return Data_Maybe.boundedMaybe(dictBounded);
};

var bindFirst = Data_Maybe.bindMaybe;
var applyFirst = Data_Maybe.applyMaybe;
var applicativeFirst = Data_Maybe.applicativeMaybe;
var altFirst = new Control_Alt.Alt(function () {
  return functorFirst;
}, Data_Semigroup.append(semigroupFirst));
var plusFirst = new Control_Plus.Plus(function () {
  return altFirst;
}, Data_Monoid.mempty(monoidFirst));
var alternativeFirst = new Control_Alternative.Alternative(function () {
  return applicativeFirst;
}, function () {
  return plusFirst;
});
var monadZeroFirst = new Control_MonadZero.MonadZero(function () {
  return alternativeFirst;
}, function () {
  return monadFirst;
});
module.exports = {
  First: First,
  newtypeFirst: newtypeFirst,
  eqFirst: eqFirst,
  eq1First: eq1First,
  ordFirst: ordFirst,
  ord1First: ord1First,
  boundedFirst: boundedFirst,
  functorFirst: functorFirst,
  invariantFirst: invariantFirst,
  applyFirst: applyFirst,
  applicativeFirst: applicativeFirst,
  bindFirst: bindFirst,
  monadFirst: monadFirst,
  extendFirst: extendFirst,
  showFirst: showFirst,
  semigroupFirst: semigroupFirst,
  monoidFirst: monoidFirst,
  altFirst: altFirst,
  plusFirst: plusFirst,
  alternativeFirst: alternativeFirst,
  monadZeroFirst: monadZeroFirst
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Maybe.Last/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Last = function Last(x) {
  return x;
};

var showLast = function showLast(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
  });
};

var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    if (v1 instanceof Data_Maybe.Just) {
      return v1;
    }

    ;

    if (v1 instanceof Data_Maybe.Nothing) {
      return v;
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [v.constructor.name, v1.constructor.name]);
  };
});

var ordLast = function ordLast(dictOrd) {
  return Data_Maybe.ordMaybe(dictOrd);
};

var ord1Last = Data_Maybe.ord1Maybe;
var newtypeLast = new Data_Newtype.Newtype(function (n) {
  return n;
}, Last);
var monoidLast = new Data_Monoid.Monoid(function () {
  return semigroupLast;
}, Data_Maybe.Nothing.value);
var monadLast = Data_Maybe.monadMaybe;
var invariantLast = Data_Maybe.invariantMaybe;
var functorLast = Data_Maybe.functorMaybe;
var extendLast = Data_Maybe.extendMaybe;

var eqLast = function eqLast(dictEq) {
  return Data_Maybe.eqMaybe(dictEq);
};

var eq1Last = Data_Maybe.eq1Maybe;

var boundedLast = function boundedLast(dictBounded) {
  return Data_Maybe.boundedMaybe(dictBounded);
};

var bindLast = Data_Maybe.bindMaybe;
var applyLast = Data_Maybe.applyMaybe;
var applicativeLast = Data_Maybe.applicativeMaybe;
var altLast = new Control_Alt.Alt(function () {
  return functorLast;
}, Data_Semigroup.append(semigroupLast));
var plusLast = new Control_Plus.Plus(function () {
  return altLast;
}, Data_Monoid.mempty(monoidLast));
var alternativeLast = new Control_Alternative.Alternative(function () {
  return applicativeLast;
}, function () {
  return plusLast;
});
var monadZeroLast = new Control_MonadZero.MonadZero(function () {
  return alternativeLast;
}, function () {
  return monadLast;
});
module.exports = {
  Last: Last,
  newtypeLast: newtypeLast,
  eqLast: eqLast,
  eq1Last: eq1Last,
  ordLast: ordLast,
  ord1Last: ord1Last,
  boundedLast: boundedLast,
  functorLast: functorLast,
  invariantLast: invariantLast,
  applyLast: applyLast,
  applicativeLast: applicativeLast,
  bindLast: bindLast,
  monadLast: monadLast,
  extendLast: extendLast,
  showLast: showLast,
  semigroupLast: semigroupLast,
  monoidLast: monoidLast,
  altLast: altLast,
  plusLast: plusLast,
  alternativeLast: alternativeLast,
  monadZeroLast: monadZeroLast
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Traversable.Accum.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var StateR = function StateR(x) {
  return x;
};

var StateL = function StateL(x) {
  return x;
};

var stateR = function stateR(v) {
  return v;
};

var stateL = function stateL(v) {
  return v;
};

var functorStateR = new Data_Functor.Functor(function (f) {
  return function (k) {
    return function (s) {
      var v = stateR(k)(s);
      return {
        accum: v.accum,
        value: f(v.value)
      };
    };
  };
});
var functorStateL = new Data_Functor.Functor(function (f) {
  return function (k) {
    return function (s) {
      var v = stateL(k)(s);
      return {
        accum: v.accum,
        value: f(v.value)
      };
    };
  };
});
var applyStateR = new Control_Apply.Apply(function () {
  return functorStateR;
}, function (f) {
  return function (x) {
    return function (s) {
      var v = stateR(x)(s);
      var v1 = stateR(f)(v.accum);
      return {
        accum: v1.accum,
        value: v1.value(v.value)
      };
    };
  };
});
var applyStateL = new Control_Apply.Apply(function () {
  return functorStateL;
}, function (f) {
  return function (x) {
    return function (s) {
      var v = stateL(f)(s);
      var v1 = stateL(x)(v.accum);
      return {
        accum: v1.accum,
        value: v.value(v1.value)
      };
    };
  };
});
var applicativeStateR = new Control_Applicative.Applicative(function () {
  return applyStateR;
}, function (a) {
  return function (s) {
    return {
      accum: s,
      value: a
    };
  };
});
var applicativeStateL = new Control_Applicative.Applicative(function () {
  return applyStateL;
}, function (a) {
  return function (s) {
    return {
      accum: s,
      value: a
    };
  };
});
module.exports = {
  StateL: StateL,
  stateL: stateL,
  StateR: StateR,
  stateR: stateR,
  functorStateL: functorStateL,
  applyStateL: applyStateL,
  applicativeStateL: applicativeStateL,
  functorStateR: functorStateR,
  applyStateR: applyStateR,
  applicativeStateR: applicativeStateR
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js"}],"output/Data.Traversable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Maybe_First = require("../Data.Maybe.First/index.js");

var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");

var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");

var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");

var Traversable = function Traversable(Foldable1, Functor0, sequence, traverse) {
  this.Foldable1 = Foldable1;
  this.Functor0 = Functor0;
  this.sequence = sequence;
  this.traverse = traverse;
};

var traverse = function traverse(dict) {
  return dict.traverse;
};

var traversableMultiplicative = new Traversable(function () {
  return Data_Foldable.foldableMultiplicative;
}, function () {
  return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
    };
  };
});
var traversableMaybe = new Traversable(function () {
  return Data_Foldable.foldableMaybe;
}, function () {
  return Data_Maybe.functorMaybe;
}, function (dictApplicative) {
  return function (v) {
    if (v instanceof Data_Maybe.Nothing) {
      return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe.Just.create)(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 90, column 33): " + [v.constructor.name]);
  };
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v1 instanceof Data_Maybe.Nothing) {
        return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
      }

      ;

      if (v1 instanceof Data_Maybe.Just) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe.Just.create)(v(v1.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 90, column 33): " + [v.constructor.name, v1.constructor.name]);
    };
  };
});
var traversableDual = new Traversable(function () {
  return Data_Foldable.foldableDual;
}, function () {
  return Data_Monoid_Dual.functorDual;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Dual.Dual)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Dual.Dual)(f(v));
    };
  };
});
var traversableDisj = new Traversable(function () {
  return Data_Foldable.foldableDisj;
}, function () {
  return Data_Monoid_Disj.functorDisj;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Disj.Disj)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Disj.Disj)(f(v));
    };
  };
});
var traversableConj = new Traversable(function () {
  return Data_Foldable.foldableConj;
}, function () {
  return Data_Monoid_Conj.functorConj;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Conj.Conj)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Conj.Conj)(f(v));
    };
  };
});
var traversableAdditive = new Traversable(function () {
  return Data_Foldable.foldableAdditive;
}, function () {
  return Data_Monoid_Additive.functorAdditive;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Additive.Additive)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Additive.Additive)(f(v));
    };
  };
});

var sequenceDefault = function sequenceDefault(dictTraversable) {
  return function (dictApplicative) {
    return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var traversableArray = new Traversable(function () {
  return Data_Foldable.foldableArray;
}, function () {
  return Data_Functor.functorArray;
}, function (dictApplicative) {
  return sequenceDefault(traversableArray)(dictApplicative);
}, function (dictApplicative) {
  return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map(dictApplicative.Apply0().Functor0()))(Control_Applicative.pure(dictApplicative));
});

var sequence = function sequence(dict) {
  return dict.sequence;
};

var traversableFirst = new Traversable(function () {
  return Data_Foldable.foldableFirst;
}, function () {
  return Data_Maybe_First.functorFirst;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
    };
  };
});
var traversableLast = new Traversable(function () {
  return Data_Foldable.foldableLast;
}, function () {
  return Data_Maybe_Last.functorLast;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
    };
  };
});

var traverseDefault = function traverseDefault(dictTraversable) {
  return function (dictApplicative) {
    return function (f) {
      return function (ta) {
        return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
      };
    };
  };
};

var mapAccumR = function mapAccumR(dictTraversable) {
  return function (f) {
    return function (s0) {
      return function (xs) {
        return Data_Traversable_Accum_Internal.stateR(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR)(function (a) {
          return function (s) {
            return f(s)(a);
          };
        })(xs))(s0);
      };
    };
  };
};

var scanr = function scanr(dictTraversable) {
  return function (f) {
    return function (b0) {
      return function (xs) {
        return mapAccumR(dictTraversable)(function (b) {
          return function (a) {
            var b$prime = f(a)(b);
            return {
              accum: b$prime,
              value: b$prime
            };
          };
        })(b0)(xs).value;
      };
    };
  };
};

var mapAccumL = function mapAccumL(dictTraversable) {
  return function (f) {
    return function (s0) {
      return function (xs) {
        return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function (a) {
          return function (s) {
            return f(s)(a);
          };
        })(xs))(s0);
      };
    };
  };
};

var scanl = function scanl(dictTraversable) {
  return function (f) {
    return function (b0) {
      return function (xs) {
        return mapAccumL(dictTraversable)(function (b) {
          return function (a) {
            var b$prime = f(b)(a);
            return {
              accum: b$prime,
              value: b$prime
            };
          };
        })(b0)(xs).value;
      };
    };
  };
};

var $$for = function $$for(dictApplicative) {
  return function (dictTraversable) {
    return function (x) {
      return function (f) {
        return traverse(dictTraversable)(dictApplicative)(f)(x);
      };
    };
  };
};

module.exports = {
  Traversable: Traversable,
  traverse: traverse,
  sequence: sequence,
  traverseDefault: traverseDefault,
  sequenceDefault: sequenceDefault,
  "for": $$for,
  scanl: scanl,
  scanr: scanr,
  mapAccumL: mapAccumL,
  mapAccumR: mapAccumR,
  traversableArray: traversableArray,
  traversableMaybe: traversableMaybe,
  traversableFirst: traversableFirst,
  traversableLast: traversableLast,
  traversableAdditive: traversableAdditive,
  traversableDual: traversableDual,
  traversableConj: traversableConj,
  traversableDisj: traversableDisj,
  traversableMultiplicative: traversableMultiplicative
};
},{"./foreign.js":"output/Data.Traversable/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Maybe.First/index.js":"output/Data.Maybe.First/index.js","../Data.Maybe.Last/index.js":"output/Data.Maybe.Last/index.js","../Data.Monoid.Additive/index.js":"output/Data.Monoid.Additive/index.js","../Data.Monoid.Conj/index.js":"output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"output/Data.Monoid.Dual/index.js","../Data.Monoid.Multiplicative/index.js":"output/Data.Monoid.Multiplicative/index.js","../Data.Traversable.Accum.Internal/index.js":"output/Data.Traversable.Accum.Internal/index.js"}],"output/Data.Bitraversable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Bifoldable = require("../Data.Bifoldable/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Bifunctor_Clown = require("../Data.Bifunctor.Clown/index.js");

var Data_Bifunctor_Flip = require("../Data.Bifunctor.Flip/index.js");

var Data_Bifunctor_Joker = require("../Data.Bifunctor.Joker/index.js");

var Data_Bifunctor_Product = require("../Data.Bifunctor.Product/index.js");

var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Bitraversable = function Bitraversable(Bifoldable1, Bifunctor0, bisequence, bitraverse) {
  this.Bifoldable1 = Bifoldable1;
  this.Bifunctor0 = Bifunctor0;
  this.bisequence = bisequence;
  this.bitraverse = bitraverse;
};

var bitraverse = function bitraverse(dict) {
  return dict.bitraverse;
};

var lfor = function lfor(dictBitraversable) {
  return function (dictApplicative) {
    return function (t) {
      return function (f) {
        return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
      };
    };
  };
};

var ltraverse = function ltraverse(dictBitraversable) {
  return function (dictApplicative) {
    return function (f) {
      return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
    };
  };
};

var rfor = function rfor(dictBitraversable) {
  return function (dictApplicative) {
    return function (t) {
      return function (f) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
      };
    };
  };
};

var rtraverse = function rtraverse(dictBitraversable) {
  return function (dictApplicative) {
    return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
  };
};

var bitraversableJoker = function bitraversableJoker(dictTraversable) {
  return new Bitraversable(function () {
    return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
  }, function () {
    return Data_Bifunctor_Joker.bifunctorJoker(dictTraversable.Functor0());
  }, function (dictApplicative) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
    };
  }, function (dictApplicative) {
    return function (v) {
      return function (r) {
        return function (v1) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
        };
      };
    };
  });
};

var bitraversableClown = function bitraversableClown(dictTraversable) {
  return new Bitraversable(function () {
    return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
  }, function () {
    return Data_Bifunctor_Clown.bifunctorClown(dictTraversable.Functor0());
  }, function (dictApplicative) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
    };
  }, function (dictApplicative) {
    return function (l) {
      return function (v) {
        return function (v1) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
        };
      };
    };
  });
};

var bisequenceDefault = function bisequenceDefault(dictBitraversable) {
  return function (dictApplicative) {
    return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
  };
};

var bisequence = function bisequence(dict) {
  return dict.bisequence;
};

var bitraversableFlip = function bitraversableFlip(dictBitraversable) {
  return new Bitraversable(function () {
    return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
  }, function () {
    return Data_Bifunctor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
  }, function (dictApplicative) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
    };
  }, function (dictApplicative) {
    return function (r) {
      return function (l) {
        return function (v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
        };
      };
    };
  });
};

var bitraversableProduct = function bitraversableProduct(dictBitraversable) {
  return function (dictBitraversable1) {
    return new Bitraversable(function () {
      return Data_Bifoldable.bifoldableProduct(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
    }, function () {
      return Data_Bifunctor_Product.bifunctorProduct(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
    }, function (dictApplicative) {
      return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Product.Product.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
      };
    }, function (dictApplicative) {
      return function (l) {
        return function (r) {
          return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Product.Product.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
          };
        };
      };
    });
  };
};

var bitraversableWrap = function bitraversableWrap(dictBitraversable) {
  return new Bitraversable(function () {
    return Data_Bifoldable.bifoldableWrap(dictBitraversable.Bifoldable1());
  }, function () {
    return Data_Bifunctor_Wrap.bifunctorWrap(dictBitraversable.Bifunctor0());
  }, function (dictApplicative) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Wrap.Wrap)(bisequence(dictBitraversable)(dictApplicative)(v));
    };
  }, function (dictApplicative) {
    return function (l) {
      return function (r) {
        return function (v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Wrap.Wrap)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
        };
      };
    };
  });
};

var bitraverseDefault = function bitraverseDefault(dictBitraversable) {
  return function (dictApplicative) {
    return function (f) {
      return function (g) {
        return function (t) {
          return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
        };
      };
    };
  };
};

var bifor = function bifor(dictBitraversable) {
  return function (dictApplicative) {
    return function (t) {
      return function (f) {
        return function (g) {
          return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
        };
      };
    };
  };
};

module.exports = {
  Bitraversable: Bitraversable,
  bitraverse: bitraverse,
  bisequence: bisequence,
  bitraverseDefault: bitraverseDefault,
  bisequenceDefault: bisequenceDefault,
  ltraverse: ltraverse,
  rtraverse: rtraverse,
  bifor: bifor,
  lfor: lfor,
  rfor: rfor,
  bitraversableClown: bitraversableClown,
  bitraversableJoker: bitraversableJoker,
  bitraversableFlip: bitraversableFlip,
  bitraversableProduct: bitraversableProduct,
  bitraversableWrap: bitraversableWrap
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Bifoldable/index.js":"output/Data.Bifoldable/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Bifunctor.Clown/index.js":"output/Data.Bifunctor.Clown/index.js","../Data.Bifunctor.Flip/index.js":"output/Data.Bifunctor.Flip/index.js","../Data.Bifunctor.Joker/index.js":"output/Data.Bifunctor.Joker/index.js","../Data.Bifunctor.Product/index.js":"output/Data.Bifunctor.Product/index.js","../Data.Bifunctor.Wrap/index.js":"output/Data.Bifunctor.Wrap/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js"}],"output/Data.BooleanAlgebra/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var BooleanAlgebraRecord = function BooleanAlgebraRecord(HeytingAlgebraRecord0) {
  this.HeytingAlgebraRecord0 = HeytingAlgebraRecord0;
};

var BooleanAlgebra = function BooleanAlgebra(HeytingAlgebra0) {
  this.HeytingAlgebra0 = HeytingAlgebra0;
};

var booleanAlgebraUnit = new BooleanAlgebra(function () {
  return Data_HeytingAlgebra.heytingAlgebraUnit;
});
var booleanAlgebraRecordNil = new BooleanAlgebraRecord(function () {
  return Data_HeytingAlgebra.heytingAlgebraRecordNil;
});

var booleanAlgebraRecordCons = function booleanAlgebraRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictBooleanAlgebraRecord) {
      return function (dictBooleanAlgebra) {
        return new BooleanAlgebraRecord(function () {
          return Data_HeytingAlgebra.heytingAlgebraRecordCons(dictIsSymbol)()(dictBooleanAlgebraRecord.HeytingAlgebraRecord0())(dictBooleanAlgebra.HeytingAlgebra0());
        });
      };
    };
  };
};

var booleanAlgebraRecord = function booleanAlgebraRecord(dictRowToList) {
  return function (dictBooleanAlgebraRecord) {
    return new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraRecord()(dictBooleanAlgebraRecord.HeytingAlgebraRecord0());
    });
  };
};

var booleanAlgebraFn = function booleanAlgebraFn(dictBooleanAlgebra) {
  return new BooleanAlgebra(function () {
    return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
  });
};

var booleanAlgebraBoolean = new BooleanAlgebra(function () {
  return Data_HeytingAlgebra.heytingAlgebraBoolean;
});
module.exports = {
  BooleanAlgebra: BooleanAlgebra,
  BooleanAlgebraRecord: BooleanAlgebraRecord,
  booleanAlgebraBoolean: booleanAlgebraBoolean,
  booleanAlgebraUnit: booleanAlgebraUnit,
  booleanAlgebraFn: booleanAlgebraFn,
  booleanAlgebraRecord: booleanAlgebraRecord,
  booleanAlgebraRecordNil: booleanAlgebraRecordNil,
  booleanAlgebraRecordCons: booleanAlgebraRecordCons
};
},{"../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js"}],"output/Data.FunctorWithIndex/foreign.js":[function(require,module,exports) {
"use strict";

exports.mapWithIndexArray = function (f) {
  return function (xs) {
    var l = xs.length;
    var result = Array(l);

    for (var i = 0; i < l; i++) {
      result[i] = f(i)(xs[i]);
    }

    return result;
  };
};
},{}],"output/Data.FunctorWithIndex/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Maybe_First = require("../Data.Maybe.First/index.js");

var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");

var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var FunctorWithIndex = function FunctorWithIndex(Functor0, mapWithIndex) {
  this.Functor0 = Functor0;
  this.mapWithIndex = mapWithIndex;
};

var mapWithIndex = function mapWithIndex(dict) {
  return dict.mapWithIndex;
};

var mapDefault = function mapDefault(dictFunctorWithIndex) {
  return function (f) {
    return mapWithIndex(dictFunctorWithIndex)(Data_Function["const"](f));
  };
};

var functorWithIndexMultiplicative = new FunctorWithIndex(function () {
  return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (f) {
  return Data_Functor.map(Data_Monoid_Multiplicative.functorMultiplicative)(f(Data_Unit.unit));
});
var functorWithIndexMaybe = new FunctorWithIndex(function () {
  return Data_Maybe.functorMaybe;
}, function (f) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Unit.unit));
});
var functorWithIndexLast = new FunctorWithIndex(function () {
  return Data_Maybe_Last.functorLast;
}, function (f) {
  return Data_Functor.map(Data_Maybe_Last.functorLast)(f(Data_Unit.unit));
});
var functorWithIndexFirst = new FunctorWithIndex(function () {
  return Data_Maybe_First.functorFirst;
}, function (f) {
  return Data_Functor.map(Data_Maybe_First.functorFirst)(f(Data_Unit.unit));
});
var functorWithIndexDual = new FunctorWithIndex(function () {
  return Data_Monoid_Dual.functorDual;
}, function (f) {
  return Data_Functor.map(Data_Monoid_Dual.functorDual)(f(Data_Unit.unit));
});
var functorWithIndexDisj = new FunctorWithIndex(function () {
  return Data_Monoid_Disj.functorDisj;
}, function (f) {
  return Data_Functor.map(Data_Monoid_Disj.functorDisj)(f(Data_Unit.unit));
});
var functorWithIndexConj = new FunctorWithIndex(function () {
  return Data_Monoid_Conj.functorConj;
}, function (f) {
  return Data_Functor.map(Data_Monoid_Conj.functorConj)(f(Data_Unit.unit));
});
var functorWithIndexArray = new FunctorWithIndex(function () {
  return Data_Functor.functorArray;
}, $foreign.mapWithIndexArray);
var functorWithIndexAdditive = new FunctorWithIndex(function () {
  return Data_Monoid_Additive.functorAdditive;
}, function (f) {
  return Data_Functor.map(Data_Monoid_Additive.functorAdditive)(f(Data_Unit.unit));
});
module.exports = {
  FunctorWithIndex: FunctorWithIndex,
  mapWithIndex: mapWithIndex,
  mapDefault: mapDefault,
  functorWithIndexArray: functorWithIndexArray,
  functorWithIndexMaybe: functorWithIndexMaybe,
  functorWithIndexFirst: functorWithIndexFirst,
  functorWithIndexLast: functorWithIndexLast,
  functorWithIndexAdditive: functorWithIndexAdditive,
  functorWithIndexDual: functorWithIndexDual,
  functorWithIndexConj: functorWithIndexConj,
  functorWithIndexDisj: functorWithIndexDisj,
  functorWithIndexMultiplicative: functorWithIndexMultiplicative
};
},{"./foreign.js":"output/Data.FunctorWithIndex/foreign.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Maybe.First/index.js":"output/Data.Maybe.First/index.js","../Data.Maybe.Last/index.js":"output/Data.Maybe.Last/index.js","../Data.Monoid.Additive/index.js":"output/Data.Monoid.Additive/index.js","../Data.Monoid.Conj/index.js":"output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"output/Data.Monoid.Dual/index.js","../Data.Monoid.Multiplicative/index.js":"output/Data.Monoid.Multiplicative/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.FoldableWithIndex/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Tuple = function () {
  function Tuple(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Tuple.create = function (value0) {
    return function (value1) {
      return new Tuple(value0, value1);
    };
  };

  return Tuple;
}();

var FoldableWithIndex = function FoldableWithIndex(Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
  this.Foldable0 = Foldable0;
  this.foldMapWithIndex = foldMapWithIndex;
  this.foldlWithIndex = foldlWithIndex;
  this.foldrWithIndex = foldrWithIndex;
};

var foldrWithIndex = function foldrWithIndex(dict) {
  return dict.foldrWithIndex;
};

var traverseWithIndex_ = function traverseWithIndex_(dictApplicative) {
  return function (dictFoldableWithIndex) {
    return function (f) {
      return foldrWithIndex(dictFoldableWithIndex)(function (i) {
        var $46 = Control_Apply.applySecond(dictApplicative.Apply0());
        var $47 = f(i);
        return function ($48) {
          return $46($47($48));
        };
      })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
    };
  };
};

var forWithIndex_ = function forWithIndex_(dictApplicative) {
  return function (dictFoldableWithIndex) {
    return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
  };
};

var foldrDefault = function foldrDefault(dictFoldableWithIndex) {
  return function (f) {
    return foldrWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
  };
};

var foldlWithIndex = function foldlWithIndex(dict) {
  return dict.foldlWithIndex;
};

var foldlDefault = function foldlDefault(dictFoldableWithIndex) {
  return function (f) {
    return foldlWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
  };
};

var foldableWithIndexMultiplicative = new FoldableWithIndex(function () {
  return Data_Foldable.foldableMultiplicative;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableMultiplicative)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
});
var foldableWithIndexMaybe = new FoldableWithIndex(function () {
  return Data_Foldable.foldableMaybe;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
});
var foldableWithIndexLast = new FoldableWithIndex(function () {
  return Data_Foldable.foldableLast;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableLast)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableLast)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableLast)(f(Data_Unit.unit));
});
var foldableWithIndexFirst = new FoldableWithIndex(function () {
  return Data_Foldable.foldableFirst;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableFirst)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
});
var foldableWithIndexDual = new FoldableWithIndex(function () {
  return Data_Foldable.foldableDual;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableDual)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableDual)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableDual)(f(Data_Unit.unit));
});
var foldableWithIndexDisj = new FoldableWithIndex(function () {
  return Data_Foldable.foldableDisj;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableDisj)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
});
var foldableWithIndexConj = new FoldableWithIndex(function () {
  return Data_Foldable.foldableConj;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableConj)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableConj)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableConj)(f(Data_Unit.unit));
});
var foldableWithIndexAdditive = new FoldableWithIndex(function () {
  return Data_Foldable.foldableAdditive;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableAdditive)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
});

var foldWithIndexM = function foldWithIndexM(dictFoldableWithIndex) {
  return function (dictMonad) {
    return function (f) {
      return function (a0) {
        return foldlWithIndex(dictFoldableWithIndex)(function (i) {
          return function (ma) {
            return function (b) {
              return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
            };
          };
        })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
      };
    };
  };
};

var foldMapWithIndexDefaultR = function foldMapWithIndexDefaultR(dictFoldableWithIndex) {
  return function (dictMonoid) {
    return function (f) {
      return foldrWithIndex(dictFoldableWithIndex)(function (i) {
        return function (x) {
          return function (acc) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
          };
        };
      })(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var foldableWithIndexArray = new FoldableWithIndex(function () {
  return Data_Foldable.foldableArray;
}, function (dictMonoid) {
  return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
}, function (f) {
  return function (z) {
    var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
      return function (v) {
        return f(v.value0)(y)(v.value1);
      };
    })(z);
    var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
    return function ($51) {
      return $49($50($51));
    };
  };
}, function (f) {
  return function (z) {
    var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
      return function (y) {
        return f(v.value0)(v.value1)(y);
      };
    })(z);
    var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
    return function ($54) {
      return $52($53($54));
    };
  };
});

var foldMapWithIndexDefaultL = function foldMapWithIndexDefaultL(dictFoldableWithIndex) {
  return function (dictMonoid) {
    return function (f) {
      return foldlWithIndex(dictFoldableWithIndex)(function (i) {
        return function (acc) {
          return function (x) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)(x));
          };
        };
      })(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var foldMapWithIndex = function foldMapWithIndex(dict) {
  return dict.foldMapWithIndex;
};

var foldlWithIndexDefault = function foldlWithIndexDefault(dictFoldableWithIndex) {
  return function (c) {
    return function (u) {
      return function (xs) {
        return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function (i) {
          var $55 = Data_Function.flip(c(i));
          return function ($56) {
            return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($55($56)));
          };
        })(xs)))(u);
      };
    };
  };
};

var foldrWithIndexDefault = function foldrWithIndexDefault(dictFoldableWithIndex) {
  return function (c) {
    return function (u) {
      return function (xs) {
        return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function (i) {
          var $57 = c(i);
          return function ($58) {
            return Data_Monoid_Endo.Endo($57($58));
          };
        })(xs))(u);
      };
    };
  };
};

var surroundMapWithIndex = function surroundMapWithIndex(dictFoldableWithIndex) {
  return function (dictSemigroup) {
    return function (d) {
      return function (t) {
        return function (f) {
          var joined = function joined(i) {
            return function (a) {
              return function (m) {
                return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(i)(a))(m));
              };
            };
          };

          return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
        };
      };
    };
  };
};

var foldMapDefault = function foldMapDefault(dictFoldableWithIndex) {
  return function (dictMonoid) {
    return function (f) {
      return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(Data_Function["const"](f));
    };
  };
};

var findWithIndex = function findWithIndex(dictFoldableWithIndex) {
  return function (p) {
    var go = function go(v) {
      return function (v1) {
        return function (v2) {
          if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) {
            return new Data_Maybe.Just({
              index: v,
              value: v2
            });
          }

          ;
          return v1;
        };
      };
    };

    return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
  };
};

var anyWithIndex = function anyWithIndex(dictFoldableWithIndex) {
  return function (dictHeytingAlgebra) {
    return function (t) {
      var $59 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
      var $60 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra))(function (i) {
        var $62 = t(i);
        return function ($63) {
          return Data_Monoid_Disj.Disj($62($63));
        };
      });
      return function ($61) {
        return $59($60($61));
      };
    };
  };
};

var allWithIndex = function allWithIndex(dictFoldableWithIndex) {
  return function (dictHeytingAlgebra) {
    return function (t) {
      var $64 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
      var $65 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function (i) {
        var $67 = t(i);
        return function ($68) {
          return Data_Monoid_Conj.Conj($67($68));
        };
      });
      return function ($66) {
        return $64($65($66));
      };
    };
  };
};

module.exports = {
  FoldableWithIndex: FoldableWithIndex,
  foldrWithIndex: foldrWithIndex,
  foldlWithIndex: foldlWithIndex,
  foldMapWithIndex: foldMapWithIndex,
  foldrWithIndexDefault: foldrWithIndexDefault,
  foldlWithIndexDefault: foldlWithIndexDefault,
  foldMapWithIndexDefaultR: foldMapWithIndexDefaultR,
  foldMapWithIndexDefaultL: foldMapWithIndexDefaultL,
  foldWithIndexM: foldWithIndexM,
  traverseWithIndex_: traverseWithIndex_,
  forWithIndex_: forWithIndex_,
  surroundMapWithIndex: surroundMapWithIndex,
  allWithIndex: allWithIndex,
  anyWithIndex: anyWithIndex,
  findWithIndex: findWithIndex,
  foldrDefault: foldrDefault,
  foldlDefault: foldlDefault,
  foldMapDefault: foldMapDefault,
  foldableWithIndexArray: foldableWithIndexArray,
  foldableWithIndexMaybe: foldableWithIndexMaybe,
  foldableWithIndexFirst: foldableWithIndexFirst,
  foldableWithIndexLast: foldableWithIndexLast,
  foldableWithIndexAdditive: foldableWithIndexAdditive,
  foldableWithIndexDual: foldableWithIndexDual,
  foldableWithIndexDisj: foldableWithIndexDisj,
  foldableWithIndexConj: foldableWithIndexConj,
  foldableWithIndexMultiplicative: foldableWithIndexMultiplicative
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Monoid.Conj/index.js":"output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"output/Data.Monoid.Dual/index.js","../Data.Monoid.Endo/index.js":"output/Data.Monoid.Endo/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Ord.Max/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Max = function Max(x) {
  return x;
};

var showMax = function showMax(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Max " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupMax = function semigroupMax(dictOrd) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_Ord.max(dictOrd)(v)(v1);
    };
  });
};

var newtypeMax = new Data_Newtype.Newtype(function (n) {
  return n;
}, Max);

var monoidMax = function monoidMax(dictBounded) {
  return new Data_Monoid.Monoid(function () {
    return semigroupMax(dictBounded.Ord0());
  }, Data_Bounded.bottom(dictBounded));
};

var eqMax = function eqMax(dictEq) {
  return dictEq;
};

var ordMax = function ordMax(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqMax(dictOrd.Eq0());
  }, function (v) {
    return function (v1) {
      return Data_Ord.compare(dictOrd)(v)(v1);
    };
  });
};

module.exports = {
  Max: Max,
  newtypeMax: newtypeMax,
  eqMax: eqMax,
  ordMax: ordMax,
  semigroupMax: semigroupMax,
  monoidMax: monoidMax,
  showMax: showMax
};
},{"../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Ord.Min/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Min = function Min(x) {
  return x;
};

var showMin = function showMin(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Min " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupMin = function semigroupMin(dictOrd) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_Ord.min(dictOrd)(v)(v1);
    };
  });
};

var newtypeMin = new Data_Newtype.Newtype(function (n) {
  return n;
}, Min);

var monoidMin = function monoidMin(dictBounded) {
  return new Data_Monoid.Monoid(function () {
    return semigroupMin(dictBounded.Ord0());
  }, Data_Bounded.top(dictBounded));
};

var eqMin = function eqMin(dictEq) {
  return dictEq;
};

var ordMin = function ordMin(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqMin(dictOrd.Eq0());
  }, function (v) {
    return function (v1) {
      return Data_Ord.compare(dictOrd)(v)(v1);
    };
  });
};

module.exports = {
  Min: Min,
  newtypeMin: newtypeMin,
  eqMin: eqMin,
  ordMin: ordMin,
  semigroupMin: semigroupMin,
  monoidMin: monoidMin,
  showMin: showMin
};
},{"../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Semigroup.Foldable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord_Max = require("../Data.Ord.Max/index.js");

var Data_Ord_Min = require("../Data.Ord.Min/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var JoinWith = function JoinWith(x) {
  return x;
};

var Act = function Act(x) {
  return x;
};

var Foldable1 = function Foldable1(Foldable0, fold1, foldMap1) {
  this.Foldable0 = Foldable0;
  this.fold1 = fold1;
  this.foldMap1 = foldMap1;
};

var semigroupJoinWith = function semigroupJoinWith(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return JoinWith(function (j) {
        return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
      });
    };
  });
};

var semigroupAct = function semigroupAct(dictApply) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Control_Apply.applySecond(dictApply)(v)(v1);
    };
  });
};

var joinee = function joinee(v) {
  return v;
};

var getAct = function getAct(v) {
  return v;
};

var foldMap1 = function foldMap1(dict) {
  return dict.foldMap1;
};

var intercalateMap = function intercalateMap(dictFoldable1) {
  return function (dictSemigroup) {
    return function (j) {
      return function (f) {
        return function (foldable) {
          return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function ($43) {
            return JoinWith(Data_Function["const"](f($43)));
          })(foldable))(j);
        };
      };
    };
  };
};

var intercalate = function intercalate(dictFoldable1) {
  return function (dictSemigroup) {
    return Data_Function.flip(intercalateMap(dictFoldable1)(dictSemigroup))(Control_Category.identity(Control_Category.categoryFn));
  };
};

var maximum = function maximum(dictOrd) {
  return function (dictFoldable1) {
    return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.Max)(foldMap1(dictFoldable1)(Data_Ord_Max.semigroupMax(dictOrd)));
  };
};

var minimum = function minimum(dictOrd) {
  return function (dictFoldable1) {
    return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
  };
};

var traverse1_ = function traverse1_(dictFoldable1) {
  return function (dictApply) {
    return function (f) {
      return function (t) {
        return Data_Functor.voidRight(dictApply.Functor0())(Data_Unit.unit)(getAct(foldMap1(dictFoldable1)(semigroupAct(dictApply))(function ($44) {
          return Act(f($44));
        })(t)));
      };
    };
  };
};

var for1_ = function for1_(dictFoldable1) {
  return function (dictApply) {
    return Data_Function.flip(traverse1_(dictFoldable1)(dictApply));
  };
};

var sequence1_ = function sequence1_(dictFoldable1) {
  return function (dictApply) {
    return traverse1_(dictFoldable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var fold1Default = function fold1Default(dictFoldable1) {
  return function (dictSemigroup) {
    return foldMap1(dictFoldable1)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var foldableDual = new Foldable1(function () {
  return Data_Foldable.foldableDual;
}, function (dictSemigroup) {
  return fold1Default(foldableDual)(dictSemigroup);
}, function (dictSemigroup) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
});
var foldableMultiplicative = new Foldable1(function () {
  return Data_Foldable.foldableMultiplicative;
}, function (dictSemigroup) {
  return fold1Default(foldableMultiplicative)(dictSemigroup);
}, function (dictSemigroup) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
});

var fold1 = function fold1(dict) {
  return dict.fold1;
};

var foldMap1Default = function foldMap1Default(dictFoldable1) {
  return function (dictFunctor) {
    return function (dictSemigroup) {
      return function (f) {
        var $45 = fold1(dictFoldable1)(dictSemigroup);
        var $46 = Data_Functor.map(dictFunctor)(f);
        return function ($47) {
          return $45($46($47));
        };
      };
    };
  };
};

module.exports = {
  Foldable1: Foldable1,
  foldMap1: foldMap1,
  fold1: fold1,
  traverse1_: traverse1_,
  for1_: for1_,
  sequence1_: sequence1_,
  foldMap1Default: foldMap1Default,
  fold1Default: fold1Default,
  intercalate: intercalate,
  intercalateMap: intercalateMap,
  maximum: maximum,
  minimum: minimum,
  foldableDual: foldableDual,
  foldableMultiplicative: foldableMultiplicative
};
},{"../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord.Max/index.js":"output/Data.Ord.Max/index.js","../Data.Ord.Min/index.js":"output/Data.Ord.Min/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Semigroup.Traversable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Traversable1 = function Traversable1(Foldable10, _Traversable, sequence1, traverse1) {
  this.Foldable10 = Foldable10;
  this.Traversable1 = _Traversable;
  this.sequence1 = sequence1;
  this.traverse1 = traverse1;
};

var traverse1 = function traverse1(dict) {
  return dict.traverse1;
};

var sequence1Default = function sequence1Default(dictTraversable1) {
  return function (dictApply) {
    return traverse1(dictTraversable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var traversableDual = new Traversable1(function () {
  return Data_Semigroup_Foldable.foldableDual;
}, function () {
  return Data_Traversable.traversableDual;
}, function (dictApply) {
  return sequence1Default(traversableDual)(dictApply);
}, function (dictApply) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Dual.Dual)(f(v));
    };
  };
});
var traversableMultiplicative = new Traversable1(function () {
  return Data_Semigroup_Foldable.foldableMultiplicative;
}, function () {
  return Data_Traversable.traversableMultiplicative;
}, function (dictApply) {
  return sequence1Default(traversableMultiplicative)(dictApply);
}, function (dictApply) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
    };
  };
});

var sequence1 = function sequence1(dict) {
  return dict.sequence1;
};

var traverse1Default = function traverse1Default(dictTraversable1) {
  return function (dictApply) {
    return function (f) {
      return function (ta) {
        return sequence1(dictTraversable1)(dictApply)(Data_Functor.map(dictTraversable1.Traversable1().Functor0())(f)(ta));
      };
    };
  };
};

module.exports = {
  sequence1: sequence1,
  traverse1: traverse1,
  Traversable1: Traversable1,
  traverse1Default: traverse1Default,
  sequence1Default: sequence1Default,
  traversableDual: traversableDual,
  traversableMultiplicative: traversableMultiplicative
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid.Dual/index.js":"output/Data.Monoid.Dual/index.js","../Data.Monoid.Multiplicative/index.js":"output/Data.Monoid.Multiplicative/index.js","../Data.Semigroup.Foldable/index.js":"output/Data.Semigroup.Foldable/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js"}],"output/Data.TraversableWithIndex/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var TraversableWithIndex = function TraversableWithIndex(FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
  this.FoldableWithIndex1 = FoldableWithIndex1;
  this.FunctorWithIndex0 = FunctorWithIndex0;
  this.Traversable2 = Traversable2;
  this.traverseWithIndex = traverseWithIndex;
};

var traverseWithIndexDefault = function traverseWithIndexDefault(dictTraversableWithIndex) {
  return function (dictApplicative) {
    return function (f) {
      var $19 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
      var $20 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
      return function ($21) {
        return $19($20($21));
      };
    };
  };
};

var traverseWithIndex = function traverseWithIndex(dict) {
  return dict.traverseWithIndex;
};

var traverseDefault = function traverseDefault(dictTraversableWithIndex) {
  return function (dictApplicative) {
    return function (f) {
      return traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(Data_Function["const"](f));
    };
  };
};

var traversableWithIndexMultiplicative = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexMultiplicative;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexMultiplicative;
}, function () {
  return Data_Traversable.traversableMultiplicative;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableMultiplicative)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexMaybe = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexMaybe;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexMaybe;
}, function () {
  return Data_Traversable.traversableMaybe;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexLast = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexLast;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexLast;
}, function () {
  return Data_Traversable.traversableLast;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableLast)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexFirst = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexFirst;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexFirst;
}, function () {
  return Data_Traversable.traversableFirst;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableFirst)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexDual = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexDual;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexDual;
}, function () {
  return Data_Traversable.traversableDual;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableDual)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexDisj = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexDisj;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexDisj;
}, function () {
  return Data_Traversable.traversableDisj;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableDisj)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexConj = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexConj;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexConj;
}, function () {
  return Data_Traversable.traversableConj;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableConj)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexArray = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexArray;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexArray;
}, function () {
  return Data_Traversable.traversableArray;
}, function (dictApplicative) {
  return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
});
var traversableWithIndexAdditive = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexAdditive;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexAdditive;
}, function () {
  return Data_Traversable.traversableAdditive;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableAdditive)(dictApplicative)(f(Data_Unit.unit));
  };
});

var mapAccumRWithIndex = function mapAccumRWithIndex(dictTraversableWithIndex) {
  return function (f) {
    return function (s0) {
      return function (xs) {
        return Data_Traversable_Accum_Internal.stateR(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateR)(function (i) {
          return function (a) {
            return function (s) {
              return f(i)(s)(a);
            };
          };
        })(xs))(s0);
      };
    };
  };
};

var scanrWithIndex = function scanrWithIndex(dictTraversableWithIndex) {
  return function (f) {
    return function (b0) {
      return function (xs) {
        return mapAccumRWithIndex(dictTraversableWithIndex)(function (i) {
          return function (b) {
            return function (a) {
              var b$prime = f(i)(a)(b);
              return {
                accum: b$prime,
                value: b$prime
              };
            };
          };
        })(b0)(xs).value;
      };
    };
  };
};

var mapAccumLWithIndex = function mapAccumLWithIndex(dictTraversableWithIndex) {
  return function (f) {
    return function (s0) {
      return function (xs) {
        return Data_Traversable_Accum_Internal.stateL(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateL)(function (i) {
          return function (a) {
            return function (s) {
              return f(i)(s)(a);
            };
          };
        })(xs))(s0);
      };
    };
  };
};

var scanlWithIndex = function scanlWithIndex(dictTraversableWithIndex) {
  return function (f) {
    return function (b0) {
      return function (xs) {
        return mapAccumLWithIndex(dictTraversableWithIndex)(function (i) {
          return function (b) {
            return function (a) {
              var b$prime = f(i)(b)(a);
              return {
                accum: b$prime,
                value: b$prime
              };
            };
          };
        })(b0)(xs).value;
      };
    };
  };
};

var forWithIndex = function forWithIndex(dictApplicative) {
  return function (dictTraversableWithIndex) {
    return Data_Function.flip(traverseWithIndex(dictTraversableWithIndex)(dictApplicative));
  };
};

module.exports = {
  TraversableWithIndex: TraversableWithIndex,
  traverseWithIndex: traverseWithIndex,
  traverseWithIndexDefault: traverseWithIndexDefault,
  forWithIndex: forWithIndex,
  scanlWithIndex: scanlWithIndex,
  mapAccumLWithIndex: mapAccumLWithIndex,
  scanrWithIndex: scanrWithIndex,
  mapAccumRWithIndex: mapAccumRWithIndex,
  traverseDefault: traverseDefault,
  traversableWithIndexArray: traversableWithIndexArray,
  traversableWithIndexMaybe: traversableWithIndexMaybe,
  traversableWithIndexFirst: traversableWithIndexFirst,
  traversableWithIndexLast: traversableWithIndexLast,
  traversableWithIndexAdditive: traversableWithIndexAdditive,
  traversableWithIndexDual: traversableWithIndexDual,
  traversableWithIndexConj: traversableWithIndexConj,
  traversableWithIndexDisj: traversableWithIndexDisj,
  traversableWithIndexMultiplicative: traversableWithIndexMultiplicative
};
},{"../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.Traversable.Accum.Internal/index.js":"output/Data.Traversable.Accum.Internal/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Identity/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Identity = function Identity(x) {
  return x;
};

var showIdentity = function showIdentity(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semiringIdentity = function semiringIdentity(dictSemiring) {
  return dictSemiring;
};

var semigroupIdenity = function semigroupIdenity(dictSemigroup) {
  return dictSemigroup;
};

var ringIdentity = function ringIdentity(dictRing) {
  return dictRing;
};

var ordIdentity = function ordIdentity(dictOrd) {
  return dictOrd;
};

var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
  return n;
}, Identity);

var monoidIdentity = function monoidIdentity(dictMonoid) {
  return dictMonoid;
};

var lazyIdentity = function lazyIdentity(dictLazy) {
  return dictLazy;
};

var heytingAlgebraIdentity = function heytingAlgebraIdentity(dictHeytingAlgebra) {
  return dictHeytingAlgebra;
};

var functorIdentity = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});
var functorWithIndexIdentity = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorIdentity;
}, function (f) {
  return function (v) {
    return f(Data_Unit.unit)(v);
  };
});
var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});
var foldableWithIndexIdentity = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableIdentity;
}, function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(Data_Unit.unit)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(Data_Unit.unit)(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(Data_Unit.unit)(v)(z);
    };
  };
});
var traversableIdentity = new Data_Traversable.Traversable(function () {
  return foldableIdentity;
}, function () {
  return functorIdentity;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Identity)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Identity)(f(v));
    };
  };
});
var traversableWithIndexIdentity = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexIdentity;
}, function () {
  return functorWithIndexIdentity;
}, function () {
  return traversableIdentity;
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Identity)(f(Data_Unit.unit)(v));
    };
  };
});
var foldable1Identity = new Data_Semigroup_Foldable.Foldable1(function () {
  return foldableIdentity;
}, function (dictSemigroup) {
  return function (v) {
    return v;
  };
}, function (dictSemigroup) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
});
var traversable1Identity = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1Identity;
}, function () {
  return traversableIdentity;
}, function (dictApply) {
  return function (v) {
    return Data_Functor.map(dictApply.Functor0())(Identity)(v);
  };
}, function (dictApply) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApply.Functor0())(Identity)(f(v));
    };
  };
});
var extendIdentity = new Control_Extend.Extend(function () {
  return functorIdentity;
}, function (f) {
  return function (m) {
    return f(m);
  };
});

var euclideanRingIdentity = function euclideanRingIdentity(dictEuclideanRing) {
  return dictEuclideanRing;
};

var eqIdentity = function eqIdentity(dictEq) {
  return dictEq;
};

var eq1Identity = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqIdentity(dictEq));
});
var ord1Identity = new Data_Ord.Ord1(function () {
  return eq1Identity;
}, function (dictOrd) {
  return Data_Ord.compare(ordIdentity(dictOrd));
});
var comonadIdentity = new Control_Comonad.Comonad(function () {
  return extendIdentity;
}, function (v) {
  return v;
});

var commutativeRingIdentity = function commutativeRingIdentity(dictCommutativeRing) {
  return dictCommutativeRing;
};

var boundedIdentity = function boundedIdentity(dictBounded) {
  return dictBounded;
};

var booleanAlgebraIdentity = function booleanAlgebraIdentity(dictBooleanAlgebra) {
  return dictBooleanAlgebra;
};

var applyIdentity = new Control_Apply.Apply(function () {
  return functorIdentity;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindIdentity = new Control_Bind.Bind(function () {
  return applyIdentity;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeIdentity = new Control_Applicative.Applicative(function () {
  return applyIdentity;
}, Identity);
var monadIdentity = new Control_Monad.Monad(function () {
  return applicativeIdentity;
}, function () {
  return bindIdentity;
});
var altIdentity = new Control_Alt.Alt(function () {
  return functorIdentity;
}, function (x) {
  return function (v) {
    return x;
  };
});
module.exports = {
  Identity: Identity,
  newtypeIdentity: newtypeIdentity,
  eqIdentity: eqIdentity,
  ordIdentity: ordIdentity,
  boundedIdentity: boundedIdentity,
  heytingAlgebraIdentity: heytingAlgebraIdentity,
  booleanAlgebraIdentity: booleanAlgebraIdentity,
  semigroupIdenity: semigroupIdenity,
  monoidIdentity: monoidIdentity,
  semiringIdentity: semiringIdentity,
  euclideanRingIdentity: euclideanRingIdentity,
  ringIdentity: ringIdentity,
  commutativeRingIdentity: commutativeRingIdentity,
  lazyIdentity: lazyIdentity,
  showIdentity: showIdentity,
  eq1Identity: eq1Identity,
  ord1Identity: ord1Identity,
  functorIdentity: functorIdentity,
  functorWithIndexIdentity: functorWithIndexIdentity,
  invariantIdentity: invariantIdentity,
  altIdentity: altIdentity,
  applyIdentity: applyIdentity,
  applicativeIdentity: applicativeIdentity,
  bindIdentity: bindIdentity,
  monadIdentity: monadIdentity,
  extendIdentity: extendIdentity,
  comonadIdentity: comonadIdentity,
  foldableIdentity: foldableIdentity,
  foldable1Identity: foldable1Identity,
  foldableWithIndexIdentity: foldableWithIndexIdentity,
  traversableIdentity: traversableIdentity,
  traversable1Identity: traversable1Identity,
  traversableWithIndexIdentity: traversableWithIndexIdentity
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Comonad/index.js":"output/Control.Comonad/index.js","../Control.Extend/index.js":"output/Control.Extend/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"output/Data.Functor.Invariant/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup.Foldable/index.js":"output/Data.Semigroup.Foldable/index.js","../Data.Semigroup.Traversable/index.js":"output/Data.Semigroup.Traversable/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Distributive/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Distributive = function Distributive(Functor0, collect, distribute) {
  this.Functor0 = Functor0;
  this.collect = collect;
  this.distribute = distribute;
};

var distributiveIdentity = new Distributive(function () {
  return Data_Identity.functorIdentity;
}, function (dictFunctor) {
  return function (f) {
    var $11 = Data_Functor.map(dictFunctor)(function () {
      var $13 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($14) {
        return $13(f($14));
      };
    }());
    return function ($12) {
      return Data_Identity.Identity($11($12));
    };
  };
}, function (dictFunctor) {
  var $15 = Data_Functor.map(dictFunctor)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity));
  return function ($16) {
    return Data_Identity.Identity($15($16));
  };
});

var distribute = function distribute(dict) {
  return dict.distribute;
};

var distributiveFunction = new Distributive(function () {
  return Data_Functor.functorFn;
}, function (dictFunctor) {
  return function (f) {
    var $17 = distribute(distributiveFunction)(dictFunctor);
    var $18 = Data_Functor.map(dictFunctor)(f);
    return function ($19) {
      return $17($18($19));
    };
  };
}, function (dictFunctor) {
  return function (a) {
    return function (e) {
      return Data_Functor.map(dictFunctor)(function (v) {
        return v(e);
      })(a);
    };
  };
});

var cotraverse = function cotraverse(dictDistributive) {
  return function (dictFunctor) {
    return function (f) {
      var $20 = Data_Functor.map(dictDistributive.Functor0())(f);
      var $21 = distribute(dictDistributive)(dictFunctor);
      return function ($22) {
        return $20($21($22));
      };
    };
  };
};

var collectDefault = function collectDefault(dictDistributive) {
  return function (dictFunctor) {
    return function (f) {
      var $23 = distribute(dictDistributive)(dictFunctor);
      var $24 = Data_Functor.map(dictFunctor)(f);
      return function ($25) {
        return $23($24($25));
      };
    };
  };
};

var collect = function collect(dict) {
  return dict.collect;
};

var distributeDefault = function distributeDefault(dictDistributive) {
  return function (dictFunctor) {
    return collect(dictDistributive)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
  };
};

module.exports = {
  collect: collect,
  distribute: distribute,
  Distributive: Distributive,
  distributeDefault: distributeDefault,
  collectDefault: collectDefault,
  cotraverse: cotraverse,
  distributiveIdentity: distributiveIdentity,
  distributiveFunction: distributiveFunction
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Identity/index.js":"output/Data.Identity/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js"}],"output/Type.Equality/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var TypeEquals = function TypeEquals(from, to) {
  this.from = from;
  this.to = to;
};

var to = function to(dict) {
  return dict.to;
};

var refl = new TypeEquals(function (a) {
  return a;
}, function (a) {
  return a;
});

var from = function from(dict) {
  return dict.from;
};

module.exports = {
  TypeEquals: TypeEquals,
  to: to,
  from: from,
  refl: refl
};
},{}],"output/Data.Tuple/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Bifoldable = require("../Data.Bifoldable/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Bitraversable = require("../Data.Bitraversable/index.js");

var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_Distributive = require("../Data.Distributive/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Maybe_First = require("../Data.Maybe.First/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Type_Equality = require("../Type.Equality/index.js");

var Tuple = function () {
  function Tuple(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Tuple.create = function (value0) {
    return function (value1) {
      return new Tuple(value0, value1);
    };
  };

  return Tuple;
}();

var uncurry = function uncurry(f) {
  return function (v) {
    return f(v.value0)(v.value1);
  };
};

var swap = function swap(v) {
  return new Tuple(v.value1, v.value0);
};

var snd = function snd(v) {
  return v.value1;
};

var showTuple = function showTuple(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (v) {
      return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
    });
  };
};

var semiringTuple = function semiringTuple(dictSemiring) {
  return function (dictSemiring1) {
    return new Data_Semiring.Semiring(function (v) {
      return function (v1) {
        return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
      };
    }, function (v) {
      return function (v1) {
        return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
      };
    }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
  };
};

var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
  return function (v1) {
    return new Tuple(v1.value0, v.value1);
  };
});

var semigroupTuple = function semigroupTuple(dictSemigroup) {
  return function (dictSemigroup1) {
    return new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
        return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
      };
    });
  };
};

var ringTuple = function ringTuple(dictRing) {
  return function (dictRing1) {
    return new Data_Ring.Ring(function () {
      return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
    }, function (v) {
      return function (v1) {
        return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
      };
    });
  };
};

var monoidTuple = function monoidTuple(dictMonoid) {
  return function (dictMonoid1) {
    return new Data_Monoid.Monoid(function () {
      return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
    }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
  };
};

var lookup = function lookup(dictFoldable) {
  return function (dictEq) {
    return function (a) {
      var $312 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
      var $313 = Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
        var $163 = Data_Eq.eq(dictEq)(a)(v.value0);

        if ($163) {
          return new Data_Maybe.Just(v.value1);
        }

        ;
        return Data_Maybe.Nothing.value;
      });
      return function ($314) {
        return $312($313($314));
      };
    };
  };
};

var heytingAlgebraTuple = function heytingAlgebraTuple(dictHeytingAlgebra) {
  return function (dictHeytingAlgebra1) {
    return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
      return function (v1) {
        return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
      };
    }, function (v) {
      return function (v1) {
        return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
      };
    }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
      return function (v1) {
        return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
      };
    }, function (v) {
      return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
    }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
  };
};

var functorTuple = new Data_Functor.Functor(function (f) {
  return function (m) {
    return new Tuple(m.value0, f(m.value1));
  };
});
var functorWithIndexTuple = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorTuple;
}, function (f) {
  return Data_Functor.map(functorTuple)(f(Data_Unit.unit));
});
var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));

var fst = function fst(v) {
  return v.value0;
};

var lazyTuple = function lazyTuple(dictLazy) {
  return function (dictLazy1) {
    return new Control_Lazy.Lazy(function (f) {
      return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
        return fst(f(Data_Unit.unit));
      }), Control_Lazy.defer(dictLazy1)(function (v) {
        return snd(f(Data_Unit.unit));
      }));
    });
  };
};

var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v.value1);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v.value1);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v.value1)(z);
    };
  };
});
var foldableWithIndexTuple = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableTuple;
}, function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(Data_Unit.unit)(v.value1);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(Data_Unit.unit)(z)(v.value1);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(Data_Unit.unit)(v.value1)(z);
    };
  };
});
var traversableTuple = new Data_Traversable.Traversable(function () {
  return foldableTuple;
}, function () {
  return functorTuple;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create(v.value0))(v.value1);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create(v.value0))(f(v.value1));
    };
  };
});
var traversableWithIndexTuple = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexTuple;
}, function () {
  return functorWithIndexTuple;
}, function () {
  return traversableTuple;
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create(v.value0))(f(Data_Unit.unit)(v.value1));
    };
  };
});
var foldable1Tuple = new Data_Semigroup_Foldable.Foldable1(function () {
  return foldableTuple;
}, function (dictSemigroup) {
  return function (v) {
    return v.value1;
  };
}, function (dictSemigroup) {
  return function (f) {
    return function (v) {
      return f(v.value1);
    };
  };
});
var traversable1Tuple = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1Tuple;
}, function () {
  return traversableTuple;
}, function (dictApply) {
  return function (v) {
    return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(v.value1);
  };
}, function (dictApply) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(f(v.value1));
    };
  };
});
var extendTuple = new Control_Extend.Extend(function () {
  return functorTuple;
}, function (f) {
  return function (v) {
    return new Tuple(v.value0, f(v));
  };
});

var eqTuple = function eqTuple(dictEq) {
  return function (dictEq1) {
    return new Data_Eq.Eq(function (x) {
      return function (y) {
        return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
      };
    });
  };
};

var ordTuple = function ordTuple(dictOrd) {
  return function (dictOrd1) {
    return new Data_Ord.Ord(function () {
      return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
    }, function (x) {
      return function (y) {
        var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);

        if (v instanceof Data_Ordering.LT) {
          return Data_Ordering.LT.value;
        }

        ;

        if (v instanceof Data_Ordering.GT) {
          return Data_Ordering.GT.value;
        }

        ;
        return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
      };
    });
  };
};

var eq1Tuple = function eq1Tuple(dictEq) {
  return new Data_Eq.Eq1(function (dictEq1) {
    return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
  });
};

var ord1Tuple = function ord1Tuple(dictOrd) {
  return new Data_Ord.Ord1(function () {
    return eq1Tuple(dictOrd.Eq0());
  }, function (dictOrd1) {
    return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
  });
};

var distributiveTuple = function distributiveTuple(dictTypeEquals) {
  return new Data_Distributive.Distributive(function () {
    return functorTuple;
  }, function (dictFunctor) {
    return Data_Distributive.collectDefault(distributiveTuple(dictTypeEquals))(dictFunctor);
  }, function (dictFunctor) {
    var $315 = Tuple.create(Type_Equality.from(dictTypeEquals)(Data_Unit.unit));
    var $316 = Data_Functor.map(dictFunctor)(snd);
    return function ($317) {
      return $315($316($317));
    };
  });
};

var curry = function curry(f) {
  return function (a) {
    return function (b) {
      return f(new Tuple(a, b));
    };
  };
};

var comonadTuple = new Control_Comonad.Comonad(function () {
  return extendTuple;
}, snd);

var commutativeRingTuple = function commutativeRingTuple(dictCommutativeRing) {
  return function (dictCommutativeRing1) {
    return new Data_CommutativeRing.CommutativeRing(function () {
      return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
    });
  };
};

var boundedTuple = function boundedTuple(dictBounded) {
  return function (dictBounded1) {
    return new Data_Bounded.Bounded(function () {
      return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
    }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
  };
};

var booleanAlgebraTuple = function booleanAlgebraTuple(dictBooleanAlgebra) {
  return function (dictBooleanAlgebra1) {
    return new Data_BooleanAlgebra.BooleanAlgebra(function () {
      return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
    });
  };
};

var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
  return function (g) {
    return function (v) {
      return new Tuple(f(v.value0), g(v.value1));
    };
  };
});
var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
  return function (f) {
    return function (g) {
      return function (v) {
        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
      };
    };
  };
}, function (f) {
  return function (g) {
    return function (z) {
      return function (v) {
        return g(f(z)(v.value0))(v.value1);
      };
    };
  };
}, function (f) {
  return function (g) {
    return function (z) {
      return function (v) {
        return f(v.value0)(g(v.value1)(z));
      };
    };
  };
});
var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
  return bifoldableTuple;
}, function () {
  return bifunctorTuple;
}, function (dictApplicative) {
  return function (v) {
    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create)(v.value0))(v.value1);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (g) {
      return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create)(f(v.value0)))(g(v.value1));
      };
    };
  };
});
var biapplyTuple = new Control_Biapply.Biapply(function () {
  return bifunctorTuple;
}, function (v) {
  return function (v1) {
    return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
  };
});
var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
  return biapplyTuple;
}, Tuple.create);

var applyTuple = function applyTuple(dictSemigroup) {
  return new Control_Apply.Apply(function () {
    return functorTuple;
  }, function (v) {
    return function (v1) {
      return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
    };
  });
};

var bindTuple = function bindTuple(dictSemigroup) {
  return new Control_Bind.Bind(function () {
    return applyTuple(dictSemigroup);
  }, function (v) {
    return function (f) {
      var v1 = f(v.value1);
      return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
    };
  });
};

var applicativeTuple = function applicativeTuple(dictMonoid) {
  return new Control_Applicative.Applicative(function () {
    return applyTuple(dictMonoid.Semigroup0());
  }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
};

var monadTuple = function monadTuple(dictMonoid) {
  return new Control_Monad.Monad(function () {
    return applicativeTuple(dictMonoid);
  }, function () {
    return bindTuple(dictMonoid.Semigroup0());
  });
};

module.exports = {
  Tuple: Tuple,
  fst: fst,
  snd: snd,
  curry: curry,
  uncurry: uncurry,
  swap: swap,
  lookup: lookup,
  showTuple: showTuple,
  eqTuple: eqTuple,
  eq1Tuple: eq1Tuple,
  ordTuple: ordTuple,
  ord1Tuple: ord1Tuple,
  boundedTuple: boundedTuple,
  semigroupoidTuple: semigroupoidTuple,
  semigroupTuple: semigroupTuple,
  monoidTuple: monoidTuple,
  semiringTuple: semiringTuple,
  ringTuple: ringTuple,
  commutativeRingTuple: commutativeRingTuple,
  heytingAlgebraTuple: heytingAlgebraTuple,
  booleanAlgebraTuple: booleanAlgebraTuple,
  functorTuple: functorTuple,
  functorWithIndexTuple: functorWithIndexTuple,
  invariantTuple: invariantTuple,
  bifunctorTuple: bifunctorTuple,
  applyTuple: applyTuple,
  biapplyTuple: biapplyTuple,
  applicativeTuple: applicativeTuple,
  biapplicativeTuple: biapplicativeTuple,
  bindTuple: bindTuple,
  monadTuple: monadTuple,
  extendTuple: extendTuple,
  comonadTuple: comonadTuple,
  lazyTuple: lazyTuple,
  foldableTuple: foldableTuple,
  foldable1Tuple: foldable1Tuple,
  foldableWithIndexTuple: foldableWithIndexTuple,
  bifoldableTuple: bifoldableTuple,
  traversableTuple: traversableTuple,
  traversable1Tuple: traversable1Tuple,
  traversableWithIndexTuple: traversableWithIndexTuple,
  bitraversableTuple: bitraversableTuple,
  distributiveTuple: distributiveTuple
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Biapplicative/index.js":"output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"output/Control.Biapply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Comonad/index.js":"output/Control.Comonad/index.js","../Control.Extend/index.js":"output/Control.Extend/index.js","../Control.Lazy/index.js":"output/Control.Lazy/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Semigroupoid/index.js":"output/Control.Semigroupoid/index.js","../Data.Bifoldable/index.js":"output/Data.Bifoldable/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Bitraversable/index.js":"output/Data.Bitraversable/index.js","../Data.BooleanAlgebra/index.js":"output/Data.BooleanAlgebra/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.CommutativeRing/index.js":"output/Data.CommutativeRing/index.js","../Data.Distributive/index.js":"output/Data.Distributive/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"output/Data.Functor.Invariant/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Maybe.First/index.js":"output/Data.Maybe.First/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Ring/index.js":"output/Data.Ring/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semigroup.Foldable/index.js":"output/Data.Semigroup.Foldable/index.js","../Data.Semigroup.Traversable/index.js":"output/Data.Semigroup.Traversable/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Type.Equality/index.js":"output/Type.Equality/index.js"}],"output/Control.Monad.State.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var MonadState = function MonadState(Monad0, state) {
  this.Monad0 = Monad0;
  this.state = state;
};

var state = function state(dict) {
  return dict.state;
};

var put = function put(dictMonadState) {
  return function (s) {
    return state(dictMonadState)(function (v) {
      return new Data_Tuple.Tuple(Data_Unit.unit, s);
    });
  };
};

var modify_ = function modify_(dictMonadState) {
  return function (f) {
    return state(dictMonadState)(function (s) {
      return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
    });
  };
};

var modify = function modify(dictMonadState) {
  return function (f) {
    return state(dictMonadState)(function (s) {
      var s$prime = f(s);
      return new Data_Tuple.Tuple(s$prime, s$prime);
    });
  };
};

var gets = function gets(dictMonadState) {
  return function (f) {
    return state(dictMonadState)(function (s) {
      return new Data_Tuple.Tuple(f(s), s);
    });
  };
};

var get = function get(dictMonadState) {
  return state(dictMonadState)(function (s) {
    return new Data_Tuple.Tuple(s, s);
  });
};

module.exports = {
  state: state,
  MonadState: MonadState,
  get: get,
  gets: gets,
  put: put,
  modify: modify,
  modify_: modify_
};
},{"../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/DOM.HTML.Indexed.InputType/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var InputButton = function () {
  function InputButton() {}

  ;
  InputButton.value = new InputButton();
  return InputButton;
}();

var InputCheckbox = function () {
  function InputCheckbox() {}

  ;
  InputCheckbox.value = new InputCheckbox();
  return InputCheckbox;
}();

var InputColor = function () {
  function InputColor() {}

  ;
  InputColor.value = new InputColor();
  return InputColor;
}();

var InputDate = function () {
  function InputDate() {}

  ;
  InputDate.value = new InputDate();
  return InputDate;
}();

var InputDatetimeLocal = function () {
  function InputDatetimeLocal() {}

  ;
  InputDatetimeLocal.value = new InputDatetimeLocal();
  return InputDatetimeLocal;
}();

var InputEmail = function () {
  function InputEmail() {}

  ;
  InputEmail.value = new InputEmail();
  return InputEmail;
}();

var InputFile = function () {
  function InputFile() {}

  ;
  InputFile.value = new InputFile();
  return InputFile;
}();

var InputHidden = function () {
  function InputHidden() {}

  ;
  InputHidden.value = new InputHidden();
  return InputHidden;
}();

var InputImage = function () {
  function InputImage() {}

  ;
  InputImage.value = new InputImage();
  return InputImage;
}();

var InputMonth = function () {
  function InputMonth() {}

  ;
  InputMonth.value = new InputMonth();
  return InputMonth;
}();

var InputNumber = function () {
  function InputNumber() {}

  ;
  InputNumber.value = new InputNumber();
  return InputNumber;
}();

var InputPassword = function () {
  function InputPassword() {}

  ;
  InputPassword.value = new InputPassword();
  return InputPassword;
}();

var InputRadio = function () {
  function InputRadio() {}

  ;
  InputRadio.value = new InputRadio();
  return InputRadio;
}();

var InputRange = function () {
  function InputRange() {}

  ;
  InputRange.value = new InputRange();
  return InputRange;
}();

var InputReset = function () {
  function InputReset() {}

  ;
  InputReset.value = new InputReset();
  return InputReset;
}();

var InputSearch = function () {
  function InputSearch() {}

  ;
  InputSearch.value = new InputSearch();
  return InputSearch;
}();

var InputSubmit = function () {
  function InputSubmit() {}

  ;
  InputSubmit.value = new InputSubmit();
  return InputSubmit;
}();

var InputTel = function () {
  function InputTel() {}

  ;
  InputTel.value = new InputTel();
  return InputTel;
}();

var InputText = function () {
  function InputText() {}

  ;
  InputText.value = new InputText();
  return InputText;
}();

var InputTime = function () {
  function InputTime() {}

  ;
  InputTime.value = new InputTime();
  return InputTime;
}();

var InputUrl = function () {
  function InputUrl() {}

  ;
  InputUrl.value = new InputUrl();
  return InputUrl;
}();

var InputWeek = function () {
  function InputWeek() {}

  ;
  InputWeek.value = new InputWeek();
  return InputWeek;
}();

var renderInputType = function renderInputType(v) {
  if (v instanceof InputButton) {
    return "button";
  }

  ;

  if (v instanceof InputCheckbox) {
    return "checkbox";
  }

  ;

  if (v instanceof InputColor) {
    return "color";
  }

  ;

  if (v instanceof InputDate) {
    return "date";
  }

  ;

  if (v instanceof InputDatetimeLocal) {
    return "datetime-local";
  }

  ;

  if (v instanceof InputEmail) {
    return "email";
  }

  ;

  if (v instanceof InputFile) {
    return "file";
  }

  ;

  if (v instanceof InputHidden) {
    return "hidden";
  }

  ;

  if (v instanceof InputImage) {
    return "image";
  }

  ;

  if (v instanceof InputMonth) {
    return "month";
  }

  ;

  if (v instanceof InputNumber) {
    return "number";
  }

  ;

  if (v instanceof InputPassword) {
    return "password";
  }

  ;

  if (v instanceof InputRadio) {
    return "radio";
  }

  ;

  if (v instanceof InputRange) {
    return "range";
  }

  ;

  if (v instanceof InputReset) {
    return "reset";
  }

  ;

  if (v instanceof InputSearch) {
    return "search";
  }

  ;

  if (v instanceof InputSubmit) {
    return "submit";
  }

  ;

  if (v instanceof InputTel) {
    return "tel";
  }

  ;

  if (v instanceof InputText) {
    return "text";
  }

  ;

  if (v instanceof InputTime) {
    return "time";
  }

  ;

  if (v instanceof InputUrl) {
    return "url";
  }

  ;

  if (v instanceof InputWeek) {
    return "week";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.InputType (line 28, column 19 - line 50, column 22): " + [v.constructor.name]);
};

module.exports = {
  InputButton: InputButton,
  InputCheckbox: InputCheckbox,
  InputColor: InputColor,
  InputDate: InputDate,
  InputDatetimeLocal: InputDatetimeLocal,
  InputEmail: InputEmail,
  InputFile: InputFile,
  InputHidden: InputHidden,
  InputImage: InputImage,
  InputMonth: InputMonth,
  InputNumber: InputNumber,
  InputPassword: InputPassword,
  InputRadio: InputRadio,
  InputRange: InputRange,
  InputReset: InputReset,
  InputSearch: InputSearch,
  InputSubmit: InputSubmit,
  InputTel: InputTel,
  InputText: InputText,
  InputTime: InputTime,
  InputUrl: InputUrl,
  InputWeek: InputWeek,
  renderInputType: renderInputType
};
},{}],"output/Data.Array/foreign.js":[function(require,module,exports) {
"use strict"; //------------------------------------------------------------------------------
// Array creation --------------------------------------------------------------
//------------------------------------------------------------------------------

exports.range = function (start) {
  return function (end) {
    var step = start > end ? -1 : 1;
    var result = new Array(step * (end - start) + 1);
    var i = start,
        n = 0;

    while (i !== end) {
      result[n++] = i;
      i += step;
    }

    result[n] = i;
    return result;
  };
};

var replicateFill = function replicateFill(count) {
  return function (value) {
    if (count < 1) {
      return [];
    }

    var result = new Array(count);
    return result.fill(value);
  };
};

var replicatePolyfill = function replicatePolyfill(count) {
  return function (value) {
    var result = [];
    var n = 0;

    for (var i = 0; i < count; i++) {
      result[n++] = value;
    }

    return result;
  };
}; // In browsers that have Array.prototype.fill we use it, as it's faster.


exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

exports.fromFoldableImpl = function () {
  function Cons(head, tail) {
    this.head = head;
    this.tail = tail;
  }

  var emptyList = {};

  function curryCons(head) {
    return function (tail) {
      return new Cons(head, tail);
    };
  }

  function listToArray(list) {
    var result = [];
    var count = 0;
    var xs = list;

    while (xs !== emptyList) {
      result[count++] = xs.head;
      xs = xs.tail;
    }

    return result;
  }

  return function (foldr) {
    return function (xs) {
      return listToArray(foldr(curryCons)(emptyList)(xs));
    };
  };
}(); //------------------------------------------------------------------------------
// Array size ------------------------------------------------------------------
//------------------------------------------------------------------------------


exports.length = function (xs) {
  return xs.length;
}; //------------------------------------------------------------------------------
// Extending arrays ------------------------------------------------------------
//------------------------------------------------------------------------------


exports.cons = function (e) {
  return function (l) {
    return [e].concat(l);
  };
};

exports.snoc = function (l) {
  return function (e) {
    var l1 = l.slice();
    l1.push(e);
    return l1;
  };
}; //------------------------------------------------------------------------------
// Non-indexed reads -----------------------------------------------------------
//------------------------------------------------------------------------------


exports["uncons'"] = function (empty) {
  return function (next) {
    return function (xs) {
      return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
    };
  };
}; //------------------------------------------------------------------------------
// Indexed operations ----------------------------------------------------------
//------------------------------------------------------------------------------


exports.indexImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return i < 0 || i >= xs.length ? nothing : just(xs[i]);
      };
    };
  };
};

exports.findIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (f(xs[i])) return just(i);
        }

        return nothing;
      };
    };
  };
};

exports.findLastIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = xs.length - 1; i >= 0; i--) {
          if (f(xs[i])) return just(i);
        }

        return nothing;
      };
    };
  };
};

exports._insertAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i > l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 0, a);
          return just(l1);
        };
      };
    };
  };
};

exports._deleteAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (l) {
        if (i < 0 || i >= l.length) return nothing;
        var l1 = l.slice();
        l1.splice(i, 1);
        return just(l1);
      };
    };
  };
};

exports._updateAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1[i] = a;
          return just(l1);
        };
      };
    };
  };
}; //------------------------------------------------------------------------------
// Transformations -------------------------------------------------------------
//------------------------------------------------------------------------------


exports.reverse = function (l) {
  return l.slice().reverse();
};

exports.concat = function (xss) {
  if (xss.length <= 10000) {
    // This method is faster, but it crashes on big arrays.
    // So we use it when can and fallback to simple variant otherwise.
    return Array.prototype.concat.apply([], xss);
  }

  var result = [];

  for (var i = 0, l = xss.length; i < l; i++) {
    var xs = xss[i];

    for (var j = 0, m = xs.length; j < m; j++) {
      result.push(xs[j]);
    }
  }

  return result;
};

exports.filter = function (f) {
  return function (xs) {
    return xs.filter(f);
  };
};

exports.partition = function (f) {
  return function (xs) {
    var yes = [];
    var no = [];

    for (var i = 0; i < xs.length; i++) {
      var x = xs[i];
      if (f(x)) yes.push(x);else no.push(x);
    }

    return {
      yes: yes,
      no: no
    };
  };
}; //------------------------------------------------------------------------------
// Sorting ---------------------------------------------------------------------
//------------------------------------------------------------------------------


exports.sortImpl = function (f) {
  return function (l) {
    return l.slice().sort(function (x, y) {
      return f(x)(y);
    });
  };
}; //------------------------------------------------------------------------------
// Subarrays -------------------------------------------------------------------
//------------------------------------------------------------------------------


exports.slice = function (s) {
  return function (e) {
    return function (l) {
      return l.slice(s, e);
    };
  };
};

exports.take = function (n) {
  return function (l) {
    return n < 1 ? [] : l.slice(0, n);
  };
};

exports.drop = function (n) {
  return function (l) {
    return n < 1 ? l : l.slice(n);
  };
}; //------------------------------------------------------------------------------
// Zipping ---------------------------------------------------------------------
//------------------------------------------------------------------------------


exports.zipWith = function (f) {
  return function (xs) {
    return function (ys) {
      var l = xs.length < ys.length ? xs.length : ys.length;
      var result = new Array(l);

      for (var i = 0; i < l; i++) {
        result[i] = f(xs[i])(ys[i]);
      }

      return result;
    };
  };
}; //------------------------------------------------------------------------------
// Partial ---------------------------------------------------------------------
//------------------------------------------------------------------------------


exports.unsafeIndexImpl = function (xs) {
  return function (n) {
    return xs[n];
  };
};
},{}],"output/Data.Either/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Bifoldable = require("../Data.Bifoldable/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Bitraversable = require("../Data.Bitraversable/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Left = function () {
  function Left(value0) {
    this.value0 = value0;
  }

  ;

  Left.create = function (value0) {
    return new Left(value0);
  };

  return Left;
}();

var Right = function () {
  function Right(value0) {
    this.value0 = value0;
  }

  ;

  Right.create = function (value0) {
    return new Right(value0);
  };

  return Right;
}();

var showEither = function showEither(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (v) {
      if (v instanceof Left) {
        return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
      }

      ;

      if (v instanceof Right) {
        return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 163, column 1 - line 165, column 46): " + [v.constructor.name]);
    });
  };
};

var note$prime = function note$prime(f) {
  return Data_Maybe["maybe'"](function ($198) {
    return Left.create(f($198));
  })(Right.create);
};

var note = function note(a) {
  return Data_Maybe.maybe(new Left(a))(Right.create);
};

var functorEither = new Data_Functor.Functor(function (f) {
  return function (m) {
    if (m instanceof Left) {
      return new Left(m.value0);
    }

    ;

    if (m instanceof Right) {
      return new Right(f(m.value0));
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [m.constructor.name]);
  };
});
var functorWithIndexEither = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorEither;
}, function (f) {
  return Data_Functor.map(functorEither)(f(Data_Unit.unit));
});
var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));

var fromRight = function fromRight(dictPartial) {
  return function (v) {
    if (v instanceof Right) {
      return v.value0;
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [v.constructor.name]);
  };
};

var fromLeft = function fromLeft(dictPartial) {
  return function (v) {
    if (v instanceof Left) {
      return v.value0;
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 256, column 1 - line 256, column 51): " + [v.constructor.name]);
  };
};

var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      if (v instanceof Left) {
        return Data_Monoid.mempty(dictMonoid);
      }

      ;

      if (v instanceof Right) {
        return f(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [f.constructor.name, v.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Left) {
        return z;
      }

      ;

      if (v1 instanceof Right) {
        return v(z)(v1.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Left) {
        return z;
      }

      ;

      if (v1 instanceof Right) {
        return v(v1.value0)(z);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
});
var foldableWithIndexEither = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableEither;
}, function (dictMonoid) {
  return function (f) {
    return function (v) {
      if (v instanceof Left) {
        return Data_Monoid.mempty(dictMonoid);
      }

      ;

      if (v instanceof Right) {
        return f(Data_Unit.unit)(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [f.constructor.name, v.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Left) {
        return z;
      }

      ;

      if (v1 instanceof Right) {
        return v(Data_Unit.unit)(z)(v1.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Left) {
        return z;
      }

      ;

      if (v1 instanceof Right) {
        return v(Data_Unit.unit)(v1.value0)(z);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
});
var traversableEither = new Data_Traversable.Traversable(function () {
  return foldableEither;
}, function () {
  return functorEither;
}, function (dictApplicative) {
  return function (v) {
    if (v instanceof Left) {
      return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
    }

    ;

    if (v instanceof Right) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 215, column 36): " + [v.constructor.name]);
  };
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v1 instanceof Left) {
        return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
      }

      ;

      if (v1 instanceof Right) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v(v1.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 215, column 36): " + [v.constructor.name, v1.constructor.name]);
    };
  };
});
var traversableWithIndexEither = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexEither;
}, function () {
  return functorWithIndexEither;
}, function () {
  return traversableEither;
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v1 instanceof Left) {
        return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
      }

      ;

      if (v1 instanceof Right) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v(Data_Unit.unit)(v1.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 217, column 1 - line 219, column 53): " + [v.constructor.name, v1.constructor.name]);
    };
  };
});
var extendEither = new Control_Extend.Extend(function () {
  return functorEither;
}, function (v) {
  return function (v1) {
    if (v1 instanceof Left) {
      return new Left(v1.value0);
    }

    ;
    return new Right(v(v1));
  };
});

var eqEither = function eqEither(dictEq) {
  return function (dictEq1) {
    return new Data_Eq.Eq(function (x) {
      return function (y) {
        if (x instanceof Left && y instanceof Left) {
          return Data_Eq.eq(dictEq)(x.value0)(y.value0);
        }

        ;

        if (x instanceof Right && y instanceof Right) {
          return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
        }

        ;
        return false;
      };
    });
  };
};

var ordEither = function ordEither(dictOrd) {
  return function (dictOrd1) {
    return new Data_Ord.Ord(function () {
      return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
    }, function (x) {
      return function (y) {
        if (x instanceof Left && y instanceof Left) {
          return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
        }

        ;

        if (x instanceof Left) {
          return Data_Ordering.LT.value;
        }

        ;

        if (y instanceof Left) {
          return Data_Ordering.GT.value;
        }

        ;

        if (x instanceof Right && y instanceof Right) {
          return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 179, column 1 - line 179, column 64): " + [x.constructor.name, y.constructor.name]);
      };
    });
  };
};

var eq1Either = function eq1Either(dictEq) {
  return new Data_Eq.Eq1(function (dictEq1) {
    return Data_Eq.eq(eqEither(dictEq)(dictEq1));
  });
};

var ord1Either = function ord1Either(dictOrd) {
  return new Data_Ord.Ord1(function () {
    return eq1Either(dictOrd.Eq0());
  }, function (dictOrd1) {
    return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
  });
};

var either = function either(v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Left) {
        return v(v2.value0);
      }

      ;

      if (v2 instanceof Right) {
        return v1(v2.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};

var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));

var choose = function choose(dictAlt) {
  return function (a) {
    return function (b) {
      return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
    };
  };
};

var boundedEither = function boundedEither(dictBounded) {
  return function (dictBounded1) {
    return new Data_Bounded.Bounded(function () {
      return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
    }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
  };
};

var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Left) {
        return new Left(v(v2.value0));
      }

      ;

      if (v2 instanceof Right) {
        return new Right(v1(v2.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
});
var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
  return function (v) {
    return function (v1) {
      return function (v2) {
        if (v2 instanceof Left) {
          return v(v2.value0);
        }

        ;

        if (v2 instanceof Right) {
          return v1(v2.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
}, function (v) {
  return function (v1) {
    return function (z) {
      return function (v2) {
        if (v2 instanceof Left) {
          return v(z)(v2.value0);
        }

        ;

        if (v2 instanceof Right) {
          return v1(z)(v2.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name]);
      };
    };
  };
}, function (v) {
  return function (v1) {
    return function (z) {
      return function (v2) {
        if (v2 instanceof Left) {
          return v(v2.value0)(z);
        }

        ;

        if (v2 instanceof Right) {
          return v1(v2.value0)(z);
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name]);
      };
    };
  };
});
var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
  return bifoldableEither;
}, function () {
  return bifunctorEither;
}, function (dictApplicative) {
  return function (v) {
    if (v instanceof Left) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Left.create)(v.value0);
    }

    ;

    if (v instanceof Right) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 225, column 37): " + [v.constructor.name]);
  };
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      return function (v2) {
        if (v2 instanceof Left) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Left.create)(v(v2.value0));
        }

        ;

        if (v2 instanceof Right) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v1(v2.value0));
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 225, column 37): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
});
var applyEither = new Control_Apply.Apply(function () {
  return functorEither;
}, function (v) {
  return function (v1) {
    if (v instanceof Left) {
      return new Left(v.value0);
    }

    ;

    if (v instanceof Right) {
      return Data_Functor.map(functorEither)(v.value0)(v1);
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [v.constructor.name, v1.constructor.name]);
  };
});
var bindEither = new Control_Bind.Bind(function () {
  return applyEither;
}, either(function (e) {
  return function (v) {
    return new Left(e);
  };
})(function (a) {
  return function (f) {
    return f(a);
  };
}));

var semigroupEither = function semigroupEither(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (x) {
    return function (y) {
      return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
    };
  });
};

var applicativeEither = new Control_Applicative.Applicative(function () {
  return applyEither;
}, Right.create);
var monadEither = new Control_Monad.Monad(function () {
  return applicativeEither;
}, function () {
  return bindEither;
});
var altEither = new Control_Alt.Alt(function () {
  return functorEither;
}, function (v) {
  return function (v1) {
    if (v instanceof Left) {
      return v1;
    }

    ;
    return v;
  };
});
module.exports = {
  Left: Left,
  Right: Right,
  either: either,
  choose: choose,
  isLeft: isLeft,
  isRight: isRight,
  fromLeft: fromLeft,
  fromRight: fromRight,
  note: note,
  "note'": note$prime,
  hush: hush,
  functorEither: functorEither,
  functorWithIndexEither: functorWithIndexEither,
  invariantEither: invariantEither,
  bifunctorEither: bifunctorEither,
  applyEither: applyEither,
  applicativeEither: applicativeEither,
  altEither: altEither,
  bindEither: bindEither,
  monadEither: monadEither,
  extendEither: extendEither,
  showEither: showEither,
  eqEither: eqEither,
  eq1Either: eq1Either,
  ordEither: ordEither,
  ord1Either: ord1Either,
  boundedEither: boundedEither,
  foldableEither: foldableEither,
  foldableWithIndexEither: foldableWithIndexEither,
  bifoldableEither: bifoldableEither,
  traversableEither: traversableEither,
  traversableWithIndexEither: traversableWithIndexEither,
  bitraversableEither: bitraversableEither,
  semigroupEither: semigroupEither
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Extend/index.js":"output/Control.Extend/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Bifoldable/index.js":"output/Data.Bifoldable/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Bitraversable/index.js":"output/Data.Bitraversable/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"output/Data.Functor.Invariant/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Effect/foreign.js":[function(require,module,exports) {
"use strict";

exports.pureE = function (a) {
  return function () {
    return a;
  };
};

exports.bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.untilE = function (f) {
  return function () {
    while (!f()) {
      ;
    }

    return {};
  };
};

exports.whileE = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }

      return {};
    };
  };
};

exports.forE = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreachE = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};
},{}],"output/Effect/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var monadEffect = new Control_Monad.Monad(function () {
  return applicativeEffect;
}, function () {
  return bindEffect;
});
var bindEffect = new Control_Bind.Bind(function () {
  return applyEffect;
}, $foreign.bindE);
var applyEffect = new Control_Apply.Apply(function () {
  return functorEffect;
}, Control_Monad.ap(monadEffect));
var applicativeEffect = new Control_Applicative.Applicative(function () {
  return applyEffect;
}, $foreign.pureE);
var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));

var semigroupEffect = function semigroupEffect(dictSemigroup) {
  return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
};

var monoidEffect = function monoidEffect(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupEffect(dictMonoid.Semigroup0());
  }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
};

module.exports = {
  functorEffect: functorEffect,
  applyEffect: applyEffect,
  applicativeEffect: applicativeEffect,
  bindEffect: bindEffect,
  monadEffect: monadEffect,
  semigroupEffect: semigroupEffect,
  monoidEffect: monoidEffect,
  untilE: $foreign.untilE,
  whileE: $foreign.whileE,
  forE: $foreign.forE,
  foreachE: $foreign.foreachE
};
},{"./foreign.js":"output/Effect/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js"}],"output/Effect.Ref/foreign.js":[function(require,module,exports) {
"use strict";

exports.new = function (val) {
  return function () {
    return {
      value: val
    };
  };
};

exports.read = function (ref) {
  return function () {
    return ref.value;
  };
};

exports["modify'"] = function (f) {
  return function (ref) {
    return function () {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

exports.write = function (val) {
  return function (ref) {
    return function () {
      ref.value = val;
      return {};
    };
  };
};
},{}],"output/Effect.Ref/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Effect = require("../Effect/index.js");

var modify = function modify(f) {
  return $foreign["modify'"](function (s) {
    var s$prime = f(s);
    return {
      state: s$prime,
      value: s$prime
    };
  });
};

var modify_ = function modify_(f) {
  return function (s) {
    return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
  };
};

module.exports = {
  modify: modify,
  modify_: modify_,
  "new": $foreign["new"],
  read: $foreign.read,
  "modify'": $foreign["modify'"],
  write: $foreign.write
};
},{"./foreign.js":"output/Effect.Ref/foreign.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Effect/index.js":"output/Effect/index.js"}],"output/Control.Monad.Rec.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var Loop = function () {
  function Loop(value0) {
    this.value0 = value0;
  }

  ;

  Loop.create = function (value0) {
    return new Loop(value0);
  };

  return Loop;
}();

var Done = function () {
  function Done(value0) {
    this.value0 = value0;
  }

  ;

  Done.create = function (value0) {
    return new Done(value0);
  };

  return Done;
}();

var MonadRec = function MonadRec(Monad0, tailRecM) {
  this.Monad0 = Monad0;
  this.tailRecM = tailRecM;
};

var tailRecM = function tailRecM(dict) {
  return dict.tailRecM;
};

var tailRecM2 = function tailRecM2(dictMonadRec) {
  return function (f) {
    return function (a) {
      return function (b) {
        return tailRecM(dictMonadRec)(function (o) {
          return f(o.a)(o.b);
        })({
          a: a,
          b: b
        });
      };
    };
  };
};

var tailRecM3 = function tailRecM3(dictMonadRec) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return tailRecM(dictMonadRec)(function (o) {
            return f(o.a)(o.b)(o.c);
          })({
            a: a,
            b: b,
            c: c
          });
        };
      };
    };
  };
};

var untilJust = function untilJust(dictMonadRec) {
  return function (m) {
    return tailRecM(dictMonadRec)(function (v) {
      return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(m)(function (v1) {
        if (v1 instanceof Data_Maybe.Nothing) {
          return new Loop(Data_Unit.unit);
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          return new Done(v1.value0);
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 155, column 43 - line 157, column 19): " + [v1.constructor.name]);
      });
    })(Data_Unit.unit);
  };
};

var whileJust = function whileJust(dictMonoid) {
  return function (dictMonadRec) {
    return function (m) {
      return tailRecM(dictMonadRec)(function (v) {
        return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(m)(function (v1) {
          if (v1 instanceof Data_Maybe.Nothing) {
            return new Done(v);
          }

          ;

          if (v1 instanceof Data_Maybe.Just) {
            return Loop.create(Data_Semigroup.append(dictMonoid.Semigroup0())(v)(v1.value0));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 148, column 45 - line 150, column 26): " + [v1.constructor.name]);
        });
      })(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var tailRec = function tailRec(f) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Loop) {
        $copy_v = f(v.value0);
        return;
      }

      ;

      if (v instanceof Done) {
        $tco_done = true;
        return v.value0;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [v.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return function ($58) {
    return go(f($58));
  };
};

var monadRecMaybe = new MonadRec(function () {
  return Data_Maybe.monadMaybe;
}, function (f) {
  return function (a0) {
    var g = function g(v) {
      if (v instanceof Data_Maybe.Nothing) {
        return new Done(Data_Maybe.Nothing.value);
      }

      ;

      if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {
        return new Loop(f(v.value0.value0));
      }

      ;

      if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {
        return new Done(new Data_Maybe.Just(v.value0.value0));
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 129, column 7 - line 129, column 31): " + [v.constructor.name]);
    };

    return tailRec(g)(f(a0));
  };
});
var monadRecIdentity = new MonadRec(function () {
  return Data_Identity.monadIdentity;
}, function (f) {
  var runIdentity = function runIdentity(v) {
    return v;
  };

  var $59 = tailRec(function ($61) {
    return runIdentity(f($61));
  });
  return function ($60) {
    return Data_Identity.Identity($59($60));
  };
});
var monadRecFunction = new MonadRec(function () {
  return Control_Monad.monadFn;
}, function (f) {
  return function (a0) {
    return function (e) {
      return tailRec(function (a) {
        return f(a)(e);
      })(a0);
    };
  };
});
var monadRecEither = new MonadRec(function () {
  return Data_Either.monadEither;
}, function (f) {
  return function (a0) {
    var g = function g(v) {
      if (v instanceof Data_Either.Left) {
        return new Done(new Data_Either.Left(v.value0));
      }

      ;

      if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
        return new Loop(f(v.value0.value0));
      }

      ;

      if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
        return new Done(new Data_Either.Right(v.value0.value0));
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [v.constructor.name]);
    };

    return tailRec(g)(f(a0));
  };
});
var monadRecEffect = new MonadRec(function () {
  return Effect.monadEffect;
}, function (f) {
  return function (a) {
    var fromDone = function fromDone(v) {
      if (v instanceof Done) {
        return v.value0;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [v.constructor.name]);
    };

    return function __do() {
      var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();

      (function () {
        while (!function __do() {
          var v = Effect_Ref.read(r)();

          if (v instanceof Loop) {
            var e = f(v.value0)();
            Effect_Ref.write(e)(r)();
            return false;
          }

          ;

          if (v instanceof Done) {
            return true;
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [v.constructor.name]);
        }()) {}

        ;
        return {};
      })();

      return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
    };
  };
});
var functorStep = new Data_Functor.Functor(function (f) {
  return function (m) {
    if (m instanceof Loop) {
      return new Loop(m.value0);
    }

    ;

    if (m instanceof Done) {
      return new Done(f(m.value0));
    }

    ;
    throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 1 - line 27, column 48): " + [m.constructor.name]);
  };
});

var forever = function forever(dictMonadRec) {
  return function (ma) {
    return tailRecM(dictMonadRec)(function (u) {
      return Data_Functor.voidRight(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(new Loop(u))(ma);
    })(Data_Unit.unit);
  };
};

var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Loop) {
        return new Loop(v(v2.value0));
      }

      ;

      if (v2 instanceof Done) {
        return new Done(v1(v2.value0));
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
});
module.exports = {
  Loop: Loop,
  Done: Done,
  MonadRec: MonadRec,
  tailRec: tailRec,
  tailRecM: tailRecM,
  tailRecM2: tailRecM2,
  tailRecM3: tailRecM3,
  forever: forever,
  whileJust: whileJust,
  untilJust: untilJust,
  functorStep: functorStep,
  bifunctorStep: bifunctorStep,
  monadRecIdentity: monadRecIdentity,
  monadRecEffect: monadRecEffect,
  monadRecFunction: monadRecFunction,
  monadRecEither: monadRecEither,
  monadRecMaybe: monadRecMaybe
};
},{"../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Identity/index.js":"output/Data.Identity/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect/index.js":"output/Effect/index.js","../Effect.Ref/index.js":"output/Effect.Ref/index.js"}],"output/Control.Monad.ST.Internal/foreign.js":[function(require,module,exports) {
"use strict";

exports.map_ = function (f) {
  return function (a) {
    return function () {
      return f(a());
    };
  };
};

exports.pure_ = function (a) {
  return function () {
    return a;
  };
};

exports.bind_ = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.run = function (f) {
  return f();
};

exports["while"] = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
    };
  };
};

exports["for"] = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreach = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

exports.new = function (val) {
  return function () {
    return {
      value: val
    };
  };
};

exports.read = function (ref) {
  return function () {
    return ref.value;
  };
};

exports["modify'"] = function (f) {
  return function (ref) {
    return function () {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

exports.write = function (a) {
  return function (ref) {
    return function () {
      return ref.value = a; // eslint-disable-line no-return-assign
    };
  };
};
},{}],"output/Control.Monad.ST.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var modify = function modify(f) {
  return $foreign["modify'"](function (s) {
    var s$prime = f(s);
    return {
      state: s$prime,
      value: s$prime
    };
  });
};

var functorST = new Data_Functor.Functor($foreign.map_);
var monadST = new Control_Monad.Monad(function () {
  return applicativeST;
}, function () {
  return bindST;
});
var bindST = new Control_Bind.Bind(function () {
  return applyST;
}, $foreign.bind_);
var applyST = new Control_Apply.Apply(function () {
  return functorST;
}, Control_Monad.ap(monadST));
var applicativeST = new Control_Applicative.Applicative(function () {
  return applyST;
}, $foreign.pure_);
var monadRecST = new Control_Monad_Rec_Class.MonadRec(function () {
  return monadST;
}, function (f) {
  return function (a) {
    var isLooping = function isLooping(v) {
      if (v instanceof Control_Monad_Rec_Class.Loop) {
        return true;
      }

      ;
      return false;
    };

    var fromDone = function fromDone(v) {
      if (v instanceof Control_Monad_Rec_Class.Done) {
        return v.value0;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 54, column 32 - line 54, column 46): " + [v.constructor.name]);
    };

    return Control_Bind.bind(bindST)(Control_Bind.bindFlipped(bindST)($foreign["new"])(f(a)))(function (r) {
      return Control_Bind.discard(Control_Bind.discardUnit)(bindST)($foreign["while"](Data_Functor.map(functorST)(isLooping)($foreign.read(r)))(Control_Bind.bind(bindST)($foreign.read(r))(function (v) {
        if (v instanceof Control_Monad_Rec_Class.Loop) {
          return Control_Bind.bind(bindST)(f(v.value0))(function (e) {
            return Data_Functor["void"](functorST)($foreign.write(e)(r));
          });
        }

        ;

        if (v instanceof Control_Monad_Rec_Class.Done) {
          return Control_Applicative.pure(applicativeST)(Data_Unit.unit);
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 46, column 18 - line 50, column 28): " + [v.constructor.name]);
      })))(function () {
        return Data_Functor.map(functorST)(fromDone)($foreign.read(r));
      });
    });
  };
});
module.exports = {
  modify: modify,
  functorST: functorST,
  applyST: applyST,
  applicativeST: applicativeST,
  bindST: bindST,
  monadST: monadST,
  monadRecST: monadRecST,
  map_: $foreign.map_,
  pure_: $foreign.pure_,
  bind_: $foreign.bind_,
  run: $foreign.run,
  "while": $foreign["while"],
  "for": $foreign["for"],
  foreach: $foreign.foreach,
  "new": $foreign["new"],
  read: $foreign.read,
  "modify'": $foreign["modify'"],
  write: $foreign.write
};
},{"./foreign.js":"output/Control.Monad.ST.Internal/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Array.ST/foreign.js":[function(require,module,exports) {
"use strict";

exports.empty = function () {
  return [];
};

exports.peekImpl = function (just) {
  return function (nothing) {
    return function (i) {
      return function (xs) {
        return function () {
          return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
        };
      };
    };
  };
};

exports.poke = function (i) {
  return function (a) {
    return function (xs) {
      return function () {
        var ret = i >= 0 && i < xs.length;
        if (ret) xs[i] = a;
        return ret;
      };
    };
  };
};

exports.popImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function () {
        return xs.length > 0 ? just(xs.pop()) : nothing;
      };
    };
  };
};

exports.pushAll = function (as) {
  return function (xs) {
    return function () {
      return xs.push.apply(xs, as);
    };
  };
};

exports.shiftImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function () {
        return xs.length > 0 ? just(xs.shift()) : nothing;
      };
    };
  };
};

exports.unshiftAll = function (as) {
  return function (xs) {
    return function () {
      return xs.unshift.apply(xs, as);
    };
  };
};

exports.splice = function (i) {
  return function (howMany) {
    return function (bs) {
      return function (xs) {
        return function () {
          return xs.splice.apply(xs, [i, howMany].concat(bs));
        };
      };
    };
  };
};

exports.unsafeFreeze = function (xs) {
  return function () {
    return xs;
  };
};

exports.unsafeThaw = function (xs) {
  return function () {
    return xs;
  };
};

function copyImpl(xs) {
  return function () {
    return xs.slice();
  };
}

exports.freeze = copyImpl;
exports.thaw = copyImpl;

exports.sortByImpl = function (comp) {
  return function (xs) {
    return function () {
      return xs.sort(function (x, y) {
        return comp(x)(y);
      });
    };
  };
};

exports.toAssocArray = function (xs) {
  return function () {
    var n = xs.length;
    var as = new Array(n);

    for (var i = 0; i < n; i++) {
      as[i] = {
        value: xs[i],
        index: i
      };
    }

    return as;
  };
};
},{}],"output/Data.Array.ST/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var withArray = function withArray(f) {
  return function (xs) {
    return function __do() {
      var result = $foreign.thaw(xs)();
      f(result)();
      return $foreign.unsafeFreeze(result)();
    };
  };
};

var unshift = function unshift(a) {
  return $foreign.unshiftAll([a]);
};

var sortBy = function sortBy(comp) {
  var comp$prime = function comp$prime(x) {
    return function (y) {
      var v = comp(x)(y);

      if (v instanceof Data_Ordering.GT) {
        return 1;
      }

      ;

      if (v instanceof Data_Ordering.EQ) {
        return 0;
      }

      ;

      if (v instanceof Data_Ordering.LT) {
        return -1 | 0;
      }

      ;
      throw new Error("Failed pattern match at Data.Array.ST (line 105, column 15 - line 108, column 13): " + [v.constructor.name]);
    };
  };

  return $foreign.sortByImpl(comp$prime);
};

var sortWith = function sortWith(dictOrd) {
  return function (f) {
    return sortBy(Data_Ord.comparing(dictOrd)(f));
  };
};

var sort = function sort(dictOrd) {
  return sortBy(Data_Ord.compare(dictOrd));
};

var shift = $foreign.shiftImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var run = function run(st) {
  return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(st)($foreign.unsafeFreeze)();
};

var push = function push(a) {
  return $foreign.pushAll([a]);
};

var pop = $foreign.popImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var modify = function modify(i) {
  return function (f) {
    return function (xs) {
      return function __do() {
        var entry = peek(i)(xs)();

        if (entry instanceof Data_Maybe.Just) {
          return $foreign.poke(i)(f(entry.value0))(xs)();
        }

        ;

        if (entry instanceof Data_Maybe.Nothing) {
          return false;
        }

        ;
        throw new Error("Failed pattern match at Data.Array.ST (line 188, column 3 - line 190, column 26): " + [entry.constructor.name]);
      };
    };
  };
};

module.exports = {
  run: run,
  withArray: withArray,
  peek: peek,
  modify: modify,
  pop: pop,
  push: push,
  shift: shift,
  unshift: unshift,
  sort: sort,
  sortBy: sortBy,
  sortWith: sortWith,
  empty: $foreign.empty,
  poke: $foreign.poke,
  pushAll: $foreign.pushAll,
  unshiftAll: $foreign.unshiftAll,
  splice: $foreign.splice,
  freeze: $foreign.freeze,
  thaw: $foreign.thaw,
  unsafeFreeze: $foreign.unsafeFreeze,
  unsafeThaw: $foreign.unsafeThaw,
  toAssocArray: $foreign.toAssocArray
};
},{"./foreign.js":"output/Data.Array.ST/foreign.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad.ST.Internal/index.js":"output/Control.Monad.ST.Internal/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js"}],"output/Data.Array.ST.Iterator/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");

var Data_Array_ST = require("../Data.Array.ST/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Iterator = function () {
  function Iterator(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Iterator.create = function (value0) {
    return function (value1) {
      return new Iterator(value0, value1);
    };
  };

  return Iterator;
}();

var peek = function peek(v) {
  return function __do() {
    var i = Control_Monad_ST_Internal.read(v.value1)();
    return v.value0(i);
  };
};

var next = function next(v) {
  return function __do() {
    var i = Control_Monad_ST_Internal.read(v.value1)();
    Control_Monad_ST_Internal.modify(function (v1) {
      return v1 + 1 | 0;
    })(v.value1)();
    return v.value0(i);
  };
};

var pushWhile = function pushWhile(p) {
  return function (iter) {
    return function (array) {
      return function __do() {
        var $$break = Control_Monad_ST_Internal["new"](false)();

        while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
          (function __do() {
            var mx = peek(iter)();

            if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
              Data_Array_ST.push(mx.value0)(array)();
              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
            }

            ;
            return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
          })();
        }

        ;
        return {};
      };
    };
  };
};

var pushAll = pushWhile(Data_Function["const"](true));

var iterator = function iterator(f) {
  return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
};

var iterate = function iterate(iter) {
  return function (f) {
    return function __do() {
      var $$break = Control_Monad_ST_Internal["new"](false)();

      while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
        (function __do() {
          var mx = next(iter)();

          if (mx instanceof Data_Maybe.Just) {
            return f(mx.value0)();
          }

          ;

          if (mx instanceof Data_Maybe.Nothing) {
            return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
          }

          ;
          throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [mx.constructor.name]);
        })();
      }

      ;
      return {};
    };
  };
};

var exhausted = function () {
  var $13 = Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_Maybe.isNothing);
  return function ($14) {
    return $13(peek($14));
  };
}();

module.exports = {
  iterator: iterator,
  iterate: iterate,
  next: next,
  peek: peek,
  exhausted: exhausted,
  pushWhile: pushWhile,
  pushAll: pushAll
};
},{"../Control.Monad.ST.Internal/index.js":"output/Control.Monad.ST.Internal/index.js","../Data.Array.ST/index.js":"output/Data.Array.ST/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js"}],"output/Data.Unfoldable/foreign.js":[function(require,module,exports) {
"use strict";

exports.unfoldrArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;

            while (true) {
              // eslint-disable-line no-constant-condition
              var maybe = f(value);
              if (isNothing(maybe)) return result;
              var tuple = fromJust(maybe);
              result.push(fst(tuple));
              value = snd(tuple);
            }
          };
        };
      };
    };
  };
};
},{}],"output/Data.Unfoldable1/foreign.js":[function(require,module,exports) {
"use strict";

exports.unfoldr1ArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;

            while (true) {
              // eslint-disable-line no-constant-condition
              var tuple = f(value);
              result.push(fst(tuple));
              var maybe = snd(tuple);
              if (isNothing(maybe)) return result;
              value = fromJust(maybe);
            }
          };
        };
      };
    };
  };
};
},{}],"output/Data.Unfoldable1/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Unfoldable1 = function Unfoldable1(unfoldr1) {
  this.unfoldr1 = unfoldr1;
};

var unfoldr1 = function unfoldr1(dict) {
  return dict.unfoldr1;
};

var unfoldable1Maybe = new Unfoldable1(function (f) {
  return function (b) {
    return new Data_Maybe.Just(Data_Tuple.fst(f(b)));
  };
});
var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));

var replicate1 = function replicate1(dictUnfoldable1) {
  return function (n) {
    return function (v) {
      var step = function step(i) {
        if (i <= 0) {
          return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
        }

        ;

        if (Data_Boolean.otherwise) {
          return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
        }

        ;
        throw new Error("Failed pattern match at Data.Unfoldable1 (line 67, column 5 - line 67, column 39): " + [i.constructor.name]);
      };

      return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
    };
  };
};

var replicate1A = function replicate1A(dictApply) {
  return function (dictUnfoldable1) {
    return function (dictTraversable1) {
      return function (n) {
        return function (m) {
          return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
        };
      };
    };
  };
};

var singleton = function singleton(dictUnfoldable1) {
  return replicate1(dictUnfoldable1)(1);
};

var range = function range(dictUnfoldable1) {
  return function (start) {
    return function (end) {
      var go = function go(delta) {
        return function (i) {
          var i$prime = i + delta | 0;
          return new Data_Tuple.Tuple(i, function () {
            var $8 = i === end;

            if ($8) {
              return Data_Maybe.Nothing.value;
            }

            ;
            return new Data_Maybe.Just(i$prime);
          }());
        };
      };

      var delta = function () {
        var $9 = end >= start;

        if ($9) {
          return 1;
        }

        ;
        return -1 | 0;
      }();

      return unfoldr1(dictUnfoldable1)(go(delta))(start);
    };
  };
};

module.exports = {
  Unfoldable1: Unfoldable1,
  unfoldr1: unfoldr1,
  replicate1: replicate1,
  replicate1A: replicate1A,
  singleton: singleton,
  range: range,
  unfoldable1Array: unfoldable1Array,
  unfoldable1Maybe: unfoldable1Maybe
};
},{"./foreign.js":"output/Data.Unfoldable1/foreign.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Semigroup.Traversable/index.js":"output/Data.Semigroup.Traversable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js"}],"output/Data.Unfoldable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Unfoldable = function Unfoldable(Unfoldable10, unfoldr) {
  this.Unfoldable10 = Unfoldable10;
  this.unfoldr = unfoldr;
};

var unfoldr = function unfoldr(dict) {
  return dict.unfoldr;
};

var unfoldableMaybe = new Unfoldable(function () {
  return Data_Unfoldable1.unfoldable1Maybe;
}, function (f) {
  return function (b) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(f(b));
  };
});
var unfoldableArray = new Unfoldable(function () {
  return Data_Unfoldable1.unfoldable1Array;
}, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));

var replicate = function replicate(dictUnfoldable) {
  return function (n) {
    return function (v) {
      var step = function step(i) {
        var $7 = i <= 0;

        if ($7) {
          return Data_Maybe.Nothing.value;
        }

        ;
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
      };

      return unfoldr(dictUnfoldable)(step)(n);
    };
  };
};

var replicateA = function replicateA(dictApplicative) {
  return function (dictUnfoldable) {
    return function (dictTraversable) {
      return function (n) {
        return function (m) {
          return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
        };
      };
    };
  };
};

var none = function none(dictUnfoldable) {
  return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
};

var fromMaybe = function fromMaybe(dictUnfoldable) {
  return unfoldr(dictUnfoldable)(function (b) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
  });
};

module.exports = {
  Unfoldable: Unfoldable,
  unfoldr: unfoldr,
  replicate: replicate,
  replicateA: replicateA,
  none: none,
  fromMaybe: fromMaybe,
  unfoldableArray: unfoldableArray,
  unfoldableMaybe: unfoldableMaybe
};
},{"./foreign.js":"output/Data.Unfoldable/foreign.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable1/index.js":"output/Data.Unfoldable1/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.Array/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");

var Data_Array_ST = require("../Data.Array.ST/index.js");

var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var zipWithA = function zipWithA(dictApplicative) {
  return function (f) {
    return function (xs) {
      return function (ys) {
        return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
      };
    };
  };
};

var zip = $foreign.zipWith(Data_Tuple.Tuple.create);

var updateAtIndices = function updateAtIndices(dictFoldable) {
  return function (us) {
    return function (xs) {
      return Data_Array_ST.withArray(function (res) {
        return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
          return Data_Array_ST.poke(v.value0)(v.value1)(res);
        })(us);
      })(xs)();
    };
  };
};

var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var unsafeIndex = function unsafeIndex(dictPartial) {
  return $foreign.unsafeIndexImpl;
};

var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
  return function (xs) {
    return new Data_Maybe.Just({
      head: x,
      tail: xs
    });
  };
});

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  return function (xs) {
    var len = $foreign.length(xs);

    var f = function f(i) {
      if (i < len) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
      }

      ;

      if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
      }

      ;
      throw new Error("Failed pattern match at Data.Array (line 143, column 3 - line 145, column 26): " + [i.constructor.name]);
    };

    return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
  };
};

var takeEnd = function takeEnd(n) {
  return function (xs) {
    return $foreign.drop($foreign.length(xs) - n | 0)(xs);
  };
};

var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
  return function (xs) {
    return new Data_Maybe.Just(xs);
  };
});

var sortBy = function sortBy(comp) {
  return function (xs) {
    var comp$prime = function comp$prime(x) {
      return function (y) {
        var v = comp(x)(y);

        if (v instanceof Data_Ordering.GT) {
          return 1;
        }

        ;

        if (v instanceof Data_Ordering.EQ) {
          return 0;
        }

        ;

        if (v instanceof Data_Ordering.LT) {
          return -1 | 0;
        }

        ;
        throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [v.constructor.name]);
      };
    };

    return $foreign.sortImpl(comp$prime)(xs);
  };
};

var sortWith = function sortWith(dictOrd) {
  return function (f) {
    return sortBy(Data_Ord.comparing(dictOrd)(f));
  };
};

var sort = function sort(dictOrd) {
  return function (xs) {
    return sortBy(Data_Ord.compare(dictOrd))(xs);
  };
};

var singleton = function singleton(a) {
  return [a];
};

var $$null = function $$null(xs) {
  return $foreign.length(xs) === 0;
};

var nubByEq = function nubByEq(eq) {
  return function (xs) {
    return function __do() {
      var arr = Data_Array_ST.empty();
      Control_Monad_ST_Internal.foreach(xs)(function (x) {
        return function __do() {
          var e = Data_Functor.map(Control_Monad_ST_Internal.functorST)(function () {
            var $84 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            var $85 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
              return eq(v)(x);
            });
            return function ($86) {
              return $84($85($86));
            };
          }())(Data_Array_ST.unsafeFreeze(arr))();
          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(e)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(arr)))();
        };
      })();
      return Data_Array_ST.unsafeFreeze(arr)();
    }();
  };
};

var nubEq = function nubEq(dictEq) {
  return nubByEq(Data_Eq.eq(dictEq));
};

var modifyAtIndices = function modifyAtIndices(dictFoldable) {
  return function (is) {
    return function (f) {
      return function (xs) {
        return Data_Array_ST.withArray(function (res) {
          return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (i) {
            return Data_Array_ST.modify(i)(f)(res);
          })(is);
        })(xs)();
      };
    };
  };
};

var mapWithIndex = function mapWithIndex(f) {
  return function (xs) {
    return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
  };
};

var some = function some(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
        return many(dictAlternative)(dictLazy)(v);
      }));
    };
  };
};

var many = function many(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([]));
    };
  };
};

var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var init = function init(xs) {
  if ($$null(xs)) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (Data_Boolean.otherwise) {
    return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
  }

  ;
  throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [xs.constructor.name]);
};

var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var last = function last(xs) {
  return index(xs)($foreign.length(xs) - 1 | 0);
};

var unsnoc = function unsnoc(xs) {
  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return function (v1) {
      return {
        init: v,
        last: v1
      };
    };
  })(init(xs)))(last(xs));
};

var modifyAt = function modifyAt(i) {
  return function (f) {
    return function (xs) {
      var go = function go(x) {
        return updateAt(i)(f(x))(xs);
      };

      return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
    };
  };
};

var span = function span(p) {
  return function (arr) {
    var go = function go($copy_i) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(i) {
        var v = index(arr)(i);

        if (v instanceof Data_Maybe.Just) {
          var $60 = p(v.value0);

          if ($60) {
            $copy_i = i + 1 | 0;
            return;
          }

          ;
          $tco_done = true;
          return new Data_Maybe.Just(i);
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;
        throw new Error("Failed pattern match at Data.Array (line 834, column 5 - line 836, column 25): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_i);
      }

      ;
      return $tco_result;
    };

    var breakIndex = go(0);

    if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
      return {
        init: [],
        rest: arr
      };
    }

    ;

    if (breakIndex instanceof Data_Maybe.Just) {
      return {
        init: $foreign.slice(0)(breakIndex.value0)(arr),
        rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
      };
    }

    ;

    if (breakIndex instanceof Data_Maybe.Nothing) {
      return {
        init: arr,
        rest: []
      };
    }

    ;
    throw new Error("Failed pattern match at Data.Array (line 821, column 3 - line 827, column 30): " + [breakIndex.constructor.name]);
  };
};

var takeWhile = function takeWhile(p) {
  return function (xs) {
    return span(p)(xs).init;
  };
};

var unzip = function unzip(xs) {
  return function __do() {
    var fsts = Data_Array_ST.empty();
    var snds = Data_Array_ST.empty();
    var iter = Data_Array_ST_Iterator.iterator(function (v) {
      return index(xs)(v);
    })();
    Data_Array_ST_Iterator.iterate(iter)(function (v) {
      return function __do() {
        Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value0)(fsts))();
        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value1)(snds))();
      };
    })();
    var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();
    var snds$prime = Data_Array_ST.unsafeFreeze(snds)();
    return new Data_Tuple.Tuple(fsts$prime, snds$prime);
  }();
};

var head = function head(xs) {
  return index(xs)(0);
};

var nubBy = function nubBy(comp) {
  return function (xs) {
    var indexedAndSorted = sortBy(function (x) {
      return function (y) {
        return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
      };
    })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
    var v = head(indexedAndSorted);

    if (v instanceof Data_Maybe.Nothing) {
      return [];
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)(function __do() {
        var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
        Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {
          return function __do() {
            var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)(function () {
              var $87 = function (dictPartial) {
                var $89 = Data_Maybe.fromJust();
                return function ($90) {
                  return $89(last($90));
                };
              }();

              return function ($88) {
                return Data_Tuple.snd($87($88));
              };
            }())(Data_Array_ST.unsafeFreeze(result))();
            return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
          };
        })();
        return Data_Array_ST.unsafeFreeze(result)();
      }()));
    }

    ;
    throw new Error("Failed pattern match at Data.Array (line 903, column 17 - line 911, column 29): " + [v.constructor.name]);
  };
};

var nub = function nub(dictOrd) {
  return nubBy(Data_Ord.compare(dictOrd));
};

var groupBy = function groupBy(op) {
  return function (xs) {
    return function __do() {
      var result = Data_Array_ST.empty();
      var iter = Data_Array_ST_Iterator.iterator(function (v) {
        return index(xs)(v);
      })();
      Data_Array_ST_Iterator.iterate(iter)(function (x) {
        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
          var sub = Data_Array_ST.empty();
          Data_Array_ST.push(x)(sub)();
          Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
          var grp = Data_Array_ST.unsafeFreeze(sub)();
          return Data_Array_ST.push(grp)(result)();
        });
      })();
      return Data_Array_ST.unsafeFreeze(result)();
    }();
  };
};

var group = function group(dictEq) {
  return function (xs) {
    return groupBy(Data_Eq.eq(dictEq))(xs);
  };
};

var group$prime = function group$prime(dictOrd) {
  var $91 = group(dictOrd.Eq0());
  var $92 = sort(dictOrd);
  return function ($93) {
    return $91($92($93));
  };
};

var fromFoldable = function fromFoldable(dictFoldable) {
  return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
};

var foldRecM = function foldRecM(dictMonadRec) {
  return function (f) {
    return function (a) {
      return function (array) {
        var go = function go(res) {
          return function (i) {
            if (i >= $foreign.length(array)) {
              return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(res));
            }

            ;

            if (Data_Boolean.otherwise) {
              return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(f(res)(unsafeIndex()(array)(i)))(function (res$prime) {
                return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop({
                  a: res$prime,
                  b: i + 1 | 0
                }));
              });
            }

            ;
            throw new Error("Failed pattern match at Data.Array (line 1101, column 3 - line 1105, column 42): " + [res.constructor.name, i.constructor.name]);
          };
        };

        return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
      };
    };
  };
};

var foldM = function foldM(dictMonad) {
  return function (f) {
    return function (a) {
      return $foreign["uncons'"](function (v) {
        return Control_Applicative.pure(dictMonad.Applicative0())(a);
      })(function (b) {
        return function (bs) {
          return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
            return foldM(dictMonad)(f)(a$prime)(bs);
          });
        };
      });
    };
  };
};

var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var insertBy = function insertBy(cmp) {
  return function (x) {
    return function (ys) {
      var i = Data_Maybe.maybe(0)(function (v) {
        return v + 1 | 0;
      })(findLastIndex(function (y) {
        return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
      })(ys));
      return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
    };
  };
};

var insert = function insert(dictOrd) {
  return insertBy(Data_Ord.compare(dictOrd));
};

var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var intersectBy = function intersectBy(eq) {
  return function (xs) {
    return function (ys) {
      return $foreign.filter(function (x) {
        return Data_Maybe.isJust(findIndex(eq(x))(ys));
      })(xs);
    };
  };
};

var intersect = function intersect(dictEq) {
  return intersectBy(Data_Eq.eq(dictEq));
};

var elemLastIndex = function elemLastIndex(dictEq) {
  return function (x) {
    return findLastIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var elemIndex = function elemIndex(dictEq) {
  return function (x) {
    return findIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var dropWhile = function dropWhile(p) {
  return function (xs) {
    return span(p)(xs).rest;
  };
};

var dropEnd = function dropEnd(n) {
  return function (xs) {
    return $foreign.take($foreign.length(xs) - n | 0)(xs);
  };
};

var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var deleteBy = function deleteBy(v) {
  return function (v1) {
    return function (v2) {
      if (v2.length === 0) {
        return [];
      }

      ;
      return Data_Maybe.maybe(v2)(function (i) {
        return Data_Maybe.fromJust()(deleteAt(i)(v2));
      })(findIndex(v(v1))(v2));
    };
  };
};

var unionBy = function unionBy(eq) {
  return function (xs) {
    return function (ys) {
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
    };
  };
};

var union = function union(dictEq) {
  return unionBy(Data_Eq.eq(dictEq));
};

var $$delete = function $$delete(dictEq) {
  return deleteBy(Data_Eq.eq(dictEq));
};

var difference = function difference(dictEq) {
  return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
};

var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));

var mapMaybe = function mapMaybe(f) {
  return concatMap(function () {
    var $94 = Data_Maybe.maybe([])(singleton);
    return function ($95) {
      return $94(f($95));
    };
  }());
};

var filterA = function filterA(dictApplicative) {
  return function (p) {
    var $96 = Data_Functor.map(dictApplicative.Apply0().Functor0())(mapMaybe(function (v) {
      if (v.value1) {
        return new Data_Maybe.Just(v.value0);
      }

      ;
      return Data_Maybe.Nothing.value;
    }));
    var $97 = Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create(x))(p(x));
    });
    return function ($98) {
      return $96($97($98));
    };
  };
};

var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));

var alterAt = function alterAt(i) {
  return function (f) {
    return function (xs) {
      var go = function go(x) {
        var v = f(x);

        if (v instanceof Data_Maybe.Nothing) {
          return deleteAt(i)(xs);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return updateAt(i)(v.value0)(xs);
        }

        ;
        throw new Error("Failed pattern match at Data.Array (line 544, column 10 - line 546, column 32): " + [v.constructor.name]);
      };

      return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
    };
  };
};

module.exports = {
  fromFoldable: fromFoldable,
  toUnfoldable: toUnfoldable,
  singleton: singleton,
  some: some,
  many: many,
  "null": $$null,
  insert: insert,
  insertBy: insertBy,
  head: head,
  last: last,
  tail: tail,
  init: init,
  uncons: uncons,
  unsnoc: unsnoc,
  index: index,
  elemIndex: elemIndex,
  elemLastIndex: elemLastIndex,
  findIndex: findIndex,
  findLastIndex: findLastIndex,
  insertAt: insertAt,
  deleteAt: deleteAt,
  updateAt: updateAt,
  updateAtIndices: updateAtIndices,
  modifyAt: modifyAt,
  modifyAtIndices: modifyAtIndices,
  alterAt: alterAt,
  concatMap: concatMap,
  filterA: filterA,
  mapMaybe: mapMaybe,
  catMaybes: catMaybes,
  mapWithIndex: mapWithIndex,
  sort: sort,
  sortBy: sortBy,
  sortWith: sortWith,
  takeEnd: takeEnd,
  takeWhile: takeWhile,
  dropEnd: dropEnd,
  dropWhile: dropWhile,
  span: span,
  group: group,
  "group'": group$prime,
  groupBy: groupBy,
  nub: nub,
  nubEq: nubEq,
  nubBy: nubBy,
  nubByEq: nubByEq,
  union: union,
  unionBy: unionBy,
  "delete": $$delete,
  deleteBy: deleteBy,
  difference: difference,
  intersect: intersect,
  intersectBy: intersectBy,
  zipWithA: zipWithA,
  zip: zip,
  unzip: unzip,
  foldM: foldM,
  foldRecM: foldRecM,
  unsafeIndex: unsafeIndex,
  range: $foreign.range,
  replicate: $foreign.replicate,
  length: $foreign.length,
  cons: $foreign.cons,
  snoc: $foreign.snoc,
  reverse: $foreign.reverse,
  concat: $foreign.concat,
  filter: $foreign.filter,
  partition: $foreign.partition,
  slice: $foreign.slice,
  take: $foreign.take,
  drop: $foreign.drop,
  zipWith: $foreign.zipWith
};
},{"./foreign.js":"output/Data.Array/foreign.js","../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Lazy/index.js":"output/Control.Lazy/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.ST.Internal/index.js":"output/Control.Monad.ST.Internal/index.js","../Data.Array.ST/index.js":"output/Data.Array.ST/index.js","../Data.Array.ST.Iterator/index.js":"output/Data.Array.ST.Iterator/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js"}],"output/Control.MonadPlus/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_MonadZero = require("../Control.MonadZero/index.js");

var MonadPlus = function MonadPlus(MonadZero0) {
  this.MonadZero0 = MonadZero0;
};

var monadPlusArray = new MonadPlus(function () {
  return Control_MonadZero.monadZeroArray;
});
module.exports = {
  MonadPlus: MonadPlus,
  monadPlusArray: monadPlusArray
};
},{"../Control.MonadZero/index.js":"output/Control.MonadZero/index.js"}],"output/Data.NonEmpty/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var NonEmpty = function () {
  function NonEmpty(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  NonEmpty.create = function (value0) {
    return function (value1) {
      return new NonEmpty(value0, value1);
    };
  };

  return NonEmpty;
}();

var unfoldable1NonEmpty = function unfoldable1NonEmpty(dictUnfoldable) {
  return new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
      return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
    };
  });
};

var tail = function tail(v) {
  return v.value1;
};

var singleton = function singleton(dictPlus) {
  return function (a) {
    return new NonEmpty(a, Control_Plus.empty(dictPlus));
  };
};

var showNonEmpty = function showNonEmpty(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (v) {
      return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
    });
  };
};

var oneOf = function oneOf(dictAlternative) {
  return function (v) {
    return Control_Alt.alt(dictAlternative.Plus1().Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
  };
};

var head = function head(v) {
  return v.value0;
};

var functorNonEmpty = function functorNonEmpty(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (m) {
      return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
    };
  });
};

var functorWithIndex = function functorWithIndex(dictFunctorWithIndex) {
  return new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorNonEmpty(dictFunctorWithIndex.Functor0());
  }, function (f) {
    return function (v) {
      return new NonEmpty(f(Data_Maybe.Nothing.value)(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($146) {
        return f(Data_Maybe.Just.create($146));
      })(v.value1));
    };
  });
};

var fromNonEmpty = function fromNonEmpty(f) {
  return function (v) {
    return f(v.value0)(v.value1);
  };
};

var foldl1 = function foldl1(dictFoldable) {
  return function (f) {
    return function (v) {
      return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
    };
  };
};

var foldableNonEmpty = function foldableNonEmpty(dictFoldable) {
  return new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
      return function (v) {
        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
      };
    };
  }, function (f) {
    return function (b) {
      return function (v) {
        return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
      };
    };
  }, function (f) {
    return function (b) {
      return function (v) {
        return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
      };
    };
  });
};

var foldableWithIndexNonEmpty = function foldableWithIndexNonEmpty(dictFoldableWithIndex) {
  return new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableNonEmpty(dictFoldableWithIndex.Foldable0());
  }, function (dictMonoid) {
    return function (f) {
      return function (v) {
        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Maybe.Nothing.value)(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($147) {
          return f(Data_Maybe.Just.create($147));
        })(v.value1));
      };
    };
  }, function (f) {
    return function (b) {
      return function (v) {
        return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($148) {
          return f(Data_Maybe.Just.create($148));
        })(f(Data_Maybe.Nothing.value)(b)(v.value0))(v.value1);
      };
    };
  }, function (f) {
    return function (b) {
      return function (v) {
        return f(Data_Maybe.Nothing.value)(v.value0)(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($149) {
          return f(Data_Maybe.Just.create($149));
        })(b)(v.value1));
      };
    };
  });
};

var traversableNonEmpty = function traversableNonEmpty(dictTraversable) {
  return new Data_Traversable.Traversable(function () {
    return foldableNonEmpty(dictTraversable.Foldable1());
  }, function () {
    return functorNonEmpty(dictTraversable.Functor0());
  }, function (dictApplicative) {
    return function (v) {
      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
    };
  }, function (dictApplicative) {
    return function (f) {
      return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
      };
    };
  });
};

var traversableWithIndexNonEmpty = function traversableWithIndexNonEmpty(dictTraversableWithIndex) {
  return new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexNonEmpty(dictTraversableWithIndex.FoldableWithIndex1());
  }, function () {
    return functorWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
  }, function () {
    return traversableNonEmpty(dictTraversableWithIndex.Traversable2());
  }, function (dictApplicative) {
    return function (f) {
      return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(f(Data_Maybe.Nothing.value)(v.value0)))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($150) {
          return f(Data_Maybe.Just.create($150));
        })(v.value1));
      };
    };
  });
};

var foldable1NonEmpty = function foldable1NonEmpty(dictFoldable) {
  return new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableNonEmpty(dictFoldable);
  }, function (dictSemigroup) {
    return Data_Semigroup_Foldable.foldMap1(foldable1NonEmpty(dictFoldable))(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictSemigroup) {
    return function (f) {
      return function (v) {
        return Data_Foldable.foldl(dictFoldable)(function (s) {
          return function (a1) {
            return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
          };
        })(f(v.value0))(v.value1);
      };
    };
  });
};

var eqNonEmpty = function eqNonEmpty(dictEq1) {
  return function (dictEq) {
    return new Data_Eq.Eq(function (x) {
      return function (y) {
        return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq1(dictEq1)(dictEq)(x.value1)(y.value1);
      };
    });
  };
};

var ordNonEmpty = function ordNonEmpty(dictOrd1) {
  return function (dictOrd) {
    return new Data_Ord.Ord(function () {
      return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
    }, function (x) {
      return function (y) {
        var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);

        if (v instanceof Data_Ordering.LT) {
          return Data_Ordering.LT.value;
        }

        ;

        if (v instanceof Data_Ordering.GT) {
          return Data_Ordering.GT.value;
        }

        ;
        return Data_Ord.compare1(dictOrd1)(dictOrd)(x.value1)(y.value1);
      };
    });
  };
};

var eq1NonEmpty = function eq1NonEmpty(dictEq1) {
  return new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqNonEmpty(dictEq1)(dictEq));
  });
};

var ord1NonEmpty = function ord1NonEmpty(dictOrd1) {
  return new Data_Ord.Ord1(function () {
    return eq1NonEmpty(dictOrd1.Eq10());
  }, function (dictOrd) {
    return Data_Ord.compare(ordNonEmpty(dictOrd1)(dictOrd));
  });
};

module.exports = {
  NonEmpty: NonEmpty,
  singleton: singleton,
  foldl1: foldl1,
  fromNonEmpty: fromNonEmpty,
  oneOf: oneOf,
  head: head,
  tail: tail,
  showNonEmpty: showNonEmpty,
  eqNonEmpty: eqNonEmpty,
  eq1NonEmpty: eq1NonEmpty,
  ordNonEmpty: ordNonEmpty,
  ord1NonEmpty: ord1NonEmpty,
  functorNonEmpty: functorNonEmpty,
  functorWithIndex: functorWithIndex,
  foldableNonEmpty: foldableNonEmpty,
  foldableWithIndexNonEmpty: foldableWithIndexNonEmpty,
  traversableNonEmpty: traversableNonEmpty,
  traversableWithIndexNonEmpty: traversableWithIndexNonEmpty,
  foldable1NonEmpty: foldable1NonEmpty,
  unfoldable1NonEmpty: unfoldable1NonEmpty
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semigroup.Foldable/index.js":"output/Data.Semigroup.Foldable/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"output/Data.Unfoldable1/index.js"}],"output/Data.List.Types/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var Nil = function () {
  function Nil() {}

  ;
  Nil.value = new Nil();
  return Nil;
}();

var Cons = function () {
  function Cons(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Cons.create = function (value0) {
    return function (value1) {
      return new Cons(value0, value1);
    };
  };

  return Cons;
}();

var NonEmptyList = function NonEmptyList(x) {
  return x;
};

var toList = function toList(v) {
  return new Cons(v.value0, v.value1);
};

var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
  return n;
}, NonEmptyList);

var nelCons = function nelCons(a) {
  return function (v) {
    return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
  };
};

var listMap = function listMap(f) {
  var chunkedRevMap = function chunkedRevMap($copy_chunksAcc) {
    return function ($copy_v) {
      var $tco_var_chunksAcc = $copy_chunksAcc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(chunksAcc, v) {
        if (v instanceof Cons && v.value1 instanceof Cons && v.value1.value1 instanceof Cons) {
          $tco_var_chunksAcc = new Cons(v, chunksAcc);
          $copy_v = v.value1.value1.value1;
          return;
        }

        ;

        var unrolledMap = function unrolledMap(v1) {
          if (v1 instanceof Cons && v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil) {
            return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
          }

          ;

          if (v1 instanceof Cons && v1.value1 instanceof Nil) {
            return new Cons(f(v1.value0), Nil.value);
          }

          ;
          return Nil.value;
        };

        var reverseUnrolledMap = function reverseUnrolledMap($copy_v1) {
          return function ($copy_acc) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(v1, acc) {
              if (v1 instanceof Cons && v1.value0 instanceof Cons && v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons) {
                $tco_var_v1 = v1.value1;
                $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                return;
              }

              ;
              $tco_done = true;
              return acc;
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
            }

            ;
            return $tco_result;
          };
        };

        $tco_done = true;
        return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return chunkedRevMap(Nil.value);
};

var functorList = new Data_Functor.Functor(listMap);
var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldl(foldableList)(function (acc) {
      var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
      return function ($203) {
        return $202(f($203));
      };
    })(Data_Monoid.mempty(dictMonoid));
  };
}, function (f) {
  var go = function go($copy_b) {
    return function ($copy_v) {
      var $tco_var_b = $copy_b;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(b, v) {
        if (v instanceof Nil) {
          $tco_done = true;
          return b;
        }

        ;

        if (v instanceof Cons) {
          $tco_var_b = f(b)(v.value0);
          $copy_v = v.value1;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_b, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go;
}, function (f) {
  return function (b) {
    var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
    var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
    return function ($205) {
      return $204(rev($205));
    };
  };
});
var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableList;
}, function (dictMonoid) {
  return function (f) {
    return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
      return function (acc) {
        var $206 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
        var $207 = f(i);
        return function ($208) {
          return $206($207($208));
        };
      };
    })(Data_Monoid.mempty(dictMonoid));
  };
}, function (f) {
  return function (acc) {
    var $209 = Data_Foldable.foldl(foldableList)(function (v) {
      return function (a) {
        return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
      };
    })(new Data_Tuple.Tuple(0, acc));
    return function ($210) {
      return Data_Tuple.snd($209($210));
    };
  };
}, function (f) {
  return function (b) {
    return function (xs) {
      var v = function () {
        var rev = Data_Foldable.foldl(foldableList)(function (v1) {
          return function (a) {
            return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
          };
        });
        return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
      }();

      return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
        return function (a) {
          return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
        };
      })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
    };
  };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableNonEmptyList;
}, function (dictMonoid) {
  return function (f) {
    return function (v) {
      return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function () {
        var $211 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($212) {
          return f($211($212));
        };
      }())(v);
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function () {
        var $213 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($214) {
          return f($213($214));
        };
      }())(b)(v);
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function () {
        var $215 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($216) {
          return f($215($216));
        };
      }())(b)(v);
    };
  };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorList;
}, function (f) {
  return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
    return function (x) {
      return function (acc) {
        return new Cons(f(i)(x), acc);
      };
    };
  })(Nil.value);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorNonEmptyList;
}, function (fn) {
  return function (v) {
    return NonEmptyList(Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function () {
      var $217 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
      return function ($218) {
        return fn($217($218));
      };
    }())(v));
  };
});
var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
  return function (ys) {
    return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
  };
});
var monoidList = new Data_Monoid.Monoid(function () {
  return semigroupList;
}, Nil.value);
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
  return function (as$prime) {
    return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
  };
});

var showList = function showList(dictShow) {
  return new Data_Show.Show(function (v) {
    if (v instanceof Nil) {
      return "Nil";
    }

    ;
    return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
  });
};

var showNonEmptyList = function showNonEmptyList(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
  });
};

var traversableList = new Data_Traversable.Traversable(function () {
  return foldableList;
}, function () {
  return functorList;
}, function (dictApplicative) {
  return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
  return function (f) {
    var $219 = Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
    var $220 = Data_Foldable.foldl(foldableList)(function (acc) {
      var $222 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
      return function ($223) {
        return $222(f($223));
      };
    })(Control_Applicative.pure(dictApplicative)(Nil.value));
    return function ($221) {
      return $219($220($221));
    };
  };
});
var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexList;
}, function () {
  return functorWithIndexList;
}, function () {
  return traversableList;
}, function (dictApplicative) {
  return function (f) {
    var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
    var $224 = Data_Functor.map(dictApplicative.Apply0().Functor0())(rev);
    var $225 = Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
      return function (acc) {
        var $227 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
        var $228 = f(i);
        return function ($229) {
          return $227($228($229));
        };
      };
    })(Control_Applicative.pure(dictApplicative)(Nil.value));
    return function ($226) {
      return $224($225($226));
    };
  };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexNonEmptyList;
}, function () {
  return functorWithIndexNonEmptyList;
}, function () {
  return traversableNonEmptyList;
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmptyList)(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function () {
        var $230 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($231) {
          return f($230($231));
        };
      }())(v));
    };
  };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v.value1 instanceof Data_Maybe.Just) {
            $tco_var_source = v.value1.value0;
            $copy_memo = new Cons(v.value0, memo);
            return;
          }

          ;

          if (v.value1 instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
          }

          ;
          throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(Nil.value);
  };
});
var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
  return unfoldable1List;
}, function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            $tco_var_source = v.value0.value1;
            $copy_memo = new Cons(v.value0.value0, memo);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(Nil.value);
  };
});
var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
var extendNonEmptyList = new Control_Extend.Extend(function () {
  return functorNonEmptyList;
}, function (f) {
  return function (v) {
    var go = function go(a) {
      return function (v1) {
        return {
          val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val),
          acc: new Cons(a, v1.acc)
        };
      };
    };

    return new Data_NonEmpty.NonEmpty(f(v), Data_Foldable.foldr(foldableList)(go)({
      val: Nil.value,
      acc: Nil.value
    })(v.value1).val);
  };
});
var extendList = new Control_Extend.Extend(function () {
  return functorList;
}, function (f) {
  return function (v) {
    if (v instanceof Nil) {
      return Nil.value;
    }

    ;

    if (v instanceof Cons) {
      var go = function go(a$prime) {
        return function (v1) {
          var acc$prime = new Cons(a$prime, v1.acc);
          return {
            val: new Cons(f(acc$prime), v1.val),
            acc: acc$prime
          };
        };
      };

      return new Cons(f(v), Data_Foldable.foldr(foldableList)(go)({
        val: Nil.value,
        acc: Nil.value
      })(v.value1).val);
    }

    ;
    throw new Error("Failed pattern match at Data.List.Types (line 180, column 1 - line 187, column 42): " + [f.constructor.name, v.constructor.name]);
  };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
  return function (xs) {
    return function (ys) {
      var go = function go($copy_v) {
        return function ($copy_v1) {
          return function ($copy_v2) {
            var $tco_var_v = $copy_v;
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(v, v1, v2) {
              if (!v2) {
                $tco_done = true;
                return false;
              }

              ;

              if (v instanceof Nil && v1 instanceof Nil) {
                $tco_done = true;
                return v2;
              }

              ;

              if (v instanceof Cons && v1 instanceof Cons) {
                $tco_var_v = v.value1;
                $tco_var_v1 = v1.value1;
                $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                return;
              }

              ;
              $tco_done = true;
              return false;
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
            }

            ;
            return $tco_result;
          };
        };
      };

      return go(xs)(ys)(true);
    };
  };
});

var eqList = function eqList(dictEq) {
  return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};

var eqNonEmptyList = function eqNonEmptyList(dictEq) {
  return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
};

var ord1List = new Data_Ord.Ord1(function () {
  return eq1List;
}, function (dictOrd) {
  return function (xs) {
    return function (ys) {
      var go = function go($copy_v) {
        return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(v, v1) {
            if (v instanceof Nil && v1 instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.EQ.value;
            }

            ;

            if (v instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.LT.value;
            }

            ;

            if (v1 instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.GT.value;
            }

            ;

            if (v instanceof Cons && v1 instanceof Cons) {
              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);

              if (v2 instanceof Data_Ordering.EQ) {
                $tco_var_v = v.value1;
                $copy_v1 = v1.value1;
                return;
              }

              ;
              $tco_done = true;
              return v2;
            }

            ;
            throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [v.constructor.name, v1.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }

          ;
          return $tco_result;
        };
      };

      return go(xs)(ys);
    };
  };
});

var ordList = function ordList(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqList(dictOrd.Eq0());
  }, Data_Ord.compare1(ord1List)(dictOrd));
};

var ordNonEmptyList = function ordNonEmptyList(dictOrd) {
  return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
};

var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
  return extendNonEmptyList;
}, function (v) {
  return v.value0;
});
var applyList = new Control_Apply.Apply(function () {
  return functorList;
}, function (v) {
  return function (v1) {
    if (v instanceof Nil) {
      return Nil.value;
    }

    ;

    if (v instanceof Cons) {
      return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
    }

    ;
    throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [v.constructor.name, v1.constructor.name]);
  };
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
  return functorNonEmptyList;
}, function (v) {
  return function (v1) {
    return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
  };
});
var bindList = new Control_Bind.Bind(function () {
  return applyList;
}, function (v) {
  return function (v1) {
    if (v instanceof Nil) {
      return Nil.value;
    }

    ;

    if (v instanceof Cons) {
      return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
    }

    ;
    throw new Error("Failed pattern match at Data.List.Types (line 162, column 1 - line 164, column 37): " + [v.constructor.name, v1.constructor.name]);
  };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
  return applyNonEmptyList;
}, function (v) {
  return function (f) {
    var v1 = f(v.value0);
    return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function ($232) {
      return toList(f($232));
    })));
  };
});
var applicativeList = new Control_Applicative.Applicative(function () {
  return applyList;
}, function (a) {
  return new Cons(a, Nil.value);
});
var monadList = new Control_Monad.Monad(function () {
  return applicativeList;
}, function () {
  return bindList;
});
var altNonEmptyList = new Control_Alt.Alt(function () {
  return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
  return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
  return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
  return applicativeList;
}, function () {
  return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
  return alternativeList;
}, function () {
  return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
  return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
  return applyNonEmptyList;
}, function () {
  var $233 = Data_NonEmpty.singleton(plusList);
  return function ($234) {
    return NonEmptyList($233($234));
  };
}());
var monadNonEmptyList = new Control_Monad.Monad(function () {
  return applicativeNonEmptyList;
}, function () {
  return bindNonEmptyList;
});
var traversable1NonEmptyList = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1NonEmptyList;
}, function () {
  return traversableNonEmptyList;
}, function (dictApply) {
  return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApply) {
  return function (f) {
    return function (v) {
      return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function (acc) {
        var $235 = Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc);
        return function ($236) {
          return $235(f($236));
        };
      })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function (v1) {
        return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
      });
    };
  };
});
module.exports = {
  Nil: Nil,
  Cons: Cons,
  NonEmptyList: NonEmptyList,
  toList: toList,
  nelCons: nelCons,
  showList: showList,
  eqList: eqList,
  eq1List: eq1List,
  ordList: ordList,
  ord1List: ord1List,
  semigroupList: semigroupList,
  monoidList: monoidList,
  functorList: functorList,
  functorWithIndexList: functorWithIndexList,
  foldableList: foldableList,
  foldableWithIndexList: foldableWithIndexList,
  unfoldable1List: unfoldable1List,
  unfoldableList: unfoldableList,
  traversableList: traversableList,
  traversableWithIndexList: traversableWithIndexList,
  applyList: applyList,
  applicativeList: applicativeList,
  bindList: bindList,
  monadList: monadList,
  altList: altList,
  plusList: plusList,
  alternativeList: alternativeList,
  monadZeroList: monadZeroList,
  monadPlusList: monadPlusList,
  extendList: extendList,
  newtypeNonEmptyList: newtypeNonEmptyList,
  eqNonEmptyList: eqNonEmptyList,
  ordNonEmptyList: ordNonEmptyList,
  showNonEmptyList: showNonEmptyList,
  functorNonEmptyList: functorNonEmptyList,
  applyNonEmptyList: applyNonEmptyList,
  applicativeNonEmptyList: applicativeNonEmptyList,
  bindNonEmptyList: bindNonEmptyList,
  monadNonEmptyList: monadNonEmptyList,
  altNonEmptyList: altNonEmptyList,
  extendNonEmptyList: extendNonEmptyList,
  comonadNonEmptyList: comonadNonEmptyList,
  semigroupNonEmptyList: semigroupNonEmptyList,
  foldableNonEmptyList: foldableNonEmptyList,
  traversableNonEmptyList: traversableNonEmptyList,
  foldable1NonEmptyList: foldable1NonEmptyList,
  unfoldable1NonEmptyList: unfoldable1NonEmptyList,
  functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
  foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
  traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList,
  traversable1NonEmptyList: traversable1NonEmptyList
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Comonad/index.js":"output/Control.Comonad/index.js","../Control.Extend/index.js":"output/Control.Extend/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.NonEmpty/index.js":"output/Data.NonEmpty/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semigroup.Traversable/index.js":"output/Data.Semigroup.Traversable/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"output/Data.Unfoldable1/index.js"}],"output/Effect.Aff/foreign.js":[function(require,module,exports) {
/* globals setImmediate, clearImmediate, setTimeout, clearTimeout */

/* jshint -W083, -W098, -W003 */
"use strict";

var Aff = function () {
  // A unique value for empty.
  var EMPTY = {};
  /*
   An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.
   data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)
   */

  var PURE = "Pure";
  var THROW = "Throw";
  var CATCH = "Catch";
  var SYNC = "Sync";
  var ASYNC = "Async";
  var BIND = "Bind";
  var BRACKET = "Bracket";
  var FORK = "Fork";
  var SEQ = "Sequential";
  /*
   data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)
   */

  var MAP = "Map";
  var APPLY = "Apply";
  var ALT = "Alt"; // Various constructors used in interpretation

  var CONS = "Cons"; // Cons-list, for stacks

  var RESUME = "Resume"; // Continue indiscriminately

  var RELEASE = "Release"; // Continue with bracket finalizers

  var FINALIZER = "Finalizer"; // A non-interruptible effect

  var FINALIZED = "Finalized"; // Marker for finalization

  var FORKED = "Forked"; // Reference to a forked fiber, with resumption stack

  var FIBER = "Fiber"; // Actual fiber reference

  var THUNK = "Thunk"; // Primed effect, ready to invoke

  function Aff(tag, _1, _2, _3) {
    this.tag = tag;
    this._1 = _1;
    this._2 = _2;
    this._3 = _3;
  }

  function AffCtr(tag) {
    var fn = function fn(_1, _2, _3) {
      return new Aff(tag, _1, _2, _3);
    };

    fn.tag = tag;
    return fn;
  }

  function nonCanceler(error) {
    return new Aff(PURE, void 0);
  }

  function runEff(eff) {
    try {
      eff();
    } catch (error) {
      setTimeout(function () {
        throw error;
      }, 0);
    }
  }

  function runSync(left, right, eff) {
    try {
      return right(eff());
    } catch (error) {
      return left(error);
    }
  }

  function runAsync(left, eff, k) {
    try {
      return eff(k)();
    } catch (error) {
      k(left(error))();
      return nonCanceler;
    }
  }

  var Scheduler = function () {
    var limit = 1024;
    var size = 0;
    var ix = 0;
    var queue = new Array(limit);
    var draining = false;

    function drain() {
      var thunk;
      draining = true;

      while (size !== 0) {
        size--;
        thunk = queue[ix];
        queue[ix] = void 0;
        ix = (ix + 1) % limit;
        thunk();
      }

      draining = false;
    }

    return {
      isDraining: function isDraining() {
        return draining;
      },
      enqueue: function enqueue(cb) {
        var i, tmp;

        if (size === limit) {
          tmp = draining;
          drain();
          draining = tmp;
        }

        queue[(ix + size) % limit] = cb;
        size++;

        if (!draining) {
          drain();
        }
      }
    };
  }();

  function Supervisor(util) {
    var fibers = {};
    var fiberId = 0;
    var count = 0;
    return {
      register: function register(fiber) {
        var fid = fiberId++;
        fiber.onComplete({
          rethrow: true,
          handler: function handler(result) {
            return function () {
              count--;
              delete fibers[fid];
            };
          }
        })();
        fibers[fid] = fiber;
        count++;
      },
      isEmpty: function isEmpty() {
        return count === 0;
      },
      killAll: function killAll(killError, cb) {
        return function () {
          if (count === 0) {
            return cb();
          }

          var killCount = 0;
          var kills = {};

          function kill(fid) {
            kills[fid] = fibers[fid].kill(killError, function (result) {
              return function () {
                delete kills[fid];
                killCount--;

                if (util.isLeft(result) && util.fromLeft(result)) {
                  setTimeout(function () {
                    throw util.fromLeft(result);
                  }, 0);
                }

                if (killCount === 0) {
                  cb();
                }
              };
            })();
          }

          for (var k in fibers) {
            if (fibers.hasOwnProperty(k)) {
              killCount++;
              kill(k);
            }
          }

          fibers = {};
          fiberId = 0;
          count = 0;
          return function (error) {
            return new Aff(SYNC, function () {
              for (var k in kills) {
                if (kills.hasOwnProperty(k)) {
                  kills[k]();
                }
              }
            });
          };
        };
      }
    };
  } // Fiber state machine


  var SUSPENDED = 0; // Suspended, pending a join.

  var CONTINUE = 1; // Interpret the next instruction.

  var STEP_BIND = 2; // Apply the next bind.

  var STEP_RESULT = 3; // Handle potential failure from a result.

  var PENDING = 4; // An async effect is running.

  var RETURN = 5; // The current stack has returned.

  var COMPLETED = 6; // The entire fiber has completed.

  function Fiber(util, supervisor, aff) {
    // Monotonically increasing tick, increased on each asynchronous turn.
    var runTick = 0; // The current branch of the state machine.

    var status = SUSPENDED; // The current point of interest for the state machine branch.

    var step = aff; // Successful step

    var fail = null; // Failure step

    var interrupt = null; // Asynchronous interrupt
    // Stack of continuations for the current fiber.

    var bhead = null;
    var btail = null; // Stack of attempts and finalizers for error recovery. Every `Cons` is also
    // tagged with current `interrupt` state. We use this to track which items
    // should be ignored or evaluated as a result of a kill.

    var attempts = null; // A special state is needed for Bracket, because it cannot be killed. When
    // we enter a bracket acquisition or finalizer, we increment the counter,
    // and then decrement once complete.

    var bracketCount = 0; // Each join gets a new id so they can be revoked.

    var joinId = 0;
    var joins = null;
    var rethrow = true; // Each invocation of `run` requires a tick. When an asynchronous effect is
    // resolved, we must check that the local tick coincides with the fiber
    // tick before resuming. This prevents multiple async continuations from
    // accidentally resuming the same fiber. A common example may be invoking
    // the provided callback in `makeAff` more than once, but it may also be an
    // async effect resuming after the fiber was already cancelled.

    function _run(localRunTick) {
      var tmp, result, attempt;

      while (true) {
        tmp = null;
        result = null;
        attempt = null;

        switch (status) {
          case STEP_BIND:
            status = CONTINUE;

            try {
              step = bhead(step);

              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail = util.left(e);
              step = null;
            }

            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail = step;
              step = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step = util.fromRight(step);
            }

            break;

          case CONTINUE:
            switch (step.tag) {
              case BIND:
                if (bhead) {
                  btail = new Aff(CONS, bhead, btail);
                }

                bhead = step._2;
                status = CONTINUE;
                step = step._1;
                break;

              case PURE:
                if (bhead === null) {
                  status = RETURN;
                  step = util.right(step._1);
                } else {
                  status = STEP_BIND;
                  step = step._1;
                }

                break;

              case SYNC:
                status = STEP_RESULT;
                step = runSync(util.left, util.right, step._1);
                break;

              case ASYNC:
                status = PENDING;
                step = runAsync(util.left, step._1, function (result) {
                  return function () {
                    if (runTick !== localRunTick) {
                      return;
                    }

                    runTick++;
                    Scheduler.enqueue(function () {
                      // It's possible to interrupt the fiber between enqueuing and
                      // resuming, so we need to check that the runTick is still
                      // valid.
                      if (runTick !== localRunTick + 1) {
                        return;
                      }

                      status = STEP_RESULT;
                      step = result;

                      _run(runTick);
                    });
                  };
                });
                return;

              case THROW:
                status = RETURN;
                fail = util.left(step._1);
                step = null;
                break;
              // Enqueue the Catch so that we can call the error handler later on
              // in case of an exception.

              case CATCH:
                if (bhead === null) {
                  attempts = new Aff(CONS, step, attempts, interrupt);
                } else {
                  attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
                }

                bhead = null;
                btail = null;
                status = CONTINUE;
                step = step._1;
                break;
              // Enqueue the Bracket so that we can call the appropriate handlers
              // after resource acquisition.

              case BRACKET:
                bracketCount++;

                if (bhead === null) {
                  attempts = new Aff(CONS, step, attempts, interrupt);
                } else {
                  attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
                }

                bhead = null;
                btail = null;
                status = CONTINUE;
                step = step._1;
                break;

              case FORK:
                status = STEP_RESULT;
                tmp = Fiber(util, supervisor, step._2);

                if (supervisor) {
                  supervisor.register(tmp);
                }

                if (step._1) {
                  tmp.run();
                }

                step = util.right(tmp);
                break;

              case SEQ:
                status = CONTINUE;
                step = sequential(util, supervisor, step._1);
                break;
            }

            break;

          case RETURN:
            bhead = null;
            btail = null; // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.

            if (attempts === null) {
              status = COMPLETED;
              step = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp = attempts._3;
              attempt = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
                // We cannot recover from an unmasked interrupt. Otherwise we should
                // continue stepping, or run the exception handler if an exception
                // was raised.
                case CATCH:
                  // We should compare the interrupt status as well because we
                  // only want it to apply if there has been an interrupt since
                  // enqueuing the catch.
                  if (interrupt && interrupt !== tmp && bracketCount === 0) {
                    status = RETURN;
                  } else if (fail) {
                    status = CONTINUE;
                    step = attempt._2(util.fromLeft(fail));
                    fail = null;
                  }

                  break;
                // We cannot resume from an unmasked interrupt or exception.

                case RESUME:
                  // As with Catch, we only want to ignore in the case of an
                  // interrupt since enqueing the item.
                  if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                    status = RETURN;
                  } else {
                    bhead = attempt._1;
                    btail = attempt._2;
                    status = STEP_BIND;
                    step = util.fromRight(step);
                  }

                  break;
                // If we have a bracket, we should enqueue the handlers,
                // and continue with the success branch only if the fiber has
                // not been interrupted. If the bracket acquisition failed, we
                // should not run either.

                case BRACKET:
                  bracketCount--;

                  if (fail === null) {
                    result = util.fromRight(step); // We need to enqueue the Release with the same interrupt
                    // status as the Bracket that is initiating it.

                    attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp); // We should only coninue as long as the interrupt status has not changed or
                    // we are currently within a non-interruptable finalizer.

                    if (interrupt === tmp || bracketCount > 0) {
                      status = CONTINUE;
                      step = attempt._3(result);
                    }
                  }

                  break;
                // Enqueue the appropriate handler. We increase the bracket count
                // because it should not be cancelled.

                case RELEASE:
                  attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                  status = CONTINUE; // It has only been killed if the interrupt status has changed
                  // since we enqueued the item, and the bracket count is 0. If the
                  // bracket count is non-zero then we are in a masked state so it's
                  // impossible to be killed.

                  if (interrupt && interrupt !== tmp && bracketCount === 0) {
                    step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                  } else if (fail) {
                    step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                  } else {
                    step = attempt._1.completed(util.fromRight(step))(attempt._2);
                  }

                  fail = null;
                  bracketCount++;
                  break;

                case FINALIZER:
                  bracketCount++;
                  attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                  status = CONTINUE;
                  step = attempt._1;
                  break;

                case FINALIZED:
                  bracketCount--;
                  status = RETURN;
                  step = attempt._1;
                  fail = attempt._2;
                  break;
              }
            }

            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }

            joins = null; // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.

            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0); // If we have an unhandled exception, and no other fiber has joined
              // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }

            return;

          case SUSPENDED:
            status = CONTINUE;
            break;

          case PENDING:
            return;
        }
      }
    }

    function onComplete(join) {
      return function () {
        if (status === COMPLETED) {
          rethrow = rethrow && join.rethrow;
          join.handler(step)();
          return function () {};
        }

        var jid = joinId++;
        joins = joins || {};
        joins[jid] = join;
        return function () {
          if (joins !== null) {
            delete joins[jid];
          }
        };
      };
    }

    function kill(error, cb) {
      return function () {
        if (status === COMPLETED) {
          cb(util.right(void 0))();
          return function () {};
        }

        var canceler = onComplete({
          rethrow: false,
          handler: function handler()
          /* unused */
          {
            return cb(util.right(void 0));
          }
        })();

        switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status = COMPLETED;
            step = interrupt;

            _run(runTick);

            break;

          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }

            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }

              status = RETURN;
              step = null;
              fail = null;

              _run(++runTick);
            }

            break;

          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }

            if (bracketCount === 0) {
              status = RETURN;
              step = null;
              fail = null;
            }

        }

        return canceler;
      };
    }

    function join(cb) {
      return function () {
        var canceler = onComplete({
          rethrow: false,
          handler: cb
        })();

        if (status === SUSPENDED) {
          _run(runTick);
        }

        return canceler;
      };
    }

    return {
      kill: kill,
      join: join,
      onComplete: onComplete,
      isSuspended: function isSuspended() {
        return status === SUSPENDED;
      },
      run: function run() {
        if (status === SUSPENDED) {
          if (!Scheduler.isDraining()) {
            Scheduler.enqueue(function () {
              _run(runTick);
            });
          } else {
            _run(runTick);
          }
        }
      }
    };
  }

  function runPar(util, supervisor, par, cb) {
    // Table of all forked fibers.
    var fiberId = 0;
    var fibers = {}; // Table of currently running cancelers, as a product of `Alt` behavior.

    var killId = 0;
    var kills = {}; // Error used for early cancelation on Alt branches.

    var early = new Error("[ParAff] Early exit"); // Error used to kill the entire tree.

    var interrupt = null; // The root pointer of the tree.

    var root = EMPTY; // Walks a tree, invoking all the cancelers. Returns the table of pending
    // cancellation fibers.

    function kill(error, par, cb) {
      var step = par;
      var head = null;
      var tail = null;
      var count = 0;
      var kills = {};
      var tmp, kid;

      loop: while (true) {
        tmp = null;

        switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;

                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            } // Terminal case.


            if (head === null) {
              break loop;
            } // Go down the right side of the tree.


            step = head._2;

            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }

            break;

          case MAP:
            step = step._2;
            break;

          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }

            head = step;
            step = step._1;
            break;
        }
      }

      if (count === 0) {
        cb(util.right(void 0))();
      } else {
        // Run the cancelation effects. We alias `count` because it's mutable.
        kid = 0;
        tmp = count;

        for (; kid < tmp; kid++) {
          kills[kid] = kills[kid]();
        }
      }

      return kills;
    } // When a fiber resolves, we need to bubble back up the tree with the
    // result, computing the applicative nodes.


    function join(result, head, tail) {
      var fail, step, lhs, rhs, tmp, kid;

      if (util.isLeft(result)) {
        fail = result;
        step = null;
      } else {
        step = result;
        fail = null;
      }

      loop: while (true) {
        lhs = null;
        rhs = null;
        tmp = null;
        kid = null; // We should never continue if the entire tree has been interrupted.

        if (interrupt !== null) {
          return;
        } // We've made it all the way to the root of the tree, which means
        // the tree has fully evaluated.


        if (head === null) {
          cb(fail || step)();
          return;
        } // The tree has already been computed, so we shouldn't try to do it
        // again. This should never happen.
        // TODO: Remove this?


        if (head._3 !== EMPTY) {
          return;
        }

        switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step = head._3;
            } else {
              head._3 = fail;
            }

            break;

          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3; // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.

            if (fail) {
              head._3 = fail;
              tmp = true;
              kid = killId++;
              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function ()
              /* unused */
              {
                return function () {
                  delete kills[kid];

                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }

            break;

          case ALT:
            lhs = head._1._3;
            rhs = head._2._3; // We can only proceed if both have resolved or we have a success

            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            } // If both sides resolve with an error, we should continue with the
            // first error


            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail = step === lhs ? rhs : lhs;
              step = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp = true;
              kid = killId++; // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.

              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function ()
              /* unused */
              {
                return function () {
                  delete kills[kid];

                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }

            break;
        }

        if (tail === null) {
          head = null;
        } else {
          head = tail._1;
          tail = tail._2;
        }
      }
    }

    function resolve(fiber) {
      return function (result) {
        return function () {
          delete fibers[fiber._1];
          fiber._3 = result;
          join(result, fiber._2._1, fiber._2._2);
        };
      };
    } // Walks the applicative tree, substituting non-applicative nodes with
    // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
    // as a mutable slot for memoization. In an unresolved state, the `_3`
    // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
    // the left side first, because both operations are left-associative. As
    // we `RETURN` from those branches, we then walk the right side.


    function run() {
      var status = CONTINUE;
      var step = par;
      var head = null;
      var tail = null;
      var tmp, fid;

      loop: while (true) {
        tmp = null;
        fid = null;

        switch (status) {
          case CONTINUE:
            switch (step.tag) {
              case MAP:
                if (head) {
                  tail = new Aff(CONS, head, tail);
                }

                head = new Aff(MAP, step._1, EMPTY, EMPTY);
                step = step._2;
                break;

              case APPLY:
                if (head) {
                  tail = new Aff(CONS, head, tail);
                }

                head = new Aff(APPLY, EMPTY, step._2, EMPTY);
                step = step._1;
                break;

              case ALT:
                if (head) {
                  tail = new Aff(CONS, head, tail);
                }

                head = new Aff(ALT, EMPTY, step._2, EMPTY);
                step = step._1;
                break;

              default:
                // When we hit a leaf value, we suspend the stack in the `FORKED`.
                // When the fiber resolves, it can bubble back up the tree.
                fid = fiberId++;
                status = RETURN;
                tmp = step;
                step = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
                tmp = Fiber(util, supervisor, tmp);
                tmp.onComplete({
                  rethrow: false,
                  handler: resolve(step)
                })();
                fibers[fid] = tmp;

                if (supervisor) {
                  supervisor.register(tmp);
                }

            }

            break;

          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            } // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.


            if (head._1 === EMPTY) {
              head._1 = step;
              status = CONTINUE;
              step = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step = head;

              if (tail === null) {
                head = null;
              } else {
                head = tail._1;
                tail = tail._2;
              }
            }

        }
      } // Keep a reference to the tree root so it can be cancelled.


      root = step;

      for (fid = 0; fid < fiberId; fid++) {
        fibers[fid].run();
      }
    } // Cancels the entire tree. If there are already subtrees being canceled,
    // we need to first cancel those joins. We will then add fresh joins for
    // all pending branches including those that were in the process of being
    // canceled.


    function cancel(error, cb) {
      interrupt = util.left(error);
      var innerKills;

      for (var kid in kills) {
        if (kills.hasOwnProperty(kid)) {
          innerKills = kills[kid];

          for (kid in innerKills) {
            if (innerKills.hasOwnProperty(kid)) {
              innerKills[kid]();
            }
          }
        }
      }

      kills = null;
      var newKills = kill(error, root, cb);
      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            for (var kid in newKills) {
              if (newKills.hasOwnProperty(kid)) {
                newKills[kid]();
              }
            }

            return nonCanceler;
          };
        });
      };
    }

    run();
    return function (killError) {
      return new Aff(ASYNC, function (killCb) {
        return function () {
          return cancel(killError, killCb);
        };
      });
    };
  }

  function sequential(util, supervisor, par) {
    return new Aff(ASYNC, function (cb) {
      return function () {
        return runPar(util, supervisor, par, cb);
      };
    });
  }

  Aff.EMPTY = EMPTY;
  Aff.Pure = AffCtr(PURE);
  Aff.Throw = AffCtr(THROW);
  Aff.Catch = AffCtr(CATCH);
  Aff.Sync = AffCtr(SYNC);
  Aff.Async = AffCtr(ASYNC);
  Aff.Bind = AffCtr(BIND);
  Aff.Bracket = AffCtr(BRACKET);
  Aff.Fork = AffCtr(FORK);
  Aff.Seq = AffCtr(SEQ);
  Aff.ParMap = AffCtr(MAP);
  Aff.ParApply = AffCtr(APPLY);
  Aff.ParAlt = AffCtr(ALT);
  Aff.Fiber = Fiber;
  Aff.Supervisor = Supervisor;
  Aff.Scheduler = Scheduler;
  Aff.nonCanceler = nonCanceler;
  return Aff;
}();

exports._pure = Aff.Pure;
exports._throwError = Aff.Throw;

exports._catchError = function (aff) {
  return function (k) {
    return Aff.Catch(aff, k);
  };
};

exports._map = function (f) {
  return function (aff) {
    if (aff.tag === Aff.Pure.tag) {
      return Aff.Pure(f(aff._1));
    } else {
      return Aff.Bind(aff, function (value) {
        return Aff.Pure(f(value));
      });
    }
  };
};

exports._bind = function (aff) {
  return function (k) {
    return Aff.Bind(aff, k);
  };
};

exports._fork = function (immediate) {
  return function (aff) {
    return Aff.Fork(immediate, aff);
  };
};

exports._liftEffect = Aff.Sync;

exports._parAffMap = function (f) {
  return function (aff) {
    return Aff.ParMap(f, aff);
  };
};

exports._parAffApply = function (aff1) {
  return function (aff2) {
    return Aff.ParApply(aff1, aff2);
  };
};

exports._parAffAlt = function (aff1) {
  return function (aff2) {
    return Aff.ParAlt(aff1, aff2);
  };
};

exports.makeAff = Aff.Async;

exports.generalBracket = function (acquire) {
  return function (options) {
    return function (k) {
      return Aff.Bracket(acquire, options, k);
    };
  };
};

exports._makeFiber = function (util, aff) {
  return function () {
    return Aff.Fiber(util, null, aff);
  };
};

exports._makeSupervisedFiber = function (util, aff) {
  return function () {
    var supervisor = Aff.Supervisor(util);
    return {
      fiber: Aff.Fiber(util, supervisor, aff),
      supervisor: supervisor
    };
  };
};

exports._killAll = function (error, supervisor, cb) {
  return supervisor.killAll(error, cb);
};

exports._delay = function () {
  function setDelay(n, k) {
    if (n === 0 && typeof setImmediate !== "undefined") {
      return setImmediate(k);
    } else {
      return setTimeout(k, n);
    }
  }

  function clearDelay(n, t) {
    if (n === 0 && typeof clearImmediate !== "undefined") {
      return clearImmediate(t);
    } else {
      return clearTimeout(t);
    }
  }

  return function (right, ms) {
    return Aff.Async(function (cb) {
      return function () {
        var timer = setDelay(ms, cb(right()));
        return function () {
          return Aff.Sync(function () {
            return right(clearDelay(ms, timer));
          });
        };
      };
    });
  };
}();

exports._sequential = Aff.Seq;
},{}],"output/Effect.Exception/foreign.js":[function(require,module,exports) {
"use strict";

exports.showErrorImpl = function (err) {
  return err.stack || err.toString();
};

exports.error = function (msg) {
  return new Error(msg);
};

exports.message = function (e) {
  return e.message;
};

exports.name = function (e) {
  return e.name || "Error";
};

exports.stackImpl = function (just) {
  return function (nothing) {
    return function (e) {
      return e.stack ? just(e.stack) : nothing;
    };
  };
};

exports.throwException = function (e) {
  return function () {
    throw e;
  };
};

exports.catchException = function (c) {
  return function (t) {
    return function () {
      try {
        return t();
      } catch (e) {
        if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
          return c(e)();
        } else {
          return c(new Error(e.toString()))();
        }
      }
    };
  };
};
},{}],"output/Effect.Exception/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Show = require("../Data.Show/index.js");

var Effect = require("../Effect/index.js");

var $$try = function $$try(action) {
  return $foreign.catchException(function () {
    var $0 = Control_Applicative.pure(Effect.applicativeEffect);
    return function ($1) {
      return $0(Data_Either.Left.create($1));
    };
  }())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
};

var $$throw = function $$throw($2) {
  return $foreign.throwException($foreign.error($2));
};

var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var showError = new Data_Show.Show($foreign.showErrorImpl);
module.exports = {
  stack: stack,
  "throw": $$throw,
  "try": $$try,
  showError: showError,
  error: $foreign.error,
  message: $foreign.message,
  name: $foreign.name,
  throwException: $foreign.throwException,
  catchException: $foreign.catchException
};
},{"./foreign.js":"output/Effect.Exception/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Effect/index.js":"output/Effect/index.js"}],"output/Control.Monad.Error.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Exception = require("../Effect.Exception/index.js");

var MonadThrow = function MonadThrow(Monad0, throwError) {
  this.Monad0 = Monad0;
  this.throwError = throwError;
};

var MonadError = function MonadError(MonadThrow0, catchError) {
  this.MonadThrow0 = MonadThrow0;
  this.catchError = catchError;
};

var throwError = function throwError(dict) {
  return dict.throwError;
};

var monadThrowMaybe = new MonadThrow(function () {
  return Data_Maybe.monadMaybe;
}, Data_Function["const"](Data_Maybe.Nothing.value));
var monadThrowEither = new MonadThrow(function () {
  return Data_Either.monadEither;
}, Data_Either.Left.create);
var monadThrowEffect = new MonadThrow(function () {
  return Effect.monadEffect;
}, Effect_Exception.throwException);
var monadErrorMaybe = new MonadError(function () {
  return monadThrowMaybe;
}, function (v) {
  return function (v1) {
    if (v instanceof Data_Maybe.Nothing) {
      return v1(Data_Unit.unit);
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return new Data_Maybe.Just(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Control.Monad.Error.Class (line 79, column 1 - line 81, column 33): " + [v.constructor.name, v1.constructor.name]);
  };
});
var monadErrorEither = new MonadError(function () {
  return monadThrowEither;
}, function (v) {
  return function (v1) {
    if (v instanceof Data_Either.Left) {
      return v1(v.value0);
    }

    ;

    if (v instanceof Data_Either.Right) {
      return new Data_Either.Right(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 74, column 35): " + [v.constructor.name, v1.constructor.name]);
  };
});
var monadErrorEffect = new MonadError(function () {
  return monadThrowEffect;
}, Data_Function.flip(Effect_Exception.catchException));

var catchError = function catchError(dict) {
  return dict.catchError;
};

var catchJust = function catchJust(dictMonadError) {
  return function (p) {
    return function (act) {
      return function (handler) {
        var handle = function handle(e) {
          var v = p(e);

          if (v instanceof Data_Maybe.Nothing) {
            return throwError(dictMonadError.MonadThrow0())(e);
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return handler(v.value0);
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): " + [v.constructor.name]);
        };

        return catchError(dictMonadError)(act)(handle);
      };
    };
  };
};

var $$try = function $$try(dictMonadError) {
  return function (a) {
    return catchError(dictMonadError)(Data_Functor.map(dictMonadError.MonadThrow0().Monad0().Bind1().Apply0().Functor0())(Data_Either.Right.create)(a))(function () {
      var $17 = Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0());
      return function ($18) {
        return $17(Data_Either.Left.create($18));
      };
    }());
  };
};

var withResource = function withResource(dictMonadError) {
  return function (acquire) {
    return function (release) {
      return function (kleisli) {
        return Control_Bind.bind(dictMonadError.MonadThrow0().Monad0().Bind1())(acquire)(function (resource) {
          return Control_Bind.bind(dictMonadError.MonadThrow0().Monad0().Bind1())($$try(dictMonadError)(kleisli(resource)))(function (result) {
            return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadError.MonadThrow0().Monad0().Bind1())(release(resource))(function () {
              return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0()))(result);
            });
          });
        });
      };
    };
  };
};

module.exports = {
  catchError: catchError,
  throwError: throwError,
  MonadThrow: MonadThrow,
  MonadError: MonadError,
  catchJust: catchJust,
  "try": $$try,
  withResource: withResource,
  monadThrowEither: monadThrowEither,
  monadErrorEither: monadErrorEither,
  monadThrowMaybe: monadThrowMaybe,
  monadErrorMaybe: monadErrorMaybe,
  monadThrowEffect: monadThrowEffect,
  monadErrorEffect: monadErrorEffect
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect/index.js":"output/Effect/index.js","../Effect.Exception/index.js":"output/Effect.Exception/index.js"}],"output/Control.Monad.Cont.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var MonadCont = function MonadCont(Monad0, callCC) {
  this.Monad0 = Monad0;
  this.callCC = callCC;
};

var callCC = function callCC(dict) {
  return dict.callCC;
};

module.exports = {
  MonadCont: MonadCont,
  callCC: callCC
};
},{}],"output/Control.Monad.Reader.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var MonadAsk = function MonadAsk(Monad0, ask) {
  this.Monad0 = Monad0;
  this.ask = ask;
};

var MonadReader = function MonadReader(MonadAsk0, local) {
  this.MonadAsk0 = MonadAsk0;
  this.local = local;
};

var monadAskFun = new MonadAsk(function () {
  return Control_Monad.monadFn;
}, Control_Category.identity(Control_Category.categoryFn));
var monadReaderFun = new MonadReader(function () {
  return monadAskFun;
}, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));

var local = function local(dict) {
  return dict.local;
};

var ask = function ask(dict) {
  return dict.ask;
};

var asks = function asks(dictMonadAsk) {
  return function (f) {
    return Data_Functor.map(dictMonadAsk.Monad0().Bind1().Apply0().Functor0())(f)(ask(dictMonadAsk));
  };
};

module.exports = {
  ask: ask,
  local: local,
  MonadAsk: MonadAsk,
  asks: asks,
  MonadReader: MonadReader,
  monadAskFun: monadAskFun,
  monadReaderFun: monadReaderFun
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Semigroupoid/index.js":"output/Control.Semigroupoid/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js"}],"output/Control.Monad.Trans.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var MonadTrans = function MonadTrans(lift) {
  this.lift = lift;
};

var lift = function lift(dict) {
  return dict.lift;
};

module.exports = {
  lift: lift,
  MonadTrans: MonadTrans
};
},{}],"output/Effect.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Effect = require("../Effect/index.js");

var MonadEffect = function MonadEffect(Monad0, liftEffect) {
  this.Monad0 = Monad0;
  this.liftEffect = liftEffect;
};

var monadEffectEffect = new MonadEffect(function () {
  return Effect.monadEffect;
}, Control_Category.identity(Control_Category.categoryFn));

var liftEffect = function liftEffect(dict) {
  return dict.liftEffect;
};

module.exports = {
  liftEffect: liftEffect,
  MonadEffect: MonadEffect,
  monadEffectEffect: monadEffectEffect
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Effect/index.js":"output/Effect/index.js"}],"output/Control.Monad.Cont.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var ContT = function ContT(x) {
  return x;
};

var withContT = function withContT(f) {
  return function (v) {
    return function (k) {
      return v(f(k));
    };
  };
};

var runContT = function runContT(v) {
  return function (k) {
    return v(k);
  };
};

var newtypeContT = new Data_Newtype.Newtype(function (n) {
  return n;
}, ContT);
var monadTransContT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return function (m) {
    return function (k) {
      return Control_Bind.bind(dictMonad.Bind1())(m)(k);
    };
  };
});

var mapContT = function mapContT(f) {
  return function (v) {
    return function (k) {
      return f(v(k));
    };
  };
};

var functorContT = function functorContT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return function (k) {
        return v(function (a) {
          return k(f(a));
        });
      };
    };
  });
};

var applyContT = function applyContT(dictApply) {
  return new Control_Apply.Apply(function () {
    return functorContT(dictApply.Functor0());
  }, function (v) {
    return function (v1) {
      return function (k) {
        return v(function (g) {
          return v1(function (a) {
            return k(g(a));
          });
        });
      };
    };
  });
};

var bindContT = function bindContT(dictBind) {
  return new Control_Bind.Bind(function () {
    return applyContT(dictBind.Apply0());
  }, function (v) {
    return function (k) {
      return function (k$prime) {
        return v(function (a) {
          var v1 = k(a);
          return v1(k$prime);
        });
      };
    };
  });
};

var applicativeContT = function applicativeContT(dictApplicative) {
  return new Control_Applicative.Applicative(function () {
    return applyContT(dictApplicative.Apply0());
  }, function (a) {
    return function (k) {
      return k(a);
    };
  });
};

var monadContT = function monadContT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeContT(dictMonad.Applicative0());
  }, function () {
    return bindContT(dictMonad.Bind1());
  });
};

var monadAskContT = function monadAskContT(dictMonadAsk) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadContT(dictMonadAsk.Monad0());
  }, Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};

var monadReaderContT = function monadReaderContT(dictMonadReader) {
  return new Control_Monad_Reader_Class.MonadReader(function () {
    return monadAskContT(dictMonadReader.MonadAsk0());
  }, function (f) {
    return function (v) {
      return function (k) {
        return Control_Bind.bind(dictMonadReader.MonadAsk0().Monad0().Bind1())(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()))(function (r) {
          return Control_Monad_Reader_Class.local(dictMonadReader)(f)(v(function () {
            var $43 = Control_Monad_Reader_Class.local(dictMonadReader)(Data_Function["const"](r));
            return function ($44) {
              return $43(k($44));
            };
          }()));
        });
      };
    };
  });
};

var monadContContT = function monadContContT(dictMonad) {
  return new Control_Monad_Cont_Class.MonadCont(function () {
    return monadContT(dictMonad);
  }, function (f) {
    return function (k) {
      var v = f(function (a) {
        return function (v1) {
          return k(a);
        };
      });
      return v(k);
    };
  });
};

var monadEffectContT = function monadEffectContT(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadContT(dictMonadEffect.Monad0());
  }, function () {
    var $45 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadEffect.Monad0());
    var $46 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($47) {
      return $45($46($47));
    };
  }());
};

var monadStateContT = function monadStateContT(dictMonadState) {
  return new Control_Monad_State_Class.MonadState(function () {
    return monadContT(dictMonadState.Monad0());
  }, function () {
    var $48 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadState.Monad0());
    var $49 = Control_Monad_State_Class.state(dictMonadState);
    return function ($50) {
      return $48($49($50));
    };
  }());
};

module.exports = {
  ContT: ContT,
  runContT: runContT,
  mapContT: mapContT,
  withContT: withContT,
  newtypeContT: newtypeContT,
  monadContContT: monadContContT,
  functorContT: functorContT,
  applyContT: applyContT,
  applicativeContT: applicativeContT,
  bindContT: bindContT,
  monadContT: monadContT,
  monadTransContT: monadTransContT,
  monadEffectContT: monadEffectContT,
  monadAskContT: monadAskContT,
  monadReaderContT: monadReaderContT,
  monadStateContT: monadStateContT
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"output/Control.Monad.Cont.Class/index.js","../Control.Monad.Reader.Class/index.js":"output/Control.Monad.Reader.Class/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js"}],"output/Control.Monad.Writer.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var MonadTell = function MonadTell(Monad0, tell) {
  this.Monad0 = Monad0;
  this.tell = tell;
};

var MonadWriter = function MonadWriter(MonadTell0, listen, pass) {
  this.MonadTell0 = MonadTell0;
  this.listen = listen;
  this.pass = pass;
};

var tell = function tell(dict) {
  return dict.tell;
};

var pass = function pass(dict) {
  return dict.pass;
};

var listen = function listen(dict) {
  return dict.listen;
};

var listens = function listens(dictMonadWriter) {
  return function (f) {
    return function (m) {
      return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(listen(dictMonadWriter)(m))(function (v) {
        return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
      });
    };
  };
};

var censor = function censor(dictMonadWriter) {
  return function (f) {
    return function (m) {
      return pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m)(function (a) {
        return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(a, f));
      }));
    };
  };
};

module.exports = {
  listen: listen,
  pass: pass,
  tell: tell,
  MonadTell: MonadTell,
  MonadWriter: MonadWriter,
  listens: listens,
  censor: censor
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js"}],"output/Control.Monad.Except.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var ExceptT = function ExceptT(x) {
  return x;
};

var withExceptT = function withExceptT(dictFunctor) {
  return function (f) {
    return function (v) {
      var mapLeft = function mapLeft(v1) {
        return function (v2) {
          if (v2 instanceof Data_Either.Right) {
            return new Data_Either.Right(v2.value0);
          }

          ;

          if (v2 instanceof Data_Either.Left) {
            return new Data_Either.Left(v1(v2.value0));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [v1.constructor.name, v2.constructor.name]);
        };
      };

      return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
    };
  };
};

var runExceptT = function runExceptT(v) {
  return v;
};

var newtypeExceptT = new Data_Newtype.Newtype(function (n) {
  return n;
}, ExceptT);
var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return function (m) {
    return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
    });
  };
});

var mapExceptT = function mapExceptT(f) {
  return function (v) {
    return f(v);
  };
};

var functorExceptT = function functorExceptT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
  });
};

var except = function except(dictApplicative) {
  var $88 = Control_Applicative.pure(dictApplicative);
  return function ($89) {
    return ExceptT($88($89));
  };
};

var monadExceptT = function monadExceptT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeExceptT(dictMonad);
  }, function () {
    return bindExceptT(dictMonad);
  });
};

var bindExceptT = function bindExceptT(dictMonad) {
  return new Control_Bind.Bind(function () {
    return applyExceptT(dictMonad);
  }, function (v) {
    return function (k) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function () {
        var $90 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($91) {
          return $90(Data_Either.Left.create($91));
        };
      }())(function (a) {
        var v1 = k(a);
        return v1;
      }));
    };
  });
};

var applyExceptT = function applyExceptT(dictMonad) {
  return new Control_Apply.Apply(function () {
    return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
  }, Control_Monad.ap(monadExceptT(dictMonad)));
};

var applicativeExceptT = function applicativeExceptT(dictMonad) {
  return new Control_Applicative.Applicative(function () {
    return applyExceptT(dictMonad);
  }, function () {
    var $92 = Control_Applicative.pure(dictMonad.Applicative0());
    return function ($93) {
      return ExceptT($92(Data_Either.Right.create($93)));
    };
  }());
};

var monadAskExceptT = function monadAskExceptT(dictMonadAsk) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadExceptT(dictMonadAsk.Monad0());
  }, Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};

var monadReaderExceptT = function monadReaderExceptT(dictMonadReader) {
  return new Control_Monad_Reader_Class.MonadReader(function () {
    return monadAskExceptT(dictMonadReader.MonadAsk0());
  }, function (f) {
    return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
  });
};

var monadContExceptT = function monadContExceptT(dictMonadCont) {
  return new Control_Monad_Cont_Class.MonadCont(function () {
    return monadExceptT(dictMonadCont.Monad0());
  }, function (f) {
    return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
      var v = f(function (a) {
        return ExceptT(c(new Data_Either.Right(a)));
      });
      return v;
    }));
  });
};

var monadEffectExceptT = function monadEffectExceptT(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadExceptT(dictMonadEffect.Monad0());
  }, function () {
    var $94 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
    var $95 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($96) {
      return $94($95($96));
    };
  }());
};

var monadRecExceptT = function monadRecExceptT(dictMonadRec) {
  return new Control_Monad_Rec_Class.MonadRec(function () {
    return monadExceptT(dictMonadRec.Monad0());
  }, function (f) {
    var $97 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
      var v = f(a);
      return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v)(function (m$prime) {
        return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function () {
          if (m$prime instanceof Data_Either.Left) {
            return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
          }

          ;

          if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
            return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
          }

          ;

          if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
            return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 74, column 14 - line 77, column 43): " + [m$prime.constructor.name]);
        }());
      });
    });
    return function ($98) {
      return ExceptT($97($98));
    };
  });
};

var monadStateExceptT = function monadStateExceptT(dictMonadState) {
  return new Control_Monad_State_Class.MonadState(function () {
    return monadExceptT(dictMonadState.Monad0());
  }, function (f) {
    return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
  });
};

var monadTellExceptT = function monadTellExceptT(dictMonadTell) {
  return new Control_Monad_Writer_Class.MonadTell(function () {
    return monadExceptT(dictMonadTell.Monad0());
  }, function () {
    var $99 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad0());
    var $100 = Control_Monad_Writer_Class.tell(dictMonadTell);
    return function ($101) {
      return $99($100($101));
    };
  }());
};

var monadWriterExceptT = function monadWriterExceptT(dictMonadWriter) {
  return new Control_Monad_Writer_Class.MonadWriter(function () {
    return monadTellExceptT(dictMonadWriter.MonadTell0());
  }, mapExceptT(function (m) {
    return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
      return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(Data_Functor.map(Data_Either.functorEither)(function (r) {
        return new Data_Tuple.Tuple(r, v.value1);
      })(v.value0));
    });
  }), mapExceptT(function (m) {
    return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m)(function (a) {
      return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(function () {
        if (a instanceof Data_Either.Left) {
          return new Data_Tuple.Tuple(new Data_Either.Left(a.value0), Control_Category.identity(Control_Category.categoryFn));
        }

        ;

        if (a instanceof Data_Either.Right) {
          return new Data_Tuple.Tuple(new Data_Either.Right(a.value0.value0), a.value0.value1);
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 136, column 10 - line 138, column 45): " + [a.constructor.name]);
      }());
    }));
  }));
};

var monadThrowExceptT = function monadThrowExceptT(dictMonad) {
  return new Control_Monad_Error_Class.MonadThrow(function () {
    return monadExceptT(dictMonad);
  }, function () {
    var $102 = Control_Applicative.pure(dictMonad.Applicative0());
    return function ($103) {
      return ExceptT($102(Data_Either.Left.create($103)));
    };
  }());
};

var monadErrorExceptT = function monadErrorExceptT(dictMonad) {
  return new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowExceptT(dictMonad);
  }, function (v) {
    return function (k) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
        var v1 = k(a);
        return v1;
      })(function () {
        var $104 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($105) {
          return $104(Data_Either.Right.create($105));
        };
      }()));
    };
  });
};

var altExceptT = function altExceptT(dictSemigroup) {
  return function (dictMonad) {
    return new Control_Alt.Alt(function () {
      return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
    }, function (v) {
      return function (v1) {
        return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
          if (rm instanceof Data_Either.Right) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
          }

          ;

          if (rm instanceof Data_Either.Left) {
            return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
              if (rn instanceof Data_Either.Right) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
              }

              ;

              if (rn instanceof Data_Either.Left) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
              }

              ;
              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [rn.constructor.name]);
            });
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [rm.constructor.name]);
        });
      };
    });
  };
};

var plusExceptT = function plusExceptT(dictMonoid) {
  return function (dictMonad) {
    return new Control_Plus.Plus(function () {
      return altExceptT(dictMonoid.Semigroup0())(dictMonad);
    }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
  };
};

var alternativeExceptT = function alternativeExceptT(dictMonoid) {
  return function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
      return applicativeExceptT(dictMonad);
    }, function () {
      return plusExceptT(dictMonoid)(dictMonad);
    });
  };
};

var monadZeroExceptT = function monadZeroExceptT(dictMonoid) {
  return function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
      return alternativeExceptT(dictMonoid)(dictMonad);
    }, function () {
      return monadExceptT(dictMonad);
    });
  };
};

var monadPlusExceptT = function monadPlusExceptT(dictMonoid) {
  return function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
      return monadZeroExceptT(dictMonoid)(dictMonad);
    });
  };
};

module.exports = {
  ExceptT: ExceptT,
  runExceptT: runExceptT,
  withExceptT: withExceptT,
  mapExceptT: mapExceptT,
  except: except,
  newtypeExceptT: newtypeExceptT,
  functorExceptT: functorExceptT,
  applyExceptT: applyExceptT,
  applicativeExceptT: applicativeExceptT,
  bindExceptT: bindExceptT,
  monadExceptT: monadExceptT,
  monadRecExceptT: monadRecExceptT,
  altExceptT: altExceptT,
  plusExceptT: plusExceptT,
  alternativeExceptT: alternativeExceptT,
  monadPlusExceptT: monadPlusExceptT,
  monadZeroExceptT: monadZeroExceptT,
  monadTransExceptT: monadTransExceptT,
  monadEffectExceptT: monadEffectExceptT,
  monadContExceptT: monadContExceptT,
  monadThrowExceptT: monadThrowExceptT,
  monadErrorExceptT: monadErrorExceptT,
  monadAskExceptT: monadAskExceptT,
  monadReaderExceptT: monadReaderExceptT,
  monadStateExceptT: monadStateExceptT,
  monadTellExceptT: monadTellExceptT,
  monadWriterExceptT: monadWriterExceptT
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"output/Control.Monad.Cont.Class/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"output/Control.Monad.Writer.Class/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js"}],"output/Control.Monad.Maybe.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var MaybeT = function MaybeT(x) {
  return x;
};

var runMaybeT = function runMaybeT(v) {
  return v;
};

var newtypeMaybeT = new Data_Newtype.Newtype(function (n) {
  return n;
}, MaybeT);
var monadTransMaybeT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  var $71 = Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create);
  return function ($72) {
    return MaybeT($71($72));
  };
});

var mapMaybeT = function mapMaybeT(f) {
  return function (v) {
    return f(v);
  };
};

var functorMaybeT = function functorMaybeT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
    };
  });
};

var monadMaybeT = function monadMaybeT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeMaybeT(dictMonad);
  }, function () {
    return bindMaybeT(dictMonad);
  });
};

var bindMaybeT = function bindMaybeT(dictMonad) {
  return new Control_Bind.Bind(function () {
    return applyMaybeT(dictMonad);
  }, function (v) {
    return function (f) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
        if (v1 instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          var v2 = f(v1.value0);
          return v2;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 54, column 11 - line 56, column 42): " + [v1.constructor.name]);
      });
    };
  });
};

var applyMaybeT = function applyMaybeT(dictMonad) {
  return new Control_Apply.Apply(function () {
    return functorMaybeT(dictMonad.Bind1().Apply0().Functor0());
  }, Control_Monad.ap(monadMaybeT(dictMonad)));
};

var applicativeMaybeT = function applicativeMaybeT(dictMonad) {
  return new Control_Applicative.Applicative(function () {
    return applyMaybeT(dictMonad);
  }, function () {
    var $73 = Control_Applicative.pure(dictMonad.Applicative0());
    return function ($74) {
      return MaybeT($73(Data_Maybe.Just.create($74)));
    };
  }());
};

var monadAskMaybeT = function monadAskMaybeT(dictMonadAsk) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadMaybeT(dictMonadAsk.Monad0());
  }, Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};

var monadReaderMaybeT = function monadReaderMaybeT(dictMonadReader) {
  return new Control_Monad_Reader_Class.MonadReader(function () {
    return monadAskMaybeT(dictMonadReader.MonadAsk0());
  }, function (f) {
    return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
  });
};

var monadContMaybeT = function monadContMaybeT(dictMonadCont) {
  return new Control_Monad_Cont_Class.MonadCont(function () {
    return monadMaybeT(dictMonadCont.Monad0());
  }, function (f) {
    return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
      var v = f(function (a) {
        return MaybeT(c(new Data_Maybe.Just(a)));
      });
      return v;
    }));
  });
};

var monadEffectMaybe = function monadEffectMaybe(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadMaybeT(dictMonadEffect.Monad0());
  }, function () {
    var $75 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadEffect.Monad0());
    var $76 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($77) {
      return $75($76($77));
    };
  }());
};

var monadRecMaybeT = function monadRecMaybeT(dictMonadRec) {
  return new Control_Monad_Rec_Class.MonadRec(function () {
    return monadMaybeT(dictMonadRec.Monad0());
  }, function (f) {
    var $78 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
      var v = f(a);
      return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v)(function (m$prime) {
        return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function () {
          if (m$prime instanceof Data_Maybe.Nothing) {
            return new Control_Monad_Rec_Class.Done(Data_Maybe.Nothing.value);
          }

          ;

          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
            return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
          }

          ;

          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
            return new Control_Monad_Rec_Class.Done(new Data_Maybe.Just(m$prime.value0.value0));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 84, column 16 - line 87, column 43): " + [m$prime.constructor.name]);
        }());
      });
    });
    return function ($79) {
      return MaybeT($78($79));
    };
  });
};

var monadStateMaybeT = function monadStateMaybeT(dictMonadState) {
  return new Control_Monad_State_Class.MonadState(function () {
    return monadMaybeT(dictMonadState.Monad0());
  }, function (f) {
    return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
  });
};

var monadTellMaybeT = function monadTellMaybeT(dictMonadTell) {
  return new Control_Monad_Writer_Class.MonadTell(function () {
    return monadMaybeT(dictMonadTell.Monad0());
  }, function () {
    var $80 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadTell.Monad0());
    var $81 = Control_Monad_Writer_Class.tell(dictMonadTell);
    return function ($82) {
      return $80($81($82));
    };
  }());
};

var monadWriterMaybeT = function monadWriterMaybeT(dictMonadWriter) {
  return new Control_Monad_Writer_Class.MonadWriter(function () {
    return monadTellMaybeT(dictMonadWriter.MonadTell0());
  }, mapMaybeT(function (m) {
    return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
      return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(Data_Functor.map(Data_Maybe.functorMaybe)(function (r) {
        return new Data_Tuple.Tuple(r, v.value1);
      })(v.value0));
    });
  }), mapMaybeT(function (m) {
    return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m)(function (a) {
      return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(function () {
        if (a instanceof Data_Maybe.Nothing) {
          return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Control_Category.identity(Control_Category.categoryFn));
        }

        ;

        if (a instanceof Data_Maybe.Just) {
          return new Data_Tuple.Tuple(new Data_Maybe.Just(a.value0.value0), a.value0.value1);
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 121, column 10 - line 123, column 43): " + [a.constructor.name]);
      }());
    }));
  }));
};

var monadThrowMaybeT = function monadThrowMaybeT(dictMonadThrow) {
  return new Control_Monad_Error_Class.MonadThrow(function () {
    return monadMaybeT(dictMonadThrow.Monad0());
  }, function (e) {
    return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
  });
};

var monadErrorMaybeT = function monadErrorMaybeT(dictMonadError) {
  return new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowMaybeT(dictMonadError.MonadThrow0());
  }, function (v) {
    return function (h) {
      return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (a) {
        var v1 = h(a);
        return v1;
      }));
    };
  });
};

var altMaybeT = function altMaybeT(dictMonad) {
  return new Control_Alt.Alt(function () {
    return functorMaybeT(dictMonad.Bind1().Apply0().Functor0());
  }, function (v) {
    return function (v1) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(function (m) {
        if (m instanceof Data_Maybe.Nothing) {
          return v1;
        }

        ;
        return Control_Applicative.pure(dictMonad.Applicative0())(m);
      });
    };
  });
};

var plusMaybeT = function plusMaybeT(dictMonad) {
  return new Control_Plus.Plus(function () {
    return altMaybeT(dictMonad);
  }, Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value));
};

var alternativeMaybeT = function alternativeMaybeT(dictMonad) {
  return new Control_Alternative.Alternative(function () {
    return applicativeMaybeT(dictMonad);
  }, function () {
    return plusMaybeT(dictMonad);
  });
};

var monadZeroMaybeT = function monadZeroMaybeT(dictMonad) {
  return new Control_MonadZero.MonadZero(function () {
    return alternativeMaybeT(dictMonad);
  }, function () {
    return monadMaybeT(dictMonad);
  });
};

var monadPlusMaybeT = function monadPlusMaybeT(dictMonad) {
  return new Control_MonadPlus.MonadPlus(function () {
    return monadZeroMaybeT(dictMonad);
  });
};

module.exports = {
  MaybeT: MaybeT,
  runMaybeT: runMaybeT,
  mapMaybeT: mapMaybeT,
  newtypeMaybeT: newtypeMaybeT,
  functorMaybeT: functorMaybeT,
  applyMaybeT: applyMaybeT,
  applicativeMaybeT: applicativeMaybeT,
  bindMaybeT: bindMaybeT,
  monadMaybeT: monadMaybeT,
  monadTransMaybeT: monadTransMaybeT,
  altMaybeT: altMaybeT,
  plusMaybeT: plusMaybeT,
  alternativeMaybeT: alternativeMaybeT,
  monadPlusMaybeT: monadPlusMaybeT,
  monadZeroMaybeT: monadZeroMaybeT,
  monadRecMaybeT: monadRecMaybeT,
  monadEffectMaybe: monadEffectMaybe,
  monadContMaybeT: monadContMaybeT,
  monadThrowMaybeT: monadThrowMaybeT,
  monadErrorMaybeT: monadErrorMaybeT,
  monadAskMaybeT: monadAskMaybeT,
  monadReaderMaybeT: monadReaderMaybeT,
  monadStateMaybeT: monadStateMaybeT,
  monadTellMaybeT: monadTellMaybeT,
  monadWriterMaybeT: monadWriterMaybeT
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"output/Control.Monad.Cont.Class/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"output/Control.Monad.Writer.Class/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js"}],"output/Control.Monad.Reader.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Distributive = require("../Data.Distributive/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var ReaderT = function ReaderT(x) {
  return x;
};

var withReaderT = function withReaderT(f) {
  return function (v) {
    return function ($66) {
      return v(f($66));
    };
  };
};

var runReaderT = function runReaderT(v) {
  return v;
};

var newtypeReaderT = new Data_Newtype.Newtype(function (n) {
  return n;
}, ReaderT);
var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return function ($67) {
    return ReaderT(Data_Function["const"]($67));
  };
});

var mapReaderT = function mapReaderT(f) {
  return function (v) {
    return function ($68) {
      return f(v($68));
    };
  };
};

var functorReaderT = function functorReaderT(dictFunctor) {
  return new Data_Functor.Functor(function () {
    var $69 = Data_Functor.map(dictFunctor);
    return function ($70) {
      return mapReaderT($69($70));
    };
  }());
};

var distributiveReaderT = function distributiveReaderT(dictDistributive) {
  return new Data_Distributive.Distributive(function () {
    return functorReaderT(dictDistributive.Functor0());
  }, function (dictFunctor) {
    return function (f) {
      var $71 = Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor);
      var $72 = Data_Functor.map(dictFunctor)(f);
      return function ($73) {
        return $71($72($73));
      };
    };
  }, function (dictFunctor) {
    return function (a) {
      return function (e) {
        return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (r) {
          return r(e);
        })(a);
      };
    };
  });
};

var applyReaderT = function applyReaderT(dictApply) {
  return new Control_Apply.Apply(function () {
    return functorReaderT(dictApply.Functor0());
  }, function (v) {
    return function (v1) {
      return function (r) {
        return Control_Apply.apply(dictApply)(v(r))(v1(r));
      };
    };
  });
};

var bindReaderT = function bindReaderT(dictBind) {
  return new Control_Bind.Bind(function () {
    return applyReaderT(dictBind.Apply0());
  }, function (v) {
    return function (k) {
      return function (r) {
        return Control_Bind.bind(dictBind)(v(r))(function (a) {
          var v1 = k(a);
          return v1(r);
        });
      };
    };
  });
};

var semigroupReaderT = function semigroupReaderT(dictApply) {
  return function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyReaderT(dictApply))(Data_Semigroup.append(dictSemigroup)));
  };
};

var applicativeReaderT = function applicativeReaderT(dictApplicative) {
  return new Control_Applicative.Applicative(function () {
    return applyReaderT(dictApplicative.Apply0());
  }, function () {
    var $74 = Control_Applicative.pure(dictApplicative);
    return function ($75) {
      return ReaderT(Data_Function["const"]($74($75)));
    };
  }());
};

var monadReaderT = function monadReaderT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeReaderT(dictMonad.Applicative0());
  }, function () {
    return bindReaderT(dictMonad.Bind1());
  });
};

var monadAskReaderT = function monadAskReaderT(dictMonad) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadReaderT(dictMonad);
  }, Control_Applicative.pure(dictMonad.Applicative0()));
};

var monadReaderReaderT = function monadReaderReaderT(dictMonad) {
  return new Control_Monad_Reader_Class.MonadReader(function () {
    return monadAskReaderT(dictMonad);
  }, withReaderT);
};

var monadContReaderT = function monadContReaderT(dictMonadCont) {
  return new Control_Monad_Cont_Class.MonadCont(function () {
    return monadReaderT(dictMonadCont.Monad0());
  }, function (f) {
    return function (r) {
      return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
        var v = f(function ($76) {
          return ReaderT(Data_Function["const"](c($76)));
        });
        return v(r);
      });
    };
  });
};

var monadEffectReader = function monadEffectReader(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadReaderT(dictMonadEffect.Monad0());
  }, function () {
    var $77 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
    var $78 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($79) {
      return $77($78($79));
    };
  }());
};

var monadRecReaderT = function monadRecReaderT(dictMonadRec) {
  return new Control_Monad_Rec_Class.MonadRec(function () {
    return monadReaderT(dictMonadRec.Monad0());
  }, function (k) {
    return function (a) {
      var k$prime = function k$prime(r) {
        return function (a$prime) {
          var v = k(a$prime);
          return Control_Bind.bindFlipped(dictMonadRec.Monad0().Bind1())(Control_Applicative.pure(dictMonadRec.Monad0().Applicative0()))(v(r));
        };
      };

      return function (r) {
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
      };
    };
  });
};

var monadStateReaderT = function monadStateReaderT(dictMonadState) {
  return new Control_Monad_State_Class.MonadState(function () {
    return monadReaderT(dictMonadState.Monad0());
  }, function () {
    var $80 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadState.Monad0());
    var $81 = Control_Monad_State_Class.state(dictMonadState);
    return function ($82) {
      return $80($81($82));
    };
  }());
};

var monadTellReaderT = function monadTellReaderT(dictMonadTell) {
  return new Control_Monad_Writer_Class.MonadTell(function () {
    return monadReaderT(dictMonadTell.Monad0());
  }, function () {
    var $83 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadTell.Monad0());
    var $84 = Control_Monad_Writer_Class.tell(dictMonadTell);
    return function ($85) {
      return $83($84($85));
    };
  }());
};

var monadWriterReaderT = function monadWriterReaderT(dictMonadWriter) {
  return new Control_Monad_Writer_Class.MonadWriter(function () {
    return monadTellReaderT(dictMonadWriter.MonadTell0());
  }, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)));
};

var monadThrowReaderT = function monadThrowReaderT(dictMonadThrow) {
  return new Control_Monad_Error_Class.MonadThrow(function () {
    return monadReaderT(dictMonadThrow.Monad0());
  }, function () {
    var $86 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0());
    var $87 = Control_Monad_Error_Class.throwError(dictMonadThrow);
    return function ($88) {
      return $86($87($88));
    };
  }());
};

var monadErrorReaderT = function monadErrorReaderT(dictMonadError) {
  return new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowReaderT(dictMonadError.MonadThrow0());
  }, function (v) {
    return function (h) {
      return function (r) {
        return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
          var v1 = h(e);
          return v1(r);
        });
      };
    };
  });
};

var monoidReaderT = function monoidReaderT(dictApplicative) {
  return function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
      return semigroupReaderT(dictApplicative.Apply0())(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeReaderT(dictApplicative))(Data_Monoid.mempty(dictMonoid)));
  };
};

var altReaderT = function altReaderT(dictAlt) {
  return new Control_Alt.Alt(function () {
    return functorReaderT(dictAlt.Functor0());
  }, function (v) {
    return function (v1) {
      return function (r) {
        return Control_Alt.alt(dictAlt)(v(r))(v1(r));
      };
    };
  });
};

var plusReaderT = function plusReaderT(dictPlus) {
  return new Control_Plus.Plus(function () {
    return altReaderT(dictPlus.Alt0());
  }, Data_Function["const"](Control_Plus.empty(dictPlus)));
};

var alternativeReaderT = function alternativeReaderT(dictAlternative) {
  return new Control_Alternative.Alternative(function () {
    return applicativeReaderT(dictAlternative.Applicative0());
  }, function () {
    return plusReaderT(dictAlternative.Plus1());
  });
};

var monadZeroReaderT = function monadZeroReaderT(dictMonadZero) {
  return new Control_MonadZero.MonadZero(function () {
    return alternativeReaderT(dictMonadZero.Alternative1());
  }, function () {
    return monadReaderT(dictMonadZero.Monad0());
  });
};

var monadPlusReaderT = function monadPlusReaderT(dictMonadPlus) {
  return new Control_MonadPlus.MonadPlus(function () {
    return monadZeroReaderT(dictMonadPlus.MonadZero0());
  });
};

module.exports = {
  ReaderT: ReaderT,
  runReaderT: runReaderT,
  withReaderT: withReaderT,
  mapReaderT: mapReaderT,
  newtypeReaderT: newtypeReaderT,
  functorReaderT: functorReaderT,
  applyReaderT: applyReaderT,
  applicativeReaderT: applicativeReaderT,
  altReaderT: altReaderT,
  plusReaderT: plusReaderT,
  alternativeReaderT: alternativeReaderT,
  bindReaderT: bindReaderT,
  monadReaderT: monadReaderT,
  monadZeroReaderT: monadZeroReaderT,
  semigroupReaderT: semigroupReaderT,
  monoidReaderT: monoidReaderT,
  monadPlusReaderT: monadPlusReaderT,
  monadTransReaderT: monadTransReaderT,
  monadEffectReader: monadEffectReader,
  monadContReaderT: monadContReaderT,
  monadThrowReaderT: monadThrowReaderT,
  monadErrorReaderT: monadErrorReaderT,
  monadAskReaderT: monadAskReaderT,
  monadReaderReaderT: monadReaderReaderT,
  monadStateReaderT: monadStateReaderT,
  monadTellReaderT: monadTellReaderT,
  monadWriterReaderT: monadWriterReaderT,
  distributiveReaderT: distributiveReaderT,
  monadRecReaderT: monadRecReaderT
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"output/Control.Monad.Cont.Class/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"output/Control.Monad.Writer.Class/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Distributive/index.js":"output/Data.Distributive/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js"}],"output/Control.Monad.Writer.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var WriterT = function WriterT(x) {
  return x;
};

var runWriterT = function runWriterT(v) {
  return v;
};

var newtypeWriterT = new Data_Newtype.Newtype(function (n) {
  return n;
}, WriterT);

var monadTransWriterT = function monadTransWriterT(dictMonoid) {
  return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
      return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid)));
      });
    };
  });
};

var mapWriterT = function mapWriterT(f) {
  return function (v) {
    return f(v);
  };
};

var functorWriterT = function functorWriterT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
      return new Data_Tuple.Tuple(f(v.value0), v.value1);
    }));
  });
};

var execWriterT = function execWriterT(dictFunctor) {
  return function (v) {
    return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v);
  };
};

var applyWriterT = function applyWriterT(dictSemigroup) {
  return function (dictApply) {
    return new Control_Apply.Apply(function () {
      return functorWriterT(dictApply.Functor0());
    }, function (v) {
      return function (v1) {
        var k = function k(v3) {
          return function (v4) {
            return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
          };
        };

        return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
      };
    });
  };
};

var bindWriterT = function bindWriterT(dictSemigroup) {
  return function (dictBind) {
    return new Control_Bind.Bind(function () {
      return applyWriterT(dictSemigroup)(dictBind.Apply0());
    }, function (v) {
      return function (k) {
        return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
          var v2 = k(v1.value0);
          return Data_Functor.map(dictBind.Apply0().Functor0())(function (v3) {
            return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
          })(v2);
        }));
      };
    });
  };
};

var applicativeWriterT = function applicativeWriterT(dictMonoid) {
  return function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
      return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
    }, function (a) {
      return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
    });
  };
};

var monadWriterT = function monadWriterT(dictMonoid) {
  return function (dictMonad) {
    return new Control_Monad.Monad(function () {
      return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
    }, function () {
      return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
    });
  };
};

var monadAskWriterT = function monadAskWriterT(dictMonoid) {
  return function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
      return monadWriterT(dictMonoid)(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
};

var monadReaderWriterT = function monadReaderWriterT(dictMonoid) {
  return function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
      return monadAskWriterT(dictMonoid)(dictMonadReader.MonadAsk0());
    }, function (f) {
      return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
    });
  };
};

var monadContWriterT = function monadContWriterT(dictMonoid) {
  return function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
      return monadWriterT(dictMonoid)(dictMonadCont.Monad0());
    }, function (f) {
      return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
        var v = f(function (a) {
          return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
        });
        return v;
      }));
    });
  };
};

var monadEffectWriter = function monadEffectWriter(dictMonoid) {
  return function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
      return monadWriterT(dictMonoid)(dictMonadEffect.Monad0());
    }, function () {
      var $121 = Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadEffect.Monad0());
      var $122 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($123) {
        return $121($122($123));
      };
    }());
  };
};

var monadRecWriterT = function monadRecWriterT(dictMonoid) {
  return function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
      return monadWriterT(dictMonoid)(dictMonadRec.Monad0());
    }, function (f) {
      return function (a) {
        var f$prime = function f$prime(v) {
          var v1 = f(v.value0);
          return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v1)(function (v2) {
            return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function () {
              if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
                return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
              }

              ;

              if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
                return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
              }

              ;
              throw new Error("Failed pattern match at Control.Monad.Writer.Trans (line 83, column 16 - line 85, column 47): " + [v2.value0.constructor.name]);
            }());
          });
        };

        return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
      };
    });
  };
};

var monadStateWriterT = function monadStateWriterT(dictMonoid) {
  return function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
      return monadWriterT(dictMonoid)(dictMonadState.Monad0());
    }, function (f) {
      return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
    });
  };
};

var monadTellWriterT = function monadTellWriterT(dictMonoid) {
  return function (dictMonad) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
      return monadWriterT(dictMonoid)(dictMonad);
    }, function () {
      var $124 = Control_Applicative.pure(dictMonad.Applicative0());
      var $125 = Data_Tuple.Tuple.create(Data_Unit.unit);
      return function ($126) {
        return WriterT($124($125($126)));
      };
    }());
  };
};

var monadWriterWriterT = function monadWriterWriterT(dictMonoid) {
  return function (dictMonad) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
      return monadTellWriterT(dictMonoid)(dictMonad);
    }, function (v) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1), v1.value1));
      });
    }, function (v) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1(v1.value1)));
      });
    });
  };
};

var monadThrowWriterT = function monadThrowWriterT(dictMonoid) {
  return function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
      return monadWriterT(dictMonoid)(dictMonadThrow.Monad0());
    }, function (e) {
      return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
  };
};

var monadErrorWriterT = function monadErrorWriterT(dictMonoid) {
  return function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowWriterT(dictMonoid)(dictMonadError.MonadThrow0());
    }, function (v) {
      return function (h) {
        return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (e) {
          var v1 = h(e);
          return v1;
        }));
      };
    });
  };
};

var altWriterT = function altWriterT(dictAlt) {
  return new Control_Alt.Alt(function () {
    return functorWriterT(dictAlt.Functor0());
  }, function (v) {
    return function (v1) {
      return Control_Alt.alt(dictAlt)(v)(v1);
    };
  });
};

var plusWriterT = function plusWriterT(dictPlus) {
  return new Control_Plus.Plus(function () {
    return altWriterT(dictPlus.Alt0());
  }, Control_Plus.empty(dictPlus));
};

var alternativeWriterT = function alternativeWriterT(dictMonoid) {
  return function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
      return applicativeWriterT(dictMonoid)(dictAlternative.Applicative0());
    }, function () {
      return plusWriterT(dictAlternative.Plus1());
    });
  };
};

var monadZeroWriterT = function monadZeroWriterT(dictMonoid) {
  return function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
      return alternativeWriterT(dictMonoid)(dictMonadZero.Alternative1());
    }, function () {
      return monadWriterT(dictMonoid)(dictMonadZero.Monad0());
    });
  };
};

var monadPlusWriterT = function monadPlusWriterT(dictMonoid) {
  return function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
      return monadZeroWriterT(dictMonoid)(dictMonadPlus.MonadZero0());
    });
  };
};

module.exports = {
  WriterT: WriterT,
  runWriterT: runWriterT,
  execWriterT: execWriterT,
  mapWriterT: mapWriterT,
  newtypeWriterT: newtypeWriterT,
  functorWriterT: functorWriterT,
  applyWriterT: applyWriterT,
  applicativeWriterT: applicativeWriterT,
  altWriterT: altWriterT,
  plusWriterT: plusWriterT,
  alternativeWriterT: alternativeWriterT,
  bindWriterT: bindWriterT,
  monadWriterT: monadWriterT,
  monadRecWriterT: monadRecWriterT,
  monadZeroWriterT: monadZeroWriterT,
  monadPlusWriterT: monadPlusWriterT,
  monadTransWriterT: monadTransWriterT,
  monadEffectWriter: monadEffectWriter,
  monadContWriterT: monadContWriterT,
  monadThrowWriterT: monadThrowWriterT,
  monadErrorWriterT: monadErrorWriterT,
  monadAskWriterT: monadAskWriterT,
  monadReaderWriterT: monadReaderWriterT,
  monadStateWriterT: monadStateWriterT,
  monadTellWriterT: monadTellWriterT,
  monadWriterWriterT: monadWriterWriterT
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"output/Control.Monad.Cont.Class/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"output/Control.Monad.Writer.Class/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js"}],"output/Unsafe.Coerce/foreign.js":[function(require,module,exports) {
"use strict"; // module Unsafe.Coerce

exports.unsafeCoerce = function (x) {
  return x;
};
},{}],"output/Unsafe.Coerce/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  unsafeCoerce: $foreign.unsafeCoerce
};
},{"./foreign.js":"output/Unsafe.Coerce/foreign.js"}],"output/Data.Functor.App/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var App = function App(x) {
  return x;
};

var traversableWithIndexApp = function traversableWithIndexApp(dictTraversableWithIndex) {
  return dictTraversableWithIndex;
};

var traversableApp = function traversableApp(dictTraversable) {
  return dictTraversable;
};

var showApp = function showApp(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(App " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupApp = function semigroupApp(dictApply) {
  return function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
        return Control_Apply.lift2(dictApply)(Data_Semigroup.append(dictSemigroup))(v)(v1);
      };
    });
  };
};

var plusApp = function plusApp(dictPlus) {
  return dictPlus;
};

var newtypeApp = new Data_Newtype.Newtype(function (n) {
  return n;
}, App);

var monoidApp = function monoidApp(dictApplicative) {
  return function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
      return semigroupApp(dictApplicative.Apply0())(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(dictApplicative)(Data_Monoid.mempty(dictMonoid)));
  };
};

var monadZeroApp = function monadZeroApp(dictMonadZero) {
  return dictMonadZero;
};

var monadPlusApp = function monadPlusApp(dictMonadPlus) {
  return dictMonadPlus;
};

var monadApp = function monadApp(dictMonad) {
  return dictMonad;
};

var lazyApp = function lazyApp(dictLazy) {
  return dictLazy;
};

var hoistLowerApp = Unsafe_Coerce.unsafeCoerce;
var hoistLiftApp = Unsafe_Coerce.unsafeCoerce;

var hoistApp = function hoistApp(f) {
  return function (v) {
    return f(v);
  };
};

var functorWithIndexApp = function functorWithIndexApp(dictFunctorWithIndex) {
  return dictFunctorWithIndex;
};

var functorApp = function functorApp(dictFunctor) {
  return dictFunctor;
};

var foldableWithIndexApp = function foldableWithIndexApp(dictFoldableWithIndex) {
  return dictFoldableWithIndex;
};

var foldableApp = function foldableApp(dictFoldable) {
  return dictFoldable;
};

var extendApp = function extendApp(dictExtend) {
  return dictExtend;
};

var eqApp = function eqApp(dictEq1) {
  return function (dictEq) {
    return new Data_Eq.Eq(function (x) {
      return function (y) {
        return Data_Eq.eq1(dictEq1)(dictEq)(x)(y);
      };
    });
  };
};

var ordApp = function ordApp(dictOrd1) {
  return function (dictOrd) {
    return new Data_Ord.Ord(function () {
      return eqApp(dictOrd1.Eq10())(dictOrd.Eq0());
    }, function (x) {
      return function (y) {
        return Data_Ord.compare1(dictOrd1)(dictOrd)(x)(y);
      };
    });
  };
};

var eq1App = function eq1App(dictEq1) {
  return new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqApp(dictEq1)(dictEq));
  });
};

var ord1App = function ord1App(dictOrd1) {
  return new Data_Ord.Ord1(function () {
    return eq1App(dictOrd1.Eq10());
  }, function (dictOrd) {
    return Data_Ord.compare(ordApp(dictOrd1)(dictOrd));
  });
};

var comonadApp = function comonadApp(dictComonad) {
  return dictComonad;
};

var bindApp = function bindApp(dictBind) {
  return dictBind;
};

var applyApp = function applyApp(dictApply) {
  return dictApply;
};

var applicativeApp = function applicativeApp(dictApplicative) {
  return dictApplicative;
};

var alternativeApp = function alternativeApp(dictAlternative) {
  return dictAlternative;
};

var altApp = function altApp(dictAlt) {
  return dictAlt;
};

module.exports = {
  App: App,
  hoistApp: hoistApp,
  hoistLiftApp: hoistLiftApp,
  hoistLowerApp: hoistLowerApp,
  newtypeApp: newtypeApp,
  eqApp: eqApp,
  eq1App: eq1App,
  ordApp: ordApp,
  ord1App: ord1App,
  showApp: showApp,
  semigroupApp: semigroupApp,
  monoidApp: monoidApp,
  functorApp: functorApp,
  functorWithIndexApp: functorWithIndexApp,
  applyApp: applyApp,
  applicativeApp: applicativeApp,
  bindApp: bindApp,
  monadApp: monadApp,
  altApp: altApp,
  plusApp: plusApp,
  alternativeApp: alternativeApp,
  monadZeroApp: monadZeroApp,
  monadPlusApp: monadPlusApp,
  lazyApp: lazyApp,
  foldableApp: foldableApp,
  traversableApp: traversableApp,
  foldableWithIndexApp: foldableWithIndexApp,
  traversableWithIndexApp: traversableWithIndexApp,
  extendApp: extendApp,
  comonadApp: comonadApp
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Data.Functor.Compose/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_App = require("../Data.Functor.App/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Compose = function Compose(x) {
  return x;
};

var showCompose = function showCompose(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Compose " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var newtypeCompose = new Data_Newtype.Newtype(function (n) {
  return n;
}, Compose);

var functorCompose = function functorCompose(dictFunctor) {
  return function (dictFunctor1) {
    return new Data_Functor.Functor(function (f) {
      return function (v) {
        return Compose(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(v));
      };
    });
  };
};

var functorWithIndexCompose = function functorWithIndexCompose(dictFunctorWithIndex) {
  return function (dictFunctorWithIndex1) {
    return new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorCompose(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
    }, function (f) {
      return function (v) {
        return Compose(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function () {
          var $100 = Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex1);
          var $101 = Data_Tuple.curry(f);
          return function ($102) {
            return $100($101($102));
          };
        }())(v));
      };
    });
  };
};

var foldableCompose = function foldableCompose(dictFoldable) {
  return function (dictFoldable1) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
        return function (v) {
          return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f))(v);
        };
      };
    }, function (f) {
      return function (i) {
        return function (v) {
          return Data_Foldable.foldl(dictFoldable)(Data_Foldable.foldl(dictFoldable1)(f))(i)(v);
        };
      };
    }, function (f) {
      return function (i) {
        return function (v) {
          return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(Data_Foldable.foldr(dictFoldable1)(f)))(i)(v);
        };
      };
    });
  };
};

var foldableWithIndexCompose = function foldableWithIndexCompose(dictFoldableWithIndex) {
  return function (dictFoldableWithIndex1) {
    return new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableCompose(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
    }, function (dictMonoid) {
      return function (f) {
        return function (v) {
          return Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function () {
            var $103 = Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid);
            var $104 = Data_Tuple.curry(f);
            return function ($105) {
              return $103($104($105));
            };
          }())(v);
        };
      };
    }, function (f) {
      return function (i) {
        return function (v) {
          return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function () {
            var $106 = Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex1);
            var $107 = Data_Tuple.curry(f);
            return function ($108) {
              return $106($107($108));
            };
          }())(i)(v);
        };
      };
    }, function (f) {
      return function (i) {
        return function (v) {
          return Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function (a) {
            return Data_Function.flip(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)(a)));
          })(i)(v);
        };
      };
    });
  };
};

var traversableCompose = function traversableCompose(dictTraversable) {
  return function (dictTraversable1) {
    return new Data_Traversable.Traversable(function () {
      return foldableCompose(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
    }, function () {
      return functorCompose(dictTraversable.Functor0())(dictTraversable1.Functor0());
    }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableCompose(dictTraversable)(dictTraversable1))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
    }, function (dictApplicative) {
      return function (f) {
        return function (v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Compose)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f))(v));
        };
      };
    });
  };
};

var traversableWithIndexCompose = function traversableWithIndexCompose(dictTraversableWithIndex) {
  return function (dictTraversableWithIndex1) {
    return new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexCompose(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
    }, function () {
      return functorWithIndexCompose(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
    }, function () {
      return traversableCompose(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
    }, function (dictApplicative) {
      return function (f) {
        return function (v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Compose)(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function () {
            var $109 = Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex1)(dictApplicative);
            var $110 = Data_Tuple.curry(f);
            return function ($111) {
              return $109($110($111));
            };
          }())(v));
        };
      };
    });
  };
};

var eqCompose = function eqCompose(dictEq1) {
  return function (dictEq11) {
    return function (dictEq) {
      return new Data_Eq.Eq(function (v) {
        return function (v1) {
          return Data_Eq.eq1(dictEq1)(Data_Functor_App.eqApp(dictEq11)(dictEq))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
        };
      });
    };
  };
};

var ordCompose = function ordCompose(dictOrd1) {
  return function (dictOrd11) {
    return function (dictOrd) {
      return new Data_Ord.Ord(function () {
        return eqCompose(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
      }, function (v) {
        return function (v1) {
          return Data_Ord.compare1(dictOrd1)(Data_Functor_App.ordApp(dictOrd11)(dictOrd))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
        };
      });
    };
  };
};

var eq1Compose = function eq1Compose(dictEq1) {
  return function (dictEq11) {
    return new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqCompose(dictEq1)(dictEq11)(dictEq));
    });
  };
};

var ord1Compose = function ord1Compose(dictOrd1) {
  return function (dictOrd11) {
    return new Data_Ord.Ord1(function () {
      return eq1Compose(dictOrd1.Eq10())(dictOrd11.Eq10());
    }, function (dictOrd) {
      return Data_Ord.compare(ordCompose(dictOrd1)(dictOrd11)(dictOrd));
    });
  };
};

var bihoistCompose = function bihoistCompose(dictFunctor) {
  return function (natF) {
    return function (natG) {
      return function (v) {
        return natF(Data_Functor.map(dictFunctor)(natG)(v));
      };
    };
  };
};

var applyCompose = function applyCompose(dictApply) {
  return function (dictApply1) {
    return new Control_Apply.Apply(function () {
      return functorCompose(dictApply.Functor0())(dictApply1.Functor0());
    }, function (v) {
      return function (v1) {
        return Compose(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(dictApply1))(v))(v1));
      };
    });
  };
};

var applicativeCompose = function applicativeCompose(dictApplicative) {
  return function (dictApplicative1) {
    return new Control_Applicative.Applicative(function () {
      return applyCompose(dictApplicative.Apply0())(dictApplicative1.Apply0());
    }, function () {
      var $112 = Control_Applicative.pure(dictApplicative);
      var $113 = Control_Applicative.pure(dictApplicative1);
      return function ($114) {
        return Compose($112($113($114)));
      };
    }());
  };
};

var altCompose = function altCompose(dictAlt) {
  return function (dictFunctor) {
    return new Control_Alt.Alt(function () {
      return functorCompose(dictAlt.Functor0())(dictFunctor);
    }, function (v) {
      return function (v1) {
        return Compose(Control_Alt.alt(dictAlt)(v)(v1));
      };
    });
  };
};

var plusCompose = function plusCompose(dictPlus) {
  return function (dictFunctor) {
    return new Control_Plus.Plus(function () {
      return altCompose(dictPlus.Alt0())(dictFunctor);
    }, Control_Plus.empty(dictPlus));
  };
};

var alternativeCompose = function alternativeCompose(dictAlternative) {
  return function (dictApplicative) {
    return new Control_Alternative.Alternative(function () {
      return applicativeCompose(dictAlternative.Applicative0())(dictApplicative);
    }, function () {
      return plusCompose(dictAlternative.Plus1())(dictApplicative.Apply0().Functor0());
    });
  };
};

module.exports = {
  Compose: Compose,
  bihoistCompose: bihoistCompose,
  newtypeCompose: newtypeCompose,
  eqCompose: eqCompose,
  eq1Compose: eq1Compose,
  ordCompose: ordCompose,
  ord1Compose: ord1Compose,
  showCompose: showCompose,
  functorCompose: functorCompose,
  functorWithIndexCompose: functorWithIndexCompose,
  applyCompose: applyCompose,
  applicativeCompose: applicativeCompose,
  foldableCompose: foldableCompose,
  foldableWithIndexCompose: foldableWithIndexCompose,
  traversableCompose: traversableCompose,
  traversableWithIndexCompose: traversableWithIndexCompose,
  altCompose: altCompose,
  plusCompose: plusCompose,
  alternativeCompose: alternativeCompose
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Functor.App/index.js":"output/Data.Functor.App/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js"}],"output/Control.Parallel.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");

var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");

var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var ParCont = function ParCont(x) {
  return x;
};

var Parallel = function Parallel(Applicative1, Monad0, parallel, sequential) {
  this.Applicative1 = Applicative1;
  this.Monad0 = Monad0;
  this.parallel = parallel;
  this.sequential = sequential;
};

var sequential = function sequential(dict) {
  return dict.sequential;
};

var parallel = function parallel(dict) {
  return dict.parallel;
};

var newtypeParCont = new Data_Newtype.Newtype(function (n) {
  return n;
}, ParCont);

var monadParWriterT = function monadParWriterT(dictMonoid) {
  return function (dictParallel) {
    return new Parallel(function () {
      return Control_Monad_Writer_Trans.applicativeWriterT(dictMonoid)(dictParallel.Applicative1());
    }, function () {
      return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictParallel.Monad0());
    }, Control_Monad_Writer_Trans.mapWriterT(parallel(dictParallel)), Control_Monad_Writer_Trans.mapWriterT(sequential(dictParallel)));
  };
};

var monadParReaderT = function monadParReaderT(dictParallel) {
  return new Parallel(function () {
    return Control_Monad_Reader_Trans.applicativeReaderT(dictParallel.Applicative1());
  }, function () {
    return Control_Monad_Reader_Trans.monadReaderT(dictParallel.Monad0());
  }, Control_Monad_Reader_Trans.mapReaderT(parallel(dictParallel)), Control_Monad_Reader_Trans.mapReaderT(sequential(dictParallel)));
};

var monadParMaybeT = function monadParMaybeT(dictParallel) {
  return new Parallel(function () {
    return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Maybe.applicativeMaybe);
  }, function () {
    return Control_Monad_Maybe_Trans.monadMaybeT(dictParallel.Monad0());
  }, function (v) {
    return parallel(dictParallel)(v);
  }, function (v) {
    return sequential(dictParallel)(v);
  });
};

var monadParExceptT = function monadParExceptT(dictParallel) {
  return new Parallel(function () {
    return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Either.applicativeEither);
  }, function () {
    return Control_Monad_Except_Trans.monadExceptT(dictParallel.Monad0());
  }, function (v) {
    return parallel(dictParallel)(v);
  }, function (v) {
    return sequential(dictParallel)(v);
  });
};

var monadParParCont = function monadParParCont(dictMonadEffect) {
  return new Parallel(function () {
    return applicativeParCont(dictMonadEffect);
  }, function () {
    return Control_Monad_Cont_Trans.monadContT(dictMonadEffect.Monad0());
  }, ParCont, function (v) {
    return v;
  });
};

var functorParCont = function functorParCont(dictMonadEffect) {
  return new Data_Functor.Functor(function (f) {
    var $40 = parallel(monadParParCont(dictMonadEffect));
    var $41 = Data_Functor.map(Control_Monad_Cont_Trans.functorContT(dictMonadEffect.Monad0().Bind1().Apply0().Functor0()))(f);
    var $42 = sequential(monadParParCont(dictMonadEffect));
    return function ($43) {
      return $40($41($42($43)));
    };
  });
};

var applyParCont = function applyParCont(dictMonadEffect) {
  return new Control_Apply.Apply(function () {
    return functorParCont(dictMonadEffect);
  }, function (v) {
    return function (v1) {
      return ParCont(function (k) {
        return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (ra) {
          return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (rb) {
            return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
              return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(rb)))(function (mb) {
                if (mb instanceof Data_Maybe.Nothing) {
                  return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(a))(ra));
                }

                ;

                if (mb instanceof Data_Maybe.Just) {
                  return k(a(mb.value0));
                }

                ;
                throw new Error("Failed pattern match at Control.Parallel.Class (line 71, column 7 - line 73, column 26): " + [mb.constructor.name]);
              });
            }))(function () {
              return Control_Monad_Cont_Trans.runContT(v1)(function (b) {
                return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(ra)))(function (ma) {
                  if (ma instanceof Data_Maybe.Nothing) {
                    return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(b))(rb));
                  }

                  ;

                  if (ma instanceof Data_Maybe.Just) {
                    return k(ma.value0(b));
                  }

                  ;
                  throw new Error("Failed pattern match at Control.Parallel.Class (line 77, column 7 - line 79, column 26): " + [ma.constructor.name]);
                });
              });
            });
          });
        });
      });
    };
  });
};

var applicativeParCont = function applicativeParCont(dictMonadEffect) {
  return new Control_Applicative.Applicative(function () {
    return applyParCont(dictMonadEffect);
  }, function () {
    var $44 = parallel(monadParParCont(dictMonadEffect));
    var $45 = Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT(dictMonadEffect.Monad0().Applicative0()));
    return function ($46) {
      return $44($45($46));
    };
  }());
};

var altParCont = function altParCont(dictMonadEffect) {
  return new Control_Alt.Alt(function () {
    return functorParCont(dictMonadEffect);
  }, function (v) {
    return function (v1) {
      return ParCont(function (k) {
        return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](false)))(function (done) {
          return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
            return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(done)))(function (b) {
              if (b) {
                return Control_Applicative.pure(dictMonadEffect.Monad0().Applicative0())(Data_Unit.unit);
              }

              ;
              return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(done)))(function () {
                return k(a);
              });
            });
          }))(function () {
            return Control_Monad_Cont_Trans.runContT(v1)(function (a) {
              return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(done)))(function (b) {
                if (b) {
                  return Control_Applicative.pure(dictMonadEffect.Monad0().Applicative0())(Data_Unit.unit);
                }

                ;
                return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(done)))(function () {
                  return k(a);
                });
              });
            });
          });
        });
      });
    };
  });
};

var plusParCont = function plusParCont(dictMonadEffect) {
  return new Control_Plus.Plus(function () {
    return altParCont(dictMonadEffect);
  }, ParCont(function (v) {
    return Control_Applicative.pure(dictMonadEffect.Monad0().Applicative0())(Data_Unit.unit);
  }));
};

var alternativeParCont = function alternativeParCont(dictMonadEffect) {
  return new Control_Alternative.Alternative(function () {
    return applicativeParCont(dictMonadEffect);
  }, function () {
    return plusParCont(dictMonadEffect);
  });
};

module.exports = {
  parallel: parallel,
  sequential: sequential,
  Parallel: Parallel,
  ParCont: ParCont,
  monadParExceptT: monadParExceptT,
  monadParReaderT: monadParReaderT,
  monadParWriterT: monadParWriterT,
  monadParMaybeT: monadParMaybeT,
  newtypeParCont: newtypeParCont,
  functorParCont: functorParCont,
  applyParCont: applyParCont,
  applicativeParCont: applicativeParCont,
  altParCont: altParCont,
  plusParCont: plusParCont,
  alternativeParCont: alternativeParCont,
  monadParParCont: monadParParCont
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad.Cont.Trans/index.js":"output/Control.Monad.Cont.Trans/index.js","../Control.Monad.Except.Trans/index.js":"output/Control.Monad.Except.Trans/index.js","../Control.Monad.Maybe.Trans/index.js":"output/Control.Monad.Maybe.Trans/index.js","../Control.Monad.Reader.Trans/index.js":"output/Control.Monad.Reader.Trans/index.js","../Control.Monad.Writer.Trans/index.js":"output/Control.Monad.Writer.Trans/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Functor.Compose/index.js":"output/Data.Functor.Compose/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js","../Effect.Ref/index.js":"output/Effect.Ref/index.js"}],"output/Control.Parallel/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var parTraverse_ = function parTraverse_(dictParallel) {
  return function (dictFoldable) {
    return function (f) {
      var $17 = Control_Parallel_Class.sequential(dictParallel);
      var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)(function () {
        var $20 = Control_Parallel_Class.parallel(dictParallel);
        return function ($21) {
          return $20(f($21));
        };
      }());
      return function ($19) {
        return $17($18($19));
      };
    };
  };
};

var parTraverse = function parTraverse(dictParallel) {
  return function (dictTraversable) {
    return function (f) {
      var $22 = Control_Parallel_Class.sequential(dictParallel);
      var $23 = Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())(function () {
        var $25 = Control_Parallel_Class.parallel(dictParallel);
        return function ($26) {
          return $25(f($26));
        };
      }());
      return function ($24) {
        return $22($23($24));
      };
    };
  };
};

var parSequence_ = function parSequence_(dictParallel) {
  return function (dictFoldable) {
    return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var parSequence = function parSequence(dictParallel) {
  return function (dictTraversable) {
    return parTraverse(dictParallel)(dictTraversable)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var parOneOfMap = function parOneOfMap(dictParallel) {
  return function (dictAlternative) {
    return function (dictFoldable) {
      return function (dictFunctor) {
        return function (f) {
          var $27 = Control_Parallel_Class.sequential(dictParallel);
          var $28 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(function () {
            var $30 = Control_Parallel_Class.parallel(dictParallel);
            return function ($31) {
              return $30(f($31));
            };
          }());
          return function ($29) {
            return $27($28($29));
          };
        };
      };
    };
  };
};

var parOneOf = function parOneOf(dictParallel) {
  return function (dictAlternative) {
    return function (dictFoldable) {
      return function (dictFunctor) {
        var $32 = Control_Parallel_Class.sequential(dictParallel);
        var $33 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(Control_Parallel_Class.parallel(dictParallel));
        return function ($34) {
          return $32($33($34));
        };
      };
    };
  };
};

var parApply = function parApply(dictParallel) {
  return function (mf) {
    return function (ma) {
      return Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply(dictParallel.Applicative1().Apply0())(Control_Parallel_Class.parallel(dictParallel)(mf))(Control_Parallel_Class.parallel(dictParallel)(ma)));
    };
  };
};

module.exports = {
  parApply: parApply,
  parTraverse: parTraverse,
  parTraverse_: parTraverse_,
  parSequence: parSequence,
  parSequence_: parSequence_,
  parOneOf: parOneOf,
  parOneOfMap: parOneOfMap
};
},{"../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Parallel.Class/index.js":"output/Control.Parallel.Class/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js"}],"output/Effect.Unsafe/foreign.js":[function(require,module,exports) {
"use strict";

exports.unsafePerformEffect = function (f) {
  return f();
};
},{}],"output/Effect.Unsafe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  unsafePerformEffect: $foreign.unsafePerformEffect
};
},{"./foreign.js":"output/Effect.Unsafe/foreign.js"}],"output/Partial.Unsafe/foreign.js":[function(require,module,exports) {
"use strict"; // module Partial.Unsafe

exports.unsafePartial = function (f) {
  return f();
};
},{}],"output/Partial/foreign.js":[function(require,module,exports) {
"use strict"; // module Partial

exports.crashWith = function () {
  return function (msg) {
    throw new Error(msg);
  };
};
},{}],"output/Partial/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var crash = function crash(dictPartial) {
  return $foreign.crashWith()("Partial.crash: partial function");
};

module.exports = {
  crash: crash,
  crashWith: $foreign.crashWith
};
},{"./foreign.js":"output/Partial/foreign.js"}],"output/Partial.Unsafe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Partial = require("../Partial/index.js");

var unsafePartialBecause = function unsafePartialBecause(v) {
  return function (x) {
    return $foreign.unsafePartial(function (dictPartial) {
      return x();
    });
  };
};

var unsafeCrashWith = function unsafeCrashWith(msg) {
  return $foreign.unsafePartial(function (dictPartial) {
    return Partial.crashWith()(msg);
  });
};

module.exports = {
  unsafePartialBecause: unsafePartialBecause,
  unsafeCrashWith: unsafeCrashWith,
  unsafePartial: $foreign.unsafePartial
};
},{"./foreign.js":"output/Partial.Unsafe/foreign.js","../Partial/index.js":"output/Partial/index.js"}],"output/Effect.Aff/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Parallel = require("../Control.Parallel/index.js");

var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Exception = require("../Effect.Exception/index.js");

var Effect_Unsafe = require("../Effect.Unsafe/index.js");

var Partial_Unsafe = require("../Partial.Unsafe/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Fiber = function Fiber(x) {
  return x;
};

var FFIUtil = function FFIUtil(x) {
  return x;
};

var Canceler = function Canceler(x) {
  return x;
};

var suspendAff = $foreign["_fork"](false);
var newtypeCanceler = new Data_Newtype.Newtype(function (n) {
  return n;
}, Canceler);
var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
var functorAff = new Data_Functor.Functor($foreign["_map"]);
var forkAff = $foreign["_fork"](true);

var ffiUtil = function () {
  var unsafeFromRight = function unsafeFromRight(v) {
    if (v instanceof Data_Either.Right) {
      return v.value0;
    }

    ;

    if (v instanceof Data_Either.Left) {
      return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
    }

    ;
    throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [v.constructor.name]);
  };

  var unsafeFromLeft = function unsafeFromLeft(v) {
    if (v instanceof Data_Either.Left) {
      return v.value0;
    }

    ;

    if (v instanceof Data_Either.Right) {
      return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
    }

    ;
    throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [v.constructor.name]);
  };

  var isLeft = function isLeft(v) {
    if (v instanceof Data_Either.Left) {
      return true;
    }

    ;

    if (v instanceof Data_Either.Right) {
      return false;
    }

    ;
    throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [v.constructor.name]);
  };

  return {
    isLeft: isLeft,
    fromLeft: unsafeFromLeft,
    fromRight: unsafeFromRight,
    left: Data_Either.Left.create,
    right: Data_Either.Right.create
  };
}();

var makeFiber = function makeFiber(aff) {
  return $foreign["_makeFiber"](ffiUtil, aff);
};

var launchAff = function launchAff(aff) {
  return function __do() {
    var fiber = makeFiber(aff)();
    fiber.run();
    return fiber;
  };
};

var launchAff_ = function () {
  var $43 = Data_Functor["void"](Effect.functorEffect);
  return function ($44) {
    return $43(launchAff($44));
  };
}();

var launchSuspendedAff = makeFiber;

var delay = function delay(v) {
  return $foreign["_delay"](Data_Either.Right.create, v);
};

var bracket = function bracket(acquire) {
  return function (completed) {
    return $foreign.generalBracket(acquire)({
      killed: Data_Function["const"](completed),
      failed: Data_Function["const"](completed),
      completed: Data_Function["const"](completed)
    });
  };
};

var applyParAff = new Control_Apply.Apply(function () {
  return functorParAff;
}, $foreign["_parAffApply"]);

var semigroupParAff = function semigroupParAff(dictSemigroup) {
  return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParAff)(Data_Semigroup.append(dictSemigroup)));
};

var monadAff = new Control_Monad.Monad(function () {
  return applicativeAff;
}, function () {
  return bindAff;
});
var bindAff = new Control_Bind.Bind(function () {
  return applyAff;
}, $foreign["_bind"]);
var applyAff = new Control_Apply.Apply(function () {
  return functorAff;
}, Control_Monad.ap(monadAff));
var applicativeAff = new Control_Applicative.Applicative(function () {
  return applyAff;
}, $foreign["_pure"]);

var cancelWith = function cancelWith(aff) {
  return function (v) {
    return $foreign.generalBracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))({
      killed: function killed(e) {
        return function (v1) {
          return v(e);
        };
      },
      failed: Data_Function["const"](Control_Applicative.pure(applicativeAff)),
      completed: Data_Function["const"](Control_Applicative.pure(applicativeAff))
    })(Data_Function["const"](aff));
  };
};

var $$finally = function $$finally(fin) {
  return function (a) {
    return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
  };
};

var invincible = function invincible(a) {
  return bracket(a)(Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit)))(Control_Applicative.pure(applicativeAff));
};

var lazyAff = new Control_Lazy.Lazy(function (f) {
  return Control_Bind.bind(bindAff)(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(f);
});

var semigroupAff = function semigroupAff(dictSemigroup) {
  return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyAff)(Data_Semigroup.append(dictSemigroup)));
};

var monadEffectAff = new Effect_Class.MonadEffect(function () {
  return monadAff;
}, $foreign["_liftEffect"]);

var effectCanceler = function () {
  var $45 = Effect_Class.liftEffect(monadEffectAff);
  return function ($46) {
    return Canceler(Data_Function["const"]($45($46)));
  };
}();

var joinFiber = function joinFiber(v) {
  return $foreign.makeAff(function (k) {
    return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
  });
};

var functorFiber = new Data_Functor.Functor(function (f) {
  return function (t) {
    return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
  };
});
var applyFiber = new Control_Apply.Apply(function () {
  return functorFiber;
}, function (t1) {
  return function (t2) {
    return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Apply.apply(applyAff)(joinFiber(t1))(joinFiber(t2))));
  };
});
var applicativeFiber = new Control_Applicative.Applicative(function () {
  return applyFiber;
}, function (a) {
  return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Applicative.pure(applicativeAff)(a)));
});

var killFiber = function killFiber(e) {
  return function (v) {
    return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
      if (v1) {
        return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
      }

      ;
      return $foreign.makeAff(function (k) {
        return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
      });
    });
  };
};

var fiberCanceler = function () {
  var $47 = Data_Function.flip(killFiber);
  return function ($48) {
    return Canceler($47($48));
  };
}();

var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
  return monadAff;
}, $foreign["_throwError"]);
var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
  return monadThrowAff;
}, $foreign["_catchError"]);
var attempt = Control_Monad_Error_Class["try"](monadErrorAff);

var runAff = function runAff(k) {
  return function (aff) {
    return launchAff(Control_Bind.bindFlipped(bindAff)(function () {
      var $49 = Effect_Class.liftEffect(monadEffectAff);
      return function ($50) {
        return $49(k($50));
      };
    }())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
  };
};

var runAff_ = function runAff_(k) {
  return function (aff) {
    return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
  };
};

var runSuspendedAff = function runSuspendedAff(k) {
  return function (aff) {
    return launchSuspendedAff(Control_Bind.bindFlipped(bindAff)(function () {
      var $51 = Effect_Class.liftEffect(monadEffectAff);
      return function ($52) {
        return $51(k($52));
      };
    }())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
  };
};

var parallelAff = new Control_Parallel_Class.Parallel(function () {
  return applicativeParAff;
}, function () {
  return monadAff;
}, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
var applicativeParAff = new Control_Applicative.Applicative(function () {
  return applyParAff;
}, function () {
  var $53 = Control_Parallel_Class.parallel(parallelAff);
  var $54 = Control_Applicative.pure(applicativeAff);
  return function ($55) {
    return $53($54($55));
  };
}());

var monoidParAff = function monoidParAff(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupParAff(dictMonoid.Semigroup0());
  }, Control_Applicative.pure(applicativeParAff)(Data_Monoid.mempty(dictMonoid)));
};

var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return function (err) {
      return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([v(err), v1(err)]);
    };
  };
});

var supervise = function supervise(aff) {
  var killError = Effect_Exception.error("[Aff] Child fiber outlived parent");

  var killAll = function killAll(err) {
    return function (sup) {
      return $foreign.makeAff(function (k) {
        return $foreign["_killAll"](err, sup.supervisor, k(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit)));
      });
    };
  };

  var acquire = function __do() {
    var sup = $foreign["_makeSupervisedFiber"](ffiUtil, aff)();
    sup.fiber.run();
    return sup;
  };

  return $foreign.generalBracket(Effect_Class.liftEffect(monadEffectAff)(acquire))({
    killed: function killed(err) {
      return function (sup) {
        return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([killFiber(err)(sup.fiber), killAll(err)(sup)]);
      };
    },
    failed: Data_Function["const"](killAll(killError)),
    completed: Data_Function["const"](killAll(killError))
  })(function ($56) {
    return joinFiber(function (v) {
      return v.fiber;
    }($56));
  });
};

var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
  return monadAff;
}, function (k) {
  var go = function go(a) {
    return Control_Bind.bind(bindAff)(k(a))(function (res) {
      if (res instanceof Control_Monad_Rec_Class.Done) {
        return Control_Applicative.pure(applicativeAff)(res.value0);
      }

      ;

      if (res instanceof Control_Monad_Rec_Class.Loop) {
        return go(res.value0);
      }

      ;
      throw new Error("Failed pattern match at Effect.Aff (line 100, column 7 - line 102, column 22): " + [res.constructor.name]);
    });
  };

  return go;
});

var monoidAff = function monoidAff(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupAff(dictMonoid.Semigroup0());
  }, Control_Applicative.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)));
};

var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
var monoidCanceler = new Data_Monoid.Monoid(function () {
  return semigroupCanceler;
}, nonCanceler);
var never = $foreign.makeAff(function (v) {
  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(monoidCanceler));
});

var apathize = function () {
  var $57 = Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit));
  return function ($58) {
    return $57(attempt($58));
  };
}();

var altParAff = new Control_Alt.Alt(function () {
  return functorParAff;
}, $foreign["_parAffAlt"]);
var altAff = new Control_Alt.Alt(function () {
  return functorAff;
}, function (a1) {
  return function (a2) {
    return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
  };
});
var plusAff = new Control_Plus.Plus(function () {
  return altAff;
}, Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")));
var plusParAff = new Control_Plus.Plus(function () {
  return altParAff;
}, Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)));
var alternativeParAff = new Control_Alternative.Alternative(function () {
  return applicativeParAff;
}, function () {
  return plusParAff;
});
module.exports = {
  Canceler: Canceler,
  launchAff: launchAff,
  launchAff_: launchAff_,
  launchSuspendedAff: launchSuspendedAff,
  runAff: runAff,
  runAff_: runAff_,
  runSuspendedAff: runSuspendedAff,
  forkAff: forkAff,
  suspendAff: suspendAff,
  supervise: supervise,
  attempt: attempt,
  apathize: apathize,
  delay: delay,
  never: never,
  "finally": $$finally,
  invincible: invincible,
  killFiber: killFiber,
  joinFiber: joinFiber,
  cancelWith: cancelWith,
  bracket: bracket,
  nonCanceler: nonCanceler,
  effectCanceler: effectCanceler,
  fiberCanceler: fiberCanceler,
  functorAff: functorAff,
  applyAff: applyAff,
  applicativeAff: applicativeAff,
  bindAff: bindAff,
  monadAff: monadAff,
  semigroupAff: semigroupAff,
  monoidAff: monoidAff,
  altAff: altAff,
  plusAff: plusAff,
  monadRecAff: monadRecAff,
  monadThrowAff: monadThrowAff,
  monadErrorAff: monadErrorAff,
  monadEffectAff: monadEffectAff,
  lazyAff: lazyAff,
  functorParAff: functorParAff,
  applyParAff: applyParAff,
  applicativeParAff: applicativeParAff,
  semigroupParAff: semigroupParAff,
  monoidParAff: monoidParAff,
  altParAff: altParAff,
  plusParAff: plusParAff,
  alternativeParAff: alternativeParAff,
  parallelAff: parallelAff,
  functorFiber: functorFiber,
  applyFiber: applyFiber,
  applicativeFiber: applicativeFiber,
  newtypeCanceler: newtypeCanceler,
  semigroupCanceler: semigroupCanceler,
  monoidCanceler: monoidCanceler,
  makeAff: $foreign.makeAff,
  generalBracket: $foreign.generalBracket
};
},{"./foreign.js":"output/Effect.Aff/foreign.js","../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Lazy/index.js":"output/Control.Lazy/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Parallel/index.js":"output/Control.Parallel/index.js","../Control.Parallel.Class/index.js":"output/Control.Parallel.Class/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect/index.js":"output/Effect/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js","../Effect.Exception/index.js":"output/Effect.Exception/index.js","../Effect.Unsafe/index.js":"output/Effect.Unsafe/index.js","../Partial.Unsafe/index.js":"output/Partial.Unsafe/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Data.Lazy/foreign.js":[function(require,module,exports) {
"use strict";

exports.defer = function (thunk) {
  var v = null;
  return function () {
    if (thunk === undefined) return v;
    v = thunk();
    thunk = undefined; // eslint-disable-line no-param-reassign

    return v;
  };
};

exports.force = function (l) {
  return l();
};
},{}],"output/Data.Lazy/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var showLazy = function showLazy(dictShow) {
  return new Data_Show.Show(function (x) {
    return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
  });
};

var semiringLazy = function semiringLazy(dictSemiring) {
  return new Data_Semiring.Semiring(function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
      });
    };
  }, function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
      });
    };
  }, $foreign.defer(function (v) {
    return Data_Semiring.one(dictSemiring);
  }), $foreign.defer(function (v) {
    return Data_Semiring.zero(dictSemiring);
  }));
};

var semigroupLazy = function semigroupLazy(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
      });
    };
  });
};

var ringLazy = function ringLazy(dictRing) {
  return new Data_Ring.Ring(function () {
    return semiringLazy(dictRing.Semiring0());
  }, function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
      });
    };
  });
};

var monoidLazy = function monoidLazy(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupLazy(dictMonoid.Semigroup0());
  }, $foreign.defer(function (v) {
    return Data_Monoid.mempty(dictMonoid);
  }));
};

var lazyLazy = new Control_Lazy.Lazy(function (f) {
  return $foreign.defer(function (v) {
    return $foreign.force(f(Data_Unit.unit));
  });
});
var functorLazy = new Data_Functor.Functor(function (f) {
  return function (l) {
    return $foreign.defer(function (v) {
      return f($foreign.force(l));
    });
  };
});
var functorWithIndexLazy = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorLazy;
}, function (f) {
  return Data_Functor.map(functorLazy)(f(Data_Unit.unit));
});
var invariantLazy = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLazy));
var foldableLazy = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (l) {
      return f($foreign.force(l));
    };
  };
}, function (f) {
  return function (z) {
    return function (l) {
      return f(z)($foreign.force(l));
    };
  };
}, function (f) {
  return function (z) {
    return function (l) {
      return f($foreign.force(l))(z);
    };
  };
});
var foldableWithIndexLazy = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableLazy;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(foldableLazy)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(foldableLazy)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(foldableLazy)(f(Data_Unit.unit));
});
var traversableLazy = new Data_Traversable.Traversable(function () {
  return foldableLazy;
}, function () {
  return functorLazy;
}, function (dictApplicative) {
  return function (l) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(function ($42) {
      return $foreign.defer(Data_Function["const"]($42));
    })($foreign.force(l));
  };
}, function (dictApplicative) {
  return function (f) {
    return function (l) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(function ($43) {
        return $foreign.defer(Data_Function["const"]($43));
      })(f($foreign.force(l)));
    };
  };
});
var traversableWithIndexLazy = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexLazy;
}, function () {
  return functorWithIndexLazy;
}, function () {
  return traversableLazy;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(traversableLazy)(dictApplicative)(f(Data_Unit.unit));
  };
});
var foldable1Lazy = new Data_Semigroup_Foldable.Foldable1(function () {
  return foldableLazy;
}, function (dictSemigroup) {
  return Data_Semigroup_Foldable.fold1Default(foldable1Lazy)(dictSemigroup);
}, function (dictSemigroup) {
  return function (f) {
    return function (l) {
      return f($foreign.force(l));
    };
  };
});
var traversable1Lazy = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1Lazy;
}, function () {
  return traversableLazy;
}, function (dictApply) {
  return function (l) {
    return Data_Functor.map(dictApply.Functor0())(function ($44) {
      return $foreign.defer(Data_Function["const"]($44));
    })($foreign.force(l));
  };
}, function (dictApply) {
  return function (f) {
    return function (l) {
      return Data_Functor.map(dictApply.Functor0())(function ($45) {
        return $foreign.defer(Data_Function["const"]($45));
      })(f($foreign.force(l)));
    };
  };
});
var extendLazy = new Control_Extend.Extend(function () {
  return functorLazy;
}, function (f) {
  return function (x) {
    return $foreign.defer(function (v) {
      return f(x);
    });
  };
});

var eqLazy = function eqLazy(dictEq) {
  return new Data_Eq.Eq(function (x) {
    return function (y) {
      return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
    };
  });
};

var ordLazy = function ordLazy(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqLazy(dictOrd.Eq0());
  }, function (x) {
    return function (y) {
      return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
    };
  });
};

var eq1Lazy = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqLazy(dictEq));
});
var ord1Lazy = new Data_Ord.Ord1(function () {
  return eq1Lazy;
}, function (dictOrd) {
  return Data_Ord.compare(ordLazy(dictOrd));
});
var comonadLazy = new Control_Comonad.Comonad(function () {
  return extendLazy;
}, $foreign.force);

var commutativeRingLazy = function commutativeRingLazy(dictCommutativeRing) {
  return new Data_CommutativeRing.CommutativeRing(function () {
    return ringLazy(dictCommutativeRing.Ring0());
  });
};

var euclideanRingLazy = function euclideanRingLazy(dictEuclideanRing) {
  return new Data_EuclideanRing.EuclideanRing(function () {
    return commutativeRingLazy(dictEuclideanRing.CommutativeRing0());
  }, function () {
    var $46 = Data_EuclideanRing.degree(dictEuclideanRing);
    return function ($47) {
      return $46($foreign.force($47));
    };
  }(), function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
      });
    };
  }, function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
      });
    };
  });
};

var boundedLazy = function boundedLazy(dictBounded) {
  return new Data_Bounded.Bounded(function () {
    return ordLazy(dictBounded.Ord0());
  }, $foreign.defer(function (v) {
    return Data_Bounded.bottom(dictBounded);
  }), $foreign.defer(function (v) {
    return Data_Bounded.top(dictBounded);
  }));
};

var applyLazy = new Control_Apply.Apply(function () {
  return functorLazy;
}, function (f) {
  return function (x) {
    return $foreign.defer(function (v) {
      return $foreign.force(f)($foreign.force(x));
    });
  };
});
var bindLazy = new Control_Bind.Bind(function () {
  return applyLazy;
}, function (l) {
  return function (f) {
    return $foreign.defer(function (v) {
      return $foreign.force(f($foreign.force(l)));
    });
  };
});

var heytingAlgebraLazy = function heytingAlgebraLazy(dictHeytingAlgebra) {
  return new Data_HeytingAlgebra.HeytingAlgebra(function (a) {
    return function (b) {
      return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
    };
  }, function (a) {
    return function (b) {
      return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
    };
  }, $foreign.defer(function (v) {
    return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
  }), function (a) {
    return function (b) {
      return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
    };
  }, function (a) {
    return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
  }, $foreign.defer(function (v) {
    return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
  }));
};

var booleanAlgebraLazy = function booleanAlgebraLazy(dictBooleanAlgebra) {
  return new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraLazy(dictBooleanAlgebra.HeytingAlgebra0());
  });
};

var applicativeLazy = new Control_Applicative.Applicative(function () {
  return applyLazy;
}, function (a) {
  return $foreign.defer(function (v) {
    return a;
  });
});
var monadLazy = new Control_Monad.Monad(function () {
  return applicativeLazy;
}, function () {
  return bindLazy;
});
module.exports = {
  semiringLazy: semiringLazy,
  ringLazy: ringLazy,
  commutativeRingLazy: commutativeRingLazy,
  euclideanRingLazy: euclideanRingLazy,
  eqLazy: eqLazy,
  eq1Lazy: eq1Lazy,
  ordLazy: ordLazy,
  ord1Lazy: ord1Lazy,
  boundedLazy: boundedLazy,
  semigroupLazy: semigroupLazy,
  monoidLazy: monoidLazy,
  heytingAlgebraLazy: heytingAlgebraLazy,
  booleanAlgebraLazy: booleanAlgebraLazy,
  functorLazy: functorLazy,
  functorWithIndexLazy: functorWithIndexLazy,
  foldableLazy: foldableLazy,
  foldableWithIndexLazy: foldableWithIndexLazy,
  foldable1Lazy: foldable1Lazy,
  traversableLazy: traversableLazy,
  traversableWithIndexLazy: traversableWithIndexLazy,
  traversable1Lazy: traversable1Lazy,
  invariantLazy: invariantLazy,
  applyLazy: applyLazy,
  applicativeLazy: applicativeLazy,
  bindLazy: bindLazy,
  monadLazy: monadLazy,
  extendLazy: extendLazy,
  comonadLazy: comonadLazy,
  showLazy: showLazy,
  lazyLazy: lazyLazy,
  defer: $foreign.defer,
  force: $foreign.force
};
},{"./foreign.js":"output/Data.Lazy/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Comonad/index.js":"output/Control.Comonad/index.js","../Control.Extend/index.js":"output/Control.Extend/index.js","../Control.Lazy/index.js":"output/Control.Lazy/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.BooleanAlgebra/index.js":"output/Data.BooleanAlgebra/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.CommutativeRing/index.js":"output/Data.CommutativeRing/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.EuclideanRing/index.js":"output/Data.EuclideanRing/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"output/Data.Functor.Invariant/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ring/index.js":"output/Data.Ring/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semigroup.Foldable/index.js":"output/Data.Semigroup.Foldable/index.js","../Data.Semigroup.Traversable/index.js":"output/Data.Semigroup.Traversable/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Control.Monad.List.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Lazy = require("../Data.Lazy/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Yield = function () {
  function Yield(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Yield.create = function (value0) {
    return function (value1) {
      return new Yield(value0, value1);
    };
  };

  return Yield;
}();

var Skip = function () {
  function Skip(value0) {
    this.value0 = value0;
  }

  ;

  Skip.create = function (value0) {
    return new Skip(value0);
  };

  return Skip;
}();

var Done = function () {
  function Done() {}

  ;
  Done.value = new Done();
  return Done;
}();

var ListT = function ListT(x) {
  return x;
};

var wrapLazy = function wrapLazy(dictApplicative) {
  return function (v) {
    return ListT(Control_Applicative.pure(dictApplicative)(new Skip(v)));
  };
};

var wrapEffect = function wrapEffect(dictFunctor) {
  return function (v) {
    return ListT(Data_Functor.map(dictFunctor)(function ($183) {
      return Skip.create(Data_Lazy.defer(Data_Function["const"]($183)));
    })(v));
  };
};

var unfold = function unfold(dictMonad) {
  return function (f) {
    return function (z) {
      var g = function g(v) {
        if (v instanceof Data_Maybe.Just) {
          return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
            return unfold(dictMonad)(f)(v.value0.value0);
          }));
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          return Done.value;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 130, column 3 - line 130, column 60): " + [v.constructor.name]);
      };

      return ListT(Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(g)(f(z)));
    };
  };
};

var uncons = function uncons(dictMonad) {
  return function (v) {
    var g = function g(v1) {
      if (v1 instanceof Yield) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create(new Data_Tuple.Tuple(v1.value0, Data_Lazy.force(v1.value1))));
      }

      ;

      if (v1 instanceof Skip) {
        return uncons(dictMonad)(Data_Lazy.force(v1.value0));
      }

      ;

      if (v1 instanceof Done) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 195, column 3 - line 195, column 50): " + [v1.constructor.name]);
    };

    return Control_Bind.bind(dictMonad.Bind1())(v)(g);
  };
};

var tail = function tail(dictMonad) {
  return function (l) {
    return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
  };
};

var stepMap = function stepMap(dictFunctor) {
  return function (f) {
    return function (v) {
      return ListT(Data_Functor.map(dictFunctor)(f)(v));
    };
  };
};

var takeWhile = function takeWhile(dictApplicative) {
  return function (f) {
    var g = function g(v) {
      if (v instanceof Yield) {
        var $99 = f(v.value0);

        if ($99) {
          return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
        }

        ;
        return Done.value;
      }

      ;

      if (v instanceof Skip) {
        return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
      }

      ;

      if (v instanceof Done) {
        return Done.value;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 154, column 3 - line 154, column 68): " + [v.constructor.name]);
    };

    return stepMap(dictApplicative.Apply0().Functor0())(g);
  };
};

var scanl = function scanl(dictMonad) {
  return function (f) {
    return function (b) {
      return function (l) {
        var g = function g(v) {
          var h = function h(v1) {
            if (v1 instanceof Yield) {
              var b$prime$prime = f(v.value0)(v1.value0);
              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime$prime, Data_Lazy.force(v1.value1)), v.value0));
            }

            ;

            if (v1 instanceof Skip) {
              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
            }

            ;

            if (v1 instanceof Done) {
              return Data_Maybe.Nothing.value;
            }

            ;
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 248, column 5 - line 248, column 78): " + [v1.constructor.name]);
          };

          return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(h)(v.value1);
        };

        return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
      };
    };
  };
};

var prepend$prime = function prepend$prime(dictApplicative) {
  return function (h) {
    return function (t) {
      return ListT(Control_Applicative.pure(dictApplicative)(new Yield(h, t)));
    };
  };
};

var prepend = function prepend(dictApplicative) {
  return function (h) {
    return function (t) {
      return prepend$prime(dictApplicative)(h)(Data_Lazy.defer(Data_Function["const"](t)));
    };
  };
};

var nil = function nil(dictApplicative) {
  return ListT(Control_Applicative.pure(dictApplicative)(Done.value));
};

var singleton = function singleton(dictApplicative) {
  return function (a) {
    return prepend(dictApplicative)(a)(nil(dictApplicative));
  };
};

var take = function take(dictApplicative) {
  return function (v) {
    return function (fa) {
      if (v === 0) {
        return nil(dictApplicative);
      }

      ;

      var f = function f(v1) {
        if (v1 instanceof Yield) {
          return new Yield(v1.value0, Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v - 1 | 0))(v1.value1));
        }

        ;

        if (v1 instanceof Skip) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
        }

        ;

        if (v1 instanceof Done) {
          return Done.value;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 147, column 3 - line 147, column 47): " + [v1.constructor.name]);
      };

      return stepMap(dictApplicative.Apply0().Functor0())(f)(fa);
    };
  };
};

var zipWith$prime = function zipWith$prime(dictMonad) {
  return function (f) {
    var g = function g(v) {
      return function (v1) {
        if (v1 instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
        }

        ;

        if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
          return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Function.flip(prepend$prime(dictMonad.Applicative0()))(Data_Lazy.defer(function (v2) {
            return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
          })))(f(v.value0.value0)(v1.value0.value0));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 260, column 3 - line 260, column 25): " + [v.constructor.name, v1.constructor.name]);
      };
    };

    var loop = function loop(fa) {
      return function (fb) {
        return wrapEffect(dictMonad.Bind1().Apply0().Functor0())(Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fa))(function (ua) {
          return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fb))(function (ub) {
            return g(ua)(ub);
          });
        }));
      };
    };

    return loop;
  };
};

var zipWith = function zipWith(dictMonad) {
  return function (f) {
    var g = function g(a) {
      return function (b) {
        return Control_Applicative.pure(dictMonad.Applicative0())(f(a)(b));
      };
    };

    return zipWith$prime(dictMonad)(g);
  };
};

var newtypeListT = new Data_Newtype.Newtype(function (n) {
  return n;
}, ListT);

var mapMaybe = function mapMaybe(dictFunctor) {
  return function (f) {
    var g = function g(v) {
      if (v instanceof Yield) {
        return Data_Maybe.fromMaybe(Skip.create)(Data_Functor.map(Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
      }

      ;

      if (v instanceof Skip) {
        return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
      }

      ;

      if (v instanceof Done) {
        return Done.value;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 183, column 3 - line 183, column 72): " + [v.constructor.name]);
    };

    return stepMap(dictFunctor)(g);
  };
};

var iterate = function iterate(dictMonad) {
  return function (f) {
    return function (a) {
      var g = function g(x) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(x), x)));
      };

      return unfold(dictMonad)(g)(a);
    };
  };
};

var repeat = function repeat(dictMonad) {
  return iterate(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};

var head = function head(dictMonad) {
  return function (l) {
    return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
  };
};

var functorListT = function functorListT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    var g = function g(v) {
      if (v instanceof Yield) {
        return new Yield(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value1));
      }

      ;

      if (v instanceof Skip) {
        return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value0));
      }

      ;

      if (v instanceof Done) {
        return Done.value;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 280, column 5 - line 280, column 48): " + [v.constructor.name]);
    };

    return stepMap(dictFunctor)(g);
  });
};

var fromEffect = function fromEffect(dictApplicative) {
  return function (fa) {
    return ListT(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Function.flip(Yield.create)(Data_Lazy.defer(function (v) {
      return nil(dictApplicative);
    })))(fa));
  };
};

var monadTransListT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return fromEffect(dictMonad.Applicative0());
});

var foldlRec$prime = function foldlRec$prime(dictMonadRec) {
  return function (f) {
    var loop = function loop(b) {
      return function (l) {
        var g = function g(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(b));
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(f(b)(v.value0.value0))(function (b$prime) {
              return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop({
                a: b$prime,
                b: v.value0.value1
              }));
            });
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.List.Trans (line 221, column 5 - line 221, column 45): " + [v.constructor.name]);
        };

        return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
      };
    };

    return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
  };
};

var runListTRec = function runListTRec(dictMonadRec) {
  return foldlRec$prime(dictMonadRec)(function (v) {
    return function (v1) {
      return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(Data_Unit.unit);
    };
  })(Data_Unit.unit);
};

var foldlRec = function foldlRec(dictMonadRec) {
  return function (f) {
    var loop = function loop(b) {
      return function (l) {
        var g = function g(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(b));
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop({
              a: f(b)(v.value0.value0),
              b: v.value0.value1
            }));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.List.Trans (line 239, column 7 - line 239, column 47): " + [v.constructor.name]);
        };

        return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
      };
    };

    return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
  };
};

var foldl$prime = function foldl$prime(dictMonad) {
  return function (f) {
    var loop = function loop(b) {
      return function (l) {
        var g = function g(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictMonad.Applicative0())(b);
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0.value0))(Data_Function.flip(loop)(v.value0.value1));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.List.Trans (line 212, column 5 - line 212, column 35): " + [v.constructor.name]);
        };

        return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
      };
    };

    return loop;
  };
};

var runListT = function runListT(dictMonad) {
  return foldl$prime(dictMonad)(function (v) {
    return function (v1) {
      return Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit);
    };
  })(Data_Unit.unit);
};

var foldl = function foldl(dictMonad) {
  return function (f) {
    var loop = function loop(b) {
      return function (l) {
        var g = function g(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictMonad.Applicative0())(b);
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return loop(f(b)(v.value0.value0))(v.value0.value1);
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.List.Trans (line 229, column 5 - line 229, column 35): " + [v.constructor.name]);
        };

        return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
      };
    };

    return loop;
  };
};

var filter = function filter(dictFunctor) {
  return function (f) {
    var g = function g(v) {
      if (v instanceof Yield) {
        var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
        var $150 = f(v.value0);

        if ($150) {
          return new Yield(v.value0, s$prime);
        }

        ;
        return new Skip(s$prime);
      }

      ;

      if (v instanceof Skip) {
        var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
        return new Skip(s$prime);
      }

      ;

      if (v instanceof Done) {
        return Done.value;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 176, column 3 - line 176, column 80): " + [v.constructor.name]);
    };

    return stepMap(dictFunctor)(g);
  };
};

var dropWhile = function dropWhile(dictApplicative) {
  return function (f) {
    var g = function g(v) {
      if (v instanceof Yield) {
        var $155 = f(v.value0);

        if ($155) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
        }

        ;
        return new Yield(v.value0, v.value1);
      }

      ;

      if (v instanceof Skip) {
        return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
      }

      ;

      if (v instanceof Done) {
        return Done.value;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 169, column 3 - line 169, column 70): " + [v.constructor.name]);
    };

    return stepMap(dictApplicative.Apply0().Functor0())(g);
  };
};

var drop = function drop(dictApplicative) {
  return function (v) {
    return function (fa) {
      if (v === 0) {
        return fa;
      }

      ;

      var f = function f(v1) {
        if (v1 instanceof Yield) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1 | 0))(v1.value1));
        }

        ;

        if (v1 instanceof Skip) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
        }

        ;

        if (v1 instanceof Done) {
          return Done.value;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 162, column 3 - line 162, column 44): " + [v1.constructor.name]);
      };

      return stepMap(dictApplicative.Apply0().Functor0())(f)(fa);
    };
  };
};

var cons = function cons(dictApplicative) {
  return function (lh) {
    return function (t) {
      return ListT(Control_Applicative.pure(dictApplicative)(new Yield(Data_Lazy.force(lh), t)));
    };
  };
};

var unfoldable1ListT = function unfoldable1ListT(dictMonad) {
  return new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
      var go = function go(v) {
        if (v.value1 instanceof Data_Maybe.Nothing) {
          return singleton(dictMonad.Applicative0())(v.value0);
        }

        ;

        if (v.value1 instanceof Data_Maybe.Just) {
          return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0))(Data_Lazy.defer(function (v1) {
            return go(f(v.value1.value0));
          }));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 294, column 12 - line 296, column 67): " + [v.constructor.name]);
      };

      return go(f(b));
    };
  });
};

var unfoldableListT = function unfoldableListT(dictMonad) {
  return new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1ListT(dictMonad);
  }, function (f) {
    return function (b) {
      var go = function go(v) {
        if (v instanceof Data_Maybe.Nothing) {
          return nil(dictMonad.Applicative0());
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
            return go(f(v.value0.value1));
          }));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 287, column 12 - line 289, column 67): " + [v.constructor.name]);
      };

      return go(f(b));
    };
  });
};

var semigroupListT = function semigroupListT(dictApplicative) {
  return new Data_Semigroup.Semigroup(concat(dictApplicative));
};

var concat = function concat(dictApplicative) {
  return function (x) {
    return function (y) {
      var f = function f(v) {
        if (v instanceof Yield) {
          return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
            return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
          })(v.value1));
        }

        ;

        if (v instanceof Skip) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
            return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
          })(v.value0));
        }

        ;

        if (v instanceof Done) {
          return new Skip(Data_Lazy.defer(Data_Function["const"](y)));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 106, column 3 - line 106, column 43): " + [v.constructor.name]);
      };

      return stepMap(dictApplicative.Apply0().Functor0())(f)(x);
    };
  };
};

var monoidListT = function monoidListT(dictApplicative) {
  return new Data_Monoid.Monoid(function () {
    return semigroupListT(dictApplicative);
  }, nil(dictApplicative));
};

var catMaybes = function catMaybes(dictFunctor) {
  return mapMaybe(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
};

var monadListT = function monadListT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeListT(dictMonad);
  }, function () {
    return bindListT(dictMonad);
  });
};

var bindListT = function bindListT(dictMonad) {
  return new Control_Bind.Bind(function () {
    return applyListT(dictMonad);
  }, function (fa) {
    return function (f) {
      var g = function g(v) {
        if (v instanceof Yield) {
          var h = function h(s$prime) {
            return Data_Semigroup.append(semigroupListT(dictMonad.Applicative0()))(f(v.value0))(Control_Bind.bind(bindListT(dictMonad))(s$prime)(f));
          };

          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(h)(v.value1));
        }

        ;

        if (v instanceof Skip) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
            return Control_Bind.bind(bindListT(dictMonad))(v1)(f);
          })(v.value0));
        }

        ;

        if (v instanceof Done) {
          return Done.value;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 306, column 5 - line 308, column 31): " + [v.constructor.name]);
      };

      return stepMap(dictMonad.Bind1().Apply0().Functor0())(g)(fa);
    };
  });
};

var applyListT = function applyListT(dictMonad) {
  return new Control_Apply.Apply(function () {
    return functorListT(dictMonad.Bind1().Apply0().Functor0());
  }, Control_Monad.ap(monadListT(dictMonad)));
};

var applicativeListT = function applicativeListT(dictMonad) {
  return new Control_Applicative.Applicative(function () {
    return applyListT(dictMonad);
  }, singleton(dictMonad.Applicative0()));
};

var monadEffectListT = function monadEffectListT(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadListT(dictMonadEffect.Monad0());
  }, function () {
    var $184 = Control_Monad_Trans_Class.lift(monadTransListT)(dictMonadEffect.Monad0());
    var $185 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($186) {
      return $184($185($186));
    };
  }());
};

var altListT = function altListT(dictApplicative) {
  return new Control_Alt.Alt(function () {
    return functorListT(dictApplicative.Apply0().Functor0());
  }, concat(dictApplicative));
};

var plusListT = function plusListT(dictMonad) {
  return new Control_Plus.Plus(function () {
    return altListT(dictMonad.Applicative0());
  }, nil(dictMonad.Applicative0()));
};

var alternativeListT = function alternativeListT(dictMonad) {
  return new Control_Alternative.Alternative(function () {
    return applicativeListT(dictMonad);
  }, function () {
    return plusListT(dictMonad);
  });
};

var monadZeroListT = function monadZeroListT(dictMonad) {
  return new Control_MonadZero.MonadZero(function () {
    return alternativeListT(dictMonad);
  }, function () {
    return monadListT(dictMonad);
  });
};

var monadPlusListT = function monadPlusListT(dictMonad) {
  return new Control_MonadPlus.MonadPlus(function () {
    return monadZeroListT(dictMonad);
  });
};

module.exports = {
  ListT: ListT,
  Yield: Yield,
  Skip: Skip,
  Done: Done,
  catMaybes: catMaybes,
  cons: cons,
  drop: drop,
  dropWhile: dropWhile,
  filter: filter,
  foldl: foldl,
  foldlRec: foldlRec,
  "foldl'": foldl$prime,
  "foldlRec'": foldlRec$prime,
  fromEffect: fromEffect,
  head: head,
  iterate: iterate,
  mapMaybe: mapMaybe,
  nil: nil,
  prepend: prepend,
  "prepend'": prepend$prime,
  repeat: repeat,
  runListT: runListT,
  runListTRec: runListTRec,
  scanl: scanl,
  singleton: singleton,
  tail: tail,
  take: take,
  takeWhile: takeWhile,
  uncons: uncons,
  unfold: unfold,
  wrapEffect: wrapEffect,
  wrapLazy: wrapLazy,
  zipWith: zipWith,
  "zipWith'": zipWith$prime,
  newtypeListT: newtypeListT,
  semigroupListT: semigroupListT,
  monoidListT: monoidListT,
  functorListT: functorListT,
  unfoldableListT: unfoldableListT,
  unfoldable1ListT: unfoldable1ListT,
  applyListT: applyListT,
  applicativeListT: applicativeListT,
  bindListT: bindListT,
  monadListT: monadListT,
  monadTransListT: monadTransListT,
  altListT: altListT,
  plusListT: plusListT,
  alternativeListT: alternativeListT,
  monadZeroListT: monadZeroListT,
  monadPlusListT: monadPlusListT,
  monadEffectListT: monadEffectListT
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Lazy/index.js":"output/Data.Lazy/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"output/Data.Unfoldable1/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js"}],"output/Control.Monad.RWS.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var RWSResult = function () {
  function RWSResult(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  RWSResult.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new RWSResult(value0, value1, value2);
      };
    };
  };

  return RWSResult;
}();

var RWST = function RWST(x) {
  return x;
};

var withRWST = function withRWST(f) {
  return function (m) {
    return function (r) {
      return function (s) {
        return Data_Tuple.uncurry(m)(f(r)(s));
      };
    };
  };
};

var runRWST = function runRWST(v) {
  return v;
};

var newtypeRWST = new Data_Newtype.Newtype(function (n) {
  return n;
}, RWST);

var monadTransRWST = function monadTransRWST(dictMonoid) {
  return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
      return function (v) {
        return function (s) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
          });
        };
      };
    };
  });
};

var mapRWST = function mapRWST(f) {
  return function (v) {
    return function (r) {
      return function (s) {
        return f(v(r)(s));
      };
    };
  };
};

var lazyRWST = new Control_Lazy.Lazy(function (f) {
  return function (r) {
    return function (s) {
      var v = f(Data_Unit.unit);
      return v(r)(s);
    };
  };
});

var functorRWST = function functorRWST(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return function (r) {
        return function (s) {
          return Data_Functor.map(dictFunctor)(function (v1) {
            return new RWSResult(v1.value0, f(v1.value1), v1.value2);
          })(v(r)(s));
        };
      };
    };
  });
};

var execRWST = function execRWST(dictMonad) {
  return function (v) {
    return function (r) {
      return function (s) {
        return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value2));
        });
      };
    };
  };
};

var evalRWST = function evalRWST(dictMonad) {
  return function (v) {
    return function (r) {
      return function (s) {
        return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value1, v1.value2));
        });
      };
    };
  };
};

var applyRWST = function applyRWST(dictBind) {
  return function (dictMonoid) {
    return new Control_Apply.Apply(function () {
      return functorRWST(dictBind.Apply0().Functor0());
    }, function (v) {
      return function (v1) {
        return function (r) {
          return function (s) {
            return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
              return Data_Functor.mapFlipped(dictBind.Apply0().Functor0())(v1(r)(v2.value0))(function (v3) {
                return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid.Semigroup0())(v2.value2)(v3.value2));
              });
            });
          };
        };
      };
    });
  };
};

var bindRWST = function bindRWST(dictBind) {
  return function (dictMonoid) {
    return new Control_Bind.Bind(function () {
      return applyRWST(dictBind)(dictMonoid);
    }, function (v) {
      return function (f) {
        return function (r) {
          return function (s) {
            return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
              var v2 = f(v1.value1);
              return Data_Functor.mapFlipped(dictBind.Apply0().Functor0())(v2(r)(v1.value0))(function (v3) {
                return new RWSResult(v3.value0, v3.value1, Data_Semigroup.append(dictMonoid.Semigroup0())(v1.value2)(v3.value2));
              });
            });
          };
        };
      };
    });
  };
};

var applicativeRWST = function applicativeRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Applicative.Applicative(function () {
      return applyRWST(dictMonad.Bind1())(dictMonoid);
    }, function (a) {
      return function (v) {
        return function (s) {
          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
        };
      };
    });
  };
};

var monadRWST = function monadRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad.Monad(function () {
      return applicativeRWST(dictMonad)(dictMonoid);
    }, function () {
      return bindRWST(dictMonad.Bind1())(dictMonoid);
    });
  };
};

var monadAskRWST = function monadAskRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
      return monadRWST(dictMonad)(dictMonoid);
    }, function (r) {
      return function (s) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
      };
    });
  };
};

var monadReaderRWST = function monadReaderRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
      return monadAskRWST(dictMonad)(dictMonoid);
    }, function (f) {
      return function (m) {
        return function (r) {
          return function (s) {
            return m(f(r))(s);
          };
        };
      };
    });
  };
};

var monadEffectRWS = function monadEffectRWS(dictMonoid) {
  return function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
      return monadRWST(dictMonadEffect.Monad0())(dictMonoid);
    }, function () {
      var $155 = Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadEffect.Monad0());
      var $156 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($157) {
        return $155($156($157));
      };
    }());
  };
};

var monadRecRWST = function monadRecRWST(dictMonadRec) {
  return function (dictMonoid) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
      return monadRWST(dictMonadRec.Monad0())(dictMonoid);
    }, function (k) {
      return function (a) {
        var k$prime = function k$prime(r) {
          return function (v) {
            var v1 = k(v.value1);
            return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v1(r)(v.value0))(function (v2) {
              return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function () {
                if (v2.value1 instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                }

                ;

                if (v2.value1 instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                }

                ;
                throw new Error("Failed pattern match at Control.Monad.RWS.Trans (line 127, column 16 - line 129, column 68): " + [v2.value1.constructor.name]);
              }());
            });
          };
        };

        return function (r) {
          return function (s) {
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
          };
        };
      };
    });
  };
};

var monadStateRWST = function monadStateRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad_State_Class.MonadState(function () {
      return monadRWST(dictMonad)(dictMonoid);
    }, function (f) {
      return function (v) {
        return function (s) {
          var v1 = f(s);
          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v1.value1, v1.value0, Data_Monoid.mempty(dictMonoid)));
        };
      };
    });
  };
};

var monadTellRWST = function monadTellRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
      return monadRWST(dictMonad)(dictMonoid);
    }, function (w) {
      return function (v) {
        return function (s) {
          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, Data_Unit.unit, w));
        };
      };
    });
  };
};

var monadWriterRWST = function monadWriterRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
      return monadTellRWST(dictMonad)(dictMonoid);
    }, function (m) {
      return function (r) {
        return function (s) {
          return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
          });
        };
      };
    }, function (m) {
      return function (r) {
        return function (s) {
          return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
          });
        };
      };
    });
  };
};

var monadThrowRWST = function monadThrowRWST(dictMonadThrow) {
  return function (dictMonoid) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
      return monadRWST(dictMonadThrow.Monad0())(dictMonoid);
    }, function (e) {
      return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
  };
};

var monadErrorRWST = function monadErrorRWST(dictMonadError) {
  return function (dictMonoid) {
    return new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowRWST(dictMonadError.MonadThrow0())(dictMonoid);
    }, function (m) {
      return function (h) {
        return RWST(function (r) {
          return function (s) {
            return Control_Monad_Error_Class.catchError(dictMonadError)(m(r)(s))(function (e) {
              var v = h(e);
              return v(r)(s);
            });
          };
        });
      };
    });
  };
};

var altRWST = function altRWST(dictAlt) {
  return new Control_Alt.Alt(function () {
    return functorRWST(dictAlt.Functor0());
  }, function (v) {
    return function (v1) {
      return RWST(function (r) {
        return function (s) {
          return Control_Alt.alt(dictAlt)(v(r)(s))(v1(r)(s));
        };
      });
    };
  });
};

var plusRWST = function plusRWST(dictPlus) {
  return new Control_Plus.Plus(function () {
    return altRWST(dictPlus.Alt0());
  }, function (v) {
    return function (v1) {
      return Control_Plus.empty(dictPlus);
    };
  });
};

var alternativeRWST = function alternativeRWST(dictMonoid) {
  return function (dictAlternative) {
    return function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
        return applicativeRWST(dictMonad)(dictMonoid);
      }, function () {
        return plusRWST(dictAlternative.Plus1());
      });
    };
  };
};

module.exports = {
  RWSResult: RWSResult,
  RWST: RWST,
  runRWST: runRWST,
  evalRWST: evalRWST,
  execRWST: execRWST,
  mapRWST: mapRWST,
  withRWST: withRWST,
  newtypeRWST: newtypeRWST,
  functorRWST: functorRWST,
  applyRWST: applyRWST,
  altRWST: altRWST,
  alternativeRWST: alternativeRWST,
  bindRWST: bindRWST,
  applicativeRWST: applicativeRWST,
  monadRWST: monadRWST,
  monadTransRWST: monadTransRWST,
  lazyRWST: lazyRWST,
  monadEffectRWS: monadEffectRWS,
  monadAskRWST: monadAskRWST,
  monadReaderRWST: monadReaderRWST,
  monadStateRWST: monadStateRWST,
  monadTellRWST: monadTellRWST,
  monadWriterRWST: monadWriterRWST,
  monadThrowRWST: monadThrowRWST,
  monadErrorRWST: monadErrorRWST,
  monadRecRWST: monadRecRWST,
  plusRWST: plusRWST
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Lazy/index.js":"output/Control.Lazy/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"output/Control.Monad.Writer.Class/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js"}],"output/Control.Monad.State.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var StateT = function StateT(x) {
  return x;
};

var withStateT = function withStateT(f) {
  return function (v) {
    return function ($105) {
      return v(f($105));
    };
  };
};

var runStateT = function runStateT(v) {
  return v;
};

var newtypeStateT = new Data_Newtype.Newtype(function (n) {
  return n;
}, StateT);
var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return function (m) {
    return function (s) {
      return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
      });
    };
  };
});

var mapStateT = function mapStateT(f) {
  return function (v) {
    return function ($106) {
      return f(v($106));
    };
  };
};

var lazyStateT = new Control_Lazy.Lazy(function (f) {
  return function (s) {
    var v = f(Data_Unit.unit);
    return v(s);
  };
});

var functorStateT = function functorStateT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return function (s) {
        return Data_Functor.map(dictFunctor)(function (v1) {
          return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
        })(v(s));
      };
    };
  });
};

var execStateT = function execStateT(dictFunctor) {
  return function (v) {
    return function (s) {
      return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
    };
  };
};

var evalStateT = function evalStateT(dictFunctor) {
  return function (v) {
    return function (s) {
      return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
    };
  };
};

var monadStateT = function monadStateT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeStateT(dictMonad);
  }, function () {
    return bindStateT(dictMonad);
  });
};

var bindStateT = function bindStateT(dictMonad) {
  return new Control_Bind.Bind(function () {
    return applyStateT(dictMonad);
  }, function (v) {
    return function (f) {
      return function (s) {
        return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
          var v3 = f(v1.value0);
          return v3(v1.value1);
        });
      };
    };
  });
};

var applyStateT = function applyStateT(dictMonad) {
  return new Control_Apply.Apply(function () {
    return functorStateT(dictMonad.Bind1().Apply0().Functor0());
  }, Control_Monad.ap(monadStateT(dictMonad)));
};

var applicativeStateT = function applicativeStateT(dictMonad) {
  return new Control_Applicative.Applicative(function () {
    return applyStateT(dictMonad);
  }, function (a) {
    return function (s) {
      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
    };
  });
};

var monadAskStateT = function monadAskStateT(dictMonadAsk) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadStateT(dictMonadAsk.Monad0());
  }, Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};

var monadReaderStateT = function monadReaderStateT(dictMonadReader) {
  return new Control_Monad_Reader_Class.MonadReader(function () {
    return monadAskStateT(dictMonadReader.MonadAsk0());
  }, function () {
    var $107 = Control_Monad_Reader_Class.local(dictMonadReader);
    return function ($108) {
      return mapStateT($107($108));
    };
  }());
};

var monadContStateT = function monadContStateT(dictMonadCont) {
  return new Control_Monad_Cont_Class.MonadCont(function () {
    return monadStateT(dictMonadCont.Monad0());
  }, function (f) {
    return function (s) {
      return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
        var v = f(function (a) {
          return function (s$prime) {
            return c(new Data_Tuple.Tuple(a, s$prime));
          };
        });
        return v(s);
      });
    };
  });
};

var monadEffectState = function monadEffectState(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadStateT(dictMonadEffect.Monad0());
  }, function () {
    var $109 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
    var $110 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($111) {
      return $109($110($111));
    };
  }());
};

var monadRecStateT = function monadRecStateT(dictMonadRec) {
  return new Control_Monad_Rec_Class.MonadRec(function () {
    return monadStateT(dictMonadRec.Monad0());
  }, function (f) {
    return function (a) {
      var f$prime = function f$prime(v) {
        var v1 = f(v.value0);
        return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v1(v.value1))(function (v2) {
          return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function () {
            if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
              return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
            }

            ;

            if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
              return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
            }

            ;
            throw new Error("Failed pattern match at Control.Monad.State.Trans (line 87, column 16 - line 89, column 40): " + [v2.value0.constructor.name]);
          }());
        });
      };

      return function (s) {
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
      };
    };
  });
};

var monadStateStateT = function monadStateStateT(dictMonad) {
  return new Control_Monad_State_Class.MonadState(function () {
    return monadStateT(dictMonad);
  }, function (f) {
    return StateT(function () {
      var $112 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($113) {
        return $112(f($113));
      };
    }());
  });
};

var monadTellStateT = function monadTellStateT(dictMonadTell) {
  return new Control_Monad_Writer_Class.MonadTell(function () {
    return monadStateT(dictMonadTell.Monad0());
  }, function () {
    var $114 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadTell.Monad0());
    var $115 = Control_Monad_Writer_Class.tell(dictMonadTell);
    return function ($116) {
      return $114($115($116));
    };
  }());
};

var monadWriterStateT = function monadWriterStateT(dictMonadWriter) {
  return new Control_Monad_Writer_Class.MonadWriter(function () {
    return monadTellStateT(dictMonadWriter.MonadTell0());
  }, function (m) {
    return function (s) {
      return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m(s)))(function (v) {
        return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
      });
    };
  }, function (m) {
    return function (s) {
      return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m(s))(function (v) {
        return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
      }));
    };
  });
};

var monadThrowStateT = function monadThrowStateT(dictMonadThrow) {
  return new Control_Monad_Error_Class.MonadThrow(function () {
    return monadStateT(dictMonadThrow.Monad0());
  }, function (e) {
    return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
  });
};

var monadErrorStateT = function monadErrorStateT(dictMonadError) {
  return new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowStateT(dictMonadError.MonadThrow0());
  }, function (v) {
    return function (h) {
      return function (s) {
        return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
          var v1 = h(e);
          return v1(s);
        });
      };
    };
  });
};

var altStateT = function altStateT(dictMonad) {
  return function (dictAlt) {
    return new Control_Alt.Alt(function () {
      return functorStateT(dictAlt.Functor0());
    }, function (v) {
      return function (v1) {
        return function (s) {
          return Control_Alt.alt(dictAlt)(v(s))(v1(s));
        };
      };
    });
  };
};

var plusStateT = function plusStateT(dictMonad) {
  return function (dictPlus) {
    return new Control_Plus.Plus(function () {
      return altStateT(dictMonad)(dictPlus.Alt0());
    }, function (v) {
      return Control_Plus.empty(dictPlus);
    });
  };
};

var alternativeStateT = function alternativeStateT(dictMonad) {
  return function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
      return applicativeStateT(dictMonad);
    }, function () {
      return plusStateT(dictMonad)(dictAlternative.Plus1());
    });
  };
};

var monadZeroStateT = function monadZeroStateT(dictMonadZero) {
  return new Control_MonadZero.MonadZero(function () {
    return alternativeStateT(dictMonadZero.Monad0())(dictMonadZero.Alternative1());
  }, function () {
    return monadStateT(dictMonadZero.Monad0());
  });
};

var monadPlusStateT = function monadPlusStateT(dictMonadPlus) {
  return new Control_MonadPlus.MonadPlus(function () {
    return monadZeroStateT(dictMonadPlus.MonadZero0());
  });
};

module.exports = {
  StateT: StateT,
  runStateT: runStateT,
  evalStateT: evalStateT,
  execStateT: execStateT,
  mapStateT: mapStateT,
  withStateT: withStateT,
  newtypeStateT: newtypeStateT,
  functorStateT: functorStateT,
  applyStateT: applyStateT,
  applicativeStateT: applicativeStateT,
  altStateT: altStateT,
  plusStateT: plusStateT,
  alternativeStateT: alternativeStateT,
  bindStateT: bindStateT,
  monadStateT: monadStateT,
  monadRecStateT: monadRecStateT,
  monadZeroStateT: monadZeroStateT,
  monadPlusStateT: monadPlusStateT,
  monadTransStateT: monadTransStateT,
  lazyStateT: lazyStateT,
  monadEffectState: monadEffectState,
  monadContStateT: monadContStateT,
  monadThrowStateT: monadThrowStateT,
  monadErrorStateT: monadErrorStateT,
  monadAskStateT: monadAskStateT,
  monadReaderStateT: monadReaderStateT,
  monadStateStateT: monadStateStateT,
  monadTellStateT: monadTellStateT,
  monadWriterStateT: monadWriterStateT
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Lazy/index.js":"output/Control.Lazy/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"output/Control.Monad.Cont.Class/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"output/Control.Monad.Writer.Class/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js"}],"output/Effect.Aff.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Control_Monad_List_Trans = require("../Control.Monad.List.Trans/index.js");

var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");

var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans/index.js");

var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");

var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var MonadAff = function MonadAff(MonadEffect0, liftAff) {
  this.MonadEffect0 = MonadEffect0;
  this.liftAff = liftAff;
};

var monadAffAff = new MonadAff(function () {
  return Effect_Aff.monadEffectAff;
}, Control_Category.identity(Control_Category.categoryFn));

var liftAff = function liftAff(dict) {
  return dict.liftAff;
};

var monadAffContT = function monadAffContT(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_Cont_Trans.monadEffectContT(dictMonadAff.MonadEffect0());
  }, function () {
    var $10 = Control_Monad_Trans_Class.lift(Control_Monad_Cont_Trans.monadTransContT)(dictMonadAff.MonadEffect0().Monad0());
    var $11 = liftAff(dictMonadAff);
    return function ($12) {
      return $10($11($12));
    };
  }());
};

var monadAffExceptT = function monadAffExceptT(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadAff.MonadEffect0());
  }, function () {
    var $13 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(dictMonadAff.MonadEffect0().Monad0());
    var $14 = liftAff(dictMonadAff);
    return function ($15) {
      return $13($14($15));
    };
  }());
};

var monadAffListT = function monadAffListT(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_List_Trans.monadEffectListT(dictMonadAff.MonadEffect0());
  }, function () {
    var $16 = Control_Monad_Trans_Class.lift(Control_Monad_List_Trans.monadTransListT)(dictMonadAff.MonadEffect0().Monad0());
    var $17 = liftAff(dictMonadAff);
    return function ($18) {
      return $16($17($18));
    };
  }());
};

var monadAffMaybe = function monadAffMaybe(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_Maybe_Trans.monadEffectMaybe(dictMonadAff.MonadEffect0());
  }, function () {
    var $19 = Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(dictMonadAff.MonadEffect0().Monad0());
    var $20 = liftAff(dictMonadAff);
    return function ($21) {
      return $19($20($21));
    };
  }());
};

var monadAffRWS = function monadAffRWS(dictMonadAff) {
  return function (dictMonoid) {
    return new MonadAff(function () {
      return Control_Monad_RWS_Trans.monadEffectRWS(dictMonoid)(dictMonadAff.MonadEffect0());
    }, function () {
      var $22 = Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))(dictMonadAff.MonadEffect0().Monad0());
      var $23 = liftAff(dictMonadAff);
      return function ($24) {
        return $22($23($24));
      };
    }());
  };
};

var monadAffReader = function monadAffReader(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
  }, function () {
    var $25 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonadAff.MonadEffect0().Monad0());
    var $26 = liftAff(dictMonadAff);
    return function ($27) {
      return $25($26($27));
    };
  }());
};

var monadAffState = function monadAffState(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_State_Trans.monadEffectState(dictMonadAff.MonadEffect0());
  }, function () {
    var $28 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadAff.MonadEffect0().Monad0());
    var $29 = liftAff(dictMonadAff);
    return function ($30) {
      return $28($29($30));
    };
  }());
};

var monadAffWriter = function monadAffWriter(dictMonadAff) {
  return function (dictMonoid) {
    return new MonadAff(function () {
      return Control_Monad_Writer_Trans.monadEffectWriter(dictMonoid)(dictMonadAff.MonadEffect0());
    }, function () {
      var $31 = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))(dictMonadAff.MonadEffect0().Monad0());
      var $32 = liftAff(dictMonadAff);
      return function ($33) {
        return $31($32($33));
      };
    }());
  };
};

module.exports = {
  liftAff: liftAff,
  MonadAff: MonadAff,
  monadAffAff: monadAffAff,
  monadAffContT: monadAffContT,
  monadAffExceptT: monadAffExceptT,
  monadAffListT: monadAffListT,
  monadAffMaybe: monadAffMaybe,
  monadAffReader: monadAffReader,
  monadAffRWS: monadAffRWS,
  monadAffState: monadAffState,
  monadAffWriter: monadAffWriter
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Control.Monad.Cont.Trans/index.js":"output/Control.Monad.Cont.Trans/index.js","../Control.Monad.Except.Trans/index.js":"output/Control.Monad.Except.Trans/index.js","../Control.Monad.List.Trans/index.js":"output/Control.Monad.List.Trans/index.js","../Control.Monad.Maybe.Trans/index.js":"output/Control.Monad.Maybe.Trans/index.js","../Control.Monad.RWS.Trans/index.js":"output/Control.Monad.RWS.Trans/index.js","../Control.Monad.Reader.Trans/index.js":"output/Control.Monad.Reader.Trans/index.js","../Control.Monad.State.Trans/index.js":"output/Control.Monad.State.Trans/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Trans/index.js":"output/Control.Monad.Writer.Trans/index.js","../Effect.Aff/index.js":"output/Effect.Aff/index.js"}],"../output/Effect.Aff.Compat/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Either = require("../Data.Either/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var EffectFnCanceler = function EffectFnCanceler(x) {
  return x;
};

var EffectFnAff = function EffectFnAff(x) {
  return x;
};

var fromEffectFnAff = function fromEffectFnAff(v) {
  return Effect_Aff.makeAff(function (k) {
    return function __do() {
      var v1 = v(function ($4) {
        return k(Data_Either.Left.create($4))();
      }, function ($5) {
        return k(Data_Either.Right.create($5))();
      });
      return function (e) {
        return Effect_Aff.makeAff(function (k2) {
          return function __do() {
            v1(e, function ($6) {
              return k2(Data_Either.Left.create($6))();
            }, function ($7) {
              return k2(Data_Either.Right.create($7))();
            });
            return Effect_Aff.nonCanceler;
          };
        });
      };
    };
  });
};

module.exports = {
  EffectFnAff: EffectFnAff,
  EffectFnCanceler: EffectFnCanceler,
  fromEffectFnAff: fromEffectFnAff
};
},{"../Data.Either/index.js":"output/Data.Either/index.js","../Effect.Aff/index.js":"output/Effect.Aff/index.js"}],"output/Web.DOM.ParentNode/foreign.js":[function(require,module,exports) {
"use strict";

var getEffProp = function getEffProp(name) {
  return function (node) {
    return function () {
      return node[name];
    };
  };
};

exports.children = getEffProp("children");
exports._firstElementChild = getEffProp("firstElementChild");
exports._lastElementChild = getEffProp("lastElementChild");
exports.childElementCount = getEffProp("childElementCount");

exports._querySelector = function (selector) {
  return function (node) {
    return function () {
      return node.querySelector(selector);
    };
  };
};

exports.querySelectorAll = function (selector) {
  return function (node) {
    return function () {
      return node.querySelectorAll(selector);
    };
  };
};
},{}],"output/Data.Nullable/foreign.js":[function(require,module,exports) {
"use strict";

exports["null"] = null;

exports.nullable = function (a, r, f) {
  return a == null ? r : f(a);
};

exports.notNull = function (x) {
  return x;
};
},{}],"output/Data.Nullable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);

var toMaybe = function toMaybe(n) {
  return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
};

var showNullable = function showNullable(dictShow) {
  return new Data_Show.Show(function () {
    var $5 = Data_Maybe.maybe("null")(Data_Show.show(dictShow));
    return function ($6) {
      return $5(toMaybe($6));
    };
  }());
};

var eqNullable = function eqNullable(dictEq) {
  return new Data_Eq.Eq(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe));
};

var ordNullable = function ordNullable(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqNullable(dictOrd.Eq0());
  }, Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe));
};

var eq1Nullable = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqNullable(dictEq));
});
var ord1Nullable = new Data_Ord.Ord1(function () {
  return eq1Nullable;
}, function (dictOrd) {
  return Data_Ord.compare(ordNullable(dictOrd));
});
module.exports = {
  toMaybe: toMaybe,
  toNullable: toNullable,
  showNullable: showNullable,
  eqNullable: eqNullable,
  eq1Nullable: eq1Nullable,
  ordNullable: ordNullable,
  ord1Nullable: ord1Nullable,
  "null": $foreign["null"],
  notNull: $foreign.notNull
};
},{"./foreign.js":"output/Data.Nullable/foreign.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Web.DOM.ParentNode/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Effect = require("../Effect/index.js");

var QuerySelector = function QuerySelector(x) {
  return x;
};

var querySelector = function querySelector(qs) {
  var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  var $4 = $foreign["_querySelector"](qs);
  return function ($5) {
    return $3($4($5));
  };
};

var ordQuerySelector = Data_Ord.ordString;
var newtypeQuerySelector = new Data_Newtype.Newtype(function (n) {
  return n;
}, QuerySelector);

var lastElementChild = function () {
  var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($7) {
    return $6($foreign["_lastElementChild"]($7));
  };
}();

var firstElementChild = function () {
  var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($9) {
    return $8($foreign["_firstElementChild"]($9));
  };
}();

var eqQuerySelector = Data_Eq.eqString;
module.exports = {
  firstElementChild: firstElementChild,
  lastElementChild: lastElementChild,
  QuerySelector: QuerySelector,
  querySelector: querySelector,
  eqQuerySelector: eqQuerySelector,
  ordQuerySelector: ordQuerySelector,
  newtypeQuerySelector: newtypeQuerySelector,
  children: $foreign.children,
  childElementCount: $foreign.childElementCount,
  querySelectorAll: $foreign.querySelectorAll
};
},{"./foreign.js":"output/Web.DOM.ParentNode/foreign.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Effect/index.js":"output/Effect/index.js"}],"output/Web.Event.EventTarget/foreign.js":[function(require,module,exports) {
"use strict";

exports.eventListener = function (fn) {
  return function () {
    return function (event) {
      return fn(event)();
    };
  };
};

exports.addEventListener = function (type) {
  return function (listener) {
    return function (useCapture) {
      return function (target) {
        return function () {
          return target.addEventListener(type, listener, useCapture);
        };
      };
    };
  };
};

exports.removeEventListener = function (type) {
  return function (listener) {
    return function (useCapture) {
      return function (target) {
        return function () {
          return target.removeEventListener(type, listener, useCapture);
        };
      };
    };
  };
};

exports.dispatchEvent = function (event) {
  return function (target) {
    return function () {
      return target.dispatchEvent(event);
    };
  };
};
},{}],"output/Web.Event.EventTarget/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  eventListener: $foreign.eventListener,
  addEventListener: $foreign.addEventListener,
  removeEventListener: $foreign.removeEventListener,
  dispatchEvent: $foreign.dispatchEvent
};
},{"./foreign.js":"output/Web.Event.EventTarget/foreign.js"}],"output/Web.HTML/foreign.js":[function(require,module,exports) {
/* global window */
"use strict";

exports.window = function () {
  return window;
};
},{}],"output/Web.HTML/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  window: $foreign.window
};
},{"./foreign.js":"output/Web.HTML/foreign.js"}],"output/Web.HTML.Event.EventTypes/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var unload = "unload";
var toggle = "toggle";
var submit = "submit";
var storage = "storage";
var select = "select";
var reset = "reset";
var readystatechange = "readystatechange";
var progress = "progress";
var paste = "paste";
var online = "online";
var offline = "offline";
var message = "message";
var loadstart = "loadstart";
var loadend = "loadend";
var load = "load";
var languagechange = "languagechange";
var invalid = "invalid";
var input = "input";
var focus = "focus";
var error = "error";
var domcontentloaded = "DOMContentLoaded";
var cut = "cut";
var copy = "copy";
var close = "close";
var click = "click";
var change = "change";
var cancel = "cancel";
var blur = "blur";
var beforescriptexecute = "beforescriptexecute";
var beforeprint = "beforeprint";
var afterscriptexecute = "afterscriptexecute";
var afterprint = "afterprint";
var abort = "abort";
module.exports = {
  abort: abort,
  afterprint: afterprint,
  afterscriptexecute: afterscriptexecute,
  beforeprint: beforeprint,
  beforescriptexecute: beforescriptexecute,
  blur: blur,
  cancel: cancel,
  change: change,
  click: click,
  close: close,
  copy: copy,
  cut: cut,
  domcontentloaded: domcontentloaded,
  error: error,
  focus: focus,
  input: input,
  invalid: invalid,
  languagechange: languagechange,
  load: load,
  loadend: loadend,
  loadstart: loadstart,
  message: message,
  offline: offline,
  online: online,
  paste: paste,
  progress: progress,
  readystatechange: readystatechange,
  reset: reset,
  select: select,
  storage: storage,
  submit: submit,
  toggle: toggle,
  unload: unload
};
},{}],"output/Web.HTML.HTMLDocument/foreign.js":[function(require,module,exports) {
"use strict";

exports._head = function (doc) {
  return function () {
    return doc.head;
  };
};

exports._body = function (doc) {
  return function () {
    return doc.body;
  };
};

exports._readyState = function (doc) {
  return function () {
    return doc.readyState;
  };
};

exports._activeElement = function (doc) {
  return function () {
    return doc.activeElement;
  };
};

exports._currentScript = function (doc) {
  return function () {
    return doc.currentScript;
  };
};

exports.referrer = function (doc) {
  return function () {
    return doc.referrer;
  };
};

exports.title = function (doc) {
  return function () {
    return doc.title;
  };
};

exports.setTitle = function (title) {
  return function (doc) {
    return function () {
      doc.title = title;
      return {};
    };
  };
};
},{}],"output/Web.HTML.HTMLDocument.ReadyState/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Loading = function () {
  function Loading() {}

  ;
  Loading.value = new Loading();
  return Loading;
}();

var Interactive = function () {
  function Interactive() {}

  ;
  Interactive.value = new Interactive();
  return Interactive;
}();

var Complete = function () {
  function Complete() {}

  ;
  Complete.value = new Complete();
  return Complete;
}();

var showReadyState = new Data_Show.Show(function (v) {
  if (v instanceof Loading) {
    return "Loading";
  }

  ;

  if (v instanceof Interactive) {
    return "Interactive";
  }

  ;

  if (v instanceof Complete) {
    return "Complete";
  }

  ;
  throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 15, column 10 - line 18, column 27): " + [v.constructor.name]);
});

var print = function print(v) {
  if (v instanceof Loading) {
    return "loading";
  }

  ;

  if (v instanceof Interactive) {
    return "interactive";
  }

  ;

  if (v instanceof Complete) {
    return "complete";
  }

  ;
  throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 21, column 9 - line 24, column 25): " + [v.constructor.name]);
};

var parse = function parse(v) {
  if (v === "loading") {
    return new Data_Maybe.Just(Loading.value);
  }

  ;

  if (v === "interactive") {
    return new Data_Maybe.Just(Interactive.value);
  }

  ;

  if (v === "complete") {
    return new Data_Maybe.Just(Complete.value);
  }

  ;
  return Data_Maybe.Nothing.value;
};

var eqReadyState = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof Loading && y instanceof Loading) {
      return true;
    }

    ;

    if (x instanceof Interactive && y instanceof Interactive) {
      return true;
    }

    ;

    if (x instanceof Complete && y instanceof Complete) {
      return true;
    }

    ;
    return false;
  };
});
var ordReadyState = new Data_Ord.Ord(function () {
  return eqReadyState;
}, function (x) {
  return function (y) {
    if (x instanceof Loading && y instanceof Loading) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Loading) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Loading) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Interactive && y instanceof Interactive) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Interactive) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Interactive) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Complete && y instanceof Complete) {
      return Data_Ordering.EQ.value;
    }

    ;
    throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 12, column 1 - line 12, column 48): " + [x.constructor.name, y.constructor.name]);
  };
});
module.exports = {
  Loading: Loading,
  Interactive: Interactive,
  Complete: Complete,
  print: print,
  parse: parse,
  eqReadyState: eqReadyState,
  ordReadyState: ordReadyState,
  showReadyState: showReadyState
};
},{"../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Web.Internal.FFI/foreign.js":[function(require,module,exports) {
"use strict";

exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
  if (typeof window !== "undefined") {
    var ty = window[name];

    if (ty != null && value instanceof ty) {
      return just(value);
    }

    return nothing;
  }

  var obj = value;

  while (obj != null) {
    var proto = Object.getPrototypeOf(obj);
    var constructorName = proto.constructor.name;

    if (constructorName === name) {
      return just(value);
    } else if (constructorName === "Object") {
      return nothing;
    }

    obj = proto;
  }

  return nothing;
};
},{}],"output/Web.Internal.FFI/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var unsafeReadProtoTagged = function unsafeReadProtoTagged(name) {
  return function (value) {
    return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
  };
};

module.exports = {
  unsafeReadProtoTagged: unsafeReadProtoTagged
};
},{"./foreign.js":"output/Web.Internal.FFI/foreign.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js"}],"output/Web.HTML.HTMLDocument/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Effect = require("../Effect/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_HTML_HTMLDocument_ReadyState = require("../Web.HTML.HTMLDocument.ReadyState/index.js");

var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");

var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toDocument = Unsafe_Coerce.unsafeCoerce;

var readyState = function () {
  var $0 = Data_Functor.map(Effect.functorEffect)(function () {
    var $2 = Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value);
    return function ($3) {
      return $2(Web_HTML_HTMLDocument_ReadyState.parse($3));
    };
  }());
  return function ($1) {
    return $0($foreign["_readyState"]($1));
  };
}();

var head = function () {
  var $4 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($5) {
    return $4($foreign["_head"]($5));
  };
}();

var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromDocument = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");

var currentScript = function () {
  var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($7) {
    return $6($foreign["_currentScript"]($7));
  };
}();

var body = function () {
  var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($9) {
    return $8($foreign["_body"]($9));
  };
}();

var activeElement = function () {
  var $10 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($11) {
    return $10($foreign["_activeElement"]($11));
  };
}();

module.exports = {
  fromDocument: fromDocument,
  fromNode: fromNode,
  fromParentNode: fromParentNode,
  fromNonElementParentNode: fromNonElementParentNode,
  fromEventTarget: fromEventTarget,
  toDocument: toDocument,
  toNode: toNode,
  toParentNode: toParentNode,
  toNonElementParentNode: toNonElementParentNode,
  toEventTarget: toEventTarget,
  head: head,
  body: body,
  readyState: readyState,
  activeElement: activeElement,
  currentScript: currentScript,
  referrer: $foreign.referrer,
  title: $foreign.title,
  setTitle: $foreign.setTitle
};
},{"./foreign.js":"output/Web.HTML.HTMLDocument/foreign.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Effect/index.js":"output/Effect/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js","../Web.HTML.HTMLDocument.ReadyState/index.js":"output/Web.HTML.HTMLDocument.ReadyState/index.js","../Web.Internal.FFI/index.js":"output/Web.Internal.FFI/index.js"}],"output/Web.HTML.HTMLElement/foreign.js":[function(require,module,exports) {
"use strict";

exports._read = function (nothing, just, value) {
  var tag = Object.prototype.toString.call(value);

  if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
    return just(value);
  } else {
    return nothing;
  }
}; // ----------------------------------------------------------------------------


exports.title = function (elt) {
  return function () {
    return elt.title;
  };
};

exports.setTitle = function (title) {
  return function (elt) {
    return function () {
      elt.title = title;
      return {};
    };
  };
}; // ----------------------------------------------------------------------------


exports.lang = function (elt) {
  return function () {
    return elt.lang;
  };
};

exports.setLang = function (lang) {
  return function (elt) {
    return function () {
      elt.lang = lang;
      return {};
    };
  };
}; // ----------------------------------------------------------------------------


exports.dir = function (elt) {
  return function () {
    return elt.dir;
  };
};

exports.setDir = function (dir) {
  return function (elt) {
    return function () {
      elt.dir = dir;
      return {};
    };
  };
}; // ----------------------------------------------------------------------------


exports.className = function (elt) {
  return function () {
    return elt.className;
  };
};

exports.setClassName = function (className) {
  return function (elt) {
    return function () {
      elt.className = className;
      return {};
    };
  };
};

exports.classList = function (element) {
  return function () {
    return element.classList;
  };
}; // ----------------------------------------------------------------------------


exports.hidden = function (elt) {
  return function () {
    return elt.hidden;
  };
};

exports.setHidden = function (hidden) {
  return function (elt) {
    return function () {
      elt.hidden = hidden;
      return {};
    };
  };
}; // ----------------------------------------------------------------------------


exports.tabIndex = function (elt) {
  return function () {
    return elt.tabIndex;
  };
};

exports.setTabIndex = function (tabIndex) {
  return function (elt) {
    return function () {
      elt.tabIndex = tabIndex;
      return {};
    };
  };
}; // ----------------------------------------------------------------------------


exports.draggable = function (elt) {
  return function () {
    return elt.draggable;
  };
};

exports.setDraggable = function (draggable) {
  return function (elt) {
    return function () {
      elt.draggable = draggable;
      return {};
    };
  };
}; // ----------------------------------------------------------------------------


exports.contentEditable = function (elt) {
  return function () {
    return elt.contentEditable;
  };
};

exports.setContentEditable = function (contentEditable) {
  return function (elt) {
    return function () {
      elt.contentEditable = contentEditable;
      return {};
    };
  };
};

exports.isContentEditable = function (elt) {
  return function () {
    return elt.isContentEditable;
  };
}; // ----------------------------------------------------------------------------


exports.spellcheck = function (elt) {
  return function () {
    return elt.spellcheck;
  };
};

exports.setSpellcheck = function (spellcheck) {
  return function (elt) {
    return function () {
      elt.spellcheck = spellcheck;
      return {};
    };
  };
}; // ----------------------------------------------------------------------------


exports.click = function (elt) {
  return function () {
    return elt.click();
  };
};

exports.focus = function (elt) {
  return function () {
    return elt.focus();
  };
};

exports.blur = function (elt) {
  return function () {
    return elt.blur();
  };
}; // - CSSOM ---------------------------------------------------------------------


exports.getBoundingClientRect = function (el) {
  return function () {
    var rect = el.getBoundingClientRect();
    return {
      top: rect.top,
      right: rect.right,
      bottom: rect.bottom,
      left: rect.left,
      width: rect.width,
      height: rect.height
    };
  };
};

exports._offsetParent = function (el) {
  return function () {
    return el.offsetParent;
  };
};

exports.offsetTop = function (el) {
  return function () {
    return el.offsetTop;
  };
};

exports.offsetLeft = function (el) {
  return function () {
    return el.offsetLeft;
  };
};

exports.offsetWidth = function (el) {
  return function () {
    return el.offsetWidth;
  };
};

exports.offsetHeight = function (el) {
  return function () {
    return el.offsetHeight;
  };
};
},{}],"output/Web.HTML.HTMLElement/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Effect = require("../Effect/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toElement = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;

var offsetParent = function () {
  var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($1) {
    return $0($foreign["_offsetParent"]($1));
  };
}();

var fromParentNode = function fromParentNode(x) {
  return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};

var fromNonDocumentTypeChildNode = function fromNonDocumentTypeChildNode(x) {
  return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};

var fromNode = function fromNode(x) {
  return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};

var fromEventTarget = function fromEventTarget(x) {
  return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};

var fromElement = function fromElement(x) {
  return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};

var fromChildNode = function fromChildNode(x) {
  return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};

module.exports = {
  fromElement: fromElement,
  fromNode: fromNode,
  fromChildNode: fromChildNode,
  fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
  fromParentNode: fromParentNode,
  fromEventTarget: fromEventTarget,
  toElement: toElement,
  toNode: toNode,
  toChildNode: toChildNode,
  toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
  toParentNode: toParentNode,
  toEventTarget: toEventTarget,
  offsetParent: offsetParent,
  title: $foreign.title,
  setTitle: $foreign.setTitle,
  lang: $foreign.lang,
  setLang: $foreign.setLang,
  dir: $foreign.dir,
  setDir: $foreign.setDir,
  className: $foreign.className,
  setClassName: $foreign.setClassName,
  classList: $foreign.classList,
  hidden: $foreign.hidden,
  setHidden: $foreign.setHidden,
  tabIndex: $foreign.tabIndex,
  setTabIndex: $foreign.setTabIndex,
  draggable: $foreign.draggable,
  setDraggable: $foreign.setDraggable,
  contentEditable: $foreign.contentEditable,
  setContentEditable: $foreign.setContentEditable,
  isContentEditable: $foreign.isContentEditable,
  spellcheck: $foreign.spellcheck,
  setSpellcheck: $foreign.setSpellcheck,
  click: $foreign.click,
  focus: $foreign.focus,
  blur: $foreign.blur,
  getBoundingClientRect: $foreign.getBoundingClientRect,
  offsetTop: $foreign.offsetTop,
  offsetLeft: $foreign.offsetLeft,
  offsetWidth: $foreign.offsetWidth,
  offsetHeight: $foreign.offsetHeight
};
},{"./foreign.js":"output/Web.HTML.HTMLElement/foreign.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Effect/index.js":"output/Effect/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Web.HTML.Window/foreign.js":[function(require,module,exports) {
"use strict";

exports.document = function (window) {
  return function () {
    return window.document;
  };
};

exports.navigator = function (window) {
  return function () {
    return window.navigator;
  };
};

exports.location = function (window) {
  return function () {
    return window.location;
  };
};

exports.history = function (window) {
  return function () {
    return window.history;
  };
};

exports.innerWidth = function (window) {
  return function () {
    return window.innerWidth;
  };
};

exports.innerHeight = function (window) {
  return function () {
    return window.innerHeight;
  };
};

exports.alert = function (str) {
  return function (window) {
    return function () {
      window.alert(str);
      return {};
    };
  };
};

exports.confirm = function (str) {
  return function (window) {
    return function () {
      return window.confirm(str);
    };
  };
};

exports.moveBy = function (xDelta) {
  return function (yDelta) {
    return function (window) {
      return function () {
        window.moveBy(xDelta, yDelta);
        return {};
      };
    };
  };
};

exports.moveTo = function (width) {
  return function (height) {
    return function (window) {
      return function () {
        window.moveTo(width, height);
        return {};
      };
    };
  };
};

exports._open = function (url) {
  return function (name) {
    return function (features) {
      return function (window) {
        return function () {
          return window.open(url, name, features);
        };
      };
    };
  };
};

exports.outerHeight = function (window) {
  return function () {
    return window.outerHeight;
  };
};

exports.outerWidth = function (window) {
  return function () {
    return window.outerWidth;
  };
};

exports.print = function (window) {
  return function () {
    window.print();
    return {};
  };
};

exports._prompt = function (str) {
  return function (defaultText) {
    return function (window) {
      return function () {
        return window.prompt(str, defaultText);
      };
    };
  };
};

exports.resizeBy = function (xDelta) {
  return function (yDelta) {
    return function (window) {
      return function () {
        window.resizeBy(xDelta, yDelta);
        return {};
      };
    };
  };
};

exports.resizeTo = function (width) {
  return function (height) {
    return function (window) {
      return function () {
        window.resizeTo(width, height);
        return {};
      };
    };
  };
};

exports.screenX = function (window) {
  return function () {
    return window.screenX;
  };
};

exports.screenY = function (window) {
  return function () {
    return window.screenY;
  };
};

exports.scroll = function (xCoord) {
  return function (yCoord) {
    return function (window) {
      return function () {
        window.scroll(xCoord, yCoord);
        return {};
      };
    };
  };
};

exports.scrollBy = function (xCoord) {
  return function (yCoord) {
    return function (window) {
      return function () {
        window.scrollBy(xCoord, yCoord);
        return {};
      };
    };
  };
};

exports.scrollX = function (window) {
  return function () {
    return window.scrollX;
  };
};

exports.scrollY = function (window) {
  return function () {
    return window.scrollY;
  };
};

exports.localStorage = function (window) {
  return function () {
    return window.localStorage;
  };
};

exports.sessionStorage = function (window) {
  return function () {
    return window.sessionStorage;
  };
};

exports._requestAnimationFrame = function (fn) {
  return function (window) {
    return function () {
      return window.requestAnimationFrame(fn);
    };
  };
};

exports._cancelAnimationFrame = function (id) {
  return function (window) {
    return function () {
      return window.cancelAnimationFrame(id);
    };
  };
};

exports._requestIdleCallback = function (opts) {
  return function (fn) {
    return function (window) {
      return function () {
        return window.requestIdleCallback(fn, opts);
      };
    };
  };
};

exports._cancelIdleCallback = function (id) {
  return function (window) {
    return function () {
      return window.cancelIdleCallback(id);
    };
  };
};

exports.parent = function (window) {
  return function () {
    return window.parent;
  };
};

exports._opener = function (window) {
  return function () {
    return window.opener;
  };
};
},{}],"output/Web.HTML.Window/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Effect = require("../Effect/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var RequestIdleCallbackId = function RequestIdleCallbackId(x) {
  return x;
};

var RequestAnimationFrameId = function RequestAnimationFrameId(x) {
  return x;
};

var toEventTarget = Unsafe_Coerce.unsafeCoerce;

var requestIdleCallback = function requestIdleCallback(opts) {
  return function (fn) {
    var $30 = Data_Functor.map(Effect.functorEffect)(RequestIdleCallbackId);
    var $31 = $foreign["_requestIdleCallback"](opts)(fn);
    return function ($32) {
      return $30($31($32));
    };
  };
};

var requestAnimationFrame = function requestAnimationFrame(fn) {
  var $33 = Data_Functor.map(Effect.functorEffect)(RequestAnimationFrameId);
  var $34 = $foreign["_requestAnimationFrame"](fn);
  return function ($35) {
    return $33($34($35));
  };
};

var promptDefault = function promptDefault(msg) {
  return function (defaultText) {
    return function (window) {
      return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)(defaultText)(window));
    };
  };
};

var prompt = function prompt(msg) {
  return function (window) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)("")(window));
  };
};

var opener = function opener(window) {
  return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_opener"](window));
};

var open = function open(url$prime) {
  return function (name) {
    return function (features) {
      return function (window) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_open"](url$prime)(name)(features)(window));
      };
    };
  };
};

var newtypeRequestIdleCallbackId = new Data_Newtype.Newtype(function (n) {
  return n;
}, RequestIdleCallbackId);
var newtypeRequestAnimationFrameId = new Data_Newtype.Newtype(function (n) {
  return n;
}, RequestAnimationFrameId);
var eqRequestIdleCallbackId = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x === y;
  };
});
var ordRequestIdleCallbackId = new Data_Ord.Ord(function () {
  return eqRequestIdleCallbackId;
}, function (x) {
  return function (y) {
    return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
  };
});
var eqRequestAnimationFrameId = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x === y;
  };
});
var ordRequestAnimationFrameId = new Data_Ord.Ord(function () {
  return eqRequestAnimationFrameId;
}, function (x) {
  return function (y) {
    return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
  };
});

var cancelIdleCallback = function cancelIdleCallback(idAF) {
  return $foreign["_cancelIdleCallback"](Data_Newtype.unwrap(newtypeRequestIdleCallbackId)(idAF));
};

var cancelAnimationFrame = function cancelAnimationFrame(idAF) {
  return $foreign["_cancelAnimationFrame"](Data_Newtype.unwrap(newtypeRequestAnimationFrameId)(idAF));
};

module.exports = {
  toEventTarget: toEventTarget,
  open: open,
  prompt: prompt,
  promptDefault: promptDefault,
  requestAnimationFrame: requestAnimationFrame,
  cancelAnimationFrame: cancelAnimationFrame,
  requestIdleCallback: requestIdleCallback,
  cancelIdleCallback: cancelIdleCallback,
  opener: opener,
  newtypeRequestAnimationFrameId: newtypeRequestAnimationFrameId,
  eqRequestAnimationFrameId: eqRequestAnimationFrameId,
  ordRequestAnimationFrameId: ordRequestAnimationFrameId,
  newtypeRequestIdleCallbackId: newtypeRequestIdleCallbackId,
  eqRequestIdleCallbackId: eqRequestIdleCallbackId,
  ordRequestIdleCallbackId: ordRequestIdleCallbackId,
  document: $foreign.document,
  navigator: $foreign.navigator,
  location: $foreign.location,
  history: $foreign.history,
  innerWidth: $foreign.innerWidth,
  innerHeight: $foreign.innerHeight,
  alert: $foreign.alert,
  confirm: $foreign.confirm,
  moveBy: $foreign.moveBy,
  moveTo: $foreign.moveTo,
  outerHeight: $foreign.outerHeight,
  outerWidth: $foreign.outerWidth,
  print: $foreign.print,
  resizeBy: $foreign.resizeBy,
  resizeTo: $foreign.resizeTo,
  screenX: $foreign.screenX,
  screenY: $foreign.screenY,
  scroll: $foreign.scroll,
  scrollBy: $foreign.scrollBy,
  scrollX: $foreign.scrollX,
  scrollY: $foreign.scrollY,
  localStorage: $foreign.localStorage,
  sessionStorage: $foreign.sessionStorage,
  parent: $foreign.parent
};
},{"./foreign.js":"output/Web.HTML.Window/foreign.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Effect/index.js":"output/Effect/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Halogen.Aff.Util/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Exception = require("../Effect.Exception/index.js");

var Web_DOM_ParentNode = require("../Web.DOM.ParentNode/index.js");

var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");

var Web_HTML = require("../Web.HTML/index.js");

var Web_HTML_Event_EventTypes = require("../Web.HTML.Event.EventTypes/index.js");

var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");

var Web_HTML_HTMLDocument_ReadyState = require("../Web.HTML.HTMLDocument.ReadyState/index.js");

var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");

var Web_HTML_Window = require("../Web.HTML.Window/index.js");

var selectElement = function selectElement(query) {
  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(function () {
    var $2 = Web_DOM_ParentNode.querySelector(query);
    return function ($3) {
      return $2(Web_HTML_HTMLDocument.toParentNode($3));
    };
  }())(Web_HTML_Window.document))(Web_HTML.window)))(function (mel) {
    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(mel));
  });
};

var runHalogenAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
var awaitLoad = Effect_Aff.makeAff(function (callback) {
  return function __do() {
    var rs = Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_HTMLDocument.readyState)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))();

    if (rs instanceof Web_HTML_HTMLDocument_ReadyState.Loading) {
      var et = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
      var listener = Web_Event_EventTarget.eventListener(function (v) {
        return callback(new Data_Either.Right(Data_Unit.unit));
      })();
      Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et)();
      return Effect_Aff.effectCanceler(Web_Event_EventTarget.removeEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et));
    }

    ;
    callback(new Data_Either.Right(Data_Unit.unit))();
    return Effect_Aff.nonCanceler;
  };
});
var awaitBody = Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(awaitLoad)(function () {
  return Control_Bind.bind(Effect_Aff.bindAff)(selectElement("body"))(function (body) {
    return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Could not find body")))(Control_Applicative.pure(Effect_Aff.applicativeAff))(body);
  });
});
module.exports = {
  awaitLoad: awaitLoad,
  awaitBody: awaitBody,
  selectElement: selectElement,
  runHalogenAff: runHalogenAff
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect/index.js":"output/Effect/index.js","../Effect.Aff/index.js":"output/Effect.Aff/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js","../Effect.Exception/index.js":"output/Effect.Exception/index.js","../Web.DOM.ParentNode/index.js":"output/Web.DOM.ParentNode/index.js","../Web.Event.EventTarget/index.js":"output/Web.Event.EventTarget/index.js","../Web.HTML/index.js":"output/Web.HTML/index.js","../Web.HTML.Event.EventTypes/index.js":"output/Web.HTML.Event.EventTypes/index.js","../Web.HTML.HTMLDocument/index.js":"output/Web.HTML.HTMLDocument/index.js","../Web.HTML.HTMLDocument.ReadyState/index.js":"output/Web.HTML.HTMLDocument.ReadyState/index.js","../Web.HTML.HTMLElement/index.js":"output/Web.HTML.HTMLElement/index.js","../Web.HTML.Window/index.js":"output/Web.HTML.Window/index.js"}],"output/Data.Exists/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var runExists = Unsafe_Coerce.unsafeCoerce;
var mkExists = Unsafe_Coerce.unsafeCoerce;
module.exports = {
  mkExists: mkExists,
  runExists: runExists
};
},{"../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Data.Coyoneda/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Distributive = require("../Data.Distributive/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Exists = require("../Data.Exists/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var CoyonedaF = function () {
  function CoyonedaF(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  CoyonedaF.create = function (value0) {
    return function (value1) {
      return new CoyonedaF(value0, value1);
    };
  };

  return CoyonedaF;
}();

var Coyoneda = function Coyoneda(x) {
  return x;
};

var unCoyoneda = function unCoyoneda(f) {
  return function (v) {
    return Data_Exists.runExists(function (v1) {
      return f(v1.value0)(v1.value1);
    })(v);
  };
};

var lowerCoyoneda = function lowerCoyoneda(dictFunctor) {
  return unCoyoneda(Data_Functor.map(dictFunctor));
};

var foldableCoyoneda = function foldableCoyoneda(dictFoldable) {
  return new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
      return unCoyoneda(function (k) {
        return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(function ($80) {
          return f(k($80));
        });
      });
    };
  }, function (f) {
    return function (z) {
      return unCoyoneda(function (k) {
        return Data_Foldable.foldl(dictFoldable)(function (x) {
          var $81 = f(x);
          return function ($82) {
            return $81(k($82));
          };
        })(z);
      });
    };
  }, function (f) {
    return function (z) {
      return unCoyoneda(function (k) {
        return Data_Foldable.foldr(dictFoldable)(function ($83) {
          return f(k($83));
        })(z);
      });
    };
  });
};

var foldable1Coyoneda = function foldable1Coyoneda(dictFoldable1) {
  return new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableCoyoneda(dictFoldable1.Foldable0());
  }, function (dictSemigroup) {
    return unCoyoneda(function (k) {
      return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(dictSemigroup)(k);
    });
  }, function (dictSemigroup) {
    return function (f) {
      return unCoyoneda(function (k) {
        return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(dictSemigroup)(function ($84) {
          return f(k($84));
        });
      });
    };
  });
};

var eqCoyoneda = function eqCoyoneda(dictFunctor) {
  return function (dictEq1) {
    return function (dictEq) {
      return new Data_Eq.Eq(function (x) {
        return function (y) {
          return Data_Eq.eq1(dictEq1)(dictEq)(lowerCoyoneda(dictFunctor)(x))(lowerCoyoneda(dictFunctor)(y));
        };
      });
    };
  };
};

var ordCoyoneda = function ordCoyoneda(dictFunctor) {
  return function (dictOrd1) {
    return function (dictOrd) {
      return new Data_Ord.Ord(function () {
        return eqCoyoneda(dictFunctor)(dictOrd1.Eq10())(dictOrd.Eq0());
      }, function (x) {
        return function (y) {
          return Data_Ord.compare1(dictOrd1)(dictOrd)(lowerCoyoneda(dictFunctor)(x))(lowerCoyoneda(dictFunctor)(y));
        };
      });
    };
  };
};

var eq1Coyoneda = function eq1Coyoneda(dictFunctor) {
  return function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqCoyoneda(dictFunctor)(dictEq1)(dictEq));
    });
  };
};

var ord1Coyoneda = function ord1Coyoneda(dictFunctor) {
  return function (dictOrd1) {
    return new Data_Ord.Ord1(function () {
      return eq1Coyoneda(dictFunctor)(dictOrd1.Eq10());
    }, function (dictOrd) {
      return Data_Ord.compare(ordCoyoneda(dictFunctor)(dictOrd1)(dictOrd));
    });
  };
};

var coyoneda = function coyoneda(k) {
  return function (fi) {
    return Coyoneda(Data_Exists.mkExists(new CoyonedaF(k, fi)));
  };
};

var functorCoyoneda = new Data_Functor.Functor(function (f) {
  return function (v) {
    return Data_Exists.runExists(function (v1) {
      return coyoneda(function ($85) {
        return f(v1.value0($85));
      })(v1.value1);
    })(v);
  };
});
var invatiantCoyoneda = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorCoyoneda));

var hoistCoyoneda = function hoistCoyoneda(nat) {
  return function (v) {
    return Data_Exists.runExists(function (v1) {
      return coyoneda(v1.value0)(nat(v1.value1));
    })(v);
  };
};

var liftCoyoneda = coyoneda(Control_Category.identity(Control_Category.categoryFn));

var distributiveCoyoneda = function distributiveCoyoneda(dictDistributive) {
  return new Data_Distributive.Distributive(function () {
    return functorCoyoneda;
  }, function (dictFunctor) {
    return function (f) {
      var $86 = Data_Distributive.collect(dictDistributive)(dictFunctor)(function () {
        var $88 = lowerCoyoneda(dictDistributive.Functor0());
        return function ($89) {
          return $88(f($89));
        };
      }());
      return function ($87) {
        return liftCoyoneda($86($87));
      };
    };
  }, function (dictFunctor) {
    var $90 = Data_Distributive.collect(dictDistributive)(dictFunctor)(lowerCoyoneda(dictDistributive.Functor0()));
    return function ($91) {
      return liftCoyoneda($90($91));
    };
  });
};

var extendCoyoneda = function extendCoyoneda(dictExtend) {
  return new Control_Extend.Extend(function () {
    return functorCoyoneda;
  }, function (f) {
    return function (v) {
      return Data_Exists.runExists(function (v1) {
        return liftCoyoneda(Control_Extend.extend(dictExtend)(function () {
          var $92 = coyoneda(v1.value0);
          return function ($93) {
            return f($92($93));
          };
        }())(v1.value1));
      })(v);
    };
  });
};

var monadTransCoyoneda = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return liftCoyoneda;
});

var traversableCoyoneda = function traversableCoyoneda(dictTraversable) {
  return new Data_Traversable.Traversable(function () {
    return foldableCoyoneda(dictTraversable.Foldable1());
  }, function () {
    return functorCoyoneda;
  }, function (dictApplicative) {
    return unCoyoneda(function (k) {
      var $94 = Data_Functor.map(dictApplicative.Apply0().Functor0())(liftCoyoneda);
      var $95 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(k);
      return function ($96) {
        return $94($95($96));
      };
    });
  }, function (dictApplicative) {
    return function (f) {
      return unCoyoneda(function (k) {
        var $97 = Data_Functor.map(dictApplicative.Apply0().Functor0())(liftCoyoneda);
        var $98 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(function ($100) {
          return f(k($100));
        });
        return function ($99) {
          return $97($98($99));
        };
      });
    };
  });
};

var traversable1Coyoneda = function traversable1Coyoneda(dictTraversable1) {
  return new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1Coyoneda(dictTraversable1.Foldable10());
  }, function () {
    return traversableCoyoneda(dictTraversable1.Traversable1());
  }, function (dictApply) {
    return unCoyoneda(function (k) {
      var $101 = Data_Functor.map(dictApply.Functor0())(liftCoyoneda);
      var $102 = Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply);
      var $103 = Data_Functor.map(dictTraversable1.Traversable1().Functor0())(k);
      return function ($104) {
        return $101($102($103($104)));
      };
    });
  }, function (dictApply) {
    return function (f) {
      return unCoyoneda(function (k) {
        var $105 = Data_Functor.map(dictApply.Functor0())(liftCoyoneda);
        var $106 = Data_Semigroup_Traversable.traverse1(dictTraversable1)(dictApply)(function ($108) {
          return f(k($108));
        });
        return function ($107) {
          return $105($106($107));
        };
      });
    };
  });
};

var comonadCoyoneda = function comonadCoyoneda(dictComonad) {
  return new Control_Comonad.Comonad(function () {
    return extendCoyoneda(dictComonad.Extend0());
  }, function (v) {
    return Data_Exists.runExists(function (v1) {
      return v1.value0(Control_Comonad.extract(dictComonad)(v1.value1));
    })(v);
  });
};

var applyCoyoneda = function applyCoyoneda(dictApply) {
  return new Control_Apply.Apply(function () {
    return functorCoyoneda;
  }, function (f) {
    return function (g) {
      return liftCoyoneda(Control_Apply.apply(dictApply)(lowerCoyoneda(dictApply.Functor0())(f))(lowerCoyoneda(dictApply.Functor0())(g)));
    };
  });
};

var bindCoyoneda = function bindCoyoneda(dictBind) {
  return new Control_Bind.Bind(function () {
    return applyCoyoneda(dictBind.Apply0());
  }, function (v) {
    return function (f) {
      return liftCoyoneda(Data_Exists.runExists(function (v1) {
        return Control_Bind.bindFlipped(dictBind)(function () {
          var $109 = lowerCoyoneda(dictBind.Apply0().Functor0());
          return function ($110) {
            return $109(f(v1.value0($110)));
          };
        }())(v1.value1);
      })(v));
    };
  });
};

var applicativeCoyoneda = function applicativeCoyoneda(dictApplicative) {
  return new Control_Applicative.Applicative(function () {
    return applyCoyoneda(dictApplicative.Apply0());
  }, function () {
    var $111 = Control_Applicative.pure(dictApplicative);
    return function ($112) {
      return liftCoyoneda($111($112));
    };
  }());
};

var monadCoyoneda = function monadCoyoneda(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeCoyoneda(dictMonad.Applicative0());
  }, function () {
    return bindCoyoneda(dictMonad.Bind1());
  });
};

var altCoyoneda = function altCoyoneda(dictAlt) {
  return new Control_Alt.Alt(function () {
    return functorCoyoneda;
  }, function (x) {
    return function (y) {
      return liftCoyoneda(Control_Alt.alt(dictAlt)(lowerCoyoneda(dictAlt.Functor0())(x))(lowerCoyoneda(dictAlt.Functor0())(y)));
    };
  });
};

var plusCoyoneda = function plusCoyoneda(dictPlus) {
  return new Control_Plus.Plus(function () {
    return altCoyoneda(dictPlus.Alt0());
  }, liftCoyoneda(Control_Plus.empty(dictPlus)));
};

var alternativeCoyoneda = function alternativeCoyoneda(dictAlternative) {
  return new Control_Alternative.Alternative(function () {
    return applicativeCoyoneda(dictAlternative.Applicative0());
  }, function () {
    return plusCoyoneda(dictAlternative.Plus1());
  });
};

var monadZeroCoyoneda = function monadZeroCoyoneda(dictMonadZero) {
  return new Control_MonadZero.MonadZero(function () {
    return alternativeCoyoneda(dictMonadZero.Alternative1());
  }, function () {
    return monadCoyoneda(dictMonadZero.Monad0());
  });
};

var monadPlusCoyoneda = function monadPlusCoyoneda(dictMonadPlus) {
  return new Control_MonadPlus.MonadPlus(function () {
    return monadZeroCoyoneda(dictMonadPlus.MonadZero0());
  });
};

module.exports = {
  Coyoneda: Coyoneda,
  coyoneda: coyoneda,
  unCoyoneda: unCoyoneda,
  liftCoyoneda: liftCoyoneda,
  lowerCoyoneda: lowerCoyoneda,
  hoistCoyoneda: hoistCoyoneda,
  eqCoyoneda: eqCoyoneda,
  eq1Coyoneda: eq1Coyoneda,
  ordCoyoneda: ordCoyoneda,
  ord1Coyoneda: ord1Coyoneda,
  functorCoyoneda: functorCoyoneda,
  invatiantCoyoneda: invatiantCoyoneda,
  applyCoyoneda: applyCoyoneda,
  applicativeCoyoneda: applicativeCoyoneda,
  altCoyoneda: altCoyoneda,
  plusCoyoneda: plusCoyoneda,
  alternativeCoyoneda: alternativeCoyoneda,
  bindCoyoneda: bindCoyoneda,
  monadCoyoneda: monadCoyoneda,
  monadTransCoyoneda: monadTransCoyoneda,
  monadZeroCoyoneda: monadZeroCoyoneda,
  monadPlusCoyoneda: monadPlusCoyoneda,
  extendCoyoneda: extendCoyoneda,
  comonadCoyoneda: comonadCoyoneda,
  foldableCoyoneda: foldableCoyoneda,
  traversableCoyoneda: traversableCoyoneda,
  foldable1Coyoneda: foldable1Coyoneda,
  traversable1Coyoneda: traversable1Coyoneda,
  distributiveCoyoneda: distributiveCoyoneda
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Comonad/index.js":"output/Control.Comonad/index.js","../Control.Extend/index.js":"output/Control.Extend/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Distributive/index.js":"output/Data.Distributive/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Exists/index.js":"output/Data.Exists/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"output/Data.Functor.Invariant/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup.Foldable/index.js":"output/Data.Semigroup.Foldable/index.js","../Data.Semigroup.Traversable/index.js":"output/Data.Semigroup.Traversable/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js"}],"output/Data.List/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Pattern = function Pattern(x) {
  return x;
};

var updateAt = function updateAt(v) {
  return function (v1) {
    return function (v2) {
      if (v === 0 && v2 instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
      }

      ;

      if (v2 instanceof Data_List_Types.Cons) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
          return new Data_List_Types.Cons(v2.value0, v3);
        })(updateAt(v - 1 | 0)(v1)(v2.value1));
      }

      ;
      return Data_Maybe.Nothing.value;
    };
  };
};

var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
  return function (v1) {
    return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
  };
})(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));

var uncons = function uncons(v) {
  if (v instanceof Data_List_Types.Nil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_List_Types.Cons) {
    return new Data_Maybe.Just({
      head: v.value0,
      tail: v.value1
    });
  }

  ;
  throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [v.constructor.name]);
};

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
      return new Data_Tuple.Tuple(rec.head, rec.tail);
    })(uncons(xs));
  });
};

var tail = function tail(v) {
  if (v instanceof Data_List_Types.Nil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_List_Types.Cons) {
    return new Data_Maybe.Just(v.value1);
  }

  ;
  throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [v.constructor.name]);
};

var stripPrefix = function stripPrefix(dictEq) {
  return function (v) {
    return function (s) {
      var go = function go(prefix) {
        return function (input) {
          if (prefix instanceof Data_List_Types.Cons && input instanceof Data_List_Types.Cons && Data_Eq.eq(dictEq)(prefix.value0)(input.value0)) {
            return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
              a: prefix.value1,
              b: input.value1
            }));
          }

          ;

          if (prefix instanceof Data_List_Types.Nil) {
            return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
          }

          ;
          return Data_Maybe.Nothing.value;
        };
      };

      return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
    };
  };
};

var span = function span(v) {
  return function (v1) {
    if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
      var v2 = span(v)(v1.value1);
      return {
        init: new Data_List_Types.Cons(v1.value0, v2.init),
        rest: v2.rest
      };
    }

    ;
    return {
      init: Data_List_Types.Nil.value,
      rest: v1
    };
  };
};

var snoc = function snoc(xs) {
  return function (x) {
    return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
  };
};

var singleton = function singleton(a) {
  return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
};

var sortBy = function sortBy(cmp) {
  var merge = function merge(v) {
    return function (v1) {
      if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
        if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
          return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
        }

        ;

        if (Data_Boolean.otherwise) {
          return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
        }

        ;
      }

      ;

      if (v instanceof Data_List_Types.Nil) {
        return v1;
      }

      ;

      if (v1 instanceof Data_List_Types.Nil) {
        return v;
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 473, column 3 - line 473, column 38): " + [v.constructor.name, v1.constructor.name]);
    };
  };

  var mergePairs = function mergePairs(v) {
    if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
      return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
    }

    ;
    return v;
  };

  var mergeAll = function mergeAll($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
        $tco_done = true;
        return v.value0;
      }

      ;
      $copy_v = mergePairs(v);
      return;
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  var sequences = function sequences(v) {
    if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
      if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
        return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
      }

      ;

      if (Data_Boolean.otherwise) {
        return ascending(v.value1.value0)(function (v1) {
          return new Data_List_Types.Cons(v.value0, v1);
        })(v.value1.value1);
      }

      ;
    }

    ;
    return singleton(v);
  };

  var descending = function descending($copy_a) {
    return function ($copy_as) {
      return function ($copy_v) {
        var $tco_var_a = $copy_a;
        var $tco_var_as = $copy_as;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(a, as, v) {
          if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
            $tco_var_a = v.value0;
            $tco_var_as = new Data_List_Types.Cons(a, as);
            $copy_v = v.value1;
            return;
          }

          ;
          $tco_done = true;
          return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
        }

        ;
        return $tco_result;
      };
    };
  };

  var ascending = function ascending($copy_a) {
    return function ($copy_as) {
      return function ($copy_v) {
        var $tco_var_a = $copy_a;
        var $tco_var_as = $copy_as;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(a, as, v) {
          if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
            $tco_var_a = v.value0;

            $tco_var_as = function $tco_var_as(ys) {
              return as(new Data_List_Types.Cons(a, ys));
            };

            $copy_v = v.value1;
            return;
          }

          ;
          $tco_done = true;
          return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
        }

        ;
        return $tco_result;
      };
    };
  };

  return function ($331) {
    return mergeAll(sequences($331));
  };
};

var sort = function sort(dictOrd) {
  return function (xs) {
    return sortBy(Data_Ord.compare(dictOrd))(xs);
  };
};

var tails = function tails(v) {
  if (v instanceof Data_List_Types.Nil) {
    return singleton(Data_List_Types.Nil.value);
  }

  ;

  if (v instanceof Data_List_Types.Cons) {
    return new Data_List_Types.Cons(v, tails(v.value1));
  }

  ;
  throw new Error("Failed pattern match at Data.List (line 626, column 1 - line 626, column 43): " + [v.constructor.name]);
};

var showPattern = function showPattern(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Pattern " + (Data_Show.show(Data_List_Types.showList(dictShow))(v) + ")");
  });
};

var reverse = function () {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, v) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return acc;
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
          $copy_v = v.value1;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [acc.constructor.name, v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_List_Types.Nil.value);
}();

var take = function () {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      return function ($copy_v1) {
        var $tco_var_acc = $copy_acc;
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(acc, v, v1) {
          if (v < 1) {
            $tco_done = true;
            return reverse(acc);
          }

          ;

          if (v1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return reverse(acc);
          }

          ;

          if (v1 instanceof Data_List_Types.Cons) {
            $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
            $tco_var_v = v - 1 | 0;
            $copy_v1 = v1.value1;
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.List (line 520, column 3 - line 520, column 35): " + [acc.constructor.name, v.constructor.name, v1.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
        }

        ;
        return $tco_result;
      };
    };
  };

  return go(Data_List_Types.Nil.value);
}();

var takeWhile = function takeWhile(p) {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, v) {
        if (v instanceof Data_List_Types.Cons && p(v.value0)) {
          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
          $copy_v = v.value1;
          return;
        }

        ;
        $tco_done = true;
        return reverse(acc);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_List_Types.Nil.value);
};

var unsnoc = function unsnoc(lst) {
  var go = function go($copy_v) {
    return function ($copy_acc) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, acc) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return new Data_Maybe.Just({
            revInit: acc,
            last: v.value0
          });
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          $tco_var_v = v.value1;
          $copy_acc = new Data_List_Types.Cons(v.value0, acc);
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 270, column 3 - line 270, column 23): " + [v.constructor.name, acc.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_acc);
      }

      ;
      return $tco_result;
    };
  };

  return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
    return {
      init: reverse(h.revInit),
      last: h.last
    };
  })(go(lst)(Data_List_Types.Nil.value));
};

var zipWith = function zipWith(f) {
  return function (xs) {
    return function (ys) {
      var go = function go($copy_v) {
        return function ($copy_v1) {
          return function ($copy_acc) {
            var $tco_var_v = $copy_v;
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(v, v1, acc) {
              if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return acc;
              }

              ;

              if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return acc;
              }

              ;

              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                $tco_var_v = v.value1;
                $tco_var_v1 = v1.value1;
                $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                return;
              }

              ;
              throw new Error("Failed pattern match at Data.List (line 718, column 3 - line 718, column 21): " + [v.constructor.name, v1.constructor.name, acc.constructor.name]);
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
            }

            ;
            return $tco_result;
          };
        };
      };

      return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
    };
  };
};

var zip = zipWith(Data_Tuple.Tuple.create);

var zipWithA = function zipWithA(dictApplicative) {
  return function (f) {
    return function (xs) {
      return function (ys) {
        return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
      };
    };
  };
};

var range = function range(start) {
  return function (end) {
    if (start === end) {
      return singleton(start);
    }

    ;

    if (Data_Boolean.otherwise) {
      var go = function go($copy_s) {
        return function ($copy_e) {
          return function ($copy_step) {
            return function ($copy_rest) {
              var $tco_var_s = $copy_s;
              var $tco_var_e = $copy_e;
              var $tco_var_step = $copy_step;
              var $tco_done = false;
              var $tco_result;

              function $tco_loop(s, e, step, rest) {
                if (s === e) {
                  $tco_done = true;
                  return new Data_List_Types.Cons(s, rest);
                }

                ;

                if (Data_Boolean.otherwise) {
                  $tco_var_s = s + step | 0;
                  $tco_var_e = e;
                  $tco_var_step = step;
                  $copy_rest = new Data_List_Types.Cons(s, rest);
                  return;
                }

                ;
                throw new Error("Failed pattern match at Data.List (line 148, column 3 - line 149, column 65): " + [s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name]);
              }

              ;

              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
              }

              ;
              return $tco_result;
            };
          };
        };
      };

      return go(end)(start)(function () {
        var $220 = start > end;

        if ($220) {
          return 1;
        }

        ;
        return -1 | 0;
      }())(Data_List_Types.Nil.value);
    }

    ;
    throw new Error("Failed pattern match at Data.List (line 144, column 1 - line 144, column 32): " + [start.constructor.name, end.constructor.name]);
  };
};

var partition = function partition(p) {
  return function (xs) {
    var select = function select(x) {
      return function (v) {
        var $223 = p(x);

        if ($223) {
          return {
            no: v.no,
            yes: new Data_List_Types.Cons(x, v.yes)
          };
        }

        ;
        return {
          no: new Data_List_Types.Cons(x, v.no),
          yes: v.yes
        };
      };
    };

    return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
      no: Data_List_Types.Nil.value,
      yes: Data_List_Types.Nil.value
    })(xs);
  };
};

var $$null = function $$null(v) {
  if (v instanceof Data_List_Types.Nil) {
    return true;
  }

  ;
  return false;
};

var newtypePattern = new Data_Newtype.Newtype(function (n) {
  return n;
}, Pattern);
var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);

var mapMaybe = function mapMaybe(f) {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, v) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return reverse(acc);
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          var v1 = f(v.value0);

          if (v1 instanceof Data_Maybe.Nothing) {
            $tco_var_acc = acc;
            $copy_v = v.value1;
            return;
          }

          ;

          if (v1 instanceof Data_Maybe.Just) {
            $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
            $copy_v = v.value1;
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [v1.constructor.name]);
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [acc.constructor.name, v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_List_Types.Nil.value);
};

var manyRec = function manyRec(dictMonadRec) {
  return function (dictAlternative) {
    return function (p) {
      var go = function go(acc) {
        return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(Control_Alt.alt(dictAlternative.Plus1().Alt0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (aa) {
          return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
            return new Data_List_Types.Cons(v, acc);
          })(function (v) {
            return reverse(acc);
          })(aa));
        });
      };

      return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
    };
  };
};

var someRec = function someRec(dictMonadRec) {
  return function (dictAlternative) {
    return function (v) {
      return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
    };
  };
};

var some = function some(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
        return many(dictAlternative)(dictLazy)(v);
      }));
    };
  };
};

var many = function many(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
    };
  };
};

var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
  return function (v) {
    return acc + 1 | 0;
  };
})(0);

var last = function last($copy_v) {
  var $tco_done = false;
  var $tco_result;

  function $tco_loop(v) {
    if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
      $tco_done = true;
      return new Data_Maybe.Just(v.value0);
    }

    ;

    if (v instanceof Data_List_Types.Cons) {
      $copy_v = v.value1;
      return;
    }

    ;
    $tco_done = true;
    return Data_Maybe.Nothing.value;
  }

  ;

  while (!$tco_done) {
    $tco_result = $tco_loop($copy_v);
  }

  ;
  return $tco_result;
};

var insertBy = function insertBy(v) {
  return function (x) {
    return function (v1) {
      if (v1 instanceof Data_List_Types.Nil) {
        return singleton(x);
      }

      ;

      if (v1 instanceof Data_List_Types.Cons) {
        var v2 = v(x)(v1.value0);

        if (v2 instanceof Data_Ordering.GT) {
          return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
        }

        ;
        return new Data_List_Types.Cons(x, v1);
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 216, column 1 - line 216, column 68): " + [v.constructor.name, x.constructor.name, v1.constructor.name]);
    };
  };
};

var insertAt = function insertAt(v) {
  return function (v1) {
    return function (v2) {
      if (v === 0) {
        return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
      }

      ;

      if (v2 instanceof Data_List_Types.Cons) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
          return new Data_List_Types.Cons(v2.value0, v3);
        })(insertAt(v - 1 | 0)(v1)(v2.value1));
      }

      ;
      return Data_Maybe.Nothing.value;
    };
  };
};

var insert = function insert(dictOrd) {
  return insertBy(Data_Ord.compare(dictOrd));
};

var init = function init(lst) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return v.init;
  })(unsnoc(lst));
};

var index = function index($copy_v) {
  return function ($copy_v1) {
    var $tco_var_v = $copy_v;
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v, v1) {
      if (v instanceof Data_List_Types.Nil) {
        $tco_done = true;
        return Data_Maybe.Nothing.value;
      }

      ;

      if (v instanceof Data_List_Types.Cons && v1 === 0) {
        $tco_done = true;
        return new Data_Maybe.Just(v.value0);
      }

      ;

      if (v instanceof Data_List_Types.Cons) {
        $tco_var_v = v.value1;
        $copy_v1 = v1 - 1 | 0;
        return;
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 281, column 1 - line 281, column 44): " + [v.constructor.name, v1.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($tco_var_v, $copy_v1);
    }

    ;
    return $tco_result;
  };
};

var head = function head(v) {
  if (v instanceof Data_List_Types.Nil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_List_Types.Cons) {
    return new Data_Maybe.Just(v.value0);
  }

  ;
  throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [v.constructor.name]);
};

var transpose = function transpose(v) {
  if (v instanceof Data_List_Types.Nil) {
    return Data_List_Types.Nil.value;
  }

  ;

  if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
    return transpose(v.value1);
  }

  ;

  if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
    return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
  }

  ;
  throw new Error("Failed pattern match at Data.List (line 752, column 1 - line 752, column 54): " + [v.constructor.name]);
};

var groupBy = function groupBy(v) {
  return function (v1) {
    if (v1 instanceof Data_List_Types.Nil) {
      return Data_List_Types.Nil.value;
    }

    ;

    if (v1 instanceof Data_List_Types.Cons) {
      var v2 = span(v(v1.value0))(v1.value1);
      return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
    }

    ;
    throw new Error("Failed pattern match at Data.List (line 605, column 1 - line 605, column 80): " + [v.constructor.name, v1.constructor.name]);
  };
};

var group = function group(dictEq) {
  return groupBy(Data_Eq.eq(dictEq));
};

var group$prime = function group$prime(dictOrd) {
  var $332 = group(dictOrd.Eq0());
  var $333 = sort(dictOrd);
  return function ($334) {
    return $332($333($334));
  };
};

var fromFoldable = function fromFoldable(dictFoldable) {
  return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};

var foldM = function foldM(dictMonad) {
  return function (v) {
    return function (a) {
      return function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
          return Control_Applicative.pure(dictMonad.Applicative0())(a);
        }

        ;

        if (v1 instanceof Data_List_Types.Cons) {
          return Control_Bind.bind(dictMonad.Bind1())(v(a)(v1.value0))(function (a$prime) {
            return foldM(dictMonad)(v)(a$prime)(v1.value1);
          });
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 763, column 1 - line 763, column 72): " + [v.constructor.name, a.constructor.name, v1.constructor.name]);
      };
    };
  };
};

var findIndex = function findIndex(fn) {
  var go = function go($copy_v) {
    return function ($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, v1) {
        if (v1 instanceof Data_List_Types.Cons) {
          if (fn(v1.value0)) {
            $tco_done = true;
            return new Data_Maybe.Just(v);
          }

          ;

          if (Data_Boolean.otherwise) {
            $tco_var_v = v + 1 | 0;
            $copy_v1 = v1.value1;
            return;
          }

          ;
        }

        ;

        if (v1 instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 301, column 3 - line 301, column 35): " + [v.constructor.name, v1.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }

      ;
      return $tco_result;
    };
  };

  return go(0);
};

var findLastIndex = function findLastIndex(fn) {
  return function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
      return (length(xs) - 1 | 0) - v | 0;
    })(findIndex(fn)(reverse(xs)));
  };
};

var filterM = function filterM(dictMonad) {
  return function (v) {
    return function (v1) {
      if (v1 instanceof Data_List_Types.Nil) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
      }

      ;

      if (v1 instanceof Data_List_Types.Cons) {
        return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function (b) {
          return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function (xs$prime) {
            return Control_Applicative.pure(dictMonad.Applicative0())(function () {
              if (b) {
                return new Data_List_Types.Cons(v1.value0, xs$prime);
              }

              ;
              return xs$prime;
            }());
          });
        });
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 403, column 1 - line 403, column 75): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

var filter = function filter(p) {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, v) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return reverse(acc);
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          if (p(v.value0)) {
            $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
            $copy_v = v.value1;
            return;
          }

          ;

          if (Data_Boolean.otherwise) {
            $tco_var_acc = acc;
            $copy_v = v.value1;
            return;
          }

          ;
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [acc.constructor.name, v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_List_Types.Nil.value);
};

var intersectBy = function intersectBy(v) {
  return function (v1) {
    return function (v2) {
      if (v1 instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
      }

      ;

      if (v2 instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
      }

      ;
      return filter(function (x) {
        return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
      })(v1);
    };
  };
};

var intersect = function intersect(dictEq) {
  return intersectBy(Data_Eq.eq(dictEq));
};

var nubBy = function nubBy(v) {
  return function (v1) {
    if (v1 instanceof Data_List_Types.Nil) {
      return Data_List_Types.Nil.value;
    }

    ;

    if (v1 instanceof Data_List_Types.Cons) {
      return new Data_List_Types.Cons(v1.value0, nubBy(v)(filter(function (y) {
        return !v(v1.value0)(y);
      })(v1.value1)));
    }

    ;
    throw new Error("Failed pattern match at Data.List (line 644, column 1 - line 644, column 59): " + [v.constructor.name, v1.constructor.name]);
  };
};

var nub = function nub(dictEq) {
  return nubBy(Data_Eq.eq(dictEq));
};

var eqPattern = function eqPattern(dictEq) {
  return new Data_Eq.Eq(function (x) {
    return function (y) {
      return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x)(y);
    };
  });
};

var ordPattern = function ordPattern(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqPattern(dictOrd.Eq0());
  }, function (x) {
    return function (y) {
      return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x)(y);
    };
  });
};

var elemLastIndex = function elemLastIndex(dictEq) {
  return function (x) {
    return findLastIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var elemIndex = function elemIndex(dictEq) {
  return function (x) {
    return findIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var dropWhile = function dropWhile(p) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Types.Cons && p(v.value0)) {
        $copy_v = v.value1;
        return;
      }

      ;
      $tco_done = true;
      return v;
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return go;
};

var dropEnd = function dropEnd(n) {
  return function (xs) {
    return take(length(xs) - n | 0)(xs);
  };
};

var drop = function drop($copy_v) {
  return function ($copy_v1) {
    var $tco_var_v = $copy_v;
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v, v1) {
      if (v < 1) {
        $tco_done = true;
        return v1;
      }

      ;

      if (v1 instanceof Data_List_Types.Nil) {
        $tco_done = true;
        return Data_List_Types.Nil.value;
      }

      ;

      if (v1 instanceof Data_List_Types.Cons) {
        $tco_var_v = v - 1 | 0;
        $copy_v1 = v1.value1;
        return;
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 543, column 1 - line 543, column 42): " + [v.constructor.name, v1.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($tco_var_v, $copy_v1);
    }

    ;
    return $tco_result;
  };
};

var slice = function slice(start) {
  return function (end) {
    return function (xs) {
      return take(end - start | 0)(drop(start)(xs));
    };
  };
};

var takeEnd = function takeEnd(n) {
  return function (xs) {
    return drop(length(xs) - n | 0)(xs);
  };
};

var deleteBy = function deleteBy(v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
      }

      ;

      if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
        return v2.value1;
      }

      ;

      if (v2 instanceof Data_List_Types.Cons) {
        return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 671, column 1 - line 671, column 67): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};

var unionBy = function unionBy(eq) {
  return function (xs) {
    return function (ys) {
      return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
    };
  };
};

var union = function union(dictEq) {
  return unionBy(Data_Eq.eq(dictEq));
};

var deleteAt = function deleteAt(v) {
  return function (v1) {
    if (v === 0 && v1 instanceof Data_List_Types.Cons) {
      return new Data_Maybe.Just(v1.value1);
    }

    ;

    if (v1 instanceof Data_List_Types.Cons) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
        return new Data_List_Types.Cons(v1.value0, v2);
      })(deleteAt(v - 1 | 0)(v1.value1));
    }

    ;
    return Data_Maybe.Nothing.value;
  };
};

var $$delete = function $$delete(dictEq) {
  return deleteBy(Data_Eq.eq(dictEq));
};

var difference = function difference(dictEq) {
  return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};

var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));

var concat = function concat(v) {
  return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};

var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));

var alterAt = function alterAt(v) {
  return function (v1) {
    return function (v2) {
      if (v === 0 && v2 instanceof Data_List_Types.Cons) {
        return Data_Maybe.Just.create(function () {
          var v3 = v1(v2.value0);

          if (v3 instanceof Data_Maybe.Nothing) {
            return v2.value1;
          }

          ;

          if (v3 instanceof Data_Maybe.Just) {
            return new Data_List_Types.Cons(v3.value0, v2.value1);
          }

          ;
          throw new Error("Failed pattern match at Data.List (line 352, column 3 - line 354, column 23): " + [v3.constructor.name]);
        }());
      }

      ;

      if (v2 instanceof Data_List_Types.Cons) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
          return new Data_List_Types.Cons(v2.value0, v3);
        })(alterAt(v - 1 | 0)(v1)(v2.value1));
      }

      ;
      return Data_Maybe.Nothing.value;
    };
  };
};

var modifyAt = function modifyAt(n) {
  return function (f) {
    return alterAt(n)(function ($335) {
      return Data_Maybe.Just.create(f($335));
    });
  };
};

module.exports = {
  toUnfoldable: toUnfoldable,
  fromFoldable: fromFoldable,
  singleton: singleton,
  range: range,
  some: some,
  someRec: someRec,
  many: many,
  manyRec: manyRec,
  "null": $$null,
  length: length,
  snoc: snoc,
  insert: insert,
  insertBy: insertBy,
  head: head,
  last: last,
  tail: tail,
  init: init,
  uncons: uncons,
  unsnoc: unsnoc,
  index: index,
  elemIndex: elemIndex,
  elemLastIndex: elemLastIndex,
  findIndex: findIndex,
  findLastIndex: findLastIndex,
  insertAt: insertAt,
  deleteAt: deleteAt,
  updateAt: updateAt,
  modifyAt: modifyAt,
  alterAt: alterAt,
  reverse: reverse,
  concat: concat,
  concatMap: concatMap,
  filter: filter,
  filterM: filterM,
  mapMaybe: mapMaybe,
  catMaybes: catMaybes,
  mapWithIndex: mapWithIndex,
  sort: sort,
  sortBy: sortBy,
  Pattern: Pattern,
  stripPrefix: stripPrefix,
  slice: slice,
  take: take,
  takeEnd: takeEnd,
  takeWhile: takeWhile,
  drop: drop,
  dropEnd: dropEnd,
  dropWhile: dropWhile,
  span: span,
  group: group,
  "group'": group$prime,
  groupBy: groupBy,
  partition: partition,
  nub: nub,
  nubBy: nubBy,
  union: union,
  unionBy: unionBy,
  "delete": $$delete,
  deleteBy: deleteBy,
  difference: difference,
  intersect: intersect,
  intersectBy: intersectBy,
  zipWith: zipWith,
  zipWithA: zipWithA,
  zip: zip,
  unzip: unzip,
  transpose: transpose,
  foldM: foldM,
  eqPattern: eqPattern,
  ordPattern: ordPattern,
  newtypePattern: newtypePattern,
  showPattern: showPattern
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Lazy/index.js":"output/Control.Lazy/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.NonEmpty/index.js":"output/Data.NonEmpty/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Data.List.Lazy.Types/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Lazy = require("../Data.Lazy/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var List = function List(x) {
  return x;
};

var Nil = function () {
  function Nil() {}

  ;
  Nil.value = new Nil();
  return Nil;
}();

var Cons = function () {
  function Cons(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Cons.create = function (value0) {
    return function (value1) {
      return new Cons(value0, value1);
    };
  };

  return Cons;
}();

var NonEmptyList = function NonEmptyList(x) {
  return x;
};

var nil = List(Data_Lazy.defer(function (v) {
  return Nil.value;
}));
var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
  return n;
}, NonEmptyList);
var newtypeList = new Data_Newtype.Newtype(function (n) {
  return n;
}, List);

var step = function () {
  var $215 = Data_Newtype.unwrap(newtypeList);
  return function ($216) {
    return Data_Lazy.force($215($216));
  };
}();

var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
  return function (ys) {
    var go = function go(v) {
      if (v instanceof Nil) {
        return step(ys);
      }

      ;

      if (v instanceof Cons) {
        return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 98, column 5 - line 98, column 21): " + [v.constructor.name]);
    };

    return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
  };
});

var showList = function showList(dictShow) {
  return new Data_Show.Show(function (xs) {
    var go = function go(v) {
      if (v instanceof Nil) {
        return "Nil";
      }

      ;

      if (v instanceof Cons) {
        return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (go(step(v.value1)) + ")")));
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 64, column 5 - line 64, column 19): " + [v.constructor.name]);
    };

    return "fromStrict (" + (go(step(xs)) + ")");
  });
};

var showNonEmptyList = function showNonEmptyList(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(NonEmptyList " + (Data_Show.show(Data_Lazy.showLazy(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow))))(v) + ")");
  });
};

var monoidList = new Data_Monoid.Monoid(function () {
  return semigroupList;
}, nil);
var lazyList = new Control_Lazy.Lazy(function (f) {
  return List(Data_Lazy.defer(function ($217) {
    return step(f($217));
  }));
});
var functorList = new Data_Functor.Functor(function (f) {
  return function (xs) {
    var go = function go(v) {
      if (v instanceof Nil) {
        return Nil.value;
      }

      ;

      if (v instanceof Cons) {
        return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 107, column 5 - line 107, column 17): " + [v.constructor.name]);
    };

    return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
  };
});
var functorNonEmptyList = new Data_Functor.Functor(function (f) {
  return function (v) {
    return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(functorList))(f))(v);
  };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
  return function (xs) {
    return function (ys) {
      var go = function go($copy_v) {
        return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(v, v1) {
            if (v instanceof Nil && v1 instanceof Nil) {
              $tco_done = true;
              return true;
            }

            ;

            if (v instanceof Cons && v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0)) {
              $tco_var_v = step(v.value1);
              $copy_v1 = step(v1.value1);
              return;
            }

            ;
            $tco_done = true;
            return false;
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }

          ;
          return $tco_result;
        };
      };

      return go(step(xs))(step(ys));
    };
  };
});

var eqList = function eqList(dictEq) {
  return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};

var eqNonEmptyList = function eqNonEmptyList(dictEq) {
  return Data_Lazy.eqLazy(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq));
};

var ord1List = new Data_Ord.Ord1(function () {
  return eq1List;
}, function (dictOrd) {
  return function (xs) {
    return function (ys) {
      var go = function go($copy_v) {
        return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(v, v1) {
            if (v instanceof Nil && v1 instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.EQ.value;
            }

            ;

            if (v instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.LT.value;
            }

            ;

            if (v1 instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.GT.value;
            }

            ;

            if (v instanceof Cons && v1 instanceof Cons) {
              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);

              if (v2 instanceof Data_Ordering.EQ) {
                $tco_var_v = step(v.value1);
                $copy_v1 = step(v1.value1);
                return;
              }

              ;
              $tco_done = true;
              return v2;
            }

            ;
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 84, column 5 - line 84, column 20): " + [v.constructor.name, v1.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }

          ;
          return $tco_result;
        };
      };

      return go(step(xs))(step(ys));
    };
  };
});

var ordList = function ordList(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqList(dictOrd.Eq0());
  }, Data_Ord.compare1(ord1List)(dictOrd));
};

var ordNonEmptyList = function ordNonEmptyList(dictOrd) {
  return Data_Lazy.ordLazy(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd));
};

var cons = function cons(x) {
  return function (xs) {
    return List(Data_Lazy.defer(function (v) {
      return new Cons(x, xs);
    }));
  };
};

var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldl(foldableList)(function (b) {
      return function (a) {
        return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
      };
    })(Data_Monoid.mempty(dictMonoid));
  };
}, function (op) {
  var go = function go($copy_b) {
    return function ($copy_xs) {
      var $tco_var_b = $copy_b;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(b, xs) {
        var v = step(xs);

        if (v instanceof Nil) {
          $tco_done = true;
          return b;
        }

        ;

        if (v instanceof Cons) {
          $tco_var_b = op(b)(v.value0);
          $copy_xs = v.value1;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 122, column 7 - line 124, column 40): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_b, $copy_xs);
      }

      ;
      return $tco_result;
    };
  };

  return go;
}, function (op) {
  return function (z) {
    return function (xs) {
      var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
      return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
    };
  };
});
var extendList = new Control_Extend.Extend(function () {
  return functorList;
}, function (f) {
  return function (l) {
    var go = function go(a) {
      return function (v) {
        var acc$prime = cons(a)(v.acc);
        return {
          val: cons(f(acc$prime))(v.val),
          acc: acc$prime
        };
      };
    };

    var v = step(l);

    if (v instanceof Nil) {
      return nil;
    }

    ;

    if (v instanceof Cons) {
      return cons(f(l))(Data_Foldable.foldr(foldableList)(go)({
        val: nil,
        acc: nil
      })(v.value1).val);
    }

    ;
    throw new Error("Failed pattern match at Data.List.Lazy.Types (line 194, column 5 - line 197, column 55): " + [v.constructor.name]);
  };
});
var extendNonEmptyList = new Control_Extend.Extend(function () {
  return functorNonEmptyList;
}, function (f) {
  return function (v) {
    var go = function go(a) {
      return function (v1) {
        return {
          val: cons(f(Data_Lazy.defer(function (v2) {
            return new Data_NonEmpty.NonEmpty(a, v1.acc);
          })))(v1.val),
          acc: cons(a)(v1.acc)
        };
      };
    };

    var v1 = Data_Lazy.force(v);
    return NonEmptyList(Data_Lazy.defer(function (v2) {
      return new Data_NonEmpty.NonEmpty(f(v), Data_Foldable.foldr(foldableList)(go)({
        val: nil,
        acc: nil
      })(v1.value1).val);
    }));
  };
});
var foldableNonEmptyList = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return Data_Foldable.foldMap(Data_NonEmpty.foldableNonEmpty(foldableList))(dictMonoid)(f)(Data_Lazy.force(v));
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_Foldable.foldr(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
    };
  };
});
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableList;
}, function (dictMonoid) {
  return function (f) {
    return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
      return function (acc) {
        var $218 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
        var $219 = f(i);
        return function ($220) {
          return $218($219($220));
        };
      };
    })(Data_Monoid.mempty(dictMonoid));
  };
}, function (f) {
  return function (acc) {
    var $221 = Data_Foldable.foldl(foldableList)(function (v) {
      return function (a) {
        return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
      };
    })(new Data_Tuple.Tuple(0, acc));
    return function ($222) {
      return Data_Tuple.snd($221($222));
    };
  };
}, function (f) {
  return function (b) {
    return function (xs) {
      var v = function () {
        var rev = Data_Foldable.foldl(foldableList)(function (v1) {
          return function (a) {
            return new Data_Tuple.Tuple(v1.value0 + 1 | 0, cons(a)(v1.value1));
          };
        });
        return rev(new Data_Tuple.Tuple(0, nil))(xs);
      }();

      return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
        return function (a) {
          return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
        };
      })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
    };
  };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableNonEmptyList;
}, function (dictMonoid) {
  return function (f) {
    return function (v) {
      return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function () {
        var $223 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($224) {
          return f($223($224));
        };
      }())(Data_Lazy.force(v));
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function () {
        var $225 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($226) {
          return f($225($226));
        };
      }())(b)(Data_Lazy.force(v));
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function () {
        var $227 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($228) {
          return f($227($228));
        };
      }())(b)(Data_Lazy.force(v));
    };
  };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorList;
}, function (f) {
  return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
    return function (x) {
      return function (acc) {
        return cons(f(i)(x))(acc);
      };
    };
  })(nil);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorNonEmptyList;
}, function (f) {
  return function (v) {
    return NonEmptyList(Data_Lazy.defer(function (v1) {
      return Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function () {
        var $229 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($230) {
          return f($229($230));
        };
      }())(Data_Lazy.force(v));
    }));
  };
});

var toList = function toList(v) {
  return Control_Lazy.defer(lazyList)(function (v1) {
    var v2 = Data_Lazy.force(v);
    return cons(v2.value0)(v2.value1);
  });
};

var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
  return function (as$prime) {
    var v1 = Data_Lazy.force(v);
    return Data_Lazy.defer(function (v2) {
      return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(toList(as$prime)));
    });
  };
});
var traversableList = new Data_Traversable.Traversable(function () {
  return foldableList;
}, function () {
  return functorList;
}, function (dictApplicative) {
  return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
  return function (f) {
    return Data_Foldable.foldr(foldableList)(function (a) {
      return function (b) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(f(a)))(b);
      };
    })(Control_Applicative.pure(dictApplicative)(nil));
  };
});
var traversableNonEmptyList = new Data_Traversable.Traversable(function () {
  return foldableNonEmptyList;
}, function () {
  return functorNonEmptyList;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(function (xxs) {
      return NonEmptyList(Data_Lazy.defer(function (v1) {
        return xxs;
      }));
    })(Data_Traversable.sequence(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(Data_Lazy.force(v)));
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(function (xxs) {
        return NonEmptyList(Data_Lazy.defer(function (v1) {
          return xxs;
        }));
      })(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(f)(Data_Lazy.force(v)));
    };
  };
});
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexList;
}, function () {
  return functorWithIndexList;
}, function () {
  return traversableList;
}, function (dictApplicative) {
  return function (f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
      return function (a) {
        return function (b) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(f(i)(a)))(b);
        };
      };
    })(Control_Applicative.pure(dictApplicative)(nil));
  };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexNonEmptyList;
}, function () {
  return functorWithIndexNonEmptyList;
}, function () {
  return traversableNonEmptyList;
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(function (xxs) {
        return NonEmptyList(Data_Lazy.defer(function (v1) {
          return xxs;
        }));
      })(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function () {
        var $231 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($232) {
          return f($231($232));
        };
      }())(Data_Lazy.force(v)));
    };
  };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function () {
  var go = function go(f) {
    return function (b) {
      return Control_Lazy.defer(lazyList)(function (v) {
        var v1 = f(b);

        if (v1.value1 instanceof Data_Maybe.Just) {
          return cons(v1.value0)(go(f)(v1.value1.value0));
        }

        ;

        if (v1.value1 instanceof Data_Maybe.Nothing) {
          return cons(v1.value0)(nil);
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 146, column 28 - line 148, column 33): " + [v1.constructor.name]);
      });
    };
  };

  return go;
}());
var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
  return unfoldable1List;
}, function () {
  var go = function go(f) {
    return function (b) {
      return Control_Lazy.defer(lazyList)(function (v) {
        var v1 = f(b);

        if (v1 instanceof Data_Maybe.Nothing) {
          return nil;
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          return cons(v1.value0.value0)(go(f)(v1.value0.value1));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 39): " + [v1.constructor.name]);
      });
    };
  };

  return go;
}());
var unfoldable1NonEmptyList = new Data_Unfoldable1.Unfoldable1(function (f) {
  return function (b) {
    return NonEmptyList(Data_Lazy.defer(function (v) {
      return Data_Unfoldable1.unfoldr1(Data_NonEmpty.unfoldable1NonEmpty(unfoldableList))(f)(b);
    }));
  };
});
var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
  return extendNonEmptyList;
}, function (v) {
  return Data_NonEmpty.head(Data_Lazy.force(v));
});
var monadList = new Control_Monad.Monad(function () {
  return applicativeList;
}, function () {
  return bindList;
});
var bindList = new Control_Bind.Bind(function () {
  return applyList;
}, function (xs) {
  return function (f) {
    var go = function go(v) {
      if (v instanceof Nil) {
        return Nil.value;
      }

      ;

      if (v instanceof Cons) {
        return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 175, column 5 - line 175, column 17): " + [v.constructor.name]);
    };

    return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
  };
});
var applyList = new Control_Apply.Apply(function () {
  return functorList;
}, Control_Monad.ap(monadList));
var applicativeList = new Control_Applicative.Applicative(function () {
  return applyList;
}, function (a) {
  return cons(a)(nil);
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
  return functorNonEmptyList;
}, function (v) {
  return function (v1) {
    var v2 = Data_Lazy.force(v1);
    var v3 = Data_Lazy.force(v);
    return Data_Lazy.defer(function (v4) {
      return new Data_NonEmpty.NonEmpty(v3.value0(v2.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v3.value1)(cons(v2.value0)(nil)))(Control_Apply.apply(applyList)(cons(v3.value0)(v3.value1))(v2.value1)));
    });
  };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
  return applyNonEmptyList;
}, function (v) {
  return function (f) {
    var v1 = Data_Lazy.force(v);
    var v2 = Data_Lazy.force(Data_Newtype.unwrap(newtypeNonEmptyList)(f(v1.value0)));
    return Data_Lazy.defer(function (v3) {
      return new Data_NonEmpty.NonEmpty(v2.value0, Data_Semigroup.append(semigroupList)(v2.value1)(Control_Bind.bind(bindList)(v1.value1)(function ($233) {
        return toList(f($233));
      })));
    });
  };
});
var altNonEmptyList = new Control_Alt.Alt(function () {
  return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
  return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
  return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function () {
  return applicativeList;
}, function () {
  return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
  return alternativeList;
}, function () {
  return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
  return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
  return applyNonEmptyList;
}, function (a) {
  return Data_Lazy.defer(function (v) {
    return Data_NonEmpty.singleton(plusList)(a);
  });
});
var monadNonEmptyList = new Control_Monad.Monad(function () {
  return applicativeNonEmptyList;
}, function () {
  return bindNonEmptyList;
});
module.exports = {
  List: List,
  Nil: Nil,
  Cons: Cons,
  step: step,
  nil: nil,
  cons: cons,
  NonEmptyList: NonEmptyList,
  toList: toList,
  newtypeList: newtypeList,
  showList: showList,
  eqList: eqList,
  eq1List: eq1List,
  ordList: ordList,
  ord1List: ord1List,
  lazyList: lazyList,
  semigroupList: semigroupList,
  monoidList: monoidList,
  functorList: functorList,
  functorWithIndexList: functorWithIndexList,
  foldableList: foldableList,
  foldableWithIndexList: foldableWithIndexList,
  unfoldable1List: unfoldable1List,
  unfoldableList: unfoldableList,
  traversableList: traversableList,
  traversableWithIndexList: traversableWithIndexList,
  applyList: applyList,
  applicativeList: applicativeList,
  bindList: bindList,
  monadList: monadList,
  altList: altList,
  plusList: plusList,
  alternativeList: alternativeList,
  monadZeroList: monadZeroList,
  monadPlusList: monadPlusList,
  extendList: extendList,
  newtypeNonEmptyList: newtypeNonEmptyList,
  eqNonEmptyList: eqNonEmptyList,
  ordNonEmptyList: ordNonEmptyList,
  showNonEmptyList: showNonEmptyList,
  functorNonEmptyList: functorNonEmptyList,
  applyNonEmptyList: applyNonEmptyList,
  applicativeNonEmptyList: applicativeNonEmptyList,
  bindNonEmptyList: bindNonEmptyList,
  monadNonEmptyList: monadNonEmptyList,
  altNonEmptyList: altNonEmptyList,
  extendNonEmptyList: extendNonEmptyList,
  comonadNonEmptyList: comonadNonEmptyList,
  semigroupNonEmptyList: semigroupNonEmptyList,
  foldableNonEmptyList: foldableNonEmptyList,
  traversableNonEmptyList: traversableNonEmptyList,
  unfoldable1NonEmptyList: unfoldable1NonEmptyList,
  functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
  foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
  traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Comonad/index.js":"output/Control.Comonad/index.js","../Control.Extend/index.js":"output/Control.Extend/index.js","../Control.Lazy/index.js":"output/Control.Lazy/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Lazy/index.js":"output/Data.Lazy/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.NonEmpty/index.js":"output/Data.NonEmpty/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"output/Data.Unfoldable1/index.js"}],"output/Data.List.Lazy/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Lazy = require("../Data.Lazy/index.js");

var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Pattern = function Pattern(x) {
  return x;
};

var zipWith = function zipWith(f) {
  return function (xs) {
    return function (ys) {
      var go = function go(v) {
        return function (v1) {
          if (v instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
          }

          ;

          if (v1 instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
          }

          ;

          if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
          }

          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 693, column 3 - line 693, column 35): " + [v.constructor.name, v1.constructor.name]);
        };
      };

      return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs)))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(ys));
    };
  };
};

var zipWithA = function zipWithA(dictApplicative) {
  return function (f) {
    return function (xs) {
      return function (ys) {
        return Data_Traversable.sequence(Data_List_Lazy_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
      };
    };
  };
};

var zip = zipWith(Data_Tuple.Tuple.create);

var updateAt = function updateAt(n) {
  return function (x) {
    return function (xs) {
      var go = function go(v) {
        return function (v1) {
          if (v1 instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
          }

          ;

          if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(x, v1.value1);
          }

          ;

          if (v1 instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(v1.value0, updateAt(v - 1 | 0)(x)(v1.value1));
          }

          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 367, column 3 - line 367, column 17): " + [v.constructor.name, v1.constructor.name]);
        };
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var unzip = Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(function (v) {
  return function (v1) {
    return new Data_Tuple.Tuple(Data_List_Lazy_Types.cons(v.value0)(v1.value0), Data_List_Lazy_Types.cons(v.value1)(v1.value1));
  };
})(new Data_Tuple.Tuple(Data_List_Lazy_Types.nil, Data_List_Lazy_Types.nil));

var uncons = function uncons(xs) {
  var v = Data_List_Lazy_Types.step(xs);

  if (v instanceof Data_List_Lazy_Types.Nil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_List_Lazy_Types.Cons) {
    return new Data_Maybe.Just({
      head: v.value0,
      tail: v.value1
    });
  }

  ;
  throw new Error("Failed pattern match at Data.List.Lazy (line 285, column 13 - line 287, column 44): " + [v.constructor.name]);
};

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
      return new Data_Tuple.Tuple(rec.head, rec.tail);
    })(uncons(xs));
  });
};

var takeWhile = function takeWhile(p) {
  var go = function go(v) {
    if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
      return new Data_List_Lazy_Types.Cons(v.value0, takeWhile(p)(v.value1));
    }

    ;
    return Data_List_Lazy_Types.Nil.value;
  };

  var $239 = Data_Functor.map(Data_Lazy.functorLazy)(go);
  var $240 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($241) {
    return Data_List_Lazy_Types.List($239($240($241)));
  };
};

var take = function take(n) {
  var go = function go(v) {
    return function (v1) {
      if (v1 instanceof Data_List_Lazy_Types.Nil) {
        return Data_List_Lazy_Types.Nil.value;
      }

      ;

      if (v1 instanceof Data_List_Lazy_Types.Cons) {
        return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1 | 0)(v1.value1));
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 517, column 3 - line 517, column 32): " + [v.constructor.name, v1.constructor.name]);
    };
  };

  var $119 = n <= 0;

  if ($119) {
    return Data_Function["const"](Data_List_Lazy_Types.nil);
  }

  ;
  var $242 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
  var $243 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($244) {
    return Data_List_Lazy_Types.List($242($243($244)));
  };
};

var tail = function tail(xs) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return v.tail;
  })(uncons(xs));
};

var stripPrefix = function stripPrefix(dictEq) {
  return function (v) {
    return function (s) {
      var go = function go(prefix) {
        return function (input) {
          var v1 = Data_List_Lazy_Types.step(prefix);

          if (v1 instanceof Data_List_Lazy_Types.Nil) {
            return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
          }

          ;

          if (v1 instanceof Data_List_Lazy_Types.Cons) {
            var v2 = Data_List_Lazy_Types.step(input);

            if (v2 instanceof Data_List_Lazy_Types.Cons && Data_Eq.eq(dictEq)(v1.value0)(v2.value0)) {
              return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                a: v1.value1,
                b: v2.value1
              }));
            }

            ;
            return Data_Maybe.Nothing.value;
          }

          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 499, column 21 - line 503, column 19): " + [v1.constructor.name]);
        };
      };

      return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
    };
  };
};

var span = function span(p) {
  return function (xs) {
    var v = uncons(xs);

    if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
      var v1 = span(p)(v.value0.tail);
      return {
        init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init),
        rest: v1.rest
      };
    }

    ;
    return {
      init: Data_List_Lazy_Types.nil,
      rest: xs
    };
  };
};

var snoc = function snoc(xs) {
  return function (x) {
    return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.cons(x)(Data_List_Lazy_Types.nil))(xs);
  };
};

var singleton = function singleton(a) {
  return Data_List_Lazy_Types.cons(a)(Data_List_Lazy_Types.nil);
};

var showPattern = function showPattern(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Pattern " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
  });
};

var scanrLazy = function scanrLazy(f) {
  return function (acc) {
    return function (xs) {
      var go = function go(v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_List_Lazy_Types.Nil.value;
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Cons) {
          var acc$prime = f(v.value0)(acc);
          return Data_List_Lazy_Types.Cons.create(acc$prime)(scanrLazy(f)(acc$prime)(v.value1));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 764, column 5 - line 764, column 27): " + [v.constructor.name]);
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var reverse = function reverse(xs) {
  return Control_Lazy.defer(Data_List_Lazy_Types.lazyList)(function (v) {
    return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(Data_List_Lazy_Types.cons))(Data_List_Lazy_Types.nil)(xs);
  });
};

var replicateM = function replicateM(dictMonad) {
  return function (n) {
    return function (m) {
      if (n < 1) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
      }

      ;

      if (Data_Boolean.otherwise) {
        return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
          return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function (as) {
            return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(a)(as));
          });
        });
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 161, column 1 - line 161, column 62): " + [n.constructor.name, m.constructor.name]);
    };
  };
};

var repeat = function repeat(x) {
  return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
    return Data_List_Lazy_Types.cons(x)(xs);
  });
};

var replicate = function replicate(i) {
  return function (xs) {
    return take(i)(repeat(xs));
  };
};

var range = function range(start) {
  return function (end) {
    if (start > end) {
      var g = function g(x) {
        if (x >= end) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1 | 0));
        }

        ;

        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 148, column 13 - line 149, column 38): " + [x.constructor.name]);
      };

      return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(g)(start);
    }

    ;

    if (Data_Boolean.otherwise) {
      var f = function f(x) {
        if (x <= end) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
        }

        ;

        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 153, column 5 - line 154, column 30): " + [x.constructor.name]);
      };

      return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(f)(start);
    }

    ;
    throw new Error("Failed pattern match at Data.List.Lazy (line 145, column 1 - line 145, column 32): " + [start.constructor.name, end.constructor.name]);
  };
};

var partition = function partition(f) {
  var go = function go(x) {
    return function (v) {
      var $147 = f(x);

      if ($147) {
        return {
          yes: Data_List_Lazy_Types.cons(x)(v.yes),
          no: v.no
        };
      }

      ;
      return {
        yes: v.yes,
        no: Data_List_Lazy_Types.cons(x)(v.no)
      };
    };
  };

  return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(go)({
    yes: Data_List_Lazy_Types.nil,
    no: Data_List_Lazy_Types.nil
  });
};

var $$null = function $$null($245) {
  return Data_Maybe.isNothing(uncons($245));
};

var newtypePattern = new Data_Newtype.Newtype(function (n) {
  return n;
}, Pattern);

var mapMaybe = function mapMaybe(f) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Lazy_Types.Nil) {
        $tco_done = true;
        return Data_List_Lazy_Types.Nil.value;
      }

      ;

      if (v instanceof Data_List_Lazy_Types.Cons) {
        var v1 = f(v.value0);

        if (v1 instanceof Data_Maybe.Nothing) {
          $copy_v = Data_List_Lazy_Types.step(v.value1);
          return;
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          $tco_done = true;
          return new Data_List_Lazy_Types.Cons(v1.value0, mapMaybe(f)(v.value1));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 460, column 5 - line 462, column 39): " + [v1.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 458, column 3 - line 458, column 15): " + [v.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  var $246 = Data_Functor.map(Data_Lazy.functorLazy)(go);
  var $247 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($248) {
    return Data_List_Lazy_Types.List($246($247($248)));
  };
};

var some = function some(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Lazy_Types.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
        return many(dictAlternative)(dictLazy)(v);
      }));
    };
  };
};

var many = function many(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Lazy_Types.nil));
    };
  };
};

var length = Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(function (l) {
  return function (v) {
    return l + 1 | 0;
  };
})(0);

var last = function () {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Lazy_Types.Cons) {
        if ($$null(v.value1)) {
          $tco_done = true;
          return new Data_Maybe.Just(v.value0);
        }

        ;

        if (Data_Boolean.otherwise) {
          $copy_v = Data_List_Lazy_Types.step(v.value1);
          return;
        }

        ;
      }

      ;
      $tco_done = true;
      return Data_Maybe.Nothing.value;
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return function ($249) {
    return go(Data_List_Lazy_Types.step($249));
  };
}();

var iterate = function iterate(f) {
  return function (x) {
    return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
      return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
    });
  };
};

var insertAt = function insertAt(v) {
  return function (x) {
    return function (xs) {
      if (v === 0) {
        return Data_List_Lazy_Types.cons(x)(xs);
      }

      ;

      var go = function go(v1) {
        if (v1 instanceof Data_List_Lazy_Types.Nil) {
          return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
        }

        ;

        if (v1 instanceof Data_List_Lazy_Types.Cons) {
          return new Data_List_Lazy_Types.Cons(v1.value0, insertAt(v - 1 | 0)(x)(v1.value1));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 340, column 3 - line 340, column 22): " + [v1.constructor.name]);
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var init = function () {
  var go = function go(v) {
    if (v instanceof Data_List_Lazy_Types.Cons) {
      if ($$null(v.value1)) {
        return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
      }

      ;

      if (Data_Boolean.otherwise) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
      }

      ;
    }

    ;
    return Data_Maybe.Nothing.value;
  };

  return function ($250) {
    return go(Data_List_Lazy_Types.step($250));
  };
}();

var index = function index(xs) {
  var go = function go($copy_v) {
    return function ($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, v1) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Cons && v1 === 0) {
          $tco_done = true;
          return new Data_Maybe.Just(v.value0);
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Cons) {
          $tco_var_v = Data_List_Lazy_Types.step(v.value1);
          $copy_v1 = v1 - 1 | 0;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 299, column 3 - line 299, column 21): " + [v.constructor.name, v1.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_List_Lazy_Types.step(xs));
};

var head = function head(xs) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return v.head;
  })(uncons(xs));
};

var transpose = function transpose(xs) {
  var v = uncons(xs);

  if (v instanceof Data_Maybe.Nothing) {
    return xs;
  }

  ;

  if (v instanceof Data_Maybe.Just) {
    var v1 = uncons(v.value0.head);

    if (v1 instanceof Data_Maybe.Nothing) {
      return transpose(v.value0.tail);
    }

    ;

    if (v1 instanceof Data_Maybe.Just) {
      return Data_List_Lazy_Types.cons(Data_List_Lazy_Types.cons(v1.value0.head)(mapMaybe(head)(v.value0.tail)))(transpose(Data_List_Lazy_Types.cons(v1.value0.tail)(mapMaybe(tail)(v.value0.tail))));
    }

    ;
    throw new Error("Failed pattern match at Data.List.Lazy (line 734, column 7 - line 738, column 72): " + [v1.constructor.name]);
  }

  ;
  throw new Error("Failed pattern match at Data.List.Lazy (line 730, column 3 - line 738, column 72): " + [v.constructor.name]);
};

var groupBy = function groupBy(eq) {
  var go = function go(v) {
    if (v instanceof Data_List_Lazy_Types.Nil) {
      return Data_List_Lazy_Types.Nil.value;
    }

    ;

    if (v instanceof Data_List_Lazy_Types.Cons) {
      var v1 = span(eq(v.value0))(v.value1);
      return new Data_List_Lazy_Types.Cons(Data_Lazy.defer(function (v2) {
        return new Data_NonEmpty.NonEmpty(v.value0, v1.init);
      }), groupBy(eq)(v1.rest));
    }

    ;
    throw new Error("Failed pattern match at Data.List.Lazy (line 588, column 3 - line 588, column 15): " + [v.constructor.name]);
  };

  var $251 = Data_Functor.map(Data_Lazy.functorLazy)(go);
  var $252 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($253) {
    return Data_List_Lazy_Types.List($251($252($253)));
  };
};

var group = function group(dictEq) {
  return groupBy(Data_Eq.eq(dictEq));
};

var fromStep = function () {
  var $254 = Control_Applicative.pure(Data_Lazy.applicativeLazy);
  return function ($255) {
    return Data_List_Lazy_Types.List($254($255));
  };
}();

var insertBy = function insertBy(cmp) {
  return function (x) {
    return function (xs) {
      var go = function go(v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
          return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Cons) {
          var v1 = cmp(x)(v.value0);

          if (v1 instanceof Data_Ordering.GT) {
            return new Data_List_Lazy_Types.Cons(v.value0, insertBy(cmp)(x)(v.value1));
          }

          ;
          return new Data_List_Lazy_Types.Cons(x, fromStep(v));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 235, column 3 - line 235, column 22): " + [v.constructor.name]);
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var insert = function insert(dictOrd) {
  return insertBy(Data_Ord.compare(dictOrd));
};

var fromFoldable = function fromFoldable(dictFoldable) {
  return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
};

var foldrLazy = function foldrLazy(dictLazy) {
  return function (op) {
    return function (z) {
      var go = function go(xs) {
        var v = Data_List_Lazy_Types.step(xs);

        if (v instanceof Data_List_Lazy_Types.Cons) {
          return Control_Lazy.defer(dictLazy)(function (v1) {
            return op(v.value0)(go(v.value1));
          });
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Nil) {
          return z;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 756, column 13 - line 758, column 15): " + [v.constructor.name]);
      };

      return go;
    };
  };
};

var foldM = function foldM(dictMonad) {
  return function (f) {
    return function (a) {
      return function (xs) {
        var v = uncons(xs);

        if (v instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(dictMonad.Applicative0())(a);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0.head))(function (a$prime) {
            return foldM(dictMonad)(f)(a$prime)(v.value0.tail);
          });
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 747, column 5 - line 750, column 54): " + [v.constructor.name]);
      };
    };
  };
};

var findIndex = function findIndex(fn) {
  var go = function go(n) {
    return function (list) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function (o) {
        var $199 = fn(o.head);

        if ($199) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
        }

        ;
        return go(n + 1 | 0)(o.tail);
      });
    };
  };

  return go(0);
};

var findLastIndex = function findLastIndex(fn) {
  return function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
      return (length(xs) - 1 | 0) - v | 0;
    })(findIndex(fn)(reverse(xs)));
  };
};

var filterM = function filterM(dictMonad) {
  return function (p) {
    return function (list) {
      var v = uncons(list);

      if (v instanceof Data_Maybe.Nothing) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
      }

      ;

      if (v instanceof Data_Maybe.Just) {
        return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function (b) {
          return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function (xs$prime) {
            return Control_Applicative.pure(dictMonad.Applicative0())(function () {
              if (b) {
                return Data_List_Lazy_Types.cons(v.value0.head)(xs$prime);
              }

              ;
              return xs$prime;
            }());
          });
        });
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 443, column 5 - line 448, column 48): " + [v.constructor.name]);
    };
  };
};

var filter = function filter(p) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Lazy_Types.Nil) {
        $tco_done = true;
        return Data_List_Lazy_Types.Nil.value;
      }

      ;

      if (v instanceof Data_List_Lazy_Types.Cons) {
        if (p(v.value0)) {
          $tco_done = true;
          return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
        }

        ;

        if (Data_Boolean.otherwise) {
          $copy_v = Data_List_Lazy_Types.step(v.value1);
          return;
        }

        ;
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 428, column 3 - line 428, column 15): " + [v.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  var $256 = Data_Functor.map(Data_Lazy.functorLazy)(go);
  var $257 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($258) {
    return Data_List_Lazy_Types.List($256($257($258)));
  };
};

var intersectBy = function intersectBy(eq) {
  return function (xs) {
    return function (ys) {
      return filter(function (x) {
        return Data_Foldable.any(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(x))(ys);
      })(xs);
    };
  };
};

var intersect = function intersect(dictEq) {
  return intersectBy(Data_Eq.eq(dictEq));
};

var nubBy = function nubBy(eq) {
  var go = function go(v) {
    if (v instanceof Data_List_Lazy_Types.Nil) {
      return Data_List_Lazy_Types.Nil.value;
    }

    ;

    if (v instanceof Data_List_Lazy_Types.Cons) {
      return new Data_List_Lazy_Types.Cons(v.value0, nubBy(eq)(filter(function (y) {
        return !eq(v.value0)(y);
      })(v.value1)));
    }

    ;
    throw new Error("Failed pattern match at Data.List.Lazy (line 621, column 3 - line 621, column 15): " + [v.constructor.name]);
  };

  var $259 = Data_Functor.map(Data_Lazy.functorLazy)(go);
  var $260 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($261) {
    return Data_List_Lazy_Types.List($259($260($261)));
  };
};

var nub = function nub(dictEq) {
  return nubBy(Data_Eq.eq(dictEq));
};

var eqPattern = function eqPattern(dictEq) {
  return new Data_Eq.Eq(function (x) {
    return function (y) {
      return Data_Eq.eq(Data_List_Lazy_Types.eqList(dictEq))(x)(y);
    };
  });
};

var ordPattern = function ordPattern(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqPattern(dictOrd.Eq0());
  }, function (x) {
    return function (y) {
      return Data_Ord.compare(Data_List_Lazy_Types.ordList(dictOrd))(x)(y);
    };
  });
};

var elemLastIndex = function elemLastIndex(dictEq) {
  return function (x) {
    return findLastIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var elemIndex = function elemIndex(dictEq) {
  return function (x) {
    return findIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var dropWhile = function dropWhile(p) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
        $copy_v = Data_List_Lazy_Types.step(v.value1);
        return;
      }

      ;
      $tco_done = true;
      return fromStep(v);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return function ($262) {
    return go(Data_List_Lazy_Types.step($262));
  };
};

var drop = function drop(n) {
  var go = function go($copy_v) {
    return function ($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, v1) {
        if (v === 0) {
          $tco_done = true;
          return v1;
        }

        ;

        if (v1 instanceof Data_List_Lazy_Types.Nil) {
          $tco_done = true;
          return Data_List_Lazy_Types.Nil.value;
        }

        ;

        if (v1 instanceof Data_List_Lazy_Types.Cons) {
          $tco_var_v = v - 1 | 0;
          $copy_v1 = Data_List_Lazy_Types.step(v1.value1);
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 536, column 3 - line 536, column 15): " + [v.constructor.name, v1.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }

      ;
      return $tco_result;
    };
  };

  var $263 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
  var $264 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($265) {
    return Data_List_Lazy_Types.List($263($264($265)));
  };
};

var slice = function slice(start) {
  return function (end) {
    return function (xs) {
      return take(end - start | 0)(drop(start)(xs));
    };
  };
};

var deleteBy = function deleteBy(eq) {
  return function (x) {
    return function (xs) {
      var go = function go(v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_List_Lazy_Types.Nil.value;
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Cons) {
          if (eq(x)(v.value0)) {
            return Data_List_Lazy_Types.step(v.value1);
          }

          ;

          if (Data_Boolean.otherwise) {
            return new Data_List_Lazy_Types.Cons(v.value0, deleteBy(eq)(x)(v.value1));
          }

          ;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 650, column 3 - line 650, column 15): " + [v.constructor.name]);
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var unionBy = function unionBy(eq) {
  return function (xs) {
    return function (ys) {
      return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
    };
  };
};

var union = function union(dictEq) {
  return unionBy(Data_Eq.eq(dictEq));
};

var deleteAt = function deleteAt(n) {
  return function (xs) {
    var go = function go(v) {
      return function (v1) {
        if (v1 instanceof Data_List_Lazy_Types.Nil) {
          return Data_List_Lazy_Types.Nil.value;
        }

        ;

        if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
          return Data_List_Lazy_Types.step(v1.value1);
        }

        ;

        if (v1 instanceof Data_List_Lazy_Types.Cons) {
          return new Data_List_Lazy_Types.Cons(v1.value0, deleteAt(v - 1 | 0)(v1.value1));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 353, column 3 - line 353, column 17): " + [v.constructor.name, v1.constructor.name]);
      };
    };

    return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
  };
};

var $$delete = function $$delete(dictEq) {
  return deleteBy(Data_Eq.eq(dictEq));
};

var difference = function difference(dictEq) {
  return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};

var cycle = function cycle(xs) {
  return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (ys) {
    return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(ys);
  });
};

var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindList));

var concat = function concat(v) {
  return Control_Bind.bind(Data_List_Lazy_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};

var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));

var alterAt = function alterAt(n) {
  return function (f) {
    return function (xs) {
      var go = function go(v) {
        return function (v1) {
          if (v1 instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
          }

          ;

          if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
            var v2 = f(v1.value0);

            if (v2 instanceof Data_Maybe.Nothing) {
              return Data_List_Lazy_Types.step(v1.value1);
            }

            ;

            if (v2 instanceof Data_Maybe.Just) {
              return new Data_List_Lazy_Types.Cons(v2.value0, v1.value1);
            }

            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 394, column 22 - line 396, column 26): " + [v2.constructor.name]);
          }

          ;

          if (v1 instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(v1.value0, alterAt(v - 1 | 0)(f)(v1.value1));
          }

          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 393, column 3 - line 393, column 17): " + [v.constructor.name, v1.constructor.name]);
        };
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var modifyAt = function modifyAt(n) {
  return function (f) {
    return alterAt(n)(function ($266) {
      return Data_Maybe.Just.create(f($266));
    });
  };
};

module.exports = {
  toUnfoldable: toUnfoldable,
  fromFoldable: fromFoldable,
  singleton: singleton,
  range: range,
  replicate: replicate,
  replicateM: replicateM,
  some: some,
  many: many,
  repeat: repeat,
  iterate: iterate,
  cycle: cycle,
  "null": $$null,
  length: length,
  snoc: snoc,
  insert: insert,
  insertBy: insertBy,
  head: head,
  last: last,
  tail: tail,
  init: init,
  uncons: uncons,
  index: index,
  elemIndex: elemIndex,
  elemLastIndex: elemLastIndex,
  findIndex: findIndex,
  findLastIndex: findLastIndex,
  insertAt: insertAt,
  deleteAt: deleteAt,
  updateAt: updateAt,
  modifyAt: modifyAt,
  alterAt: alterAt,
  reverse: reverse,
  concat: concat,
  concatMap: concatMap,
  filter: filter,
  filterM: filterM,
  mapMaybe: mapMaybe,
  catMaybes: catMaybes,
  Pattern: Pattern,
  stripPrefix: stripPrefix,
  slice: slice,
  take: take,
  takeWhile: takeWhile,
  drop: drop,
  dropWhile: dropWhile,
  span: span,
  group: group,
  groupBy: groupBy,
  partition: partition,
  nub: nub,
  nubBy: nubBy,
  union: union,
  unionBy: unionBy,
  "delete": $$delete,
  deleteBy: deleteBy,
  difference: difference,
  intersect: intersect,
  intersectBy: intersectBy,
  zipWith: zipWith,
  zipWithA: zipWithA,
  zip: zip,
  unzip: unzip,
  transpose: transpose,
  foldM: foldM,
  foldrLazy: foldrLazy,
  scanrLazy: scanrLazy,
  eqPattern: eqPattern,
  ordPattern: ordPattern,
  newtypePattern: newtypePattern,
  showPattern: showPattern
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Lazy/index.js":"output/Control.Lazy/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.Lazy/index.js":"output/Data.Lazy/index.js","../Data.List.Lazy.Types/index.js":"output/Data.List.Lazy.Types/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.NonEmpty/index.js":"output/Data.NonEmpty/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js"}],"output/Data.Map.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Lazy = require("../Data.List.Lazy/index.js");

var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Leaf = function () {
  function Leaf() {}

  ;
  Leaf.value = new Leaf();
  return Leaf;
}();

var Two = function () {
  function Two(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  ;

  Two.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return new Two(value0, value1, value2, value3);
        };
      };
    };
  };

  return Two;
}();

var Three = function () {
  function Three(value0, value1, value2, value3, value4, value5, value6) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  ;

  Three.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return function (value4) {
            return function (value5) {
              return function (value6) {
                return new Three(value0, value1, value2, value3, value4, value5, value6);
              };
            };
          };
        };
      };
    };
  };

  return Three;
}();

var TwoLeft = function () {
  function TwoLeft(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  TwoLeft.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new TwoLeft(value0, value1, value2);
      };
    };
  };

  return TwoLeft;
}();

var TwoRight = function () {
  function TwoRight(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  TwoRight.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new TwoRight(value0, value1, value2);
      };
    };
  };

  return TwoRight;
}();

var ThreeLeft = function () {
  function ThreeLeft(value0, value1, value2, value3, value4, value5) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  ;

  ThreeLeft.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return function (value4) {
            return function (value5) {
              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
            };
          };
        };
      };
    };
  };

  return ThreeLeft;
}();

var ThreeMiddle = function () {
  function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  ;

  ThreeMiddle.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return function (value4) {
            return function (value5) {
              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
            };
          };
        };
      };
    };
  };

  return ThreeMiddle;
}();

var ThreeRight = function () {
  function ThreeRight(value0, value1, value2, value3, value4, value5) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  ;

  ThreeRight.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return function (value4) {
            return function (value5) {
              return new ThreeRight(value0, value1, value2, value3, value4, value5);
            };
          };
        };
      };
    };
  };

  return ThreeRight;
}();

var KickUp = function () {
  function KickUp(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  ;

  KickUp.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return new KickUp(value0, value1, value2, value3);
        };
      };
    };
  };

  return KickUp;
}();

var values = function values(v) {
  if (v instanceof Leaf) {
    return Data_List_Types.Nil.value;
  }

  ;

  if (v instanceof Two) {
    return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
  }

  ;

  if (v instanceof Three) {
    return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
  }

  ;
  throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [v.constructor.name]);
};

var size = function size(v) {
  if (v instanceof Leaf) {
    return 0;
  }

  ;

  if (v instanceof Two) {
    return (1 + size(v.value0) | 0) + size(v.value3) | 0;
  }

  ;

  if (v instanceof Three) {
    return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
  }

  ;
  throw new Error("Failed pattern match at Data.Map.Internal (line 662, column 1 - line 662, column 35): " + [v.constructor.name]);
};

var singleton = function singleton(k) {
  return function (v) {
    return new Two(Leaf.value, k, v, Leaf.value);
  };
};

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  return function (m) {
    var go = function go($copy_v) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          if (v.value0 instanceof Leaf) {
            $copy_v = v.value1;
            return;
          }

          ;

          if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf) {
            $tco_done = true;
            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
          }

          ;

          if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
            $tco_done = true;
            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
          }

          ;

          if (v.value0 instanceof Two) {
            $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
            return;
          }

          ;

          if (v.value0 instanceof Three) {
            $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [v.value0.constructor.name]);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }

      ;
      return $tco_result;
    };

    return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
  };
};

var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);

var toUnfoldableUnordered = function toUnfoldableUnordered(dictUnfoldable) {
  return function (m) {
    var go = function go($copy_v) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          if (v.value0 instanceof Leaf) {
            $copy_v = v.value1;
            return;
          }

          ;

          if (v.value0 instanceof Two) {
            $tco_done = true;
            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
          }

          ;

          if (v.value0 instanceof Three) {
            $tco_done = true;
            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 598, column 18 - line 603, column 77): " + [v.value0.constructor.name]);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 597, column 3 - line 597, column 19): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }

      ;
      return $tco_result;
    };

    return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
  };
};

var showTree = function showTree(dictShow) {
  return function (dictShow1) {
    return function (v) {
      if (v instanceof Leaf) {
        return "Leaf";
      }

      ;

      if (v instanceof Two) {
        return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
      }

      ;

      if (v instanceof Three) {
        return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Data_Show.show(dictShow)(v.value4) + (") (" + (Data_Show.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 153, column 1 - line 153, column 62): " + [v.constructor.name]);
    };
  };
};

var showMap = function showMap(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (m) {
      return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
    });
  };
};

var lookupLE = function lookupLE(dictOrd) {
  return function (k) {
    var comp = Data_Ord.compare(dictOrd);

    var go = function go(v) {
      if (v instanceof Leaf) {
        return Data_Maybe.Nothing.value;
      }

      ;

      if (v instanceof Two) {
        var v2 = comp(k)(v.value1);

        if (v2 instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just({
            key: v.value1,
            value: v.value2
          });
        }

        ;

        if (v2 instanceof Data_Ordering.GT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value3)));
        }

        ;

        if (v2 instanceof Data_Ordering.LT) {
          return go(v.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 225, column 33 - line 228, column 20): " + [v2.constructor.name]);
      }

      ;

      if (v instanceof Three) {
        var v3 = comp(k)(v.value4);

        if (v3 instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just({
            key: v.value4,
            value: v.value5
          });
        }

        ;

        if (v3 instanceof Data_Ordering.GT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value4,
            value: v.value5
          })(go(v.value6)));
        }

        ;

        if (v3 instanceof Data_Ordering.LT) {
          return go(new Two(v.value0, v.value1, v.value2, v.value3));
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 229, column 45 - line 232, column 36): " + [v3.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 224, column 5 - line 224, column 22): " + [v.constructor.name]);
    };

    return go;
  };
};

var lookupGE = function lookupGE(dictOrd) {
  return function (k) {
    var comp = Data_Ord.compare(dictOrd);

    var go = function go(v) {
      if (v instanceof Leaf) {
        return Data_Maybe.Nothing.value;
      }

      ;

      if (v instanceof Two) {
        var v2 = comp(k)(v.value1);

        if (v2 instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just({
            key: v.value1,
            value: v.value2
          });
        }

        ;

        if (v2 instanceof Data_Ordering.LT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value0)));
        }

        ;

        if (v2 instanceof Data_Ordering.GT) {
          return go(v.value3);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 259, column 33 - line 262, column 21): " + [v2.constructor.name]);
      }

      ;

      if (v instanceof Three) {
        var v3 = comp(k)(v.value1);

        if (v3 instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just({
            key: v.value1,
            value: v.value2
          });
        }

        ;

        if (v3 instanceof Data_Ordering.LT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value0)));
        }

        ;

        if (v3 instanceof Data_Ordering.GT) {
          return go(new Two(v.value3, v.value4, v.value5, v.value6));
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 263, column 45 - line 266, column 37): " + [v3.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 258, column 5 - line 258, column 22): " + [v.constructor.name]);
    };

    return go;
  };
};

var lookup = function lookup(dictOrd) {
  return function (k) {
    var comp = Data_Ord.compare(dictOrd);

    var go = function go($copy_v) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v) {
        if (v instanceof Leaf) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        if (v instanceof Two) {
          var v2 = comp(k)(v.value1);

          if (v2 instanceof Data_Ordering.EQ) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value2);
          }

          ;

          if (v2 instanceof Data_Ordering.LT) {
            $copy_v = v.value0;
            return;
          }

          ;
          $copy_v = v.value3;
          return;
        }

        ;

        if (v instanceof Three) {
          var v3 = comp(k)(v.value1);

          if (v3 instanceof Data_Ordering.EQ) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value2);
          }

          ;
          var v4 = comp(k)(v.value4);

          if (v4 instanceof Data_Ordering.EQ) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value5);
          }

          ;

          if (v3 instanceof Data_Ordering.LT) {
            $copy_v = v.value0;
            return;
          }

          ;

          if (v4 instanceof Data_Ordering.GT) {
            $copy_v = v.value6;
            return;
          }

          ;
          $copy_v = v.value3;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }

      ;
      return $tco_result;
    };

    return go;
  };
};

var member = function member(dictOrd) {
  return function (k) {
    return function (m) {
      return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
    };
  };
};

var keys = function keys(v) {
  if (v instanceof Leaf) {
    return Data_List_Types.Nil.value;
  }

  ;

  if (v instanceof Two) {
    return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
  }

  ;

  if (v instanceof Three) {
    return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
  }

  ;
  throw new Error("Failed pattern match at Data.Map.Internal (line 606, column 1 - line 606, column 38): " + [v.constructor.name]);
};

var isSubmap = function isSubmap(dictOrd) {
  return function (dictEq) {
    return function (m1) {
      return function (m2) {
        var f = function f(v) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(lookup(dictOrd)(v.value0)(m2))(new Data_Maybe.Just(v.value1));
        };

        return Data_Foldable.all(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(toUnfoldable(Data_List_Lazy_Types.unfoldableList)(m1));
      };
    };
  };
};

var isEmpty = function isEmpty(v) {
  if (v instanceof Leaf) {
    return true;
  }

  ;
  return false;
};

var functorMap = new Data_Functor.Functor(function (v) {
  return function (v1) {
    if (v1 instanceof Leaf) {
      return Leaf.value;
    }

    ;

    if (v1 instanceof Two) {
      return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
    }

    ;

    if (v1 instanceof Three) {
      return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
    }

    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 96, column 1 - line 99, column 110): " + [v.constructor.name, v1.constructor.name]);
  };
});
var functorWithIndexMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorMap;
}, function (v) {
  return function (v1) {
    if (v1 instanceof Leaf) {
      return Leaf.value;
    }

    ;

    if (v1 instanceof Two) {
      return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
    }

    ;

    if (v1 instanceof Three) {
      return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
    }

    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 152): " + [v.constructor.name, v1.constructor.name]);
  };
});

var fromZipper = function fromZipper($copy_dictOrd) {
  return function ($copy_v) {
    return function ($copy_tree) {
      var $tco_var_dictOrd = $copy_dictOrd;
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(dictOrd, v, tree) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return tree;
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          if (v.value0 instanceof TwoLeft) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
            return;
          }

          ;

          if (v.value0 instanceof TwoRight) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
            return;
          }

          ;

          if (v.value0 instanceof ThreeLeft) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
            return;
          }

          ;

          if (v.value0 instanceof ThreeMiddle) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
            return;
          }

          ;

          if (v.value0 instanceof ThreeRight) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [v.value0.constructor.name]);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [v.constructor.name, tree.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
      }

      ;
      return $tco_result;
    };
  };
};

var insert = function insert(dictOrd) {
  return function (k) {
    return function (v) {
      var up = function up($copy_v1) {
        return function ($copy_v2) {
          var $tco_var_v1 = $copy_v1;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(v1, v2) {
            if (v1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
            }

            ;

            if (v1 instanceof Data_List_Types.Cons) {
              if (v1.value0 instanceof TwoLeft) {
                $tco_done = true;
                return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
              }

              ;

              if (v1.value0 instanceof TwoRight) {
                $tco_done = true;
                return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
              }

              ;

              if (v1.value0 instanceof ThreeLeft) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                return;
              }

              ;

              if (v1.value0 instanceof ThreeMiddle) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                return;
              }

              ;

              if (v1.value0 instanceof ThreeRight) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                return;
              }

              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [v1.value0.constructor.name, v2.constructor.name]);
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [v1.constructor.name, v2.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v1, $copy_v2);
          }

          ;
          return $tco_result;
        };
      };

      var comp = Data_Ord.compare(dictOrd);

      var down = function down($copy_ctx) {
        return function ($copy_v1) {
          var $tco_var_ctx = $copy_ctx;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(ctx, v1) {
            if (v1 instanceof Leaf) {
              $tco_done = true;
              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
            }

            ;

            if (v1 instanceof Two) {
              var v2 = comp(k)(v1.value1);

              if (v2 instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
              }

              ;

              if (v2 instanceof Data_Ordering.LT) {
                $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                $copy_v1 = v1.value0;
                return;
              }

              ;
              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
              $copy_v1 = v1.value3;
              return;
            }

            ;

            if (v1 instanceof Three) {
              var v3 = comp(k)(v1.value1);

              if (v3 instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
              }

              ;
              var v4 = comp(k)(v1.value4);

              if (v4 instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
              }

              ;

              if (v3 instanceof Data_Ordering.LT) {
                $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                $copy_v1 = v1.value0;
                return;
              }

              ;

              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                $copy_v1 = v1.value3;
                return;
              }

              ;
              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
              $copy_v1 = v1.value6;
              return;
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ctx.constructor.name, v1.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
          }

          ;
          return $tco_result;
        };
      };

      return down(Data_List_Types.Nil.value);
    };
  };
};

var pop = function pop(dictOrd) {
  return function (k) {
    var up = function up($copy_ctxs) {
      return function ($copy_tree) {
        var $tco_var_ctxs = $copy_ctxs;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(ctxs, tree) {
          if (ctxs instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return tree;
          }

          ;

          if (ctxs instanceof Data_List_Types.Cons) {
            if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
            }

            ;

            if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
            }

            ;

            if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
              $tco_var_ctxs = ctxs.value1;
              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
              return;
            }

            ;

            if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
              $tco_var_ctxs = ctxs.value1;
              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
              return;
            }

            ;

            if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
            }

            ;

            if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
            }

            ;

            if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Leaf && ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
            }

            ;

            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Leaf && ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
            }

            ;

            if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value0 instanceof Leaf && ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
            }

            ;

            if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }

            ;

            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }

            ;

            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
            }

            ;

            if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
            }

            ;

            if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }

            ;

            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }

            ;

            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
            }

            ;

            if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ctxs.value0.constructor.name, tree.constructor.name]);
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ctxs.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
        }

        ;
        return $tco_result;
      };
    };

    var removeMaxNode = function removeMaxNode($copy_ctx) {
      return function ($copy_m) {
        var $tco_var_ctx = $copy_ctx;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(ctx, m) {
          if (m instanceof Two && m.value0 instanceof Leaf && m.value3 instanceof Leaf) {
            $tco_done = true;
            return up(ctx)(Leaf.value);
          }

          ;

          if (m instanceof Two) {
            $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
            $copy_m = m.value3;
            return;
          }

          ;

          if (m instanceof Three && m.value0 instanceof Leaf && m.value3 instanceof Leaf && m.value6 instanceof Leaf) {
            $tco_done = true;
            return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
          }

          ;

          if (m instanceof Three) {
            $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
            $copy_m = m.value6;
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [m.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_ctx, $copy_m);
        }

        ;
        return $tco_result;
      };
    };

    var maxNode = function maxNode($copy_m) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(m) {
        if (m instanceof Two && m.value3 instanceof Leaf) {
          $tco_done = true;
          return {
            key: m.value1,
            value: m.value2
          };
        }

        ;

        if (m instanceof Two) {
          $copy_m = m.value3;
          return;
        }

        ;

        if (m instanceof Three && m.value6 instanceof Leaf) {
          $tco_done = true;
          return {
            key: m.value4,
            value: m.value5
          };
        }

        ;

        if (m instanceof Three) {
          $copy_m = m.value6;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [m.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_m);
      }

      ;
      return $tco_result;
    };

    var comp = Data_Ord.compare(dictOrd);

    var down = function down($copy_ctx) {
      return function ($copy_m) {
        var $tco_var_ctx = $copy_ctx;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(ctx, m) {
          if (m instanceof Leaf) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
          }

          ;

          if (m instanceof Two) {
            var v = comp(k)(m.value1);

            if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
            }

            ;

            if (v instanceof Data_Ordering.EQ) {
              var max = maxNode(m.value0);
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
            }

            ;

            if (v instanceof Data_Ordering.LT) {
              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
              $copy_m = m.value0;
              return;
            }

            ;
            $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
            $copy_m = m.value3;
            return;
          }

          ;

          if (m instanceof Three) {
            var leaves = function () {
              if (m.value0 instanceof Leaf && m.value3 instanceof Leaf && m.value6 instanceof Leaf) {
                return true;
              }

              ;
              return false;
            }();

            var v = comp(k)(m.value4);
            var v3 = comp(k)(m.value1);

            if (leaves && v3 instanceof Data_Ordering.EQ) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
            }

            ;

            if (leaves && v instanceof Data_Ordering.EQ) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
            }

            ;

            if (v3 instanceof Data_Ordering.EQ) {
              var max = maxNode(m.value0);
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
            }

            ;

            if (v instanceof Data_Ordering.EQ) {
              var max = maxNode(m.value3);
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
            }

            ;

            if (v3 instanceof Data_Ordering.LT) {
              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
              $copy_m = m.value0;
              return;
            }

            ;

            if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
              $copy_m = m.value3;
              return;
            }

            ;
            $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
            $copy_m = m.value6;
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [m.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_ctx, $copy_m);
        }

        ;
        return $tco_result;
      };
    };

    return down(Data_List_Types.Nil.value);
  };
};

var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (m) {
      return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
    };
  };
}, function (f) {
  return function (z) {
    return function (m) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
    };
  };
}, function (f) {
  return function (z) {
    return function (m) {
      return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
    };
  };
});
var traversableMap = new Data_Traversable.Traversable(function () {
  return foldableMap;
}, function () {
  return functorMap;
}, function (dictApplicative) {
  return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      if (v instanceof Leaf) {
        return Control_Applicative.pure(dictApplicative)(Leaf.value);
      }

      ;

      if (v instanceof Two) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
      }

      ;

      if (v instanceof Three) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 119, column 1 - line 134, column 31): " + [f.constructor.name, v.constructor.name]);
    };
  };
});

var foldSubmap = function foldSubmap(dictOrd) {
  return function (dictMonoid) {
    return function (kmin) {
      return function (kmax) {
        return function (f) {
          var tooSmall = function () {
            if (kmin instanceof Data_Maybe.Just) {
              return function (k) {
                return Data_Ord.lessThan(dictOrd)(k)(kmin.value0);
              };
            }

            ;

            if (kmin instanceof Data_Maybe.Nothing) {
              return Data_Function["const"](false);
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 319, column 7 - line 323, column 22): " + [kmin.constructor.name]);
          }();

          var tooLarge = function () {
            if (kmax instanceof Data_Maybe.Just) {
              return function (k) {
                return Data_Ord.greaterThan(dictOrd)(k)(kmax.value0);
              };
            }

            ;

            if (kmax instanceof Data_Maybe.Nothing) {
              return Data_Function["const"](false);
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 326, column 7 - line 330, column 22): " + [kmax.constructor.name]);
          }();

          var inBounds = function () {
            if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Just) {
              return function (k) {
                return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k) && Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
              };
            }

            ;

            if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Nothing) {
              return function (k) {
                return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k);
              };
            }

            ;

            if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Just) {
              return function (k) {
                return Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
              };
            }

            ;

            if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Nothing) {
              return Data_Function["const"](true);
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 333, column 7 - line 341, column 21): " + [kmin.constructor.name, kmax.constructor.name]);
          }();

          var go = function go(v) {
            if (v instanceof Leaf) {
              return Data_Monoid.mempty(dictMonoid);
            }

            ;

            if (v instanceof Two) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $633 = tooSmall(v.value1);

                if ($633) {
                  return Data_Monoid.mempty(dictMonoid);
                }

                ;
                return go(v.value0);
              }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $634 = inBounds(v.value1);

                if ($634) {
                  return f(v.value1)(v.value2);
                }

                ;
                return Data_Monoid.mempty(dictMonoid);
              }())(function () {
                var $635 = tooLarge(v.value1);

                if ($635) {
                  return Data_Monoid.mempty(dictMonoid);
                }

                ;
                return go(v.value3);
              }()));
            }

            ;

            if (v instanceof Three) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $640 = tooSmall(v.value1);

                if ($640) {
                  return Data_Monoid.mempty(dictMonoid);
                }

                ;
                return go(v.value0);
              }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $641 = inBounds(v.value1);

                if ($641) {
                  return f(v.value1)(v.value2);
                }

                ;
                return Data_Monoid.mempty(dictMonoid);
              }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $642 = tooSmall(v.value4) || tooLarge(v.value1);

                if ($642) {
                  return Data_Monoid.mempty(dictMonoid);
                }

                ;
                return go(v.value3);
              }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $643 = inBounds(v.value4);

                if ($643) {
                  return f(v.value4)(v.value5);
                }

                ;
                return Data_Monoid.mempty(dictMonoid);
              }())(function () {
                var $644 = tooLarge(v.value4);

                if ($644) {
                  return Data_Monoid.mempty(dictMonoid);
                }

                ;
                return go(v.value6);
              }()))));
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 359, column 10 - line 371, column 54): " + [v.constructor.name]);
          };

          return go;
        };
      };
    };
  };
};

var findMin = function () {
  var go = function go($copy_v) {
    return function ($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, v1) {
        if (v1 instanceof Leaf) {
          $tco_done = true;
          return v;
        }

        ;

        if (v1 instanceof Two) {
          $tco_var_v = new Data_Maybe.Just({
            key: v1.value1,
            value: v1.value2
          });
          $copy_v1 = v1.value0;
          return;
        }

        ;

        if (v1 instanceof Three) {
          $tco_var_v = new Data_Maybe.Just({
            key: v1.value1,
            value: v1.value2
          });
          $copy_v1 = v1.value0;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 297, column 5 - line 297, column 22): " + [v.constructor.name, v1.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_Maybe.Nothing.value);
}();

var lookupGT = function lookupGT(dictOrd) {
  return function (k) {
    var comp = Data_Ord.compare(dictOrd);

    var go = function go(v) {
      if (v instanceof Leaf) {
        return Data_Maybe.Nothing.value;
      }

      ;

      if (v instanceof Two) {
        var v2 = comp(k)(v.value1);

        if (v2 instanceof Data_Ordering.EQ) {
          return findMin(v.value3);
        }

        ;

        if (v2 instanceof Data_Ordering.LT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value0)));
        }

        ;

        if (v2 instanceof Data_Ordering.GT) {
          return go(v.value3);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 276, column 33 - line 279, column 21): " + [v2.constructor.name]);
      }

      ;

      if (v instanceof Three) {
        var v3 = comp(k)(v.value1);

        if (v3 instanceof Data_Ordering.EQ) {
          return findMin(new Two(v.value3, v.value4, v.value5, v.value6));
        }

        ;

        if (v3 instanceof Data_Ordering.LT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value0)));
        }

        ;

        if (v3 instanceof Data_Ordering.GT) {
          return go(new Two(v.value3, v.value4, v.value5, v.value6));
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 280, column 45 - line 283, column 37): " + [v3.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 275, column 5 - line 275, column 22): " + [v.constructor.name]);
    };

    return go;
  };
};

var findMax = function () {
  var go = function go($copy_v) {
    return function ($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, v1) {
        if (v1 instanceof Leaf) {
          $tco_done = true;
          return v;
        }

        ;

        if (v1 instanceof Two) {
          $tco_var_v = new Data_Maybe.Just({
            key: v1.value1,
            value: v1.value2
          });
          $copy_v1 = v1.value3;
          return;
        }

        ;

        if (v1 instanceof Three) {
          $tco_var_v = new Data_Maybe.Just({
            key: v1.value4,
            value: v1.value5
          });
          $copy_v1 = v1.value6;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 289, column 5 - line 289, column 22): " + [v.constructor.name, v1.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_Maybe.Nothing.value);
}();

var lookupLT = function lookupLT(dictOrd) {
  return function (k) {
    var comp = Data_Ord.compare(dictOrd);

    var go = function go(v) {
      if (v instanceof Leaf) {
        return Data_Maybe.Nothing.value;
      }

      ;

      if (v instanceof Two) {
        var v2 = comp(k)(v.value1);

        if (v2 instanceof Data_Ordering.EQ) {
          return findMax(v.value0);
        }

        ;

        if (v2 instanceof Data_Ordering.GT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value3)));
        }

        ;

        if (v2 instanceof Data_Ordering.LT) {
          return go(v.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 242, column 33 - line 245, column 20): " + [v2.constructor.name]);
      }

      ;

      if (v instanceof Three) {
        var v3 = comp(k)(v.value4);

        if (v3 instanceof Data_Ordering.EQ) {
          return findMax(new Two(v.value0, v.value1, v.value2, v.value3));
        }

        ;

        if (v3 instanceof Data_Ordering.GT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value4,
            value: v.value5
          })(go(v.value6)));
        }

        ;

        if (v3 instanceof Data_Ordering.LT) {
          return go(new Two(v.value0, v.value1, v.value2, v.value3));
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 246, column 45 - line 249, column 36): " + [v3.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 241, column 5 - line 241, column 22): " + [v.constructor.name]);
    };

    return go;
  };
};

var eqMap = function eqMap(dictEq) {
  return function (dictEq1) {
    return new Data_Eq.Eq(function (m1) {
      return function (m2) {
        return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
      };
    });
  };
};

var ordMap = function ordMap(dictOrd) {
  return function (dictOrd1) {
    return new Data_Ord.Ord(function () {
      return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
    }, function (m1) {
      return function (m2) {
        return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
      };
    });
  };
};

var eq1Map = function eq1Map(dictEq) {
  return new Data_Eq.Eq1(function (dictEq1) {
    return Data_Eq.eq(eqMap(dictEq)(dictEq1));
  });
};

var ord1Map = function ord1Map(dictOrd) {
  return new Data_Ord.Ord1(function () {
    return eq1Map(dictOrd.Eq0());
  }, function (dictOrd1) {
    return Data_Ord.compare(ordMap(dictOrd)(dictOrd1));
  });
};

var empty = Leaf.value;

var fromFoldable = function fromFoldable(dictOrd) {
  return function (dictFoldable) {
    return Data_Foldable.foldl(dictFoldable)(function (m) {
      return function (v) {
        return insert(dictOrd)(v.value0)(v.value1)(m);
      };
    })(empty);
  };
};

var filterWithKey = function filterWithKey(dictOrd) {
  return function (predicate) {
    var $758 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
    var $759 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
    var $760 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
    return function ($761) {
      return $758($759($760($761)));
    };
  };
};

var filter = function filter(dictOrd) {
  return function (predicate) {
    return filterWithKey(dictOrd)(Data_Function["const"](predicate));
  };
};

var filterKeys = function filterKeys(dictOrd) {
  return function (predicate) {
    return filterWithKey(dictOrd)(function ($762) {
      return Data_Function["const"](predicate($762));
    });
  };
};

var fromFoldableWithIndex = function fromFoldableWithIndex(dictOrd) {
  return function (dictFoldableWithIndex) {
    return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function (k) {
      return function (m) {
        return function (v) {
          return insert(dictOrd)(k)(v)(m);
        };
      };
    })(empty);
  };
};

var intersectionWith = function intersectionWith(dictOrd) {
  return function (f) {
    return function (m1) {
      return function (m2) {
        var go = function go($copy_v) {
          return function ($copy_v1) {
            return function ($copy_m) {
              var $tco_var_v = $copy_v;
              var $tco_var_v1 = $copy_v1;
              var $tco_done = false;
              var $tco_result;

              function $tco_loop(v, v1, m) {
                if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return m;
                }

                ;

                if (v1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return m;
                }

                ;

                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  var v2 = Data_Ord.compare(dictOrd)(v.value0.value0)(v1.value0.value0);

                  if (v2 instanceof Data_Ordering.LT) {
                    $tco_var_v = v.value1;
                    $tco_var_v1 = v1;
                    $copy_m = m;
                    return;
                  }

                  ;

                  if (v2 instanceof Data_Ordering.EQ) {
                    $tco_var_v = v.value1;
                    $tco_var_v1 = v1.value1;
                    $copy_m = insert(dictOrd)(v.value0.value0)(f(v.value0.value1)(v1.value0.value1))(m);
                    return;
                  }

                  ;

                  if (v2 instanceof Data_Ordering.GT) {
                    $tco_var_v = v;
                    $tco_var_v1 = v1.value1;
                    $copy_m = m;
                    return;
                  }

                  ;
                  throw new Error("Failed pattern match at Data.Map.Internal (line 641, column 5 - line 644, column 27): " + [v2.constructor.name]);
                }

                ;
                throw new Error("Failed pattern match at Data.Map.Internal (line 638, column 3 - line 638, column 17): " + [v.constructor.name, v1.constructor.name, m.constructor.name]);
              }

              ;

              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_m);
              }

              ;
              return $tco_result;
            };
          };
        };

        return go(toUnfoldable(Data_List_Types.unfoldableList)(m1))(toUnfoldable(Data_List_Types.unfoldableList)(m2))(empty);
      };
    };
  };
};

var intersection = function intersection(dictOrd) {
  return intersectionWith(dictOrd)(Data_Function["const"]);
};

var $$delete = function $$delete(dictOrd) {
  return function (k) {
    return function (m) {
      return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
    };
  };
};

var difference = function difference(dictOrd) {
  return function (m1) {
    return function (m2) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(m1)(keys(m2));
    };
  };
};

var checkValid = function checkValid(tree) {
  var allHeights = function allHeights(v) {
    if (v instanceof Leaf) {
      return Control_Applicative.pure(Data_List_Types.applicativeList)(0);
    }

    ;

    if (v instanceof Two) {
      return Data_Functor.map(Data_List_Types.functorList)(function (n) {
        return n + 1 | 0;
      })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
    }

    ;

    if (v instanceof Three) {
      return Data_Functor.map(Data_List_Types.functorList)(function (n) {
        return n + 1 | 0;
      })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
    }

    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 188, column 3 - line 188, column 36): " + [v.constructor.name]);
  };

  return Data_List.length(Data_List.nub(Data_Eq.eqInt)(allHeights(tree))) === 1;
};

var asList = Control_Category.identity(Control_Category.categoryFn);
var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableMap;
}, function (dictMonoid) {
  return function (f) {
    return function (m) {
      return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
    };
  };
}, function (f) {
  return function (z) {
    return function (m) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(function () {
        var $763 = Data_Function.flip(f);
        return function ($764) {
          return Data_Tuple.uncurry($763($764));
        };
      }())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
    };
  };
}, function (f) {
  return function (z) {
    return function (m) {
      return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
    };
  };
});

var mapMaybeWithKey = function mapMaybeWithKey(dictOrd) {
  return function (f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function (k) {
      return function (a) {
        return function (acc) {
          return Data_Maybe.maybe(acc)(function (b) {
            return insert(dictOrd)(k)(b)(acc);
          })(f(k)(a));
        };
      };
    })(empty);
  };
};

var mapMaybe = function mapMaybe(dictOrd) {
  var $765 = mapMaybeWithKey(dictOrd);
  return function ($766) {
    return $765(Data_Function["const"]($766));
  };
};

var traversableWithIndexMap = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexMap;
}, function () {
  return functorWithIndexMap;
}, function () {
  return traversableMap;
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      if (v instanceof Leaf) {
        return Control_Applicative.pure(dictApplicative)(Leaf.value);
      }

      ;

      if (v instanceof Two) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Two.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3));
      }

      ;

      if (v instanceof Three) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Three.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value4)(v.value5)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value6));
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 136, column 1 - line 150, column 40): " + [f.constructor.name, v.constructor.name]);
    };
  };
});

var alter = function alter(dictOrd) {
  return function (f) {
    return function (k) {
      return function (m) {
        var v = f(lookup(dictOrd)(k)(m));

        if (v instanceof Data_Maybe.Nothing) {
          return $$delete(dictOrd)(k)(m);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return insert(dictOrd)(k)(v.value0)(m);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [v.constructor.name]);
      };
    };
  };
};

var fromFoldableWith = function fromFoldableWith(dictOrd) {
  return function (dictFoldable) {
    return function (f) {
      var combine = function combine(v) {
        return function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
            return Data_Maybe.Just.create(f(v)(v1.value0));
          }

          ;

          if (v1 instanceof Data_Maybe.Nothing) {
            return new Data_Maybe.Just(v);
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 566, column 3 - line 566, column 38): " + [v.constructor.name, v1.constructor.name]);
        };
      };

      return Data_Foldable.foldl(dictFoldable)(function (m) {
        return function (v) {
          return alter(dictOrd)(combine(v.value1))(v.value0)(m);
        };
      })(empty);
    };
  };
};

var insertWith = function insertWith(dictOrd) {
  return function (f) {
    return function (k) {
      return function (v) {
        return alter(dictOrd)(function () {
          var $767 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
          return function ($768) {
            return Data_Maybe.Just.create($767($768));
          };
        }())(k);
      };
    };
  };
};

var unionWith = function unionWith(dictOrd) {
  return function (f) {
    return function (m1) {
      return function (m2) {
        var go = function go(m) {
          return function (v) {
            return alter(dictOrd)(function () {
              var $769 = Data_Maybe.maybe(v.value1)(f(v.value1));
              return function ($770) {
                return Data_Maybe.Just.create($769($770));
              };
            }())(v.value0)(m);
          };
        };

        return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
      };
    };
  };
};

var union = function union(dictOrd) {
  return unionWith(dictOrd)(Data_Function["const"]);
};

var semigroupMap = function semigroupMap(dictOrd) {
  return new Data_Semigroup.Semigroup(union(dictOrd));
};

var monoidMap = function monoidMap(dictOrd) {
  return new Data_Monoid.Monoid(function () {
    return semigroupMap(dictOrd);
  }, empty);
};

var submap = function submap(dictOrd) {
  return function (kmin) {
    return function (kmax) {
      return foldSubmap(dictOrd)(monoidMap(dictOrd))(kmin)(kmax)(singleton);
    };
  };
};

var unions = function unions(dictOrd) {
  return function (dictFoldable) {
    return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
  };
};

var update = function update(dictOrd) {
  return function (f) {
    return function (k) {
      return function (m) {
        return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
      };
    };
  };
};

module.exports = {
  showTree: showTree,
  empty: empty,
  isEmpty: isEmpty,
  singleton: singleton,
  checkValid: checkValid,
  insert: insert,
  insertWith: insertWith,
  lookup: lookup,
  lookupLE: lookupLE,
  lookupLT: lookupLT,
  lookupGE: lookupGE,
  lookupGT: lookupGT,
  findMin: findMin,
  findMax: findMax,
  foldSubmap: foldSubmap,
  submap: submap,
  fromFoldable: fromFoldable,
  fromFoldableWith: fromFoldableWith,
  fromFoldableWithIndex: fromFoldableWithIndex,
  toUnfoldable: toUnfoldable,
  toUnfoldableUnordered: toUnfoldableUnordered,
  "delete": $$delete,
  pop: pop,
  member: member,
  alter: alter,
  update: update,
  keys: keys,
  values: values,
  union: union,
  unionWith: unionWith,
  unions: unions,
  intersection: intersection,
  intersectionWith: intersectionWith,
  difference: difference,
  isSubmap: isSubmap,
  size: size,
  filterWithKey: filterWithKey,
  filterKeys: filterKeys,
  filter: filter,
  mapMaybeWithKey: mapMaybeWithKey,
  mapMaybe: mapMaybe,
  eq1Map: eq1Map,
  eqMap: eqMap,
  ord1Map: ord1Map,
  ordMap: ordMap,
  showMap: showMap,
  semigroupMap: semigroupMap,
  monoidMap: monoidMap,
  functorMap: functorMap,
  functorWithIndexMap: functorWithIndexMap,
  foldableMap: foldableMap,
  foldableWithIndexMap: foldableWithIndexMap,
  traversableMap: traversableMap,
  traversableWithIndexMap: traversableWithIndexMap
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.List/index.js":"output/Data.List/index.js","../Data.List.Lazy/index.js":"output/Data.List.Lazy/index.js","../Data.List.Lazy.Types/index.js":"output/Data.List.Lazy.Types/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js"}],"output/Halogen.Data.OrdBox/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var OrdBox = function () {
  function OrdBox(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  OrdBox.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new OrdBox(value0, value1, value2);
      };
    };
  };

  return OrdBox;
}();

var unOrdBox = function unOrdBox(v) {
  return v.value2;
};

var mkOrdBox = function mkOrdBox(dictOrd) {
  return OrdBox.create(Data_Eq.eq(dictOrd.Eq0()))(Data_Ord.compare(dictOrd));
};

var eqOrdBox = new Data_Eq.Eq(function (v) {
  return function (v1) {
    return v.value0(v.value2)(v1.value2);
  };
});
var ordOrdBox = new Data_Ord.Ord(function () {
  return eqOrdBox;
}, function (v) {
  return function (v1) {
    return v.value1(v.value2)(v1.value2);
  };
});
module.exports = {
  mkOrdBox: mkOrdBox,
  unOrdBox: unOrdBox,
  eqOrdBox: eqOrdBox,
  ordOrdBox: ordOrdBox
};
},{"../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js"}],"output/Halogen.Data.Slot/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Map_Internal = require("../Data.Map.Internal/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Halogen_Data_OrdBox = require("../Halogen.Data.OrdBox/index.js");

var SlotStorage = function SlotStorage(x) {
  return x;
};

var slots = function slots(dictCons) {
  return function (dictIsSymbol) {
    return function (dictOrd) {
      return function (sym) {
        return function (v) {
          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(sym);

          var go = function go(v1) {
            return function (val) {
              if (key === v1.value0) {
                return Data_Map_Internal.singleton(Halogen_Data_OrdBox.unOrdBox(v1.value1))(val);
              }

              ;

              if (Data_Boolean.otherwise) {
                return Data_Monoid.mempty(Data_Map_Internal.monoidMap(dictOrd));
              }

              ;
              throw new Error("Failed pattern match at Halogen.Data.Slot (line 117, column 3 - line 119, column 25): " + [v1.constructor.name, val.constructor.name]);
            };
          };

          return Data_Map_Internal.foldSubmap(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(Data_Map_Internal.monoidMap(dictOrd))(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(go)(v);
        };
      };
    };
  };
};

var pop = function pop(dictCons) {
  return function (dictIsSymbol) {
    return function (dictOrd) {
      return function (sym) {
        return function (key) {
          return function (v) {
            return Data_Map_Internal.pop(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
          };
        };
      };
    };
  };
};

var lookup = function lookup(dictCons) {
  return function (dictIsSymbol) {
    return function (dictOrd) {
      return function (sym) {
        return function (key) {
          return function (v) {
            return Data_Map_Internal.lookup(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
          };
        };
      };
    };
  };
};

var insert = function insert(dictCons) {
  return function (dictIsSymbol) {
    return function (dictOrd) {
      return function (sym) {
        return function (key) {
          return function (val) {
            return function (v) {
              return Data_Map_Internal.insert(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(val)(v);
            };
          };
        };
      };
    };
  };
};

var foreachSlot = function foreachSlot(dictApplicative) {
  return function (v) {
    return function (k) {
      return Data_Foldable.traverse_(dictApplicative)(Data_Map_Internal.foldableMap)(function ($37) {
        return k($37);
      })(v);
    };
  };
};

var empty = Data_Map_Internal.empty;
module.exports = {
  empty: empty,
  lookup: lookup,
  insert: insert,
  pop: pop,
  slots: slots,
  foreachSlot: foreachSlot
};
},{"../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Map.Internal/index.js":"output/Data.Map.Internal/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Halogen.Data.OrdBox/index.js":"output/Halogen.Data.OrdBox/index.js"}],"output/Data.Functor.Contravariant/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Data_Void = require("../Data.Void/index.js");

var Contravariant = function Contravariant(cmap) {
  this.cmap = cmap;
};

var cmap = function cmap(dict) {
  return dict.cmap;
};

var cmapFlipped = function cmapFlipped(dictContravariant) {
  return function (x) {
    return function (f) {
      return cmap(dictContravariant)(f)(x);
    };
  };
};

var coerce = function coerce(dictContravariant) {
  return function (dictFunctor) {
    return function (a) {
      return Data_Functor.map(dictFunctor)(Data_Void.absurd)(cmap(dictContravariant)(Data_Void.absurd)(a));
    };
  };
};

var imapC = function imapC(dictContravariant) {
  return function (v) {
    return function (f) {
      return cmap(dictContravariant)(f);
    };
  };
};

module.exports = {
  cmap: cmap,
  Contravariant: Contravariant,
  cmapFlipped: cmapFlipped,
  coerce: coerce,
  imapC: imapC
};
},{"../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Void/index.js":"output/Data.Void/index.js"}],"output/Data.Const/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Bifoldable = require("../Data.Bifoldable/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Bitraversable = require("../Data.Bitraversable/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Contravariant = require("../Data.Functor.Contravariant/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Const = function Const(x) {
  return x;
};

var showConst = function showConst(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Const " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semiringConst = function semiringConst(dictSemiring) {
  return dictSemiring;
};

var semigroupoidConst = new Control_Semigroupoid.Semigroupoid(function (v) {
  return function (v1) {
    return v1;
  };
});

var semigroupConst = function semigroupConst(dictSemigroup) {
  return dictSemigroup;
};

var ringConst = function ringConst(dictRing) {
  return dictRing;
};

var ordConst = function ordConst(dictOrd) {
  return dictOrd;
};

var newtypeConst = new Data_Newtype.Newtype(function (n) {
  return n;
}, Const);

var monoidConst = function monoidConst(dictMonoid) {
  return dictMonoid;
};

var heytingAlgebraConst = function heytingAlgebraConst(dictHeytingAlgebra) {
  return dictHeytingAlgebra;
};

var functorConst = new Data_Functor.Functor(function (f) {
  return function (m) {
    return m;
  };
});
var functorWithIndexConst = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorConst;
}, function (v) {
  return function (v1) {
    return v1;
  };
});
var invariantConst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorConst));
var foldableConst = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (v) {
    return function (v1) {
      return Data_Monoid.mempty(dictMonoid);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      return z;
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      return z;
    };
  };
});
var foldableWithIndexConst = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableConst;
}, function (dictMonoid) {
  return function (v) {
    return function (v1) {
      return Data_Monoid.mempty(dictMonoid);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      return z;
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      return z;
    };
  };
});
var traversableConst = new Data_Traversable.Traversable(function () {
  return foldableConst;
}, function () {
  return functorConst;
}, function (dictApplicative) {
  return function (v) {
    return Control_Applicative.pure(dictApplicative)(v);
  };
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      return Control_Applicative.pure(dictApplicative)(v1);
    };
  };
});
var traversableWithIndexConst = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexConst;
}, function () {
  return functorWithIndexConst;
}, function () {
  return traversableConst;
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      return Control_Applicative.pure(dictApplicative)(v1);
    };
  };
});

var euclideanRingConst = function euclideanRingConst(dictEuclideanRing) {
  return dictEuclideanRing;
};

var eqConst = function eqConst(dictEq) {
  return dictEq;
};

var eq1Const = function eq1Const(dictEq) {
  return new Data_Eq.Eq1(function (dictEq1) {
    return Data_Eq.eq(eqConst(dictEq));
  });
};

var ord1Const = function ord1Const(dictOrd) {
  return new Data_Ord.Ord1(function () {
    return eq1Const(dictOrd.Eq0());
  }, function (dictOrd1) {
    return Data_Ord.compare(ordConst(dictOrd));
  });
};

var contravariantConst = new Data_Functor_Contravariant.Contravariant(function (v) {
  return function (v1) {
    return v1;
  };
});

var commutativeRingConst = function commutativeRingConst(dictCommutativeRing) {
  return dictCommutativeRing;
};

var boundedConst = function boundedConst(dictBounded) {
  return dictBounded;
};

var booleanAlgebraConst = function booleanAlgebraConst(dictBooleanAlgebra) {
  return dictBooleanAlgebra;
};

var bifunctorConst = new Data_Bifunctor.Bifunctor(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});
var bifoldableConst = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return function (v1) {
        return f(v1);
      };
    };
  };
}, function (f) {
  return function (v) {
    return function (z) {
      return function (v1) {
        return f(z)(v1);
      };
    };
  };
}, function (f) {
  return function (v) {
    return function (z) {
      return function (v1) {
        return f(v1)(z);
      };
    };
  };
});
var bitraversableConst = new Data_Bitraversable.Bitraversable(function () {
  return bifoldableConst;
}, function () {
  return bifunctorConst;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Const)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return function (v1) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Const)(f(v1));
      };
    };
  };
});

var applyConst = function applyConst(dictSemigroup) {
  return new Control_Apply.Apply(function () {
    return functorConst;
  }, function (v) {
    return function (v1) {
      return Data_Semigroup.append(dictSemigroup)(v)(v1);
    };
  });
};

var applicativeConst = function applicativeConst(dictMonoid) {
  return new Control_Applicative.Applicative(function () {
    return applyConst(dictMonoid.Semigroup0());
  }, function (v) {
    return Data_Monoid.mempty(dictMonoid);
  });
};

module.exports = {
  Const: Const,
  newtypeConst: newtypeConst,
  eqConst: eqConst,
  eq1Const: eq1Const,
  ordConst: ordConst,
  ord1Const: ord1Const,
  boundedConst: boundedConst,
  showConst: showConst,
  semigroupoidConst: semigroupoidConst,
  semigroupConst: semigroupConst,
  monoidConst: monoidConst,
  semiringConst: semiringConst,
  ringConst: ringConst,
  euclideanRingConst: euclideanRingConst,
  commutativeRingConst: commutativeRingConst,
  heytingAlgebraConst: heytingAlgebraConst,
  booleanAlgebraConst: booleanAlgebraConst,
  functorConst: functorConst,
  bifunctorConst: bifunctorConst,
  functorWithIndexConst: functorWithIndexConst,
  invariantConst: invariantConst,
  contravariantConst: contravariantConst,
  applyConst: applyConst,
  applicativeConst: applicativeConst,
  foldableConst: foldableConst,
  foldableWithIndexConst: foldableWithIndexConst,
  bifoldableConst: bifoldableConst,
  traversableConst: traversableConst,
  traversableWithIndexConst: traversableWithIndexConst,
  bitraversableConst: bitraversableConst
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Semigroupoid/index.js":"output/Control.Semigroupoid/index.js","../Data.Bifoldable/index.js":"output/Data.Bifoldable/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Bitraversable/index.js":"output/Data.Bitraversable/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Functor.Contravariant/index.js":"output/Data.Functor.Contravariant/index.js","../Data.Functor.Invariant/index.js":"output/Data.Functor.Invariant/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js"}],"output/Data.List.NonEmpty/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Partial_Unsafe = require("../Partial.Unsafe/index.js");

var zipWith = function zipWith(f) {
  return function (v) {
    return function (v1) {
      return new Data_NonEmpty.NonEmpty(f(v.value0)(v1.value0), Data_List.zipWith(f)(v.value1)(v1.value1));
    };
  };
};

var zipWithA = function zipWithA(dictApplicative) {
  return function (f) {
    return function (xs) {
      return function (ys) {
        return Data_Semigroup_Traversable.sequence1(Data_List_Types.traversable1NonEmptyList)(dictApplicative.Apply0())(zipWith(f)(xs)(ys));
      };
    };
  };
};

var zip = zipWith(Data_Tuple.Tuple.create);

var wrappedOperation2 = function wrappedOperation2(name) {
  return function (f) {
    return function (v) {
      return function (v1) {
        var v2 = f(new Data_List_Types.Cons(v.value0, v.value1))(new Data_List_Types.Cons(v1.value0, v1.value1));

        if (v2 instanceof Data_List_Types.Cons) {
          return new Data_NonEmpty.NonEmpty(v2.value0, v2.value1);
        }

        ;

        if (v2 instanceof Data_List_Types.Nil) {
          return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
        }

        ;
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 104, column 3 - line 106, column 81): " + [v2.constructor.name]);
      };
    };
  };
};

var wrappedOperation = function wrappedOperation(name) {
  return function (f) {
    return function (v) {
      var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));

      if (v1 instanceof Data_List_Types.Cons) {
        return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
      }

      ;

      if (v1 instanceof Data_List_Types.Nil) {
        return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
      }

      ;
      throw new Error("Failed pattern match at Data.List.NonEmpty (line 91, column 3 - line 93, column 81): " + [v1.constructor.name]);
    };
  };
};

var updateAt = function updateAt(i) {
  return function (a) {
    return function (v) {
      if (i === 0) {
        return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, v.value1));
      }

      ;

      if (Data_Boolean.otherwise) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function ($161) {
          return Data_List_Types.NonEmptyList(function (v1) {
            return new Data_NonEmpty.NonEmpty(v.value0, v1);
          }($161));
        })(Data_List.updateAt(i - 1 | 0)(a)(v.value1));
      }

      ;
      throw new Error("Failed pattern match at Data.List.NonEmpty (line 197, column 1 - line 197, column 75): " + [i.constructor.name, a.constructor.name, v.constructor.name]);
    };
  };
};

var unzip = function unzip(ts) {
  return new Data_Tuple.Tuple(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.fst)(ts), Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.snd)(ts));
};

var unsnoc = function unsnoc(v) {
  var v1 = Data_List.unsnoc(v.value1);

  if (v1 instanceof Data_Maybe.Nothing) {
    return {
      init: Data_List_Types.Nil.value,
      last: v.value0
    };
  }

  ;

  if (v1 instanceof Data_Maybe.Just) {
    return {
      init: new Data_List_Types.Cons(v.value0, v1.value0.init),
      last: v1.value0.last
    };
  }

  ;
  throw new Error("Failed pattern match at Data.List.NonEmpty (line 159, column 35 - line 161, column 50): " + [v1.constructor.name]);
};

var unionBy = function () {
  var $162 = wrappedOperation2("unionBy");
  return function ($163) {
    return $162(Data_List.unionBy($163));
  };
}();

var union = function union(dictEq) {
  return wrappedOperation2("union")(Data_List.union(dictEq));
};

var uncons = function uncons(v) {
  return {
    head: v.value0,
    tail: v.value1
  };
};

var toList = function toList(v) {
  return new Data_List_Types.Cons(v.value0, v.value1);
};

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  var $164 = Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
      return new Data_Tuple.Tuple(rec.head, rec.tail);
    })(Data_List.uncons(xs));
  });
  return function ($165) {
    return $164(toList($165));
  };
};

var tail = function tail(v) {
  return v.value1;
};

var sortBy = function () {
  var $166 = wrappedOperation("sortBy");
  return function ($167) {
    return $166(Data_List.sortBy($167));
  };
}();

var sort = function sort(dictOrd) {
  return function (xs) {
    return sortBy(Data_Ord.compare(dictOrd))(xs);
  };
};

var snoc = function snoc(v) {
  return function (y) {
    return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
  };
};

var singleton = function () {
  var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
  return function ($169) {
    return Data_List_Types.NonEmptyList($168($169));
  };
}();

var snoc$prime = function snoc$prime(v) {
  return function (y) {
    if (v instanceof Data_List_Types.Cons) {
      return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
    }

    ;

    if (v instanceof Data_List_Types.Nil) {
      return singleton(y);
    }

    ;
    throw new Error("Failed pattern match at Data.List.NonEmpty (line 139, column 1 - line 139, column 51): " + [v.constructor.name, y.constructor.name]);
  };
};

var reverse = wrappedOperation("reverse")(Data_List.reverse);

var nubBy = function () {
  var $170 = wrappedOperation("nubBy");
  return function ($171) {
    return $170(Data_List.nubBy($171));
  };
}();

var nub = function nub(dictEq) {
  return wrappedOperation("nub")(Data_List.nub(dictEq));
};

var modifyAt = function modifyAt(i) {
  return function (f) {
    return function (v) {
      if (i === 0) {
        return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(f(v.value0), v.value1));
      }

      ;

      if (Data_Boolean.otherwise) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function ($172) {
          return Data_List_Types.NonEmptyList(function (v1) {
            return new Data_NonEmpty.NonEmpty(v.value0, v1);
          }($172));
        })(Data_List.modifyAt(i - 1 | 0)(f)(v.value1));
      }

      ;
      throw new Error("Failed pattern match at Data.List.NonEmpty (line 202, column 1 - line 202, column 82): " + [i.constructor.name, f.constructor.name, v.constructor.name]);
    };
  };
};

var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexNonEmptyList);

var lift = function lift(f) {
  return function (v) {
    return f(new Data_List_Types.Cons(v.value0, v.value1));
  };
};

var mapMaybe = function mapMaybe($173) {
  return lift(Data_List.mapMaybe($173));
};

var partition = function partition($174) {
  return lift(Data_List.partition($174));
};

var span = function span($175) {
  return lift(Data_List.span($175));
};

var take = function take($176) {
  return lift(Data_List.take($176));
};

var takeWhile = function takeWhile($177) {
  return lift(Data_List.takeWhile($177));
};

var length = function length(v) {
  return 1 + Data_List.length(v.value1) | 0;
};

var last = function last(v) {
  return Data_Maybe.fromMaybe(v.value0)(Data_List.last(v.value1));
};

var intersectBy = function () {
  var $178 = wrappedOperation2("intersectBy");
  return function ($179) {
    return $178(Data_List.intersectBy($179));
  };
}();

var intersect = function intersect(dictEq) {
  return wrappedOperation2("intersect")(Data_List.intersect(dictEq));
};

var insertAt = function insertAt(i) {
  return function (a) {
    return function (v) {
      if (i === 0) {
        return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, new Data_List_Types.Cons(v.value0, v.value1)));
      }

      ;

      if (Data_Boolean.otherwise) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function ($180) {
          return Data_List_Types.NonEmptyList(function (v1) {
            return new Data_NonEmpty.NonEmpty(v.value0, v1);
          }($180));
        })(Data_List.insertAt(i - 1 | 0)(a)(v.value1));
      }

      ;
      throw new Error("Failed pattern match at Data.List.NonEmpty (line 192, column 1 - line 192, column 75): " + [i.constructor.name, a.constructor.name, v.constructor.name]);
    };
  };
};

var init = function init(v) {
  return Data_Maybe.maybe(Data_List_Types.Nil.value)(function (v1) {
    return new Data_List_Types.Cons(v.value0, v1);
  })(Data_List.init(v.value1));
};

var index = function index(v) {
  return function (i) {
    if (i === 0) {
      return new Data_Maybe.Just(v.value0);
    }

    ;

    if (Data_Boolean.otherwise) {
      return Data_List.index(v.value1)(i - 1 | 0);
    }

    ;
    throw new Error("Failed pattern match at Data.List.NonEmpty (line 166, column 1 - line 166, column 52): " + [v.constructor.name, i.constructor.name]);
  };
};

var head = function head(v) {
  return v.value0;
};

var groupBy = function () {
  var $181 = wrappedOperation("groupBy");
  return function ($182) {
    return $181(Data_List.groupBy($182));
  };
}();

var group$prime = function group$prime(dictOrd) {
  return wrappedOperation("group'")(Data_List["group'"](dictOrd));
};

var group = function group(dictEq) {
  return wrappedOperation("group")(Data_List.group(dictEq));
};

var fromList = function fromList(v) {
  if (v instanceof Data_List_Types.Nil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_List_Types.Cons) {
    return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
  }

  ;
  throw new Error("Failed pattern match at Data.List.NonEmpty (line 120, column 1 - line 120, column 57): " + [v.constructor.name]);
};

var fromFoldable = function fromFoldable(dictFoldable) {
  var $183 = Data_List.fromFoldable(dictFoldable);
  return function ($184) {
    return fromList($183($184));
  };
};

var foldM = function foldM(dictMonad) {
  return function (f) {
    return function (a) {
      return function (v) {
        return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0))(function (a$prime) {
          return Data_List.foldM(dictMonad)(f)(a$prime)(v.value1);
        });
      };
    };
  };
};

var findLastIndex = function findLastIndex(f) {
  return function (v) {
    var v1 = Data_List.findLastIndex(f)(v.value1);

    if (v1 instanceof Data_Maybe.Just) {
      return new Data_Maybe.Just(v1.value0 + 1 | 0);
    }

    ;

    if (v1 instanceof Data_Maybe.Nothing) {
      if (f(v.value0)) {
        return new Data_Maybe.Just(0);
      }

      ;

      if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
      }

      ;
    }

    ;
    throw new Error("Failed pattern match at Data.List.NonEmpty (line 186, column 3 - line 190, column 29): " + [v1.constructor.name]);
  };
};

var findIndex = function findIndex(f) {
  return function (v) {
    if (f(v.value0)) {
      return new Data_Maybe.Just(0);
    }

    ;

    if (Data_Boolean.otherwise) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
        return v1 + 1 | 0;
      })(Data_List.findIndex(f)(v.value1));
    }

    ;
    throw new Error("Failed pattern match at Data.List.NonEmpty (line 179, column 1 - line 179, column 69): " + [f.constructor.name, v.constructor.name]);
  };
};

var filterM = function filterM(dictMonad) {
  var $185 = Data_List.filterM(dictMonad);
  return function ($186) {
    return lift($185($186));
  };
};

var filter = function filter($187) {
  return lift(Data_List.filter($187));
};

var elemLastIndex = function elemLastIndex(dictEq) {
  return function (x) {
    return findLastIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var elemIndex = function elemIndex(dictEq) {
  return function (x) {
    return findIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var dropWhile = function dropWhile($188) {
  return lift(Data_List.dropWhile($188));
};

var drop = function drop($189) {
  return lift(Data_List.drop($189));
};

var cons$prime = function cons$prime(x) {
  return function (xs) {
    return new Data_NonEmpty.NonEmpty(x, xs);
  };
};

var cons = function cons(y) {
  return function (v) {
    return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
  };
};

var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindNonEmptyList));

var concat = function concat(v) {
  return Control_Bind.bind(Data_List_Types.bindNonEmptyList)(v)(Control_Category.identity(Control_Category.categoryFn));
};

var catMaybes = lift(Data_List.catMaybes);

var appendFoldable = function appendFoldable(dictFoldable) {
  return function (v) {
    return function (ys) {
      return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(Data_List.fromFoldable(dictFoldable)(ys)));
    };
  };
};

module.exports = {
  toUnfoldable: toUnfoldable,
  fromFoldable: fromFoldable,
  fromList: fromList,
  toList: toList,
  singleton: singleton,
  length: length,
  cons: cons,
  "cons'": cons$prime,
  snoc: snoc,
  "snoc'": snoc$prime,
  head: head,
  last: last,
  tail: tail,
  init: init,
  uncons: uncons,
  unsnoc: unsnoc,
  index: index,
  elemIndex: elemIndex,
  elemLastIndex: elemLastIndex,
  findIndex: findIndex,
  findLastIndex: findLastIndex,
  insertAt: insertAt,
  updateAt: updateAt,
  modifyAt: modifyAt,
  reverse: reverse,
  concat: concat,
  concatMap: concatMap,
  filter: filter,
  filterM: filterM,
  mapMaybe: mapMaybe,
  catMaybes: catMaybes,
  appendFoldable: appendFoldable,
  mapWithIndex: mapWithIndex,
  sort: sort,
  sortBy: sortBy,
  take: take,
  takeWhile: takeWhile,
  drop: drop,
  dropWhile: dropWhile,
  span: span,
  group: group,
  "group'": group$prime,
  groupBy: groupBy,
  partition: partition,
  nub: nub,
  nubBy: nubBy,
  union: union,
  unionBy: unionBy,
  intersect: intersect,
  intersectBy: intersectBy,
  zipWith: zipWith,
  zipWithA: zipWithA,
  zip: zip,
  unzip: unzip,
  foldM: foldM
};
},{"../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.List/index.js":"output/Data.List/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.NonEmpty/index.js":"output/Data.NonEmpty/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semigroup.Traversable/index.js":"output/Data.Semigroup.Traversable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js","../Partial.Unsafe/index.js":"output/Partial.Unsafe/index.js"}],"output/Control.Applicative.Free/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Const = require("../Data.Const/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Pure = function () {
  function Pure(value0) {
    this.value0 = value0;
  }

  ;

  Pure.create = function (value0) {
    return new Pure(value0);
  };

  return Pure;
}();

var Lift = function () {
  function Lift(value0) {
    this.value0 = value0;
  }

  ;

  Lift.create = function (value0) {
    return new Lift(value0);
  };

  return Lift;
}();

var Ap = function () {
  function Ap(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Ap.create = function (value0) {
    return function (value1) {
      return new Ap(value0, value1);
    };
  };

  return Ap;
}();

var mkAp = function mkAp(fba) {
  return function (fb) {
    return new Ap(fba, fb);
  };
};

var liftFreeAp = Lift.create;

var goLeft = function goLeft($copy_dictApplicative) {
  return function ($copy_fStack) {
    return function ($copy_valStack) {
      return function ($copy_nat) {
        return function ($copy_func) {
          return function ($copy_count) {
            var $tco_var_dictApplicative = $copy_dictApplicative;
            var $tco_var_fStack = $copy_fStack;
            var $tco_var_valStack = $copy_valStack;
            var $tco_var_nat = $copy_nat;
            var $tco_var_func = $copy_func;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(dictApplicative, fStack, valStack, nat, func, count) {
              if (func instanceof Pure) {
                $tco_done = true;
                return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                  func: Control_Applicative.pure(dictApplicative)(func.value0),
                  count: count
                }, fStack), valStack);
              }

              ;

              if (func instanceof Lift) {
                $tco_done = true;
                return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                  func: nat(func.value0),
                  count: count
                }, fStack), valStack);
              }

              ;

              if (func instanceof Ap) {
                $tco_var_dictApplicative = dictApplicative;
                $tco_var_fStack = fStack;
                $tco_var_valStack = Data_List_NonEmpty.cons(func.value1)(valStack);
                $tco_var_nat = nat;
                $tco_var_func = func.value0;
                $copy_count = count + 1 | 0;
                return;
              }

              ;
              throw new Error("Failed pattern match at Control.Applicative.Free (line 102, column 41 - line 105, column 81): " + [func.constructor.name]);
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_valStack, $tco_var_nat, $tco_var_func, $copy_count);
            }

            ;
            return $tco_result;
          };
        };
      };
    };
  };
};

var goApply = function goApply($copy_dictApplicative) {
  return function ($copy_fStack) {
    return function ($copy_vals) {
      return function ($copy_gVal) {
        var $tco_var_dictApplicative = $copy_dictApplicative;
        var $tco_var_fStack = $copy_fStack;
        var $tco_var_vals = $copy_vals;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(dictApplicative, fStack, vals, gVal) {
          if (fStack instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return new Data_Either.Left(gVal);
          }

          ;

          if (fStack instanceof Data_List_Types.Cons) {
            var gRes = Control_Apply.apply(dictApplicative.Apply0())(fStack.value0.func)(gVal);
            var $14 = fStack.value0.count === 1;

            if ($14) {
              if (fStack.value1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return new Data_Either.Left(gRes);
              }

              ;
              $tco_var_dictApplicative = dictApplicative;
              $tco_var_fStack = fStack.value1;
              $tco_var_vals = vals;
              $copy_gVal = gRes;
              return;
            }

            ;

            if (vals instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Either.Left(gRes);
            }

            ;

            if (vals instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return Data_Either.Right.create(new Data_Tuple.Tuple(new Data_List_Types.Cons({
                func: gRes,
                count: fStack.value0.count - 1 | 0
              }, fStack.value1), new Data_NonEmpty.NonEmpty(vals.value0, vals.value1)));
            }

            ;
            throw new Error("Failed pattern match at Control.Applicative.Free (line 83, column 11 - line 88, column 50): " + [vals.constructor.name]);
          }

          ;
          throw new Error("Failed pattern match at Control.Applicative.Free (line 72, column 3 - line 88, column 50): " + [fStack.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_vals, $copy_gVal);
        }

        ;
        return $tco_result;
      };
    };
  };
};

var functorFreeAp = new Data_Functor.Functor(function (f) {
  return function (x) {
    return mkAp(new Pure(f))(x);
  };
});

var foldFreeAp = function foldFreeAp(dictApplicative) {
  return function (nat) {
    return function (z) {
      var go = function go($copy_v) {
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(v) {
          if (v.value1.value0 instanceof Pure) {
            var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(Control_Applicative.pure(dictApplicative)(v.value1.value0.value0));

            if (v1 instanceof Data_Either.Left) {
              $tco_done = true;
              return v1.value0;
            }

            ;

            if (v1 instanceof Data_Either.Right) {
              $copy_v = v1.value0;
              return;
            }

            ;
            throw new Error("Failed pattern match at Control.Applicative.Free (line 54, column 17 - line 56, column 24): " + [v1.constructor.name]);
          }

          ;

          if (v.value1.value0 instanceof Lift) {
            var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(nat(v.value1.value0.value0));

            if (v1 instanceof Data_Either.Left) {
              $tco_done = true;
              return v1.value0;
            }

            ;

            if (v1 instanceof Data_Either.Right) {
              $copy_v = v1.value0;
              return;
            }

            ;
            throw new Error("Failed pattern match at Control.Applicative.Free (line 57, column 17 - line 59, column 24): " + [v1.constructor.name]);
          }

          ;

          if (v.value1.value0 instanceof Ap) {
            var nextVals = new Data_NonEmpty.NonEmpty(v.value1.value0.value1, v.value1.value1);
            $copy_v = goLeft(dictApplicative)(v.value0)(nextVals)(nat)(v.value1.value0.value0)(1);
            return;
          }

          ;
          throw new Error("Failed pattern match at Control.Applicative.Free (line 53, column 5 - line 62, column 47): " + [v.value1.value0.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }

        ;
        return $tco_result;
      };

      return go(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_NonEmpty.singleton(z)));
    };
  };
};

var retractFreeAp = function retractFreeAp(dictApplicative) {
  return foldFreeAp(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
};

var applyFreeAp = new Control_Apply.Apply(function () {
  return functorFreeAp;
}, function (fba) {
  return function (fb) {
    return mkAp(fba)(fb);
  };
});
var applicativeFreeAp = new Control_Applicative.Applicative(function () {
  return applyFreeAp;
}, Pure.create);

var hoistFreeAp = function hoistFreeAp(f) {
  return foldFreeAp(applicativeFreeAp)(function ($37) {
    return liftFreeAp(f($37));
  });
};

var analyzeFreeAp = function analyzeFreeAp(dictMonoid) {
  return function (k) {
    var $38 = Data_Newtype.unwrap(Data_Const.newtypeConst);
    var $39 = foldFreeAp(Data_Const.applicativeConst(dictMonoid))(function ($41) {
      return Data_Const.Const(k($41));
    });
    return function ($40) {
      return $38($39($40));
    };
  };
};

module.exports = {
  liftFreeAp: liftFreeAp,
  retractFreeAp: retractFreeAp,
  foldFreeAp: foldFreeAp,
  hoistFreeAp: hoistFreeAp,
  analyzeFreeAp: analyzeFreeAp,
  functorFreeAp: functorFreeAp,
  applyFreeAp: applyFreeAp,
  applicativeFreeAp: applicativeFreeAp
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Const/index.js":"output/Data.Const/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.List.NonEmpty/index.js":"output/Data.List.NonEmpty/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.NonEmpty/index.js":"output/Data.NonEmpty/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js"}],"output/Data.CatQueue/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var CatQueue = function () {
  function CatQueue(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  CatQueue.create = function (value0) {
    return function (value1) {
      return new CatQueue(value0, value1);
    };
  };

  return CatQueue;
}();

var unsnoc = function unsnoc($copy_v) {
  var $tco_done = false;
  var $tco_result;

  function $tco_loop(v) {
    if (v.value1 instanceof Data_List_Types.Cons) {
      $tco_done = true;
      return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value1.value0, new CatQueue(v.value0, v.value1.value1)));
    }

    ;

    if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
      $tco_done = true;
      return Data_Maybe.Nothing.value;
    }

    ;

    if (v.value1 instanceof Data_List_Types.Nil) {
      $copy_v = new CatQueue(Data_List_Types.Nil.value, Data_List.reverse(v.value0));
      return;
    }

    ;
    throw new Error("Failed pattern match at Data.CatQueue (line 93, column 1 - line 93, column 63): " + [v.constructor.name]);
  }

  ;

  while (!$tco_done) {
    $tco_result = $tco_loop($copy_v);
  }

  ;
  return $tco_result;
};

var uncons = function uncons($copy_v) {
  var $tco_done = false;
  var $tco_result;

  function $tco_loop(v) {
    if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
      $tco_done = true;
      return Data_Maybe.Nothing.value;
    }

    ;

    if (v.value0 instanceof Data_List_Types.Nil) {
      $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
      return;
    }

    ;

    if (v.value0 instanceof Data_List_Types.Cons) {
      $tco_done = true;
      return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
    }

    ;
    throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [v.constructor.name]);
  }

  ;

  while (!$tco_done) {
    $tco_result = $tco_loop($copy_v);
  }

  ;
  return $tco_result;
};

var snoc = function snoc(v) {
  return function (a) {
    return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
  };
};

var showCatQueue = function showCatQueue(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(CatQueue " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value0) + (" " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value1) + ")")));
  });
};

var $$null = function $$null(v) {
  if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
    return true;
  }

  ;
  return false;
};

var length = function length(v) {
  return Data_List.length(v.value0) + Data_List.length(v.value1) | 0;
};

var functorCatQueue = new Data_Functor.Functor(function (f) {
  return function (v) {
    return new CatQueue(Data_Functor.map(Data_List_Types.functorList)(f)(v.value0), Data_Functor.map(Data_List_Types.functorList)(f)(v.value1));
  };
});
var foldableCatQueue = new Data_Foldable.Foldable(function (dictMonoid) {
  return Data_Foldable.foldMapDefaultL(foldableCatQueue)(dictMonoid);
}, function (f) {
  var go = function go($copy_acc) {
    return function ($copy_q) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, q) {
        var v = uncons(q);

        if (v instanceof Data_Maybe.Just) {
          $tco_var_acc = f(acc)(v.value0.value0);
          $copy_q = v.value0.value1;
          return;
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return acc;
        }

        ;
        throw new Error("Failed pattern match at Data.CatQueue (line 148, column 16 - line 150, column 22): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_q);
      }

      ;
      return $tco_result;
    };
  };

  return go;
}, function (f) {
  return Data_Foldable.foldrDefault(foldableCatQueue)(f);
});
var semigroupCatQueue = new Data_Semigroup.Semigroup(Data_Foldable.foldl(foldableCatQueue)(snoc));
var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
var monoidCatQueue = new Data_Monoid.Monoid(function () {
  return semigroupCatQueue;
}, empty);
var singleton = snoc(empty);

var fromFoldable = function fromFoldable(dictFoldable) {
  return function (f) {
    return Data_Foldable.foldMap(dictFoldable)(monoidCatQueue)(singleton)(f);
  };
};

var traversableCatQueue = new Data_Traversable.Traversable(function () {
  return foldableCatQueue;
}, function () {
  return functorCatQueue;
}, function (dictApplicative) {
  return Data_Traversable.sequenceDefault(traversableCatQueue)(dictApplicative);
}, function (dictApplicative) {
  return function (f) {
    var $100 = Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Foldable.foldl(foldableCatQueue)(snoc)(empty));
    var $101 = Data_Foldable.foldl(foldableCatQueue)(function (acc) {
      var $103 = Control_Apply.lift2(dictApplicative.Apply0())(snoc)(acc);
      return function ($104) {
        return $103(f($104));
      };
    })(Control_Applicative.pure(dictApplicative)(empty));
    return function ($102) {
      return $100($101($102));
    };
  };
});
var unfoldable1CatQueue = new Data_Unfoldable1.Unfoldable1(function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v.value1 instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return snoc(memo)(v.value0);
          }

          ;

          if (v.value1 instanceof Data_Maybe.Just) {
            $tco_var_source = v.value1.value0;
            $copy_memo = snoc(memo)(v.value0);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.CatQueue (line 155, column 24 - line 157, column 57): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(empty);
  };
});
var unfoldableCatQueue = new Data_Unfoldable.Unfoldable(function () {
  return unfoldable1CatQueue;
}, function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return memo;
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            $tco_var_source = v.value0.value1;
            $copy_memo = snoc(memo)(v.value0.value0);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.CatQueue (line 162, column 24 - line 164, column 57): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(empty);
  };
});

var cqEq = function cqEq(dictEq) {
  var elemEq = Data_Eq.eq(dictEq);

  var go = function go($copy_xs) {
    return function ($copy_ys) {
      var $tco_var_xs = $copy_xs;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(xs, ys) {
        var v = uncons(ys);
        var v1 = uncons(xs);

        if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just && elemEq(v1.value0.value0)(v.value0.value0)) {
          $tco_var_xs = v1.value0.value1;
          $copy_ys = v.value0.value1;
          return;
        }

        ;

        if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return true;
        }

        ;
        $tco_done = true;
        return false;
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_xs, $copy_ys);
      }

      ;
      return $tco_result;
    };
  };

  return go;
};

var eqCatQueue = function eqCatQueue(dictEq) {
  return new Data_Eq.Eq(cqEq(dictEq));
};

var cqCompare = function cqCompare(dictOrd) {
  var elemCompare = Data_Ord.compare(dictOrd);

  var go = function go($copy_xs) {
    return function ($copy_ys) {
      var $tco_var_xs = $copy_xs;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(xs, ys) {
        var v = uncons(ys);
        var v1 = uncons(xs);

        if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just) {
          var v2 = elemCompare(v1.value0.value0)(v.value0.value0);

          if (v2 instanceof Data_Ordering.EQ) {
            $tco_var_xs = v1.value0.value1;
            $copy_ys = v.value0.value1;
            return;
          }

          ;
          $tco_done = true;
          return v2;
        }

        ;

        if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return Data_Ordering.GT.value;
        }

        ;

        if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Just) {
          $tco_done = true;
          return Data_Ordering.LT.value;
        }

        ;

        if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return Data_Ordering.EQ.value;
        }

        ;
        throw new Error("Failed pattern match at Data.CatQueue (line 118, column 16 - line 125, column 30): " + [v1.constructor.name, v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_xs, $copy_ys);
      }

      ;
      return $tco_result;
    };
  };

  return go;
};

var ordCatQueue = function ordCatQueue(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqCatQueue(dictOrd.Eq0());
  }, cqCompare(dictOrd));
};

var cons = function cons(a) {
  return function (v) {
    return new CatQueue(new Data_List_Types.Cons(a, v.value0), v.value1);
  };
};

var monadCatQueue = new Control_Monad.Monad(function () {
  return applicativeCatQueue;
}, function () {
  return bindCatQueue;
});
var bindCatQueue = new Control_Bind.Bind(function () {
  return applyCatQueue;
}, Data_Function.flip(Data_Foldable.foldMap(foldableCatQueue)(monoidCatQueue)));
var applyCatQueue = new Control_Apply.Apply(function () {
  return functorCatQueue;
}, Control_Monad.ap(monadCatQueue));
var applicativeCatQueue = new Control_Applicative.Applicative(function () {
  return applyCatQueue;
}, singleton);
var altCatQueue = new Control_Alt.Alt(function () {
  return functorCatQueue;
}, Data_Semigroup.append(semigroupCatQueue));
var plusCatQueue = new Control_Plus.Plus(function () {
  return altCatQueue;
}, empty);
var alternativeCatQueue = new Control_Alternative.Alternative(function () {
  return applicativeCatQueue;
}, function () {
  return plusCatQueue;
});
var monadZeroCatQueue = new Control_MonadZero.MonadZero(function () {
  return alternativeCatQueue;
}, function () {
  return monadCatQueue;
});
var monadPlusCatQueue = new Control_MonadPlus.MonadPlus(function () {
  return monadZeroCatQueue;
});
module.exports = {
  CatQueue: CatQueue,
  empty: empty,
  "null": $$null,
  singleton: singleton,
  length: length,
  cons: cons,
  snoc: snoc,
  uncons: uncons,
  unsnoc: unsnoc,
  fromFoldable: fromFoldable,
  eqCatQueue: eqCatQueue,
  ordCatQueue: ordCatQueue,
  semigroupCatQueue: semigroupCatQueue,
  monoidCatQueue: monoidCatQueue,
  showCatQueue: showCatQueue,
  foldableCatQueue: foldableCatQueue,
  unfoldable1CatQueue: unfoldable1CatQueue,
  unfoldableCatQueue: unfoldableCatQueue,
  traversableCatQueue: traversableCatQueue,
  functorCatQueue: functorCatQueue,
  applyCatQueue: applyCatQueue,
  applicativeCatQueue: applicativeCatQueue,
  bindCatQueue: bindCatQueue,
  monadCatQueue: monadCatQueue,
  altCatQueue: altCatQueue,
  plusCatQueue: plusCatQueue,
  alternativeCatQueue: alternativeCatQueue,
  monadZeroCatQueue: monadZeroCatQueue,
  monadPlusCatQueue: monadPlusCatQueue
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.List/index.js":"output/Data.List/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"output/Data.Unfoldable1/index.js"}],"output/Data.CatList/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_CatQueue = require("../Data.CatQueue/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var CatNil = function () {
  function CatNil() {}

  ;
  CatNil.value = new CatNil();
  return CatNil;
}();

var CatCons = function () {
  function CatCons(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  CatCons.create = function (value0) {
    return function (value1) {
      return new CatCons(value0, value1);
    };
  };

  return CatCons;
}();

var showCatList = function showCatList(dictShow) {
  return new Data_Show.Show(function (v) {
    if (v instanceof CatNil) {
      return "CatNil";
    }

    ;

    if (v instanceof CatCons) {
      return "(CatList " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(Data_CatQueue.showCatQueue(showCatList(dictShow)))(v.value1) + ")")));
    }

    ;
    throw new Error("Failed pattern match at Data.CatList (line 148, column 1 - line 150, column 71): " + [v.constructor.name]);
  });
};

var $$null = function $$null(v) {
  if (v instanceof CatNil) {
    return true;
  }

  ;
  return false;
};

var link = function link(v) {
  return function (v1) {
    if (v instanceof CatNil) {
      return v1;
    }

    ;

    if (v1 instanceof CatNil) {
      return v;
    }

    ;

    if (v instanceof CatCons) {
      return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
    }

    ;
    throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [v.constructor.name, v1.constructor.name]);
  };
};

var foldr = function foldr(k) {
  return function (b) {
    return function (q) {
      var foldl = function foldl($copy_v) {
        return function ($copy_c) {
          return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_var_c = $copy_c;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(v, c, v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return c;
              }

              ;

              if (v1 instanceof Data_List_Types.Cons) {
                $tco_var_v = v;
                $tco_var_c = v(c)(v1.value0);
                $copy_v1 = v1.value1;
                return;
              }

              ;
              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [v.constructor.name, c.constructor.name, v1.constructor.name]);
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
            }

            ;
            return $tco_result;
          };
        };
      };

      var go = function go($copy_xs) {
        return function ($copy_ys) {
          var $tco_var_xs = $copy_xs;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(xs, ys) {
            var v = Data_CatQueue.uncons(xs);

            if (v instanceof Data_Maybe.Nothing) {
              $tco_done = true;
              return foldl(function (x) {
                return function (i) {
                  return i(x);
                };
              })(b)(ys);
            }

            ;

            if (v instanceof Data_Maybe.Just) {
              $tco_var_xs = v.value0.value1;
              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
              return;
            }

            ;
            throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [v.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_xs, $copy_ys);
          }

          ;
          return $tco_result;
        };
      };

      return go(q)(Data_List_Types.Nil.value);
    };
  };
};

var uncons = function uncons(v) {
  if (v instanceof CatNil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof CatCons) {
    return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, function () {
      var $44 = Data_CatQueue["null"](v.value1);

      if ($44) {
        return CatNil.value;
      }

      ;
      return foldr(link)(CatNil.value)(v.value1);
    }()));
  }

  ;
  throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [v.constructor.name]);
};

var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
  return Data_Foldable.foldMapDefaultL(foldableCatList)(dictMonoid);
}, function (f) {
  var go = function go($copy_acc) {
    return function ($copy_q) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, q) {
        var v = uncons(q);

        if (v instanceof Data_Maybe.Just) {
          $tco_var_acc = f(acc)(v.value0.value0);
          $copy_q = v.value0.value1;
          return;
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return acc;
        }

        ;
        throw new Error("Failed pattern match at Data.CatList (line 157, column 16 - line 159, column 22): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_q);
      }

      ;
      return $tco_result;
    };
  };

  return go;
}, function (f) {
  return function (s) {
    return function (l) {
      return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
    };
  };
});
var length = Data_Foldable.length(foldableCatList)(Data_Semiring.semiringInt);

var foldMap = function foldMap(dictMonoid) {
  return function (f) {
    return function (v) {
      if (v instanceof CatNil) {
        return Data_Monoid.mempty(dictMonoid);
      }

      ;

      if (v instanceof CatCons) {
        var d = function () {
          var $53 = Data_CatQueue["null"](v.value1);

          if ($53) {
            return CatNil.value;
          }

          ;
          return foldr(link)(CatNil.value)(v.value1);
        }();

        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(foldMap(dictMonoid)(f)(d));
      }

      ;
      throw new Error("Failed pattern match at Data.CatList (line 135, column 1 - line 135, column 62): " + [f.constructor.name, v.constructor.name]);
    };
  };
};

var empty = CatNil.value;
var append = link;

var cons = function cons(a) {
  return function (cat) {
    return append(new CatCons(a, Data_CatQueue.empty))(cat);
  };
};

var functorCatList = new Data_Functor.Functor(function (v) {
  return function (v1) {
    if (v1 instanceof CatNil) {
      return CatNil.value;
    }

    ;

    if (v1 instanceof CatCons) {
      var d = function () {
        var $58 = Data_CatQueue["null"](v1.value1);

        if ($58) {
          return CatNil.value;
        }

        ;
        return foldr(link)(CatNil.value)(v1.value1);
      }();

      return cons(v(v1.value0))(Data_Functor.map(functorCatList)(v)(d));
    }

    ;
    throw new Error("Failed pattern match at Data.CatList (line 185, column 1 - line 189, column 26): " + [v.constructor.name, v1.constructor.name]);
  };
});

var singleton = function singleton(a) {
  return cons(a)(CatNil.value);
};

var traversableCatList = new Data_Traversable.Traversable(function () {
  return foldableCatList;
}, function () {
  return functorCatList;
}, function (dictApplicative) {
  return function (v) {
    if (v instanceof CatNil) {
      return Control_Applicative.pure(dictApplicative)(CatNil.value);
    }

    ;

    if (v instanceof CatCons) {
      var d = function () {
        var $62 = Data_CatQueue["null"](v.value1);

        if ($62) {
          return CatNil.value;
        }

        ;
        return foldr(link)(CatNil.value)(v.value1);
      }();

      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(v.value0))(Data_Traversable.sequence(traversableCatList)(dictApplicative)(d));
    }

    ;
    throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 183, column 33): " + [v.constructor.name]);
  };
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v1 instanceof CatNil) {
        return Control_Applicative.pure(dictApplicative)(CatNil.value);
      }

      ;

      if (v1 instanceof CatCons) {
        var d = function () {
          var $67 = Data_CatQueue["null"](v1.value1);

          if ($67) {
            return CatNil.value;
          }

          ;
          return foldr(link)(CatNil.value)(v1.value1);
        }();

        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(v(v1.value0)))(Data_Traversable.traverse(traversableCatList)(dictApplicative)(v)(d));
      }

      ;
      throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 183, column 33): " + [v.constructor.name, v1.constructor.name]);
    };
  };
});
var semigroupCatList = new Data_Semigroup.Semigroup(append);
var monoidCatList = new Data_Monoid.Monoid(function () {
  return semigroupCatList;
}, CatNil.value);
var monadCatList = new Control_Monad.Monad(function () {
  return applicativeCatList;
}, function () {
  return bindCatList;
});
var bindCatList = new Control_Bind.Bind(function () {
  return applyCatList;
}, Data_Function.flip(foldMap(monoidCatList)));
var applyCatList = new Control_Apply.Apply(function () {
  return functorCatList;
}, Control_Monad.ap(monadCatList));
var applicativeCatList = new Control_Applicative.Applicative(function () {
  return applyCatList;
}, singleton);

var fromFoldable = function fromFoldable(dictFoldable) {
  return function (f) {
    return Data_Foldable.foldMap(dictFoldable)(monoidCatList)(singleton)(f);
  };
};

var snoc = function snoc(cat) {
  return function (a) {
    return append(cat)(new CatCons(a, Data_CatQueue.empty));
  };
};

var unfoldable1CatList = new Data_Unfoldable1.Unfoldable1(function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v.value1 instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return snoc(memo)(v.value0);
          }

          ;

          if (v.value1 instanceof Data_Maybe.Just) {
            $tco_var_source = v.value1.value0;
            $copy_memo = snoc(memo)(v.value0);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.CatList (line 171, column 24 - line 173, column 57): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(CatNil.value);
  };
});
var unfoldableCatList = new Data_Unfoldable.Unfoldable(function () {
  return unfoldable1CatList;
}, function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return memo;
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            $tco_var_source = v.value0.value1;
            $copy_memo = snoc(memo)(v.value0.value0);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.CatList (line 164, column 24 - line 166, column 57): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(CatNil.value);
  };
});
var altCatList = new Control_Alt.Alt(function () {
  return functorCatList;
}, append);
var plusCatList = new Control_Plus.Plus(function () {
  return altCatList;
}, empty);
var alternativeCatList = new Control_Alternative.Alternative(function () {
  return applicativeCatList;
}, function () {
  return plusCatList;
});
var monadZeroCatList = new Control_MonadZero.MonadZero(function () {
  return alternativeCatList;
}, function () {
  return monadCatList;
});
var monadPlusCatList = new Control_MonadPlus.MonadPlus(function () {
  return monadZeroCatList;
});
module.exports = {
  CatNil: CatNil,
  CatCons: CatCons,
  empty: empty,
  "null": $$null,
  singleton: singleton,
  length: length,
  append: append,
  cons: cons,
  snoc: snoc,
  uncons: uncons,
  fromFoldable: fromFoldable,
  semigroupCatList: semigroupCatList,
  monoidCatList: monoidCatList,
  showCatList: showCatList,
  foldableCatList: foldableCatList,
  unfoldableCatList: unfoldableCatList,
  unfoldable1CatList: unfoldable1CatList,
  traversableCatList: traversableCatList,
  functorCatList: functorCatList,
  applyCatList: applyCatList,
  applicativeCatList: applicativeCatList,
  bindCatList: bindCatList,
  monadCatList: monadCatList,
  altCatList: altCatList,
  plusCatList: plusCatList,
  alternativeCatList: alternativeCatList,
  monadZeroCatList: monadZeroCatList,
  monadPlusCatList: monadPlusCatList
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.CatQueue/index.js":"output/Data.CatQueue/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"output/Data.Unfoldable1/index.js"}],"output/Control.Monad.Free/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Data_CatList = require("../Data.CatList/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var ExpF = function ExpF(x) {
  return x;
};

var Free = function () {
  function Free(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Free.create = function (value0) {
    return function (value1) {
      return new Free(value0, value1);
    };
  };

  return Free;
}();

var Return = function () {
  function Return(value0) {
    this.value0 = value0;
  }

  ;

  Return.create = function (value0) {
    return new Return(value0);
  };

  return Return;
}();

var Bind = function () {
  function Bind(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Bind.create = function (value0) {
    return function (value1) {
      return new Bind(value0, value1);
    };
  };

  return Bind;
}();

var toView = function toView($copy_v) {
  var $tco_done = false;
  var $tco_result;

  function $tco_loop(v) {
    var runExpF = function runExpF(v2) {
      return v2;
    };

    var concatF = function concatF(v2) {
      return function (r) {
        return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
      };
    };

    if (v.value0 instanceof Return) {
      var v2 = Data_CatList.uncons(v.value1);

      if (v2 instanceof Data_Maybe.Nothing) {
        $tco_done = true;
        return new Return(v.value0.value0);
      }

      ;

      if (v2 instanceof Data_Maybe.Just) {
        $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
        return;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [v2.constructor.name]);
    }

    ;

    if (v.value0 instanceof Bind) {
      $tco_done = true;
      return new Bind(v.value0.value0, function (a) {
        return concatF(v.value0.value1(a))(v.value1);
      });
    }

    ;
    throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [v.value0.constructor.name]);
  }

  ;

  while (!$tco_done) {
    $tco_result = $tco_loop($copy_v);
  }

  ;
  return $tco_result;
};

var runFreeM = function runFreeM(dictFunctor) {
  return function (dictMonadRec) {
    return function (k) {
      var go = function go(f) {
        var v = toView(f);

        if (v instanceof Return) {
          return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(v.value0));
        }

        ;

        if (v instanceof Bind) {
          return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Loop.create)(k(Data_Functor.map(dictFunctor)(v.value1)(v.value0)));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 194, column 10 - line 196, column 37): " + [v.constructor.name]);
      };

      return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
    };
  };
};

var runFree = function runFree(dictFunctor) {
  return function (k) {
    var go = function go($copy_f) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(f) {
        var v = toView(f);

        if (v instanceof Return) {
          $tco_done = true;
          return v.value0;
        }

        ;

        if (v instanceof Bind) {
          $copy_f = k(Data_Functor.map(dictFunctor)(v.value1)(v.value0));
          return;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 178, column 10 - line 180, column 33): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_f);
      }

      ;
      return $tco_result;
    };

    return go;
  };
};

var resume$prime = function resume$prime(k) {
  return function (j) {
    return function (f) {
      var v = toView(f);

      if (v instanceof Return) {
        return j(v.value0);
      }

      ;

      if (v instanceof Bind) {
        return k(v.value0)(v.value1);
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [v.constructor.name]);
    };
  };
};

var resume = function resume(dictFunctor) {
  return resume$prime(function (g) {
    return function (i) {
      return new Data_Either.Left(Data_Functor.map(dictFunctor)(i)(g));
    };
  })(Data_Either.Right.create);
};

var fromView = function fromView(f) {
  return new Free(f, Data_CatList.empty);
};

var wrap = function wrap(f) {
  return fromView(new Bind(f, Unsafe_Coerce.unsafeCoerce));
};

var suspendF = function suspendF(dictApplicative) {
  return function (f) {
    return wrap(Control_Applicative.pure(dictApplicative)(f));
  };
};

var freeMonad = new Control_Monad.Monad(function () {
  return freeApplicative;
}, function () {
  return freeBind;
});
var freeFunctor = new Data_Functor.Functor(function (k) {
  return function (f) {
    return Control_Bind.bindFlipped(freeBind)(function () {
      var $120 = Control_Applicative.pure(freeApplicative);
      return function ($121) {
        return $120(k($121));
      };
    }())(f);
  };
});
var freeBind = new Control_Bind.Bind(function () {
  return freeApply;
}, function (v) {
  return function (k) {
    return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
  };
});
var freeApply = new Control_Apply.Apply(function () {
  return freeFunctor;
}, Control_Monad.ap(freeMonad));
var freeApplicative = new Control_Applicative.Applicative(function () {
  return freeApply;
}, function ($122) {
  return fromView(Return.create($122));
});

var semigroupFree = function semigroupFree(dictSemigroup) {
  return new Data_Semigroup.Semigroup(Control_Apply.lift2(freeApply)(Data_Semigroup.append(dictSemigroup)));
};

var freeMonadRec = new Control_Monad_Rec_Class.MonadRec(function () {
  return freeMonad;
}, function (k) {
  return function (a) {
    return Control_Bind.bind(freeBind)(k(a))(function (v) {
      if (v instanceof Control_Monad_Rec_Class.Loop) {
        return Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k)(v.value0);
      }

      ;

      if (v instanceof Control_Monad_Rec_Class.Done) {
        return Control_Applicative.pure(freeApplicative)(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 86, column 26 - line 88, column 21): " + [v.constructor.name]);
    });
  };
});

var liftF = function liftF(f) {
  return fromView(new Bind(f, function () {
    var $123 = Control_Applicative.pure(freeApplicative);
    return function ($124) {
      return $123($124);
    };
  }()));
};

var freeMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return liftF;
});

var monoidFree = function monoidFree(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupFree(dictMonoid.Semigroup0());
  }, Control_Applicative.pure(freeApplicative)(Data_Monoid.mempty(dictMonoid)));
};

var substFree = function substFree(k) {
  var go = function go(f) {
    var v = toView(f);

    if (v instanceof Return) {
      return Control_Applicative.pure(freeApplicative)(v.value0);
    }

    ;

    if (v instanceof Bind) {
      return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
    }

    ;
    throw new Error("Failed pattern match at Control.Monad.Free (line 168, column 10 - line 170, column 33): " + [v.constructor.name]);
  };

  return go;
};

var hoistFree = function hoistFree(k) {
  return substFree(function ($125) {
    return liftF(k($125));
  });
};

var foldableFree = function foldableFree(dictFunctor) {
  return function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
        var go = function () {
          var $126 = resume(dictFunctor);
          return function ($127) {
            return function (v) {
              if (v instanceof Data_Either.Left) {
                return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(go)(v.value0);
              }

              ;

              if (v instanceof Data_Either.Right) {
                return f(v.value0);
              }

              ;
              throw new Error("Failed pattern match at Control.Monad.Free (line 93, column 21 - line 95, column 21): " + [v.constructor.name]);
            }($126($127));
          };
        }();

        return go;
      };
    }, function (f) {
      var go = function go(r) {
        var $128 = resume(dictFunctor);
        return function ($129) {
          return function (v) {
            if (v instanceof Data_Either.Left) {
              return Data_Foldable.foldl(dictFoldable)(go)(r)(v.value0);
            }

            ;

            if (v instanceof Data_Either.Right) {
              return f(r)(v.value0);
            }

            ;
            throw new Error("Failed pattern match at Control.Monad.Free (line 98, column 23 - line 100, column 23): " + [v.constructor.name]);
          }($128($129));
        };
      };

      return go;
    }, function (f) {
      var go = function go(r) {
        var $130 = resume(dictFunctor);
        return function ($131) {
          return function (v) {
            if (v instanceof Data_Either.Left) {
              return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(go))(r)(v.value0);
            }

            ;

            if (v instanceof Data_Either.Right) {
              return f(v.value0)(r);
            }

            ;
            throw new Error("Failed pattern match at Control.Monad.Free (line 103, column 23 - line 105, column 23): " + [v.constructor.name]);
          }($130($131));
        };
      };

      return go;
    });
  };
};

var traversableFree = function traversableFree(dictTraversable) {
  return new Data_Traversable.Traversable(function () {
    return foldableFree(dictTraversable.Functor0())(dictTraversable.Foldable1());
  }, function () {
    return freeFunctor;
  }, function (dictApplicative) {
    return function (tma) {
      return Data_Traversable.traverse(traversableFree(dictTraversable))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(tma);
    };
  }, function (dictApplicative) {
    return function (f) {
      var go = function () {
        var $132 = resume(dictTraversable.Functor0());
        return function ($133) {
          return function (v) {
            if (v instanceof Data_Either.Left) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(function () {
                var $134 = Control_Bind.join(freeBind);
                return function ($135) {
                  return $134(liftF($135));
                };
              }())(Data_Traversable.traverse(dictTraversable)(dictApplicative)(go)(v.value0));
            }

            ;

            if (v instanceof Data_Either.Right) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Control_Applicative.pure(freeApplicative))(f(v.value0));
            }

            ;
            throw new Error("Failed pattern match at Control.Monad.Free (line 110, column 21 - line 112, column 30): " + [v.constructor.name]);
          }($132($133));
        };
      }();

      return go;
    };
  });
};

var foldFree = function foldFree(dictMonadRec) {
  return function (k) {
    var go = function go(f) {
      var v = toView(f);

      if (v instanceof Return) {
        return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(v.value0));
      }

      ;

      if (v instanceof Bind) {
        return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(function ($136) {
          return Control_Monad_Rec_Class.Loop.create(v.value1($136));
        })(k(v.value0));
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [v.constructor.name]);
    };

    return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
  };
};

var eqFree = function eqFree(dictFunctor) {
  return function (dictEq1) {
    return function (dictEq) {
      return new Data_Eq.Eq(function (x) {
        return function (y) {
          var v = resume(dictFunctor)(y);
          var v1 = resume(dictFunctor)(x);

          if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
            return Data_Eq.eq1(dictEq1)(eqFree(dictFunctor)(dictEq1)(dictEq))(v1.value0)(v.value0);
          }

          ;

          if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
            return Data_Eq.eq(dictEq)(v1.value0)(v.value0);
          }

          ;
          return false;
        };
      });
    };
  };
};

var ordFree = function ordFree(dictFunctor) {
  return function (dictOrd1) {
    return function (dictOrd) {
      return new Data_Ord.Ord(function () {
        return eqFree(dictFunctor)(dictOrd1.Eq10())(dictOrd.Eq0());
      }, function (x) {
        return function (y) {
          var v = resume(dictFunctor)(y);
          var v1 = resume(dictFunctor)(x);

          if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
            return Data_Ord.compare1(dictOrd1)(ordFree(dictFunctor)(dictOrd1)(dictOrd))(v1.value0)(v.value0);
          }

          ;

          if (v1 instanceof Data_Either.Left) {
            return Data_Ordering.LT.value;
          }

          ;

          if (v instanceof Data_Either.Left) {
            return Data_Ordering.GT.value;
          }

          ;

          if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
            return Data_Ord.compare(dictOrd)(v1.value0)(v.value0);
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Free (line 56, column 17 - line 60, column 36): " + [v1.constructor.name, v.constructor.name]);
        };
      });
    };
  };
};

var eq1Free = function eq1Free(dictFunctor) {
  return function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqFree(dictFunctor)(dictEq1)(dictEq));
    });
  };
};

var ord1Free = function ord1Free(dictFunctor) {
  return function (dictOrd1) {
    return function (dictOrd) {
      return new Data_Ord.Ord1(function () {
        return eq1Free(dictFunctor)(dictOrd1.Eq10());
      }, function (dictOrd2) {
        return Data_Ord.compare(ordFree(dictFunctor)(dictOrd1)(dictOrd2));
      });
    };
  };
};

module.exports = {
  suspendF: suspendF,
  wrap: wrap,
  liftF: liftF,
  hoistFree: hoistFree,
  foldFree: foldFree,
  substFree: substFree,
  runFree: runFree,
  runFreeM: runFreeM,
  resume: resume,
  "resume'": resume$prime,
  eqFree: eqFree,
  eq1Free: eq1Free,
  ordFree: ordFree,
  ord1Free: ord1Free,
  freeFunctor: freeFunctor,
  freeBind: freeBind,
  freeApplicative: freeApplicative,
  freeApply: freeApply,
  freeMonad: freeMonad,
  freeMonadTrans: freeMonadTrans,
  freeMonadRec: freeMonadRec,
  foldableFree: foldableFree,
  traversableFree: traversableFree,
  semigroupFree: semigroupFree,
  monoidFree: monoidFree
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Data.CatList/index.js":"output/Data.CatList/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Halogen.Query.ChildQuery/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var ChildQuery = function () {
  function ChildQuery(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  ChildQuery.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new ChildQuery(value0, value1, value2);
      };
    };
  };

  return ChildQuery;
}();

var unChildQueryBox = Unsafe_Coerce.unsafeCoerce;
var mkChildQueryBox = Unsafe_Coerce.unsafeCoerce;
var functorChildQuery = new Data_Functor.Functor(function (f) {
  return unChildQueryBox(function (v) {
    return mkChildQueryBox(new ChildQuery(function (dictApplicative) {
      return v.value0(dictApplicative);
    }, v.value1, function ($6) {
      return f(v.value2($6));
    }));
  });
});
module.exports = {
  ChildQuery: ChildQuery,
  mkChildQueryBox: mkChildQueryBox,
  unChildQueryBox: unChildQueryBox,
  functorChildQuery: functorChildQuery
};
},{"../Data.Functor/index.js":"output/Data.Functor/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Control.Monad.Free.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Exists = require("../Data.Exists/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Bound = function () {
  function Bound(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Bound.create = function (value0) {
    return function (value1) {
      return new Bound(value0, value1);
    };
  };

  return Bound;
}();

var FreeT = function () {
  function FreeT(value0) {
    this.value0 = value0;
  }

  ;

  FreeT.create = function (value0) {
    return new FreeT(value0);
  };

  return FreeT;
}();

var Bind = function () {
  function Bind(value0) {
    this.value0 = value0;
  }

  ;

  Bind.create = function (value0) {
    return new Bind(value0);
  };

  return Bind;
}();

var monadTransFreeT = function monadTransFreeT(dictFunctor) {
  return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (ma) {
      return new FreeT(function (v) {
        return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Either.Left.create)(ma);
      });
    };
  });
};

var freeT = FreeT.create;

var bound = function bound(m) {
  return function (f) {
    return new Bind(Data_Exists.mkExists(new Bound(m, f)));
  };
};

var functorFreeT = function functorFreeT(dictFunctor) {
  return function (dictFunctor1) {
    return new Data_Functor.Functor(function (f) {
      return function (v) {
        if (v instanceof FreeT) {
          return new FreeT(function (v1) {
            return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
          });
        }

        ;

        if (v instanceof Bind) {
          return Data_Exists.runExists(function (v1) {
            return bound(v1.value0)(function () {
              var $123 = Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f);
              return function ($124) {
                return $123(v1.value1($124));
              };
            }());
          })(v.value0);
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 59, column 1 - line 61, column 71): " + [f.constructor.name, v.constructor.name]);
      };
    });
  };
};

var bimapFreeT = function bimapFreeT(dictFunctor) {
  return function (dictFunctor1) {
    return function (nf) {
      return function (nm) {
        return function (v) {
          if (v instanceof Bind) {
            return Data_Exists.runExists(function (v1) {
              return bound(function () {
                var $125 = bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm);
                return function ($126) {
                  return $125(v1.value0($126));
                };
              }())(function () {
                var $127 = bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm);
                return function ($128) {
                  return $127(v1.value1($128));
                };
              }());
            })(v.value0);
          }

          ;

          if (v instanceof FreeT) {
            return new FreeT(function (v1) {
              return Data_Functor.map(dictFunctor1)(Data_Functor.map(Data_Either.functorEither)(function () {
                var $129 = Data_Functor.map(dictFunctor)(bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm));
                return function ($130) {
                  return nf($129($130));
                };
              }()))(nm(v.value0(Data_Unit.unit)));
            });
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 123, column 1 - line 123, column 109): " + [nf.constructor.name, nm.constructor.name, v.constructor.name]);
        };
      };
    };
  };
};

var hoistFreeT = function hoistFreeT(dictFunctor) {
  return function (dictFunctor1) {
    return bimapFreeT(dictFunctor)(dictFunctor1)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var interpret = function interpret(dictFunctor) {
  return function (dictFunctor1) {
    return function (nf) {
      return bimapFreeT(dictFunctor)(dictFunctor1)(nf)(Control_Category.identity(Control_Category.categoryFn));
    };
  };
};

var monadFreeT = function monadFreeT(dictFunctor) {
  return function (dictMonad) {
    return new Control_Monad.Monad(function () {
      return applicativeFreeT(dictFunctor)(dictMonad);
    }, function () {
      return bindFreeT(dictFunctor)(dictMonad);
    });
  };
};

var bindFreeT = function bindFreeT(dictFunctor) {
  return function (dictMonad) {
    return new Control_Bind.Bind(function () {
      return applyFreeT(dictFunctor)(dictMonad);
    }, function (v) {
      return function (f) {
        if (v instanceof Bind) {
          return Data_Exists.runExists(function (v1) {
            return bound(v1.value0)(function (x) {
              return bound(function (v2) {
                return v1.value1(x);
              })(f);
            });
          })(v.value0);
        }

        ;
        return bound(function (v1) {
          return v;
        })(f);
      };
    });
  };
};

var applyFreeT = function applyFreeT(dictFunctor) {
  return function (dictMonad) {
    return new Control_Apply.Apply(function () {
      return functorFreeT(dictFunctor)(dictMonad.Bind1().Apply0().Functor0());
    }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
  };
};

var applicativeFreeT = function applicativeFreeT(dictFunctor) {
  return function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
      return applyFreeT(dictFunctor)(dictMonad);
    }, function (a) {
      return new FreeT(function (v) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
      });
    });
  };
};

var liftFreeT = function liftFreeT(dictFunctor) {
  return function (dictMonad) {
    return function (fa) {
      return new FreeT(function (v) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
      });
    };
  };
};

var resume = function resume(dictFunctor) {
  return function (dictMonadRec) {
    var go = function go(v) {
      if (v instanceof FreeT) {
        return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
      }

      ;

      if (v instanceof Bind) {
        return Data_Exists.runExists(function (v1) {
          var v2 = v1.value0(Data_Unit.unit);

          if (v2 instanceof FreeT) {
            return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
              if (v3 instanceof Data_Either.Left) {
                return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
              }

              ;

              if (v3 instanceof Data_Either.Right) {
                return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                })(v3.value0))));
              }

              ;
              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 54, column 20 - line 56, column 67): " + [v3.constructor.name]);
            });
          }

          ;

          if (v2 instanceof Bind) {
            return Data_Exists.runExists(function (v3) {
              return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
              })));
            })(v2.value0);
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 52, column 5 - line 57, column 98): " + [v2.constructor.name]);
        })(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 49, column 3 - line 49, column 75): " + [v.constructor.name]);
    };

    return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
  };
};

var runFreeT = function runFreeT(dictFunctor) {
  return function (dictMonadRec) {
    return function (interp) {
      var go = function go(v) {
        if (v instanceof Data_Either.Left) {
          return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
        }

        ;

        if (v instanceof Data_Either.Right) {
          return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 141, column 3 - line 141, column 63): " + [v.constructor.name]);
      };

      return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped(dictMonadRec.Monad0().Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
    };
  };
};

var semigroupFreeT = function semigroupFreeT(dictFunctor) {
  return function (dictMonad) {
    return function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyFreeT(dictFunctor)(dictMonad))(Data_Semigroup.append(dictSemigroup)));
    };
  };
};

var monadAskFreeT = function monadAskFreeT(dictFunctor) {
  return function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
      return monadFreeT(dictFunctor)(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
};

var monadEffectFreeT = function monadEffectFreeT(dictFunctor) {
  return function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
      return monadFreeT(dictFunctor)(dictMonadEffect.Monad0());
    }, function () {
      var $131 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadEffect.Monad0());
      var $132 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($133) {
        return $131($132($133));
      };
    }());
  };
};

var monadAffFreeT = function monadAffFreeT(dictFunctor) {
  return function (dictMonadAff) {
    return new Effect_Aff_Class.MonadAff(function () {
      return monadEffectFreeT(dictFunctor)(dictMonadAff.MonadEffect0());
    }, function () {
      var $134 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadAff.MonadEffect0().Monad0());
      var $135 = Effect_Aff_Class.liftAff(dictMonadAff);
      return function ($136) {
        return $134($135($136));
      };
    }());
  };
};

var monadStateFreeT = function monadStateFreeT(dictFunctor) {
  return function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
      return monadFreeT(dictFunctor)(dictMonadState.Monad0());
    }, function () {
      var $137 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadState.Monad0());
      var $138 = Control_Monad_State_Class.state(dictMonadState);
      return function ($139) {
        return $137($138($139));
      };
    }());
  };
};

var monadTellFreeT = function monadTellFreeT(dictFunctor) {
  return function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
      return monadFreeT(dictFunctor)(dictMonadTell.Monad0());
    }, function () {
      var $140 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadTell.Monad0());
      var $141 = Control_Monad_Writer_Class.tell(dictMonadTell);
      return function ($142) {
        return $140($141($142));
      };
    }());
  };
};

var monadThrowFreeT = function monadThrowFreeT(dictFunctor) {
  return function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
      return monadFreeT(dictFunctor)(dictMonadThrow.Monad0());
    }, function () {
      var $143 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadThrow.Monad0());
      var $144 = Control_Monad_Error_Class.throwError(dictMonadThrow);
      return function ($145) {
        return $143($144($145));
      };
    }());
  };
};

var monadRecFreeT = function monadRecFreeT(dictFunctor) {
  return function (dictMonad) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
      return monadFreeT(dictFunctor)(dictMonad);
    }, function (f) {
      var go = function go(s) {
        return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
          if (v instanceof Control_Monad_Rec_Class.Loop) {
            return go(v.value0);
          }

          ;

          if (v instanceof Control_Monad_Rec_Class.Done) {
            return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 82, column 15 - line 84, column 25): " + [v.constructor.name]);
        });
      };

      return go;
    });
  };
};

var monoidFreeT = function monoidFreeT(dictFunctor) {
  return function (dictMonad) {
    return function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
        return semigroupFreeT(dictFunctor)(dictMonad)(dictMonoid.Semigroup0());
      }, Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(Data_Monoid.mempty(dictMonoid)));
    };
  };
};

var substFreeT = function substFreeT(dictMonad) {
  return function (dictFunctor) {
    return function (fBind) {
      return function (v) {
        if (v instanceof Bind) {
          return Data_Exists.runExists(function (v1) {
            return bound(function () {
              var $146 = substFreeT(dictMonad)(dictFunctor)(fBind);
              return function ($147) {
                return $146(v1.value0($147));
              };
            }())(function () {
              var $148 = substFreeT(dictMonad)(dictFunctor)(fBind);
              return function ($149) {
                return $148(v1.value1($149));
              };
            }());
          })(v.value0);
        }

        ;

        if (v instanceof FreeT) {
          return Control_Bind.join(bindFreeT(dictFunctor)(dictMonad))(new FreeT(function (v1) {
            return Data_Functor.mapFlipped(dictMonad.Bind1().Apply0().Functor0())(v.value0(Data_Unit.unit))(function (v2) {
              if (v2 instanceof Data_Either.Left) {
                return Data_Either.Left.create(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v2.value0));
              }

              ;

              if (v2 instanceof Data_Either.Right) {
                return Data_Either.Left.create(bound(function (v3) {
                  return fBind(v2.value0);
                })(substFreeT(dictMonad)(dictFunctor)(fBind)));
              }

              ;
              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 132, column 60 - line 134, column 69): " + [v2.constructor.name]);
            });
          }));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 130, column 1 - line 130, column 101): " + [fBind.constructor.name, v.constructor.name]);
      };
    };
  };
};

module.exports = {
  freeT: freeT,
  liftFreeT: liftFreeT,
  hoistFreeT: hoistFreeT,
  interpret: interpret,
  bimapFreeT: bimapFreeT,
  substFreeT: substFreeT,
  resume: resume,
  runFreeT: runFreeT,
  functorFreeT: functorFreeT,
  applyFreeT: applyFreeT,
  applicativeFreeT: applicativeFreeT,
  bindFreeT: bindFreeT,
  monadFreeT: monadFreeT,
  monadTransFreeT: monadTransFreeT,
  monadRecFreeT: monadRecFreeT,
  semigroupFreeT: semigroupFreeT,
  monoidFreeT: monoidFreeT,
  monadEffectFreeT: monadEffectFreeT,
  monadAffFreeT: monadAffFreeT,
  monadAskFreeT: monadAskFreeT,
  monadTellFreeT: monadTellFreeT,
  monadStateFreeT: monadStateFreeT,
  monadThrowFreeT: monadThrowFreeT
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"output/Control.Monad.Writer.Class/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Exists/index.js":"output/Data.Exists/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect.Aff.Class/index.js":"output/Effect.Aff.Class/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js"}],"output/Data.Profunctor/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Profunctor = function Profunctor(dimap) {
  this.dimap = dimap;
};

var profunctorFn = new Profunctor(function (a2b) {
  return function (c2d) {
    return function (b2c) {
      return function ($9) {
        return c2d(b2c(a2b($9)));
      };
    };
  };
});

var dimap = function dimap(dict) {
  return dict.dimap;
};

var lcmap = function lcmap(dictProfunctor) {
  return function (a2b) {
    return dimap(dictProfunctor)(a2b)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var rmap = function rmap(dictProfunctor) {
  return function (b2c) {
    return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
  };
};

var unwrapIso = function unwrapIso(dictProfunctor) {
  return function (dictNewtype) {
    return dimap(dictProfunctor)(Data_Newtype.wrap(dictNewtype))(Data_Newtype.unwrap(dictNewtype));
  };
};

var wrapIso = function wrapIso(dictProfunctor) {
  return function (dictNewtype) {
    return function (v) {
      return dimap(dictProfunctor)(Data_Newtype.unwrap(dictNewtype))(Data_Newtype.wrap(dictNewtype));
    };
  };
};

var arr = function arr(dictCategory) {
  return function (dictProfunctor) {
    return function (f) {
      return rmap(dictProfunctor)(f)(Control_Category.identity(dictCategory));
    };
  };
};

module.exports = {
  dimap: dimap,
  Profunctor: Profunctor,
  lcmap: lcmap,
  rmap: rmap,
  arr: arr,
  unwrapIso: unwrapIso,
  wrapIso: wrapIso,
  profunctorFn: profunctorFn
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js"}],"output/Control.Coroutine/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Profunctor = require("../Data.Profunctor/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Transform = function Transform(x) {
  return x;
};

var Emit = function () {
  function Emit(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Emit.create = function (value0) {
    return function (value1) {
      return new Emit(value0, value1);
    };
  };

  return Emit;
}();

var CoTransform = function () {
  function CoTransform(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  CoTransform.create = function (value0) {
    return function (value1) {
      return new CoTransform(value0, value1);
    };
  };

  return CoTransform;
}();

var Await = function Await(x) {
  return x;
};

var runProcess = function runProcess(dictMonadRec) {
  return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)(function () {
    var $176 = Control_Applicative.pure(dictMonadRec.Monad0().Applicative0());
    var $177 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
    return function ($178) {
      return $176($177($178));
    };
  }());
};

var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
  return function (g) {
    return function (v) {
      return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
    };
  };
});

var loop = function loop(dictFunctor) {
  return function (dictMonad) {
    return function (me) {
      return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free_Trans.monadRecFreeT(dictFunctor)(dictMonad))(function (v) {
        return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(dictFunctor)(dictMonad.Bind1().Apply0().Functor0()))(Data_Maybe.maybe(new Control_Monad_Rec_Class.Loop(Data_Unit.unit))(Control_Monad_Rec_Class.Done.create))(me);
      })(Data_Unit.unit);
    };
  };
};

var fuseWithL = function fuseWithL(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictFunctor2) {
      return function (dictMonadRec) {
        return function (zap) {
          return function (fs) {
            return function (gs) {
              var go = function go(v) {
                return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0)))(function (l) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))(function (r) {
                    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonadRec.Monad0()))(Data_Functor.map(dictFunctor2)(function (t) {
                      return Control_Monad_Free_Trans.freeT(function (v1) {
                        return go(t);
                      });
                    })(zap(Data_Tuple.Tuple.create)(l)(r)));
                  });
                }));
              };

              return Control_Monad_Free_Trans.freeT(function (v) {
                return go(new Data_Tuple.Tuple(fs, gs));
              });
            };
          };
        };
      };
    };
  };
};

var fuseWith = function fuseWith(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictFunctor2) {
      return function (dictMonadRec) {
        return function (dictParallel) {
          return function (zap) {
            return function (fs) {
              return function (gs) {
                var go = function go(v) {
                  return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply(dictParallel.Applicative1().Apply0())(Data_Functor.map(dictParallel.Applicative1().Apply0().Functor0())(Control_Apply.lift2(Data_Either.applyEither)(zap(Data_Tuple.Tuple.create)))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))))(function (next) {
                    if (next instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Data_Either.Left(next.value0));
                    }

                    ;

                    if (next instanceof Data_Either.Right) {
                      return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                        return Control_Monad_Free_Trans.freeT(function (v1) {
                          return go(t);
                        });
                      })(next.value0)));
                    }

                    ;
                    throw new Error("Failed pattern match at Control.Coroutine (line 79, column 5 - line 81, column 63): " + [next.constructor.name]);
                  });
                };

                return Control_Monad_Free_Trans.freeT(function (v) {
                  return go(new Data_Tuple.Tuple(fs, gs));
                });
              };
            };
          };
        };
      };
    };
  };
};

var functorAwait = new Data_Functor.Functor(Data_Profunctor.rmap(profunctorAwait));

var joinConsumers = function joinConsumers(dictMonadRec) {
  return function (dictParallel) {
    return fuseWith(functorAwait)(functorAwait)(functorAwait)(dictMonadRec)(dictParallel)(function (f) {
      return function (v) {
        return function (v1) {
          return function (v2) {
            return f(v(v2.value0))(v1(v2.value1));
          };
        };
      };
    });
  };
};

var bifunctorTransform = new Data_Bifunctor.Bifunctor(function (f) {
  return function (g) {
    return function (v) {
      var $179 = Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(f)(g);
      return function ($180) {
        return $179(v($180));
      };
    };
  };
});
var functorTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorTransform));

var composeTransformers = function composeTransformers(dictMonadRec) {
  return function (dictParallel) {
    return fuseWith(functorTransform)(functorTransform)(functorTransform)(dictMonadRec)(dictParallel)(function (f) {
      return function (v) {
        return function (v1) {
          return function (i) {
            var v2 = v(i);
            var v3 = v1(v2.value0);
            return new Data_Tuple.Tuple(v3.value0, f(v2.value1)(v3.value1));
          };
        };
      };
    });
  };
};

var transform = function transform(dictMonad) {
  return function (f) {
    return Control_Monad_Free_Trans.liftFreeT(functorTransform)(dictMonad)(function (i) {
      return new Data_Tuple.Tuple(f(i), Data_Unit.unit);
    });
  };
};

var transformConsumer = function transformConsumer(dictMonadRec) {
  return function (dictParallel) {
    return fuseWith(functorTransform)(functorAwait)(functorAwait)(dictMonadRec)(dictParallel)(function (f) {
      return function (v) {
        return function (v1) {
          return function (i) {
            var v2 = v(i);
            return f(v2.value1)(v1(v2.value0));
          };
        };
      };
    });
  };
};

var bifunctorEmit = new Data_Bifunctor.Bifunctor(function (f) {
  return function (g) {
    return function (v) {
      return new Emit(f(v.value0), g(v.value1));
    };
  };
});
var functorEmit = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorEmit));

var connect = function connect(dictMonadRec) {
  return function (dictParallel) {
    return fuseWith(functorEmit)(functorAwait)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
      return function (v) {
        return function (v1) {
          return f(v.value1)(v1(v.value0));
        };
      };
    });
  };
};

var emit = function emit(dictMonad) {
  return function (o) {
    return Control_Monad_Free_Trans.liftFreeT(functorEmit)(dictMonad)(new Emit(o, Data_Unit.unit));
  };
};

var joinProducers = function joinProducers(dictMonadRec) {
  return function (dictParallel) {
    return fuseWith(functorEmit)(functorEmit)(functorEmit)(dictMonadRec)(dictParallel)(function (f) {
      return function (v) {
        return function (v1) {
          return new Emit(new Data_Tuple.Tuple(v.value0, v1.value0), f(v.value1)(v1.value1));
        };
      };
    });
  };
};

var producer = function producer(dictMonad) {
  return function (recv) {
    return loop(functorEmit)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorEmit)(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorEmit))(dictMonad)(recv))(function (e) {
      if (e instanceof Data_Either.Left) {
        return Data_Functor.voidLeft(Control_Monad_Free_Trans.functorFreeT(functorEmit)(dictMonad.Bind1().Apply0().Functor0()))(emit(dictMonad)(e.value0))(Data_Maybe.Nothing.value);
      }

      ;

      if (e instanceof Data_Either.Right) {
        return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorEmit)(dictMonad))(new Data_Maybe.Just(e.value0));
      }

      ;
      throw new Error("Failed pattern match at Control.Coroutine (line 125, column 3 - line 127, column 29): " + [e.constructor.name]);
    }));
  };
};

var pullFrom = function pullFrom(dictMonadRec) {
  return fuseWithL(functorAwait)(functorEmit)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
    return function (v) {
      return function (v1) {
        return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(v(v1.value0))(v1.value1));
      };
    };
  });
};

var transformProducer = function transformProducer(dictMonadRec) {
  return function (dictParallel) {
    return fuseWith(functorEmit)(functorTransform)(functorEmit)(dictMonadRec)(dictParallel)(function (f) {
      return function (v) {
        return function (v1) {
          var v2 = v1(v.value0);
          return new Emit(v2.value0, f(v.value1)(v2.value1));
        };
      };
    });
  };
};

var bifunctorCoTransform = new Data_Bifunctor.Bifunctor(function (f) {
  return function (g) {
    return function (v) {
      return new CoTransform(f(v.value0), function ($181) {
        return g(v.value1($181));
      });
    };
  };
});
var functorCoTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorCoTransform));

var composeCoTransformers = function composeCoTransformers(dictMonadRec) {
  return function (dictParallel) {
    return fuseWith(functorCoTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
      return function (v) {
        return function (v1) {
          return new CoTransform(v1.value0, function (i) {
            return f(v.value1(i))(v1.value1(v.value0));
          });
        };
      };
    });
  };
};

var cotransform = function cotransform(dictMonad) {
  return function (o) {
    return Control_Monad_Free_Trans.freeT(function (v) {
      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(new CoTransform(o, Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorCoTransform)(dictMonad)))));
    });
  };
};

var fuseCoTransform = function fuseCoTransform(dictMonadRec) {
  return function (dictParallel) {
    return fuseWith(functorTransform)(functorCoTransform)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
      return function (v) {
        return function (v1) {
          var v2 = v(v1.value0);
          return f(v2.value1)(v1.value1(v2.value0));
        };
      };
    });
  };
};

var transformCoTransformL = function transformCoTransformL(dictMonadRec) {
  return function (dictParallel) {
    return fuseWith(functorTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
      return function (v) {
        return function (v1) {
          return new CoTransform(v1.value0, function (i1) {
            var v2 = v(i1);
            return f(v2.value1)(v1.value1(v2.value0));
          });
        };
      };
    });
  };
};

var transformCoTransformR = function transformCoTransformR(dictMonadRec) {
  return function (dictParallel) {
    return fuseWith(functorCoTransform)(functorTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
      return function (v) {
        return function (v1) {
          var v2 = v1(v.value0);
          return new CoTransform(v2.value0, function ($182) {
            return function (v3) {
              return f(v3)(v2.value1);
            }(v.value1($182));
          });
        };
      };
    });
  };
};

var $$await = function $$await(dictMonad) {
  return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};

var consumer = function consumer(dictMonad) {
  return function (send) {
    return loop(functorAwait)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorAwait)(dictMonad))($$await(dictMonad))(function (a) {
      return Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorAwait))(dictMonad)(send(a));
    }));
  };
};

module.exports = {
  loop: loop,
  runProcess: runProcess,
  fuseWith: fuseWith,
  fuseWithL: fuseWithL,
  Emit: Emit,
  emit: emit,
  producer: producer,
  Await: Await,
  "await": $$await,
  consumer: consumer,
  Transform: Transform,
  transform: transform,
  CoTransform: CoTransform,
  cotransform: cotransform,
  connect: connect,
  pullFrom: pullFrom,
  transformProducer: transformProducer,
  transformConsumer: transformConsumer,
  composeTransformers: composeTransformers,
  composeCoTransformers: composeCoTransformers,
  fuseCoTransform: fuseCoTransform,
  transformCoTransformL: transformCoTransformL,
  transformCoTransformR: transformCoTransformR,
  joinProducers: joinProducers,
  joinConsumers: joinConsumers,
  bifunctorEmit: bifunctorEmit,
  functorEmit: functorEmit,
  profunctorAwait: profunctorAwait,
  functorAwait: functorAwait,
  bifunctorTransform: bifunctorTransform,
  functorTransform: functorTransform,
  bifunctorCoTransform: bifunctorCoTransform,
  functorCoTransform: functorCoTransform
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Monad.Except.Trans/index.js":"output/Control.Monad.Except.Trans/index.js","../Control.Monad.Free.Trans/index.js":"output/Control.Monad.Free.Trans/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Parallel.Class/index.js":"output/Control.Parallel.Class/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Identity/index.js":"output/Data.Identity/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Profunctor/index.js":"output/Data.Profunctor/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Effect.AVar/foreign.js":[function(require,module,exports) {
/* globals exports, setTimeout */
"use strict";

var AVar = function () {
  function MutableQueue() {
    this.head = null;
    this.last = null;
    this.size = 0;
  }

  function MutableCell(queue, value) {
    this.queue = queue;
    this.value = value;
    this.next = null;
    this.prev = null;
  }

  function AVar(value) {
    this.draining = false;
    this.error = null;
    this.value = value;
    this.takes = new MutableQueue();
    this.reads = new MutableQueue();
    this.puts = new MutableQueue();
  }

  var EMPTY = {};

  function runEff(eff) {
    try {
      eff();
    } catch (error) {
      setTimeout(function () {
        throw error;
      }, 0);
    }
  }

  function putLast(queue, value) {
    var cell = new MutableCell(queue, value);

    switch (queue.size) {
      case 0:
        queue.head = cell;
        break;

      case 1:
        cell.prev = queue.head;
        queue.head.next = cell;
        queue.last = cell;
        break;

      default:
        cell.prev = queue.last;
        queue.last.next = cell;
        queue.last = cell;
    }

    queue.size++;
    return cell;
  }

  function takeLast(queue) {
    var cell;

    switch (queue.size) {
      case 0:
        return null;

      case 1:
        cell = queue.head;
        queue.head = null;
        break;

      case 2:
        cell = queue.last;
        queue.head.next = null;
        queue.last = null;
        break;

      default:
        cell = queue.last;
        queue.last = cell.prev;
        queue.last.next = null;
    }

    cell.prev = null;
    cell.queue = null;
    queue.size--;
    return cell.value;
  }

  function takeHead(queue) {
    var cell;

    switch (queue.size) {
      case 0:
        return null;

      case 1:
        cell = queue.head;
        queue.head = null;
        break;

      case 2:
        cell = queue.head;
        queue.last.prev = null;
        queue.head = queue.last;
        queue.last = null;
        break;

      default:
        cell = queue.head;
        queue.head = cell.next;
        queue.head.prev = null;
    }

    cell.next = null;
    cell.queue = null;
    queue.size--;
    return cell.value;
  }

  function deleteCell(cell) {
    if (cell.queue === null) {
      return;
    }

    if (cell.queue.last === cell) {
      takeLast(cell.queue);
      return;
    }

    if (cell.queue.head === cell) {
      takeHead(cell.queue);
      return;
    }

    if (cell.prev) {
      cell.prev.next = cell.next;
    }

    if (cell.next) {
      cell.next.prev = cell.prev;
    }

    cell.queue.size--;
    cell.queue = null;
    cell.value = null;
    cell.next = null;
    cell.prev = null;
  }

  function drainVar(util, avar) {
    if (avar.draining) {
      return;
    }

    var ps = avar.puts;
    var ts = avar.takes;
    var rs = avar.reads;
    var p, r, t, value, rsize;
    avar.draining = true;

    while (1) {
      // eslint-disable-line no-constant-condition
      p = null;
      r = null;
      t = null;
      value = avar.value;
      rsize = rs.size;

      if (avar.error !== null) {
        value = util.left(avar.error);

        while (p = takeHead(ps)) {
          // eslint-disable-line no-cond-assign
          runEff(p.cb(value));
        }

        while (r = takeHead(rs)) {
          // eslint-disable-line no-cond-assign
          runEff(r(value));
        }

        while (t = takeHead(ts)) {
          // eslint-disable-line no-cond-assign
          runEff(t(value));
        }

        break;
      } // Process the next put. We do not immediately invoke the callback
      // because we want to preserve ordering. If there are takes/reads
      // we want to run those first.


      if (value === EMPTY && (p = takeHead(ps))) {
        avar.value = value = p.value;
      }

      if (value !== EMPTY) {
        // We go ahead and queue up the next take for the same reasons as
        // above. Invoking the read callbacks can affect the mutable queue.
        t = takeHead(ts); // We only want to process the reads queued up before running these
        // callbacks so we guard on rsize.

        while (rsize-- && (r = takeHead(rs))) {
          runEff(r(util.right(value)));
        }

        if (t !== null) {
          avar.value = EMPTY;
          runEff(t(util.right(value)));
        }
      }

      if (p !== null) {
        runEff(p.cb(util.right(void 0)));
      } // Callbacks could have queued up more items so we need to guard on the
      // actual mutable properties.


      if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
        break;
      }
    }

    avar.draining = false;
  }

  AVar.EMPTY = EMPTY;
  AVar.putLast = putLast;
  AVar.takeLast = takeLast;
  AVar.takeHead = takeHead;
  AVar.deleteCell = deleteCell;
  AVar.drainVar = drainVar;
  return AVar;
}();

exports.empty = function () {
  return new AVar(AVar.EMPTY);
};

exports._newVar = function (value) {
  return function () {
    return new AVar(value);
  };
};

exports._killVar = function (util, error, avar) {
  return function () {
    if (avar.error === null) {
      avar.error = error;
      avar.value = AVar.EMPTY;
      AVar.drainVar(util, avar);
    }
  };
};

exports._putVar = function (util, value, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.puts, {
      cb: cb,
      value: value
    });
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._takeVar = function (util, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.takes, cb);
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._readVar = function (util, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.reads, cb);
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._tryPutVar = function (util, value, avar) {
  return function () {
    if (avar.value === AVar.EMPTY && avar.error === null) {
      avar.value = value;
      AVar.drainVar(util, avar);
      return true;
    } else {
      return false;
    }
  };
};

exports._tryTakeVar = function (util, avar) {
  return function () {
    var value = avar.value;

    if (value === AVar.EMPTY) {
      return util.nothing;
    } else {
      avar.value = AVar.EMPTY;
      AVar.drainVar(util, avar);
      return util.just(value);
    }
  };
};

exports._tryReadVar = function (util, avar) {
  return function () {
    if (avar.value === AVar.EMPTY) {
      return util.nothing;
    } else {
      return util.just(avar.value);
    }
  };
};

exports._status = function (util, avar) {
  return function () {
    if (avar.error) {
      return util.killed(avar.error);
    }

    if (avar.value === AVar.EMPTY) {
      return util.empty;
    }

    return util.filled(avar.value);
  };
};
},{}],"output/Effect.AVar/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Killed = function () {
  function Killed(value0) {
    this.value0 = value0;
  }

  ;

  Killed.create = function (value0) {
    return new Killed(value0);
  };

  return Killed;
}();

var Filled = function () {
  function Filled(value0) {
    this.value0 = value0;
  }

  ;

  Filled.create = function (value0) {
    return new Filled(value0);
  };

  return Filled;
}();

var Empty = function () {
  function Empty() {}

  ;
  Empty.value = new Empty();
  return Empty;
}();

var $$new = $foreign["_newVar"];

var isKilled = function isKilled(v) {
  if (v instanceof Killed) {
    return true;
  }

  ;
  return false;
};

var isFilled = function isFilled(v) {
  if (v instanceof Filled) {
    return true;
  }

  ;
  return false;
};

var isEmpty = function isEmpty(v) {
  if (v instanceof Empty) {
    return true;
  }

  ;
  return false;
};

var ffiUtil = {
  left: Data_Either.Left.create,
  right: Data_Either.Right.create,
  nothing: Data_Maybe.Nothing.value,
  just: Data_Maybe.Just.create,
  killed: Killed.create,
  filled: Filled.create,
  empty: Empty.value
};

var kill = function kill(err) {
  return function (avar) {
    return $foreign["_killVar"](ffiUtil, err, avar);
  };
};

var put = function put(value) {
  return function (avar) {
    return function (cb) {
      return $foreign["_putVar"](ffiUtil, value, avar, cb);
    };
  };
};

var read = function read(avar) {
  return function (cb) {
    return $foreign["_readVar"](ffiUtil, avar, cb);
  };
};

var status = function status(avar) {
  return $foreign["_status"](ffiUtil, avar);
};

var take = function take(avar) {
  return function (cb) {
    return $foreign["_takeVar"](ffiUtil, avar, cb);
  };
};

var tryPut = function tryPut(value) {
  return function (avar) {
    return $foreign["_tryPutVar"](ffiUtil, value, avar);
  };
};

var tryRead = function tryRead(avar) {
  return $foreign["_tryReadVar"](ffiUtil, avar);
};

var tryTake = function tryTake(avar) {
  return $foreign["_tryTakeVar"](ffiUtil, avar);
};

module.exports = {
  Killed: Killed,
  Filled: Filled,
  Empty: Empty,
  "new": $$new,
  take: take,
  tryTake: tryTake,
  put: put,
  tryPut: tryPut,
  read: read,
  tryRead: tryRead,
  kill: kill,
  status: status,
  isEmpty: isEmpty,
  isFilled: isFilled,
  isKilled: isKilled,
  empty: $foreign.empty
};
},{"./foreign.js":"output/Effect.AVar/foreign.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js"}],"output/Effect.Aff.AVar/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Effect_AVar = require("../Effect.AVar/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var tryTake = function () {
  var $0 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
  return function ($1) {
    return $0(Effect_AVar.tryTake($1));
  };
}();

var tryRead = function () {
  var $2 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
  return function ($3) {
    return $2(Effect_AVar.tryRead($3));
  };
}();

var tryPut = function tryPut(value) {
  var $4 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
  var $5 = Effect_AVar.tryPut(value);
  return function ($6) {
    return $4($5($6));
  };
};

var take = function take(avar) {
  return Effect_Aff.makeAff(function (k) {
    return function __do() {
      var c = Effect_AVar.take(avar)(k)();
      return Effect_Aff.effectCanceler(c);
    };
  });
};

var status = function () {
  var $7 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
  return function ($8) {
    return $7(Effect_AVar.status($8));
  };
}();

var read = function read(avar) {
  return Effect_Aff.makeAff(function (k) {
    return function __do() {
      var c = Effect_AVar.read(avar)(k)();
      return Effect_Aff.effectCanceler(c);
    };
  });
};

var put = function put(value) {
  return function (avar) {
    return Effect_Aff.makeAff(function (k) {
      return function __do() {
        var c = Effect_AVar.put(value)(avar)(k)();
        return Effect_Aff.effectCanceler(c);
      };
    });
  };
};

var $$new = function () {
  var $9 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
  return function ($10) {
    return $9(Effect_AVar["new"]($10));
  };
}();

var kill = function kill(error) {
  var $11 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
  var $12 = Effect_AVar.kill(error);
  return function ($13) {
    return $11($12($13));
  };
};

var empty = Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.empty);
module.exports = {
  "new": $$new,
  empty: empty,
  status: status,
  take: take,
  tryTake: tryTake,
  put: put,
  tryPut: tryPut,
  read: read,
  tryRead: tryRead,
  kill: kill
};
},{"../Effect.AVar/index.js":"output/Effect.AVar/index.js","../Effect.Aff/index.js":"output/Effect.Aff/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js"}],"output/Halogen.Query.EventSource/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Coroutine = require("../Control.Coroutine/index.js");

var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Profunctor = require("../Data.Profunctor/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Effect_Aff_AVar = require("../Effect.Aff.AVar/index.js");

var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Exception = require("../Effect.Exception/index.js");

var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");

var Finalizer = function Finalizer(x) {
  return x;
};

var EventSource = function EventSource(x) {
  return x;
};

var Emitter = function Emitter(x) {
  return x;
};

var semigroupFinalizer = function semigroupFinalizer(dictApply) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Control_Apply.applySecond(dictApply)(v)(v1);
    };
  });
};

var newtypeEventSource = new Data_Newtype.Newtype(function (n) {
  return n;
}, EventSource);

var monoidFinalizer = function monoidFinalizer(dictApplicative) {
  return new Data_Monoid.Monoid(function () {
    return semigroupFinalizer(dictApplicative.Apply0());
  }, Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
};

var hoistFinalizer = function hoistFinalizer(nat) {
  return function (v) {
    return nat(v);
  };
};

var hoistEmitter = function hoistEmitter(nat) {
  return function (v) {
    return function ($37) {
      return nat(v($37));
    };
  };
};

var hoist = function hoist(dictFunctor) {
  return function (nat) {
    return function (v) {
      return EventSource(Data_Functor.map(dictFunctor)(function (e) {
        return {
          producer: Control_Monad_Free_Trans.hoistFreeT(Control_Coroutine.functorEmit)(dictFunctor)(nat)(e.producer),
          finalizer: hoistFinalizer(nat)(e.finalizer)
        };
      })(nat(v)));
    };
  };
};

var functorEventSource = function functorEventSource(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return EventSource(Data_Functor.map(dictFunctor)(function (e) {
        return {
          producer: Control_Monad_Free_Trans.interpret(Control_Coroutine.functorEmit)(dictFunctor)(Data_Bifunctor.lmap(Control_Coroutine.bifunctorEmit)(f))(e.producer),
          finalizer: e.finalizer
        };
      })(v));
    };
  });
};

var finalize = function finalize(v) {
  return v;
};

var emit = function emit(v) {
  return function (a) {
    return v(new Data_Either.Left(a));
  };
};

var close = function close(v) {
  return v(new Data_Either.Right(Data_Unit.unit));
};

var affEventSource = function affEventSource(dictMonadAff) {
  return function (recv) {
    return EventSource(Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (inputVar) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (finalizeVar) {
        var producer = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorEmit)(dictMonadAff.MonadEffect0().Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorEmit))(dictMonadAff.MonadEffect0().Monad0())(Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bindFlipped(Effect_Aff.bindAff)(Data_Function.flip(Effect_Aff_AVar.put)(finalizeVar))(recv(Data_Function.flip(Effect_Aff_AVar.put)(inputVar))))))(function () {
          return Control_Coroutine.producer(dictMonadAff.MonadEffect0().Monad0())(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff_AVar.take(inputVar)));
        });
        var finalizer = Control_Bind.bind(dictMonadAff.MonadEffect0().Monad0().Bind1())(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.attempt(Effect_Aff_AVar.take(finalizeVar))))(function (v) {
          if (v instanceof Data_Either.Left) {
            return Control_Applicative.pure(dictMonadAff.MonadEffect0().Monad0().Applicative0())(Data_Unit.unit);
          }

          ;

          if (v instanceof Data_Either.Right) {
            return Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff_AVar.kill(Effect_Exception.error("finalized"))(finalizeVar))(function () {
              return finalize(v.value0);
            }));
          }

          ;
          throw new Error("Failed pattern match at Halogen.Query.EventSource (line 71, column 51 - line 75, column 21): " + [v.constructor.name]);
        });
        return Control_Applicative.pure(Effect_Aff.applicativeAff)({
          producer: producer,
          finalizer: finalizer
        });
      });
    })));
  };
};

var effectEventSource = function effectEventSource(dictMonadAff) {
  var $38 = affEventSource(dictMonadAff);
  var $39 = Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(hoistEmitter(Effect_Aff.launchAff_))(function () {
    var $41 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    var $42 = Data_Functor.map(Effect.functorEffect)(hoistFinalizer(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)));
    return function ($43) {
      return $41($42($43));
    };
  }());
  return function ($40) {
    return $38($39($40));
  };
};

var eventListenerEventSource = function eventListenerEventSource(dictMonadAff) {
  return function (eventType) {
    return function (target) {
      return function (f) {
        return effectEventSource(dictMonadAff)(function (emitter) {
          return function __do() {
            var listener = Web_Event_EventTarget.eventListener(function () {
              var $44 = Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(emit(emitter));
              return function ($45) {
                return $44(f($45));
              };
            }())();
            Web_Event_EventTarget.addEventListener(eventType)(listener)(false)(target)();
            return Web_Event_EventTarget.removeEventListener(eventType)(listener)(false)(target);
          };
        });
      };
    };
  };
};

module.exports = {
  EventSource: EventSource,
  hoist: hoist,
  affEventSource: affEventSource,
  effectEventSource: effectEventSource,
  eventListenerEventSource: eventListenerEventSource,
  Emitter: Emitter,
  emit: emit,
  close: close,
  hoistEmitter: hoistEmitter,
  Finalizer: Finalizer,
  finalize: finalize,
  hoistFinalizer: hoistFinalizer,
  newtypeEventSource: newtypeEventSource,
  functorEventSource: functorEventSource,
  semigroupFinalizer: semigroupFinalizer,
  monoidFinalizer: monoidFinalizer
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Coroutine/index.js":"output/Control.Coroutine/index.js","../Control.Monad.Free.Trans/index.js":"output/Control.Monad.Free.Trans/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Profunctor/index.js":"output/Data.Profunctor/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect/index.js":"output/Effect/index.js","../Effect.Aff/index.js":"output/Effect.Aff/index.js","../Effect.Aff.AVar/index.js":"output/Effect.Aff.AVar/index.js","../Effect.Aff.Class/index.js":"output/Effect.Aff.Class/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js","../Effect.Exception/index.js":"output/Effect.Exception/index.js","../Web.Event.EventTarget/index.js":"output/Web.Event.EventTarget/index.js"}],"output/Halogen.Query.HalogenM/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Applicative_Free = require("../Control.Applicative.Free/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Free = require("../Control.Monad.Free/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Map_Internal = require("../Data.Map.Internal/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");

var Halogen_Query_ChildQuery = require("../Halogen.Query.ChildQuery/index.js");

var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");

var SubscriptionId = function SubscriptionId(x) {
  return x;
};

var ForkId = function ForkId(x) {
  return x;
};

var State = function () {
  function State(value0) {
    this.value0 = value0;
  }

  ;

  State.create = function (value0) {
    return new State(value0);
  };

  return State;
}();

var Subscribe = function () {
  function Subscribe(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Subscribe.create = function (value0) {
    return function (value1) {
      return new Subscribe(value0, value1);
    };
  };

  return Subscribe;
}();

var Unsubscribe = function () {
  function Unsubscribe(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Unsubscribe.create = function (value0) {
    return function (value1) {
      return new Unsubscribe(value0, value1);
    };
  };

  return Unsubscribe;
}();

var Lift = function () {
  function Lift(value0) {
    this.value0 = value0;
  }

  ;

  Lift.create = function (value0) {
    return new Lift(value0);
  };

  return Lift;
}();

var ChildQuery = function () {
  function ChildQuery(value0) {
    this.value0 = value0;
  }

  ;

  ChildQuery.create = function (value0) {
    return new ChildQuery(value0);
  };

  return ChildQuery;
}();

var Raise = function () {
  function Raise(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Raise.create = function (value0) {
    return function (value1) {
      return new Raise(value0, value1);
    };
  };

  return Raise;
}();

var Par = function () {
  function Par(value0) {
    this.value0 = value0;
  }

  ;

  Par.create = function (value0) {
    return new Par(value0);
  };

  return Par;
}();

var Fork = function () {
  function Fork(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Fork.create = function (value0) {
    return function (value1) {
      return new Fork(value0, value1);
    };
  };

  return Fork;
}();

var Kill = function () {
  function Kill(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Kill.create = function (value0) {
    return function (value1) {
      return new Kill(value0, value1);
    };
  };

  return Kill;
}();

var GetRef = function () {
  function GetRef(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  GetRef.create = function (value0) {
    return function (value1) {
      return new GetRef(value0, value1);
    };
  };

  return GetRef;
}();

var HalogenAp = function HalogenAp(x) {
  return x;
};

var HalogenM = function HalogenM(x) {
  return x;
};

var unsubscribe = function unsubscribe(sid) {
  return HalogenM(Control_Monad_Free.liftF(new Unsubscribe(sid, Data_Unit.unit)));
};

var subscribe$prime = function subscribe$prime(esc) {
  return HalogenM(Control_Monad_Free.liftF(new Subscribe(esc, Data_Function["const"](Data_Unit.unit))));
};

var subscribe = function subscribe(es) {
  return HalogenM(Control_Monad_Free.liftF(new Subscribe(function (v) {
    return es;
  }, Control_Category.identity(Control_Category.categoryFn))));
};

var semigroupHalogenM = function semigroupHalogenM(dictSemigroup) {
  return Control_Monad_Free.semigroupFree(dictSemigroup);
};

var raise = function raise(o) {
  return HalogenM(Control_Monad_Free.liftF(new Raise(o, Data_Unit.unit)));
};

var queryAll = function queryAll(dictCons) {
  return function (dictIsSymbol) {
    return function (dictOrd) {
      return function (label) {
        return function (q) {
          var catMapMaybes = function catMapMaybes(dictOrd1) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_Map_Internal.foldableWithIndexMap)(function (k) {
              return function (v) {
                return function (acc) {
                  return Data_Maybe.maybe(acc)(Data_Function.flip(Data_Map_Internal.insert(dictOrd1)(k))(acc))(v);
                };
              };
            })(Data_Map_Internal.empty);
          };

          return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
            return function (k) {
              var $131 = Data_Functor.map(dictApplicative.Apply0().Functor0())(catMapMaybes(dictOrd));
              var $132 = Data_Traversable.traverse(Data_Map_Internal.traversableMap)(dictApplicative)(k);
              var $133 = Halogen_Data_Slot.slots()(dictIsSymbol)(dictOrd)(label);
              return function ($134) {
                return $131($132($133($134)));
              };
            };
          }, q, Control_Category.identity(Control_Category.categoryFn))))));
        };
      };
    };
  };
};

var query = function query(dictCons) {
  return function (dictIsSymbol) {
    return function (dictOrd) {
      return function (label) {
        return function (p) {
          return function (q) {
            return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
              return function (k) {
                var $135 = Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value))(k);
                var $136 = Halogen_Data_Slot.lookup()(dictIsSymbol)(dictOrd)(label)(p);
                return function ($137) {
                  return $135($136($137));
                };
              };
            }, q, Control_Category.identity(Control_Category.categoryFn))))));
          };
        };
      };
    };
  };
};

var ordSubscriptionId = Data_Ord.ordInt;
var ordForkId = Data_Ord.ordInt;
var newtypeHalogenAp = new Data_Newtype.Newtype(function (n) {
  return n;
}, HalogenAp);

var monoidHalogenM = function monoidHalogenM(dictMonoid) {
  return Control_Monad_Free.monoidFree(dictMonoid);
};

var monadTransHalogenM = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return function ($138) {
    return HalogenM(Control_Monad_Free.liftF(Lift.create($138)));
  };
});
var monadHalogenM = Control_Monad_Free.freeMonad;
var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
  return monadHalogenM;
}, function ($139) {
  return HalogenM(Control_Monad_Free.liftF(State.create($139)));
});

var monadTellHalogenM = function monadTellHalogenM(dictMonadTell) {
  return new Control_Monad_Writer_Class.MonadTell(function () {
    return monadHalogenM;
  }, function () {
    var $140 = Control_Monad_Writer_Class.tell(dictMonadTell);
    return function ($141) {
      return HalogenM(Control_Monad_Free.liftF(Lift.create($140($141))));
    };
  }());
};

var monadThrowHalogenM = function monadThrowHalogenM(dictMonadThrow) {
  return new Control_Monad_Error_Class.MonadThrow(function () {
    return monadHalogenM;
  }, function () {
    var $142 = Control_Monad_Error_Class.throwError(dictMonadThrow);
    return function ($143) {
      return HalogenM(Control_Monad_Free.liftF(Lift.create($142($143))));
    };
  }());
};

var monadEffectHalogenM = function monadEffectHalogenM(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadHalogenM;
  }, function () {
    var $144 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($145) {
      return HalogenM(Control_Monad_Free.liftF(Lift.create($144($145))));
    };
  }());
};

var monadAskHalogenM = function monadAskHalogenM(dictMonadAsk) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadHalogenM;
  }, HalogenM(Control_Monad_Free.liftF(new Lift(Control_Monad_Reader_Class.ask(dictMonadAsk)))));
};

var monadAffHalogenM = function monadAffHalogenM(dictMonadAff) {
  return new Effect_Aff_Class.MonadAff(function () {
    return monadEffectHalogenM(dictMonadAff.MonadEffect0());
  }, function () {
    var $146 = Effect_Aff_Class.liftAff(dictMonadAff);
    return function ($147) {
      return HalogenM(Control_Monad_Free.liftF(Lift.create($146($147))));
    };
  }());
};

var mapOutput = function mapOutput(f) {
  return function (v) {
    var go = function go(v1) {
      if (v1 instanceof State) {
        return new State(v1.value0);
      }

      ;

      if (v1 instanceof Subscribe) {
        return new Subscribe(v1.value0, v1.value1);
      }

      ;

      if (v1 instanceof Unsubscribe) {
        return new Unsubscribe(v1.value0, v1.value1);
      }

      ;

      if (v1 instanceof Lift) {
        return new Lift(v1.value0);
      }

      ;

      if (v1 instanceof ChildQuery) {
        return new ChildQuery(v1.value0);
      }

      ;

      if (v1 instanceof Raise) {
        return new Raise(f(v1.value0), v1.value1);
      }

      ;

      if (v1 instanceof Par) {
        return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(mapOutput(f)))(v1.value0));
      }

      ;

      if (v1 instanceof Fork) {
        return new Fork(mapOutput(f)(v1.value0), v1.value1);
      }

      ;

      if (v1 instanceof Kill) {
        return new Kill(v1.value0, v1.value1);
      }

      ;

      if (v1 instanceof GetRef) {
        return new GetRef(v1.value0, v1.value1);
      }

      ;
      throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 278, column 8 - line 288, column 29): " + [v1.constructor.name]);
    };

    return Control_Monad_Free.hoistFree(go)(v);
  };
};

var mapAction = function mapAction(dictFunctor) {
  return function (f) {
    return function (v) {
      var go = function go(v1) {
        if (v1 instanceof State) {
          return new State(v1.value0);
        }

        ;

        if (v1 instanceof Subscribe) {
          return new Subscribe(function () {
            var $148 = Data_Functor.map(Halogen_Query_EventSource.functorEventSource(dictFunctor))(f);
            return function ($149) {
              return $148(v1.value0($149));
            };
          }(), v1.value1);
        }

        ;

        if (v1 instanceof Unsubscribe) {
          return new Unsubscribe(v1.value0, v1.value1);
        }

        ;

        if (v1 instanceof Lift) {
          return new Lift(v1.value0);
        }

        ;

        if (v1 instanceof ChildQuery) {
          return new ChildQuery(v1.value0);
        }

        ;

        if (v1 instanceof Raise) {
          return new Raise(v1.value0, v1.value1);
        }

        ;

        if (v1 instanceof Par) {
          return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(mapAction(dictFunctor)(f)))(v1.value0));
        }

        ;

        if (v1 instanceof Fork) {
          return new Fork(mapAction(dictFunctor)(f)(v1.value0), v1.value1);
        }

        ;

        if (v1 instanceof Kill) {
          return new Kill(v1.value0, v1.value1);
        }

        ;

        if (v1 instanceof GetRef) {
          return new GetRef(v1.value0, v1.value1);
        }

        ;
        throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 258, column 8 - line 268, column 29): " + [v1.constructor.name]);
      };

      return Control_Monad_Free.hoistFree(go)(v);
    };
  };
};

var kill = function kill(fid) {
  return HalogenM(Control_Monad_Free.liftF(new Kill(fid, Data_Unit.unit)));
};

var imapState = function imapState(f) {
  return function (f$prime) {
    return function (v) {
      var go = function go(v1) {
        if (v1 instanceof State) {
          return new State(function () {
            var $150 = Data_Functor.map(Data_Tuple.functorTuple)(f);
            return function ($151) {
              return $150(v1.value0(f$prime($151)));
            };
          }());
        }

        ;

        if (v1 instanceof Subscribe) {
          return new Subscribe(v1.value0, v1.value1);
        }

        ;

        if (v1 instanceof Unsubscribe) {
          return new Unsubscribe(v1.value0, v1.value1);
        }

        ;

        if (v1 instanceof Lift) {
          return new Lift(v1.value0);
        }

        ;

        if (v1 instanceof ChildQuery) {
          return new ChildQuery(v1.value0);
        }

        ;

        if (v1 instanceof Raise) {
          return new Raise(v1.value0, v1.value1);
        }

        ;

        if (v1 instanceof Par) {
          return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(imapState(f)(f$prime)))(v1.value0));
        }

        ;

        if (v1 instanceof Fork) {
          return new Fork(imapState(f)(f$prime)(v1.value0), v1.value1);
        }

        ;

        if (v1 instanceof Kill) {
          return new Kill(v1.value0, v1.value1);
        }

        ;

        if (v1 instanceof GetRef) {
          return new GetRef(v1.value0, v1.value1);
        }

        ;
        throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 237, column 8 - line 247, column 29): " + [v1.constructor.name]);
      };

      return Control_Monad_Free.hoistFree(go)(v);
    };
  };
};

var hoist = function hoist(dictFunctor) {
  return function (nat) {
    return function (v) {
      var go = function go(v1) {
        if (v1 instanceof State) {
          return new State(v1.value0);
        }

        ;

        if (v1 instanceof Subscribe) {
          return new Subscribe(function () {
            var $152 = Halogen_Query_EventSource.hoist(dictFunctor)(nat);
            return function ($153) {
              return $152(v1.value0($153));
            };
          }(), v1.value1);
        }

        ;

        if (v1 instanceof Unsubscribe) {
          return new Unsubscribe(v1.value0, v1.value1);
        }

        ;

        if (v1 instanceof Lift) {
          return new Lift(nat(v1.value0));
        }

        ;

        if (v1 instanceof ChildQuery) {
          return new ChildQuery(v1.value0);
        }

        ;

        if (v1 instanceof Raise) {
          return new Raise(v1.value0, v1.value1);
        }

        ;

        if (v1 instanceof Par) {
          return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(hoist(dictFunctor)(nat)))(v1.value0));
        }

        ;

        if (v1 instanceof Fork) {
          return new Fork(hoist(dictFunctor)(nat)(v1.value0), v1.value1);
        }

        ;

        if (v1 instanceof Kill) {
          return new Kill(v1.value0, v1.value1);
        }

        ;

        if (v1 instanceof GetRef) {
          return new GetRef(v1.value0, v1.value1);
        }

        ;
        throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 299, column 8 - line 309, column 29): " + [v1.constructor.name]);
      };

      return Control_Monad_Free.hoistFree(go)(v);
    };
  };
};

var getRef = function getRef(p) {
  return HalogenM(Control_Monad_Free.liftF(new GetRef(p, Control_Category.identity(Control_Category.categoryFn))));
};

var functorHalogenM = Control_Monad_Free.freeFunctor;
var functorHalogenAp = Control_Applicative_Free.functorFreeAp;

var functorHalogenF = function functorHalogenF(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      if (v instanceof State) {
        return new State(function () {
          var $154 = Data_Bifunctor.lmap(Data_Tuple.bifunctorTuple)(f);
          return function ($155) {
            return $154(v.value0($155));
          };
        }());
      }

      ;

      if (v instanceof Subscribe) {
        return new Subscribe(v.value0, function ($156) {
          return f(v.value1($156));
        });
      }

      ;

      if (v instanceof Unsubscribe) {
        return new Unsubscribe(v.value0, f(v.value1));
      }

      ;

      if (v instanceof Lift) {
        return new Lift(Data_Functor.map(dictFunctor)(f)(v.value0));
      }

      ;

      if (v instanceof ChildQuery) {
        return new ChildQuery(Data_Functor.map(Halogen_Query_ChildQuery.functorChildQuery)(f)(v.value0));
      }

      ;

      if (v instanceof Raise) {
        return new Raise(v.value0, f(v.value1));
      }

      ;

      if (v instanceof Par) {
        return new Par(Data_Functor.map(functorHalogenAp)(f)(v.value0));
      }

      ;

      if (v instanceof Fork) {
        return new Fork(v.value0, function ($157) {
          return f(v.value1($157));
        });
      }

      ;

      if (v instanceof Kill) {
        return new Kill(v.value0, f(v.value1));
      }

      ;

      if (v instanceof GetRef) {
        return new GetRef(v.value0, function ($158) {
          return f(v.value1($158));
        });
      }

      ;
      throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 55, column 11 - line 65, column 37): " + [v.constructor.name]);
    };
  });
};

var fork = function fork(hmu) {
  return HalogenM(Control_Monad_Free.liftF(new Fork(hmu, Control_Category.identity(Control_Category.categoryFn))));
};

var eqSubscriptionId = Data_Eq.eqInt;
var eqForkId = Data_Eq.eqInt;
var bindHalogenM = Control_Monad_Free.freeBind;
var applyHalogenM = Control_Monad_Free.freeApply;
var applyHalogenAp = Control_Applicative_Free.applyFreeAp;
var applicativeHalogenM = Control_Monad_Free.freeApplicative;
var monadRecHalogenM = new Control_Monad_Rec_Class.MonadRec(function () {
  return monadHalogenM;
}, function (k) {
  return function (a) {
    return Control_Bind.bind(bindHalogenM)(k(a))(function (v) {
      if (v instanceof Control_Monad_Rec_Class.Loop) {
        return Control_Monad_Rec_Class.tailRecM(monadRecHalogenM)(k)(v.value0);
      }

      ;

      if (v instanceof Control_Monad_Rec_Class.Done) {
        return Control_Applicative.pure(applicativeHalogenM)(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 102, column 26 - line 104, column 21): " + [v.constructor.name]);
    });
  };
});
var applicativeHalogenAp = Control_Applicative_Free.applicativeFreeAp;
var parallelHalogenM = new Control_Parallel_Class.Parallel(function () {
  return applicativeHalogenAp;
}, function () {
  return monadHalogenM;
}, function ($159) {
  return HalogenAp(Control_Applicative_Free.liftFreeAp($159));
}, function ($160) {
  return HalogenM(Control_Monad_Free.liftF(Par.create($160)));
});
module.exports = {
  State: State,
  Subscribe: Subscribe,
  Unsubscribe: Unsubscribe,
  Lift: Lift,
  ChildQuery: ChildQuery,
  Raise: Raise,
  Par: Par,
  Fork: Fork,
  Kill: Kill,
  GetRef: GetRef,
  HalogenM: HalogenM,
  HalogenAp: HalogenAp,
  raise: raise,
  query: query,
  queryAll: queryAll,
  SubscriptionId: SubscriptionId,
  subscribe: subscribe,
  "subscribe'": subscribe$prime,
  unsubscribe: unsubscribe,
  ForkId: ForkId,
  fork: fork,
  kill: kill,
  getRef: getRef,
  imapState: imapState,
  mapAction: mapAction,
  mapOutput: mapOutput,
  hoist: hoist,
  functorHalogenF: functorHalogenF,
  functorHalogenM: functorHalogenM,
  applyHalogenM: applyHalogenM,
  applicativeHalogenM: applicativeHalogenM,
  bindHalogenM: bindHalogenM,
  monadHalogenM: monadHalogenM,
  semigroupHalogenM: semigroupHalogenM,
  monoidHalogenM: monoidHalogenM,
  monadEffectHalogenM: monadEffectHalogenM,
  monadAffHalogenM: monadAffHalogenM,
  parallelHalogenM: parallelHalogenM,
  monadTransHalogenM: monadTransHalogenM,
  monadRecHalogenM: monadRecHalogenM,
  monadStateHalogenM: monadStateHalogenM,
  monadAskHalogenM: monadAskHalogenM,
  monadTellHalogenM: monadTellHalogenM,
  monadThrowHalogenM: monadThrowHalogenM,
  newtypeHalogenAp: newtypeHalogenAp,
  functorHalogenAp: functorHalogenAp,
  applyHalogenAp: applyHalogenAp,
  applicativeHalogenAp: applicativeHalogenAp,
  eqSubscriptionId: eqSubscriptionId,
  ordSubscriptionId: ordSubscriptionId,
  eqForkId: eqForkId,
  ordForkId: ordForkId
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Applicative.Free/index.js":"output/Control.Applicative.Free/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Free/index.js":"output/Control.Monad.Free/index.js","../Control.Monad.Reader.Class/index.js":"output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"output/Control.Monad.Writer.Class/index.js","../Control.Parallel.Class/index.js":"output/Control.Parallel.Class/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Map.Internal/index.js":"output/Data.Map.Internal/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect.Aff.Class/index.js":"output/Effect.Aff.Class/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js","../Halogen.Data.Slot/index.js":"output/Halogen.Data.Slot/index.js","../Halogen.Query.ChildQuery/index.js":"output/Halogen.Query.ChildQuery/index.js","../Halogen.Query.EventSource/index.js":"output/Halogen.Query.EventSource/index.js"}],"output/Halogen.Query.HalogenQ/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Coyoneda = require("../Data.Coyoneda/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Initialize = function () {
  function Initialize(value0) {
    this.value0 = value0;
  }

  ;

  Initialize.create = function (value0) {
    return new Initialize(value0);
  };

  return Initialize;
}();

var Finalize = function () {
  function Finalize(value0) {
    this.value0 = value0;
  }

  ;

  Finalize.create = function (value0) {
    return new Finalize(value0);
  };

  return Finalize;
}();

var Receive = function () {
  function Receive(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Receive.create = function (value0) {
    return function (value1) {
      return new Receive(value0, value1);
    };
  };

  return Receive;
}();

var Action = function () {
  function Action(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Action.create = function (value0) {
    return function (value1) {
      return new Action(value0, value1);
    };
  };

  return Action;
}();

var Query = function () {
  function Query(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Query.create = function (value0) {
    return function (value1) {
      return new Query(value0, value1);
    };
  };

  return Query;
}();

var functorHalogenQ = new Data_Functor.Functor(function (f) {
  return function (m) {
    if (m instanceof Initialize) {
      return new Initialize(f(m.value0));
    }

    ;

    if (m instanceof Finalize) {
      return new Finalize(f(m.value0));
    }

    ;

    if (m instanceof Receive) {
      return new Receive(m.value0, f(m.value1));
    }

    ;

    if (m instanceof Action) {
      return new Action(m.value0, f(m.value1));
    }

    ;

    if (m instanceof Query) {
      return new Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(f)(m.value0), Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
    }

    ;
    throw new Error("Failed pattern match at Halogen.Query.HalogenQ (line 23, column 1 - line 23, column 73): " + [m.constructor.name]);
  };
});
var bifunctorHalogenQ = new Data_Bifunctor.Bifunctor(function (f) {
  return function (g) {
    return function (v) {
      if (v instanceof Initialize) {
        return new Initialize(g(v.value0));
      }

      ;

      if (v instanceof Finalize) {
        return new Finalize(g(v.value0));
      }

      ;

      if (v instanceof Receive) {
        return new Receive(f(v.value0), g(v.value1));
      }

      ;

      if (v instanceof Action) {
        return new Action(v.value0, g(v.value1));
      }

      ;

      if (v instanceof Query) {
        return new Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(g)(v.value0), Data_Functor.map(Data_Functor.functorFn)(g)(v.value1));
      }

      ;
      throw new Error("Failed pattern match at Halogen.Query.HalogenQ (line 16, column 15 - line 21, column 45): " + [v.constructor.name]);
    };
  };
});
module.exports = {
  Initialize: Initialize,
  Finalize: Finalize,
  Receive: Receive,
  Action: Action,
  Query: Query,
  bifunctorHalogenQ: bifunctorHalogenQ,
  functorHalogenQ: functorHalogenQ
};
},{"../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Coyoneda/index.js":"output/Data.Coyoneda/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js"}],"output/Data.Function.Uncurried/foreign.js":[function(require,module,exports) {
"use strict"; // module Data.Function.Uncurried

exports.mkFn0 = function (fn) {
  return function () {
    return fn({});
  };
};

exports.mkFn2 = function (fn) {
  /* jshint maxparams: 2 */
  return function (a, b) {
    return fn(a)(b);
  };
};

exports.mkFn3 = function (fn) {
  /* jshint maxparams: 3 */
  return function (a, b, c) {
    return fn(a)(b)(c);
  };
};

exports.mkFn4 = function (fn) {
  /* jshint maxparams: 4 */
  return function (a, b, c, d) {
    return fn(a)(b)(c)(d);
  };
};

exports.mkFn5 = function (fn) {
  /* jshint maxparams: 5 */
  return function (a, b, c, d, e) {
    return fn(a)(b)(c)(d)(e);
  };
};

exports.mkFn6 = function (fn) {
  /* jshint maxparams: 6 */
  return function (a, b, c, d, e, f) {
    return fn(a)(b)(c)(d)(e)(f);
  };
};

exports.mkFn7 = function (fn) {
  /* jshint maxparams: 7 */
  return function (a, b, c, d, e, f, g) {
    return fn(a)(b)(c)(d)(e)(f)(g);
  };
};

exports.mkFn8 = function (fn) {
  /* jshint maxparams: 8 */
  return function (a, b, c, d, e, f, g, h) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h);
  };
};

exports.mkFn9 = function (fn) {
  /* jshint maxparams: 9 */
  return function (a, b, c, d, e, f, g, h, i) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
  };
};

exports.mkFn10 = function (fn) {
  /* jshint maxparams: 10 */
  return function (a, b, c, d, e, f, g, h, i, j) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
  };
};

exports.runFn0 = function (fn) {
  return fn();
};

exports.runFn2 = function (fn) {
  return function (a) {
    return function (b) {
      return fn(a, b);
    };
  };
};

exports.runFn3 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return fn(a, b, c);
      };
    };
  };
};

exports.runFn4 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return fn(a, b, c, d);
        };
      };
    };
  };
};

exports.runFn5 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return fn(a, b, c, d, e);
          };
        };
      };
    };
  };
};

exports.runFn6 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return fn(a, b, c, d, e, f);
            };
          };
        };
      };
    };
  };
};

exports.runFn7 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return fn(a, b, c, d, e, f, g);
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn8 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return fn(a, b, c, d, e, f, g, h);
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn9 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return fn(a, b, c, d, e, f, g, h, i);
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn10 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return function (j) {
                      return fn(a, b, c, d, e, f, g, h, i, j);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};
},{}],"output/Data.Function.Uncurried/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var runFn1 = function runFn1(f) {
  return f;
};

var mkFn1 = function mkFn1(f) {
  return f;
};

module.exports = {
  mkFn1: mkFn1,
  runFn1: runFn1,
  mkFn0: $foreign.mkFn0,
  mkFn2: $foreign.mkFn2,
  mkFn3: $foreign.mkFn3,
  mkFn4: $foreign.mkFn4,
  mkFn5: $foreign.mkFn5,
  mkFn6: $foreign.mkFn6,
  mkFn7: $foreign.mkFn7,
  mkFn8: $foreign.mkFn8,
  mkFn9: $foreign.mkFn9,
  mkFn10: $foreign.mkFn10,
  runFn0: $foreign.runFn0,
  runFn2: $foreign.runFn2,
  runFn3: $foreign.runFn3,
  runFn4: $foreign.runFn4,
  runFn5: $foreign.runFn5,
  runFn6: $foreign.runFn6,
  runFn7: $foreign.runFn7,
  runFn8: $foreign.runFn8,
  runFn9: $foreign.runFn9,
  runFn10: $foreign.runFn10
};
},{"./foreign.js":"output/Data.Function.Uncurried/foreign.js"}],"output/Halogen.VDom.Machine/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Step = function () {
  function Step(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  ;

  Step.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return new Step(value0, value1, value2, value3);
        };
      };
    };
  };

  return Step;
}();

var unStep = Unsafe_Coerce.unsafeCoerce;

var step = function step(v, a) {
  return v.value2(v.value1, a);
};

var mkStep = Unsafe_Coerce.unsafeCoerce;

var halt = function halt(v) {
  return v.value3(v.value1);
};

var extract = unStep(function (v) {
  return v.value0;
});
module.exports = {
  Step: Step,
  mkStep: mkStep,
  unStep: unStep,
  extract: extract,
  step: step,
  halt: halt
};
},{"../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Halogen.VDom.Types/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Namespace = function Namespace(x) {
  return x;
};

var ElemName = function ElemName(x) {
  return x;
};

var Text = function () {
  function Text(value0) {
    this.value0 = value0;
  }

  ;

  Text.create = function (value0) {
    return new Text(value0);
  };

  return Text;
}();

var Elem = function () {
  function Elem(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  ;

  Elem.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return new Elem(value0, value1, value2, value3);
        };
      };
    };
  };

  return Elem;
}();

var Keyed = function () {
  function Keyed(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  ;

  Keyed.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return new Keyed(value0, value1, value2, value3);
        };
      };
    };
  };

  return Keyed;
}();

var Widget = function () {
  function Widget(value0) {
    this.value0 = value0;
  }

  ;

  Widget.create = function (value0) {
    return new Widget(value0);
  };

  return Widget;
}();

var Grafted = function () {
  function Grafted(value0) {
    this.value0 = value0;
  }

  ;

  Grafted.create = function (value0) {
    return new Grafted(value0);
  };

  return Grafted;
}();

var Graft = function () {
  function Graft(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  Graft.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new Graft(value0, value1, value2);
      };
    };
  };

  return Graft;
}();

var unGraft = function unGraft(f) {
  return function ($58) {
    return f($58);
  };
};

var ordNamespace = Data_Ord.ordString;
var ordElemName = Data_Ord.ordString;
var newtypeNamespace = new Data_Newtype.Newtype(function (n) {
  return n;
}, Namespace);
var newtypeElemName = new Data_Newtype.Newtype(function (n) {
  return n;
}, ElemName);
var graft = Unsafe_Coerce.unsafeCoerce;
var functorGraft = new Data_Functor.Functor(function (g) {
  return unGraft(function (v) {
    return graft(new Graft(v.value0, function ($59) {
      return g(v.value1($59));
    }, v.value2));
  });
});
var functorVDom = new Data_Functor.Functor(function (g) {
  return function (v) {
    if (v instanceof Text) {
      return new Text(v.value0);
    }

    ;

    if (v instanceof Grafted) {
      return new Grafted(Data_Functor.map(functorGraft)(g)(v.value0));
    }

    ;
    return new Grafted(graft(new Graft(Control_Category.identity(Control_Category.categoryFn), g, v)));
  };
});
var eqNamespace = Data_Eq.eqString;
var eqElemName = Data_Eq.eqString;
var bifunctorGraft = new Data_Bifunctor.Bifunctor(function (f) {
  return function (g) {
    return unGraft(function (v) {
      return graft(new Graft(function ($60) {
        return f(v.value0($60));
      }, function ($61) {
        return g(v.value1($61));
      }, v.value2));
    });
  };
});
var bifunctorVDom = new Data_Bifunctor.Bifunctor(function (f) {
  return function (g) {
    return function (v) {
      if (v instanceof Text) {
        return new Text(v.value0);
      }

      ;

      if (v instanceof Grafted) {
        return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(f)(g)(v.value0));
      }

      ;
      return new Grafted(graft(new Graft(f, g, v)));
    };
  };
});
var runGraft = unGraft(function (v) {
  var go = function go(v2) {
    if (v2 instanceof Text) {
      return new Text(v2.value0);
    }

    ;

    if (v2 instanceof Elem) {
      return new Elem(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(go)(v2.value3));
    }

    ;

    if (v2 instanceof Keyed) {
      return new Keyed(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(go))(v2.value3));
    }

    ;

    if (v2 instanceof Widget) {
      return new Widget(v.value1(v2.value0));
    }

    ;

    if (v2 instanceof Grafted) {
      return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(v.value0)(v.value1)(v2.value0));
    }

    ;
    throw new Error("Failed pattern match at Halogen.VDom.Types (line 86, column 7 - line 86, column 27): " + [v2.constructor.name]);
  };

  return go(v.value2);
});

var renderWidget = function renderWidget(f) {
  return function (g) {
    return function (v) {
      if (v instanceof Text) {
        return new Text(v.value0);
      }

      ;

      if (v instanceof Elem) {
        return new Elem(v.value0, v.value1, f(v.value2), Data_Functor.map(Data_Functor.functorArray)(renderWidget(f)(g))(v.value3));
      }

      ;

      if (v instanceof Keyed) {
        return new Keyed(v.value0, v.value1, f(v.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(renderWidget(f)(g)))(v.value3));
      }

      ;

      if (v instanceof Widget) {
        return g(v.value0);
      }

      ;

      if (v instanceof Grafted) {
        return renderWidget(f)(g)(runGraft(v.value0));
      }

      ;
      throw new Error("Failed pattern match at Halogen.VDom.Types (line 48, column 20 - line 53, column 48): " + [v.constructor.name]);
    };
  };
};

module.exports = {
  Text: Text,
  Elem: Elem,
  Keyed: Keyed,
  Widget: Widget,
  Grafted: Grafted,
  renderWidget: renderWidget,
  Graft: Graft,
  graft: graft,
  unGraft: unGraft,
  runGraft: runGraft,
  ElemName: ElemName,
  Namespace: Namespace,
  functorVDom: functorVDom,
  bifunctorVDom: bifunctorVDom,
  functorGraft: functorGraft,
  bifunctorGraft: bifunctorGraft,
  newtypeElemName: newtypeElemName,
  eqElemName: eqElemName,
  ordElemName: ordElemName,
  newtypeNamespace: newtypeNamespace,
  eqNamespace: eqNamespace,
  ordNamespace: ordNamespace
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Halogen.VDom.Util/foreign.js":[function(require,module,exports) {
"use strict";

exports.unsafeGetAny = function (key, obj) {
  return obj[key];
};

exports.unsafeHasAny = function (key, obj) {
  return obj.hasOwnProperty(key);
};

exports.unsafeSetAny = function (key, val, obj) {
  obj[key] = val;
};

exports.unsafeDeleteAny = function (key, obj) {
  delete obj[key];
};

exports.forE = function (a, f) {
  var b = [];

  for (var i = 0; i < a.length; i++) {
    b.push(f(i, a[i]));
  }

  return b;
};

exports.forEachE = function (a, f) {
  for (var i = 0; i < a.length; i++) {
    f(a[i]);
  }
};

exports.forInE = function (o, f) {
  var ks = Object.keys(o);

  for (var i = 0; i < ks.length; i++) {
    var k = ks[i];
    f(k, o[k]);
  }
};

exports.replicateE = function (n, f) {
  for (var i = 0; i < n; i++) {
    f();
  }
};

exports.diffWithIxE = function (a1, a2, f1, f2, f3) {
  var a3 = [];
  var l1 = a1.length;
  var l2 = a2.length;
  var i = 0;

  while (1) {
    if (i < l1) {
      if (i < l2) {
        a3.push(f1(i, a1[i], a2[i]));
      } else {
        f2(i, a1[i]);
      }
    } else if (i < l2) {
      a3.push(f3(i, a2[i]));
    } else {
      break;
    }

    i++;
  }

  return a3;
};

exports.strMapWithIxE = function (as, fk, f) {
  var o = {};

  for (var i = 0; i < as.length; i++) {
    var a = as[i];
    var k = fk(a);
    o[k] = f(k, i, a);
  }

  return o;
};

exports.diffWithKeyAndIxE = function (o1, as, fk, f1, f2, f3) {
  var o2 = {};

  for (var i = 0; i < as.length; i++) {
    var a = as[i];
    var k = fk(a);

    if (o1.hasOwnProperty(k)) {
      o2[k] = f1(k, i, o1[k], a);
    } else {
      o2[k] = f3(k, i, a);
    }
  }

  for (var k in o1) {
    if (k in o2) {
      continue;
    }

    f2(k, o1[k]);
  }

  return o2;
};

exports.refEq = function (a, b) {
  return a === b;
};

exports.createTextNode = function (s, doc) {
  return doc.createTextNode(s);
};

exports.setTextContent = function (s, n) {
  n.textContent = s;
};

exports.createElement = function (ns, name, doc) {
  if (ns != null) {
    return doc.createElementNS(ns, name);
  } else {
    return doc.createElement(name);
  }
};

exports.insertChildIx = function (i, a, b) {
  var n = b.childNodes.item(i) || null;

  if (n !== a) {
    b.insertBefore(a, n);
  }
};

exports.removeChild = function (a, b) {
  if (b && a.parentNode === b) {
    b.removeChild(a);
  }
};

exports.parentNode = function (a) {
  return a.parentNode;
};

exports.setAttribute = function (ns, attr, val, el) {
  if (ns != null) {
    el.setAttributeNS(ns, attr, val);
  } else {
    el.setAttribute(attr, val);
  }
};

exports.removeAttribute = function (ns, attr, el) {
  if (ns != null) {
    el.removeAttributeNS(ns, attr);
  } else {
    el.removeAttribute(attr);
  }
};

exports.hasAttribute = function (ns, attr, el) {
  if (ns != null) {
    return el.hasAttributeNS(ns, attr);
  } else {
    return el.hasAttribute(attr);
  }
};

exports.addEventListener = function (ev, listener, el) {
  el.addEventListener(ev, listener, false);
};

exports.removeEventListener = function (ev, listener, el) {
  el.removeEventListener(ev, listener, false);
};

exports.jsUndefined = void 0;
},{}],"output/Foreign.Object.ST/foreign.js":[function(require,module,exports) {
"use strict";

exports["new"] = function () {
  return {};
};

exports.peekImpl = function (just) {
  return function (nothing) {
    return function (k) {
      return function (m) {
        return function () {
          return {}.hasOwnProperty.call(m, k) ? just(m[k]) : nothing;
        };
      };
    };
  };
};

exports.poke = function (k) {
  return function (v) {
    return function (m) {
      return function () {
        m[k] = v;
        return m;
      };
    };
  };
};

exports["delete"] = function (k) {
  return function (m) {
    return function () {
      delete m[k];
      return m;
    };
  };
};
},{}],"output/Foreign.Object.ST/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
  peek: peek,
  "new": $foreign["new"],
  poke: $foreign.poke,
  "delete": $foreign["delete"]
};
},{"./foreign.js":"output/Foreign.Object.ST/foreign.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js"}],"output/Halogen.VDom.Util/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Foreign_Object_ST = require("../Foreign.Object.ST/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var unsafeLookup = $foreign.unsafeGetAny;
var unsafeFreeze = Unsafe_Coerce.unsafeCoerce;
var pokeMutMap = $foreign.unsafeSetAny;
var newMutMap = Foreign_Object_ST["new"];
var deleteMutMap = $foreign.unsafeDeleteAny;
module.exports = {
  newMutMap: newMutMap,
  pokeMutMap: pokeMutMap,
  deleteMutMap: deleteMutMap,
  unsafeFreeze: unsafeFreeze,
  unsafeLookup: unsafeLookup,
  unsafeGetAny: $foreign.unsafeGetAny,
  unsafeHasAny: $foreign.unsafeHasAny,
  unsafeSetAny: $foreign.unsafeSetAny,
  unsafeDeleteAny: $foreign.unsafeDeleteAny,
  forE: $foreign.forE,
  forEachE: $foreign.forEachE,
  forInE: $foreign.forInE,
  replicateE: $foreign.replicateE,
  diffWithIxE: $foreign.diffWithIxE,
  diffWithKeyAndIxE: $foreign.diffWithKeyAndIxE,
  strMapWithIxE: $foreign.strMapWithIxE,
  refEq: $foreign.refEq,
  createTextNode: $foreign.createTextNode,
  setTextContent: $foreign.setTextContent,
  createElement: $foreign.createElement,
  insertChildIx: $foreign.insertChildIx,
  removeChild: $foreign.removeChild,
  parentNode: $foreign.parentNode,
  setAttribute: $foreign.setAttribute,
  removeAttribute: $foreign.removeAttribute,
  hasAttribute: $foreign.hasAttribute,
  addEventListener: $foreign.addEventListener,
  removeEventListener: $foreign.removeEventListener,
  jsUndefined: $foreign.jsUndefined
};
},{"./foreign.js":"output/Halogen.VDom.Util/foreign.js","../Foreign.Object.ST/index.js":"output/Foreign.Object.ST/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Web.DOM.Element/foreign.js":[function(require,module,exports) {
"use strict";

var getProp = function getProp(name) {
  return function (doctype) {
    return doctype[name];
  };
};

exports._namespaceURI = getProp("namespaceURI");
exports._prefix = getProp("prefix");
exports.localName = getProp("localName");
exports.tagName = getProp("tagName");

exports.id = function (node) {
  return function () {
    return node.id;
  };
};

exports.setId = function (id) {
  return function (node) {
    return function () {
      node.id = id;
      return {};
    };
  };
};

exports.className = function (node) {
  return function () {
    return node.className;
  };
};

exports.classList = function (element) {
  return function () {
    return element.classList;
  };
};

exports.setClassName = function (className) {
  return function (node) {
    return function () {
      node.className = className;
      return {};
    };
  };
};

exports.getElementsByTagName = function (localName) {
  return function (doc) {
    return function () {
      return doc.getElementsByTagName(localName);
    };
  };
};

exports._getElementsByTagNameNS = function (ns) {
  return function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagNameNS(ns, localName);
      };
    };
  };
};

exports.getElementsByClassName = function (classNames) {
  return function (doc) {
    return function () {
      return doc.getElementsByClassName(classNames);
    };
  };
};

exports.setAttribute = function (name) {
  return function (value) {
    return function (element) {
      return function () {
        element.setAttribute(name, value);
        return {};
      };
    };
  };
};

exports._getAttribute = function (name) {
  return function (element) {
    return function () {
      return element.getAttribute(name);
    };
  };
};

exports.hasAttribute = function (name) {
  return function (element) {
    return function () {
      return element.hasAttribute(name);
    };
  };
};

exports.removeAttribute = function (name) {
  return function (element) {
    return function () {
      element.removeAttribute(name);
      return {};
    };
  };
}; // - CSSOM ---------------------------------------------------------------------


exports.scrollTop = function (node) {
  return function () {
    return node.scrollTop;
  };
};

exports.setScrollTop = function (scrollTop) {
  return function (node) {
    return function () {
      node.scrollTop = scrollTop;
      return {};
    };
  };
};

exports.scrollLeft = function (node) {
  return function () {
    return node.scrollLeft;
  };
};

exports.setScrollLeft = function (scrollLeft) {
  return function (node) {
    return function () {
      node.scrollLeft = scrollLeft;
      return {};
    };
  };
};

exports.scrollWidth = function (el) {
  return function () {
    return el.scrollWidth;
  };
};

exports.scrollHeight = function (el) {
  return function () {
    return el.scrollHeight;
  };
};

exports.clientTop = function (el) {
  return function () {
    return el.clientTop;
  };
};

exports.clientLeft = function (el) {
  return function () {
    return el.clientLeft;
  };
};

exports.clientWidth = function (el) {
  return function () {
    return el.clientWidth;
  };
};

exports.clientHeight = function (el) {
  return function () {
    return el.clientHeight;
  };
};
},{}],"output/Web.DOM.Element/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Effect = require("../Effect/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");

var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;

var prefix = function prefix($0) {
  return Data_Nullable.toMaybe($foreign["_prefix"]($0));
};

var namespaceURI = function namespaceURI($1) {
  return Data_Nullable.toMaybe($foreign["_namespaceURI"]($1));
};

var getElementsByTagNameNS = function getElementsByTagNameNS($2) {
  return $foreign["_getElementsByTagNameNS"](Data_Nullable.toNullable($2));
};

var getAttribute = function getAttribute(attr) {
  var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  var $4 = $foreign["_getAttribute"](attr);
  return function ($5) {
    return $3($4($5));
  };
};

var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
module.exports = {
  fromNode: fromNode,
  fromChildNode: fromChildNode,
  fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
  fromParentNode: fromParentNode,
  fromEventTarget: fromEventTarget,
  toNode: toNode,
  toChildNode: toChildNode,
  toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
  toParentNode: toParentNode,
  toEventTarget: toEventTarget,
  namespaceURI: namespaceURI,
  prefix: prefix,
  getElementsByTagNameNS: getElementsByTagNameNS,
  getAttribute: getAttribute,
  localName: $foreign.localName,
  tagName: $foreign.tagName,
  id: $foreign.id,
  setId: $foreign.setId,
  className: $foreign.className,
  classList: $foreign.classList,
  setClassName: $foreign.setClassName,
  getElementsByTagName: $foreign.getElementsByTagName,
  getElementsByClassName: $foreign.getElementsByClassName,
  setAttribute: $foreign.setAttribute,
  hasAttribute: $foreign.hasAttribute,
  removeAttribute: $foreign.removeAttribute,
  scrollTop: $foreign.scrollTop,
  setScrollTop: $foreign.setScrollTop,
  scrollLeft: $foreign.scrollLeft,
  setScrollLeft: $foreign.setScrollLeft,
  scrollWidth: $foreign.scrollWidth,
  scrollHeight: $foreign.scrollHeight,
  clientTop: $foreign.clientTop,
  clientLeft: $foreign.clientLeft,
  clientWidth: $foreign.clientWidth,
  clientHeight: $foreign.clientHeight
};
},{"./foreign.js":"output/Web.DOM.Element/foreign.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Effect/index.js":"output/Effect/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js","../Web.Internal.FFI/index.js":"output/Web.Internal.FFI/index.js"}],"output/Halogen.VDom.DOM/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Array = require("../Data.Array/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");

var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");

var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");

var Web_DOM_Element = require("../Web.DOM.Element/index.js");

var VDomSpec = function VDomSpec(x) {
  return x;
};

var haltWidget = function haltWidget(v) {
  return Halogen_VDom_Machine.halt(v.widget);
};

var patchWidget = function patchWidget(state, vdom) {
  if (vdom instanceof Halogen_VDom_Types.Grafted) {
    return patchWidget(state, Halogen_VDom_Types.runGraft(vdom.value0));
  }

  ;

  if (vdom instanceof Halogen_VDom_Types.Widget) {
    var res = Halogen_VDom_Machine.step(state.widget, vdom.value0);
    var res$prime = Halogen_VDom_Machine.unStep(function (v) {
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v.value0, {
        build: state.build,
        widget: res
      }, patchWidget, haltWidget));
    })(res);
    return res$prime;
  }

  ;
  haltWidget(state);
  return state.build(vdom);
};

var haltText = function haltText(v) {
  var parent = Halogen_VDom_Util.parentNode(v.node);
  return Halogen_VDom_Util.removeChild(v.node, parent);
};

var patchText = function patchText(state, vdom) {
  if (vdom instanceof Halogen_VDom_Types.Grafted) {
    return patchText(state, Halogen_VDom_Types.runGraft(vdom.value0));
  }

  ;

  if (vdom instanceof Halogen_VDom_Types.Text) {
    if (state.value === vdom.value0) {
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, state, patchText, haltText));
    }

    ;

    if (Data_Boolean.otherwise) {
      var nextState = {
        build: state.build,
        node: state.node,
        value: vdom.value0
      };
      Halogen_VDom_Util.setTextContent(vdom.value0, state.node);
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchText, haltText));
    }

    ;
  }

  ;
  haltText(state);
  return state.build(vdom);
};

var haltKeyed = function haltKeyed(v) {
  var parent = Halogen_VDom_Util.parentNode(v.node);
  Halogen_VDom_Util.removeChild(v.node, parent);
  Halogen_VDom_Util.forInE(v.children, function (v1, s) {
    return Halogen_VDom_Machine.halt(s);
  });
  return Halogen_VDom_Machine.halt(v.attrs);
};

var haltElem = function haltElem(v) {
  var parent = Halogen_VDom_Util.parentNode(v.node);
  Halogen_VDom_Util.removeChild(v.node, parent);
  Halogen_VDom_Util.forEachE(v.children, Halogen_VDom_Machine.halt);
  return Halogen_VDom_Machine.halt(v.attrs);
};

var eqElemSpec = function eqElemSpec(ns1, v, ns2, v1) {
  var $56 = v === v1;

  if ($56) {
    if (ns1 instanceof Data_Maybe.Just && ns2 instanceof Data_Maybe.Just && ns1.value0 === ns2.value0) {
      return true;
    }

    ;

    if (ns1 instanceof Data_Maybe.Nothing && ns2 instanceof Data_Maybe.Nothing) {
      return true;
    }

    ;
    return false;
  }

  ;
  return false;
};

var patchElem = function patchElem(state, vdom) {
  if (vdom instanceof Halogen_VDom_Types.Grafted) {
    return patchElem(state, Halogen_VDom_Types.runGraft(vdom.value0));
  }

  ;

  if (vdom instanceof Halogen_VDom_Types.Elem && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
    var v = Data_Array.length(vdom.value3);
    var v1 = Data_Array.length(state.children);

    if (v1 === 0 && v === 0) {
      var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
      var nextState = {
        build: state.build,
        node: state.node,
        attrs: attrs2,
        ns: vdom.value0,
        name: vdom.value1,
        children: state.children
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
    }

    ;

    var onThis = function onThis(ix, s) {
      return Halogen_VDom_Machine.halt(s);
    };

    var onThese = function onThese(ix, s, v2) {
      var res = Halogen_VDom_Machine.step(s, v2);
      Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
      return res;
    };

    var onThat = function onThat(ix, v2) {
      var res = state.build(v2);
      Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
      return res;
    };

    var children2 = Halogen_VDom_Util.diffWithIxE(state.children, vdom.value3, onThese, onThis, onThat);
    var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
    var nextState = {
      build: state.build,
      node: state.node,
      attrs: attrs2,
      ns: vdom.value0,
      name: vdom.value1,
      children: children2
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
  }

  ;
  haltElem(state);
  return state.build(vdom);
};

var patchKeyed = function patchKeyed(state, vdom) {
  if (vdom instanceof Halogen_VDom_Types.Grafted) {
    return patchKeyed(state, Halogen_VDom_Types.runGraft(vdom.value0));
  }

  ;

  if (vdom instanceof Halogen_VDom_Types.Keyed && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
    var v = Data_Array.length(vdom.value3);

    if (state.length === 0 && v === 0) {
      var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
      var nextState = {
        build: state.build,
        node: state.node,
        attrs: attrs2,
        ns: vdom.value0,
        name: vdom.value1,
        children: state.children,
        length: 0
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
    }

    ;

    var onThis = function onThis(v2, s) {
      return Halogen_VDom_Machine.halt(s);
    };

    var onThese = function onThese(v2, ix$prime, s, v3) {
      var res = Halogen_VDom_Machine.step(s, v3.value1);
      Halogen_VDom_Util.insertChildIx(ix$prime, Halogen_VDom_Machine.extract(res), state.node);
      return res;
    };

    var onThat = function onThat(v2, ix, v3) {
      var res = state.build(v3.value1);
      Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
      return res;
    };

    var children2 = Halogen_VDom_Util.diffWithKeyAndIxE(state.children, vdom.value3, Data_Tuple.fst, onThese, onThis, onThat);
    var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
    var nextState = {
      build: state.build,
      node: state.node,
      attrs: attrs2,
      ns: vdom.value0,
      name: vdom.value1,
      children: children2,
      length: v
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
  }

  ;
  haltKeyed(state);
  return state.build(vdom);
};

var buildWidget = function buildWidget(v, build, w) {
  var res = v.buildWidget(v)(w);
  var res$prime = Halogen_VDom_Machine.unStep(function (v1) {
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v1.value0, {
      build: build,
      widget: res
    }, patchWidget, haltWidget));
  })(res);
  return res$prime;
};

var buildText = function buildText(v, build, s) {
  var node = Halogen_VDom_Util.createTextNode(s, v.document);
  var state = {
    build: build,
    node: node,
    value: s
  };
  return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchText, haltText));
};

var buildKeyed = function buildKeyed(v, build, ns1, name1, as1, ch1) {
  var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
  var node = Web_DOM_Element.toNode(el);

  var onChild = function onChild(k, ix, v1) {
    var res = build(v1.value1);
    Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
    return res;
  };

  var children = Halogen_VDom_Util.strMapWithIxE(ch1, Data_Tuple.fst, onChild);
  var attrs = v.buildAttributes(el)(as1);
  var state = {
    build: build,
    node: node,
    attrs: attrs,
    ns: ns1,
    name: name1,
    children: children,
    length: Data_Array.length(ch1)
  };
  return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchKeyed, haltKeyed));
};

var buildElem = function buildElem(v, build, ns1, name1, as1, ch1) {
  var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
  var node = Web_DOM_Element.toNode(el);

  var onChild = function onChild(ix, child) {
    var res = build(child);
    Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
    return res;
  };

  var children = Halogen_VDom_Util.forE(ch1, onChild);
  var attrs = v.buildAttributes(el)(as1);
  var state = {
    build: build,
    node: node,
    attrs: attrs,
    ns: ns1,
    name: name1,
    children: children
  };
  return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchElem, haltElem));
};

var buildVDom = function buildVDom(spec) {
  var build = function build(v) {
    if (v instanceof Halogen_VDom_Types.Text) {
      return buildText(spec, build, v.value0);
    }

    ;

    if (v instanceof Halogen_VDom_Types.Elem) {
      return buildElem(spec, build, v.value0, v.value1, v.value2, v.value3);
    }

    ;

    if (v instanceof Halogen_VDom_Types.Keyed) {
      return buildKeyed(spec, build, v.value0, v.value1, v.value2, v.value3);
    }

    ;

    if (v instanceof Halogen_VDom_Types.Widget) {
      return buildWidget(spec, build, v.value0);
    }

    ;

    if (v instanceof Halogen_VDom_Types.Grafted) {
      return build(Halogen_VDom_Types.runGraft(v.value0));
    }

    ;
    throw new Error("Failed pattern match at Halogen.VDom.DOM (line 58, column 27 - line 63, column 52): " + [v.constructor.name]);
  };

  return build;
};

module.exports = {
  VDomSpec: VDomSpec,
  buildVDom: buildVDom,
  buildText: buildText,
  buildElem: buildElem,
  buildKeyed: buildKeyed,
  buildWidget: buildWidget
};
},{"../Data.Array/index.js":"output/Data.Array/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Halogen.VDom.Machine/index.js":"output/Halogen.VDom.Machine/index.js","../Halogen.VDom.Types/index.js":"output/Halogen.VDom.Types/index.js","../Halogen.VDom.Util/index.js":"output/Halogen.VDom.Util/index.js","../Web.DOM.Element/index.js":"output/Web.DOM.Element/index.js"}],"output/Halogen.VDom.Thunk/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Halogen_VDom_DOM = require("../Halogen.VDom.DOM/index.js");

var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");

var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Thunk = function () {
  function Thunk(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  ;

  Thunk.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return new Thunk(value0, value1, value2, value3);
        };
      };
    };
  };

  return Thunk;
}();

var unsafeThunkId = Unsafe_Coerce.unsafeCoerce;

var unsafeEqThunk = function unsafeEqThunk(v, v1) {
  return Halogen_VDom_Util.refEq(v.value0, v1.value0) && Halogen_VDom_Util.refEq(v.value1, v1.value1) && v.value1(v.value3, v1.value3);
};

var thunk = function thunk(tid, eqFn, f, a) {
  return new Thunk(tid, eqFn, f, a);
};

var thunk1 = function thunk1(f, a) {
  return thunk(unsafeThunkId(f), Halogen_VDom_Util.refEq, f, a);
};

var thunk2 = function () {
  var eqFn = function eqFn(a, b) {
    return Halogen_VDom_Util.refEq(a["_1"], b["_1"]) && Halogen_VDom_Util.refEq(a["_2"], b["_2"]);
  };

  return function (f, a, b) {
    return thunk(unsafeThunkId(f), eqFn, function (v) {
      return f(v["_1"])(v["_2"]);
    }, {
      "_1": a,
      "_2": b
    });
  };
}();

var thunk3 = function () {
  var eqFn = function eqFn(a, b) {
    return Halogen_VDom_Util.refEq(a["_1"], b["_1"]) && Halogen_VDom_Util.refEq(a["_2"], b["_2"]) && Halogen_VDom_Util.refEq(a["_3"], b["_3"]);
  };

  return function (f, a, b, c) {
    return thunk(unsafeThunkId(f), eqFn, function (v) {
      return f(v["_1"])(v["_2"])(v["_3"]);
    }, {
      "_1": a,
      "_2": b,
      "_3": c
    });
  };
}();

var thunked = function thunked(eqFn) {
  return function (f) {
    var tid = unsafeThunkId({
      f: f
    });
    var eqFn$prime = Data_Function_Uncurried.mkFn2(eqFn);
    return function (a) {
      return thunk(tid, eqFn$prime, f, a);
    };
  };
};

var runThunk = function runThunk(v) {
  return v.value2(v.value3);
};

var mapThunk = function mapThunk(k) {
  return function (v) {
    return new Thunk(v.value0, v.value1, function ($46) {
      return k(v.value2($46));
    }, v.value3);
  };
};

var hoist = mapThunk;

var functorThunk = function functorThunk(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return new Thunk(v.value0, v.value1, function () {
        var $47 = Data_Functor.map(dictFunctor)(f);
        return function ($48) {
          return $47(v.value2($48));
        };
      }(), v.value3);
    };
  });
};

var buildThunk = function buildThunk(toVDom) {
  var haltThunk = function haltThunk(state) {
    return Halogen_VDom_Machine.halt(state.vdom);
  };

  var patchThunk = function patchThunk(state, t2) {
    var $43 = unsafeEqThunk(state.thunk, t2);

    if ($43) {
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(state.vdom), state, patchThunk, haltThunk));
    }

    ;
    var vdom = Halogen_VDom_Machine.step(state.vdom, toVDom(runThunk(t2)));
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
      vdom: vdom,
      thunk: t2
    }, patchThunk, haltThunk));
  };

  var renderThunk = function renderThunk(spec) {
    return function (t) {
      var vdom = Halogen_VDom_DOM.buildVDom(spec)(toVDom(runThunk(t)));
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
        thunk: t,
        vdom: vdom
      }, patchThunk, haltThunk));
    };
  };

  return renderThunk;
};

module.exports = {
  buildThunk: buildThunk,
  runThunk: runThunk,
  hoist: hoist,
  mapThunk: mapThunk,
  thunked: thunked,
  thunk1: thunk1,
  thunk2: thunk2,
  thunk3: thunk3,
  functorThunk: functorThunk
};
},{"../Data.Function.Uncurried/index.js":"output/Data.Function.Uncurried/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Halogen.VDom.DOM/index.js":"output/Halogen.VDom.DOM/index.js","../Halogen.VDom.Machine/index.js":"output/Halogen.VDom.Machine/index.js","../Halogen.VDom.Util/index.js":"output/Halogen.VDom.Util/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Halogen.Component/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap/index.js");

var Data_Coyoneda = require("../Data.Coyoneda/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");

var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");

var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");

var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var ComponentSlot = function () {
  function ComponentSlot(value0) {
    this.value0 = value0;
  }

  ;

  ComponentSlot.create = function (value0) {
    return new ComponentSlot(value0);
  };

  return ComponentSlot;
}();

var ThunkSlot = function () {
  function ThunkSlot(value0) {
    this.value0 = value0;
  }

  ;

  ThunkSlot.create = function (value0) {
    return new ThunkSlot(value0);
  };

  return ThunkSlot;
}();

var unComponentSlot = Unsafe_Coerce.unsafeCoerce;
var unComponent = Unsafe_Coerce.unsafeCoerce;

var mkEval = function mkEval(args) {
  return function (v) {
    if (v instanceof Halogen_Query_HalogenQ.Initialize) {
      return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.initialize))(v.value0);
    }

    ;

    if (v instanceof Halogen_Query_HalogenQ.Finalize) {
      return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.finalize))(v.value0);
    }

    ;

    if (v instanceof Halogen_Query_HalogenQ.Receive) {
      return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.receive(v.value0)))(v.value1);
    }

    ;

    if (v instanceof Halogen_Query_HalogenQ.Action) {
      return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(args.handleAction(v.value0))(v.value1);
    }

    ;

    if (v instanceof Halogen_Query_HalogenQ.Query) {
      return Data_Coyoneda.unCoyoneda(function (g) {
        var $28 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_Maybe.maybe(v.value1(Data_Unit.unit))(g));
        return function ($29) {
          return $28(args.handleQuery($29));
        };
      })(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Halogen.Component (line 187, column 15 - line 197, column 70): " + [v.constructor.name]);
  };
};

var mkComponentSlot = Unsafe_Coerce.unsafeCoerce;
var mkComponent = Unsafe_Coerce.unsafeCoerce;

var hoistSlot = function hoistSlot(dictBifunctor) {
  return function (dictFunctor) {
    return function (nat) {
      return function (v) {
        if (v instanceof ComponentSlot) {
          return unComponentSlot(function (slot) {
            return ComponentSlot.create(mkComponentSlot({
              get: slot.get,
              pop: slot.pop,
              set: slot.set,
              component: hoist(dictBifunctor)(dictFunctor)(nat)(slot.component),
              input: slot.input,
              output: slot.output
            }));
          })(v.value0);
        }

        ;

        if (v instanceof ThunkSlot) {
          return ThunkSlot.create(Halogen_VDom_Thunk.hoist(Data_Bifunctor.lmap(dictBifunctor)(hoistSlot(dictBifunctor)(dictFunctor)(nat)))(v.value0));
        }

        ;
        throw new Error("Failed pattern match at Halogen.Component (line 286, column 17 - line 291, column 53): " + [v.constructor.name]);
      };
    };
  };
};

var hoist = function hoist(dictBifunctor) {
  return function (dictFunctor) {
    return function (nat) {
      return unComponent(function (c) {
        return mkComponent({
          initialState: c.initialState,
          render: function () {
            var $30 = Data_Bifunctor.lmap(dictBifunctor)(hoistSlot(dictBifunctor)(dictFunctor)(nat));
            return function ($31) {
              return $30(c.render($31));
            };
          }(),
          "eval": function () {
            var $32 = Halogen_Query_HalogenM.hoist(dictFunctor)(nat);
            return function ($33) {
              return $32(c["eval"]($33));
            };
          }()
        });
      });
    };
  };
};

var functorComponentSlotBox = new Data_Functor.Functor(function (f) {
  return unComponentSlot(function (slot) {
    return mkComponentSlot({
      get: slot.get,
      pop: slot.pop,
      set: slot.set,
      component: slot.component,
      input: slot.input,
      output: Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(slot.output)
    });
  });
});

var functorComponentSlot = function functorComponentSlot(dictBifunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      if (v instanceof ComponentSlot) {
        return new ComponentSlot(Data_Functor.map(functorComponentSlotBox)(f)(v.value0));
      }

      ;

      if (v instanceof ThunkSlot) {
        return new ThunkSlot(Halogen_VDom_Thunk.mapThunk(function () {
          var $34 = Data_Newtype.under(Data_Bifunctor_Wrap.newtypeWrap)(Data_Bifunctor_Wrap.newtypeWrap)(Data_Bifunctor_Wrap.Wrap)(Data_Functor.map(Data_Bifunctor_Wrap.functorWrap(dictBifunctor))(f));
          var $35 = Data_Bifunctor.lmap(dictBifunctor)(Data_Functor.map(functorComponentSlot(dictBifunctor))(f));
          return function ($36) {
            return $34($35($36));
          };
        }())(v.value0));
      }

      ;
      throw new Error("Failed pattern match at Halogen.Component (line 215, column 11 - line 217, column 94): " + [v.constructor.name]);
    };
  });
};

var defaultEval = {
  handleAction: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)),
  handleQuery: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Nothing.value)),
  receive: Data_Function["const"](Data_Maybe.Nothing.value),
  initialize: Data_Maybe.Nothing.value,
  finalize: Data_Maybe.Nothing.value
};

var componentSlot = function componentSlot(dictCons) {
  return function (dictIsSymbol) {
    return function (dictOrd) {
      return function (label) {
        return function (p) {
          return function (comp) {
            return function (input) {
              return function (output) {
                return mkComponentSlot({
                  get: Halogen_Data_Slot.lookup()(dictIsSymbol)(dictOrd)(label)(p),
                  pop: Halogen_Data_Slot.pop()(dictIsSymbol)(dictOrd)(label)(p),
                  set: Halogen_Data_Slot.insert()(dictIsSymbol)(dictOrd)(label)(p),
                  component: comp,
                  input: input,
                  output: output
                });
              };
            };
          };
        };
      };
    };
  };
};

module.exports = {
  mkComponent: mkComponent,
  unComponent: unComponent,
  hoist: hoist,
  mkEval: mkEval,
  defaultEval: defaultEval,
  ComponentSlot: ComponentSlot,
  ThunkSlot: ThunkSlot,
  componentSlot: componentSlot,
  mkComponentSlot: mkComponentSlot,
  unComponentSlot: unComponentSlot,
  hoistSlot: hoistSlot,
  functorComponentSlotBox: functorComponentSlotBox,
  functorComponentSlot: functorComponentSlot
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Bifunctor.Wrap/index.js":"output/Data.Bifunctor.Wrap/index.js","../Data.Coyoneda/index.js":"output/Data.Coyoneda/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Halogen.Data.Slot/index.js":"output/Halogen.Data.Slot/index.js","../Halogen.Query.HalogenM/index.js":"output/Halogen.Query.HalogenM/index.js","../Halogen.Query.HalogenQ/index.js":"output/Halogen.Query.HalogenQ/index.js","../Halogen.VDom.Thunk/index.js":"output/Halogen.VDom.Thunk/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/DOM.HTML.Indexed.ButtonType/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var ButtonButton = function () {
  function ButtonButton() {}

  ;
  ButtonButton.value = new ButtonButton();
  return ButtonButton;
}();

var ButtonSubmit = function () {
  function ButtonSubmit() {}

  ;
  ButtonSubmit.value = new ButtonSubmit();
  return ButtonSubmit;
}();

var ButtonReset = function () {
  function ButtonReset() {}

  ;
  ButtonReset.value = new ButtonReset();
  return ButtonReset;
}();

var renderButtonType = function renderButtonType(v) {
  if (v instanceof ButtonButton) {
    return "button";
  }

  ;

  if (v instanceof ButtonSubmit) {
    return "submit";
  }

  ;

  if (v instanceof ButtonReset) {
    return "reset";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.ButtonType (line 9, column 20 - line 12, column 25): " + [v.constructor.name]);
};

module.exports = {
  ButtonButton: ButtonButton,
  ButtonSubmit: ButtonSubmit,
  ButtonReset: ButtonReset,
  renderButtonType: renderButtonType
};
},{}],"output/DOM.HTML.Indexed.CrossOriginValue/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Anonymous = function () {
  function Anonymous() {}

  ;
  Anonymous.value = new Anonymous();
  return Anonymous;
}();

var UseCredentials = function () {
  function UseCredentials() {}

  ;
  UseCredentials.value = new UseCredentials();
  return UseCredentials;
}();

var renderCrossOriginValue = function renderCrossOriginValue(v) {
  if (v instanceof Anonymous) {
    return "anonymous";
  }

  ;

  if (v instanceof UseCredentials) {
    return "use-credentials";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.CrossOriginValue (line 8, column 26 - line 10, column 38): " + [v.constructor.name]);
};

module.exports = {
  Anonymous: Anonymous,
  UseCredentials: UseCredentials,
  renderCrossOriginValue: renderCrossOriginValue
};
},{}],"output/DOM.HTML.Indexed.DirValue/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var DirLTR = function () {
  function DirLTR() {}

  ;
  DirLTR.value = new DirLTR();
  return DirLTR;
}();

var DirRTL = function () {
  function DirRTL() {}

  ;
  DirRTL.value = new DirRTL();
  return DirRTL;
}();

var DirAuto = function () {
  function DirAuto() {}

  ;
  DirAuto.value = new DirAuto();
  return DirAuto;
}();

var renderDirValue = function renderDirValue(v) {
  if (v instanceof DirLTR) {
    return "ltr";
  }

  ;

  if (v instanceof DirRTL) {
    return "rtl";
  }

  ;

  if (v instanceof DirAuto) {
    return "auto";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.DirValue (line 9, column 18 - line 12, column 20): " + [v.constructor.name]);
};

module.exports = {
  DirLTR: DirLTR,
  DirRTL: DirRTL,
  DirAuto: DirAuto,
  renderDirValue: renderDirValue
};
},{}],"output/DOM.HTML.Indexed.FormMethod/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var POST = function () {
  function POST() {}

  ;
  POST.value = new POST();
  return POST;
}();

var GET = function () {
  function GET() {}

  ;
  GET.value = new GET();
  return GET;
}();

var renderFormMethod = function renderFormMethod(v) {
  if (v instanceof POST) {
    return "post";
  }

  ;

  if (v instanceof GET) {
    return "get";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.FormMethod (line 8, column 20 - line 10, column 15): " + [v.constructor.name]);
};

module.exports = {
  POST: POST,
  GET: GET,
  renderFormMethod: renderFormMethod
};
},{}],"output/Data.String.Common/foreign.js":[function(require,module,exports) {
"use strict";

exports._localeCompare = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (s1) {
        return function (s2) {
          var result = s1.localeCompare(s2);
          return result < 0 ? lt : result > 0 ? gt : eq;
        };
      };
    };
  };
};

exports.replace = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(s1, s2);
    };
  };
};

exports.replaceAll = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
    };
  };
};

exports.split = function (sep) {
  return function (s) {
    return s.split(sep);
  };
};

exports.toLower = function (s) {
  return s.toLowerCase();
};

exports.toUpper = function (s) {
  return s.toUpperCase();
};

exports.trim = function (s) {
  return s.trim();
};

exports.joinWith = function (s) {
  return function (xs) {
    return xs.join(s);
  };
};
},{}],"output/Data.String.Common/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var $$null = function $$null(s) {
  return s === "";
};

var localeCompare = $foreign["_localeCompare"](Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
module.exports = {
  "null": $$null,
  localeCompare: localeCompare,
  replace: $foreign.replace,
  replaceAll: $foreign.replaceAll,
  split: $foreign.split,
  toLower: $foreign.toLower,
  toUpper: $foreign.toUpper,
  trim: $foreign.trim,
  joinWith: $foreign.joinWith
};
},{"./foreign.js":"output/Data.String.Common/foreign.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js"}],"output/DOM.HTML.Indexed.InputAcceptType/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_String_Common = require("../Data.String.Common/index.js");

var AcceptMediaType = function () {
  function AcceptMediaType(value0) {
    this.value0 = value0;
  }

  ;

  AcceptMediaType.create = function (value0) {
    return new AcceptMediaType(value0);
  };

  return AcceptMediaType;
}();

var AcceptFileExtension = function () {
  function AcceptFileExtension(value0) {
    this.value0 = value0;
  }

  ;

  AcceptFileExtension.create = function (value0) {
    return new AcceptFileExtension(value0);
  };

  return AcceptFileExtension;
}();

var InputAcceptType = function InputAcceptType(x) {
  return x;
};

var semigroupInputAcceptType = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)(v1);
  };
});

var renderInputAcceptTypeAtom = function renderInputAcceptTypeAtom(v) {
  if (v instanceof AcceptMediaType) {
    return v.value0;
  }

  ;

  if (v instanceof AcceptFileExtension) {
    return v.value0;
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.InputAcceptType (line 28, column 29 - line 30, column 33): " + [v.constructor.name]);
};

var renderInputAcceptType = function renderInputAcceptType(v) {
  return Data_String_Common.joinWith(",")(Data_Functor.map(Data_Functor.functorArray)(renderInputAcceptTypeAtom)(v));
};

var mediaType = function mediaType(mt) {
  return [new AcceptMediaType(mt)];
};

var extension = function extension(ext) {
  return [new AcceptFileExtension(ext)];
};

module.exports = {
  InputAcceptType: InputAcceptType,
  mediaType: mediaType,
  extension: extension,
  AcceptMediaType: AcceptMediaType,
  AcceptFileExtension: AcceptFileExtension,
  renderInputAcceptType: renderInputAcceptType,
  renderInputAcceptTypeAtom: renderInputAcceptTypeAtom,
  semigroupInputAcceptType: semigroupInputAcceptType
};
},{"../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.String.Common/index.js":"output/Data.String.Common/index.js"}],"output/DOM.HTML.Indexed.KindValue/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var KindSubtitles = function () {
  function KindSubtitles() {}

  ;
  KindSubtitles.value = new KindSubtitles();
  return KindSubtitles;
}();

var KindCaptions = function () {
  function KindCaptions() {}

  ;
  KindCaptions.value = new KindCaptions();
  return KindCaptions;
}();

var KindDescriptions = function () {
  function KindDescriptions() {}

  ;
  KindDescriptions.value = new KindDescriptions();
  return KindDescriptions;
}();

var KindChapters = function () {
  function KindChapters() {}

  ;
  KindChapters.value = new KindChapters();
  return KindChapters;
}();

var KindMetadata = function () {
  function KindMetadata() {}

  ;
  KindMetadata.value = new KindMetadata();
  return KindMetadata;
}();

var renderKindValue = function renderKindValue(v) {
  if (v instanceof KindSubtitles) {
    return "subtitles";
  }

  ;

  if (v instanceof KindCaptions) {
    return "captions";
  }

  ;

  if (v instanceof KindDescriptions) {
    return "descriptions";
  }

  ;

  if (v instanceof KindChapters) {
    return "chapters";
  }

  ;

  if (v instanceof KindMetadata) {
    return "metadata";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.KindValue (line 11, column 19 - line 16, column 29): " + [v.constructor.name]);
};

module.exports = {
  KindSubtitles: KindSubtitles,
  KindCaptions: KindCaptions,
  KindDescriptions: KindDescriptions,
  KindChapters: KindChapters,
  KindMetadata: KindMetadata,
  renderKindValue: renderKindValue
};
},{}],"output/DOM.HTML.Indexed.MenuType/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var MenuList = function () {
  function MenuList() {}

  ;
  MenuList.value = new MenuList();
  return MenuList;
}();

var MenuContext = function () {
  function MenuContext() {}

  ;
  MenuContext.value = new MenuContext();
  return MenuContext;
}();

var MenuToolbar = function () {
  function MenuToolbar() {}

  ;
  MenuToolbar.value = new MenuToolbar();
  return MenuToolbar;
}();

var renderMenuType = function renderMenuType(v) {
  if (v instanceof MenuList) {
    return "list";
  }

  ;

  if (v instanceof MenuContext) {
    return "context";
  }

  ;

  if (v instanceof MenuToolbar) {
    return "toolbar";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.MenuType (line 9, column 18 - line 12, column 27): " + [v.constructor.name]);
};

module.exports = {
  MenuList: MenuList,
  MenuContext: MenuContext,
  MenuToolbar: MenuToolbar,
  renderMenuType: renderMenuType
};
},{}],"output/DOM.HTML.Indexed.MenuitemType/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var MenuitemCommand = function () {
  function MenuitemCommand() {}

  ;
  MenuitemCommand.value = new MenuitemCommand();
  return MenuitemCommand;
}();

var MenuitemCheckbox = function () {
  function MenuitemCheckbox() {}

  ;
  MenuitemCheckbox.value = new MenuitemCheckbox();
  return MenuitemCheckbox;
}();

var MenuitemRadio = function () {
  function MenuitemRadio() {}

  ;
  MenuitemRadio.value = new MenuitemRadio();
  return MenuitemRadio;
}();

var renderMenuitemType = function renderMenuitemType(v) {
  if (v instanceof MenuitemCommand) {
    return "command";
  }

  ;

  if (v instanceof MenuitemCheckbox) {
    return "checkbox";
  }

  ;

  if (v instanceof MenuitemRadio) {
    return "radio";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.MenuitemType (line 9, column 22 - line 12, column 27): " + [v.constructor.name]);
};

module.exports = {
  MenuitemCommand: MenuitemCommand,
  MenuitemCheckbox: MenuitemCheckbox,
  MenuitemRadio: MenuitemRadio,
  renderMenuitemType: renderMenuitemType
};
},{}],"output/DOM.HTML.Indexed.OnOff/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var On = function () {
  function On() {}

  ;
  On.value = new On();
  return On;
}();

var Off = function () {
  function Off() {}

  ;
  Off.value = new Off();
  return Off;
}();

var renderOnOff = function renderOnOff(v) {
  if (v instanceof On) {
    return "on";
  }

  ;

  if (v instanceof Off) {
    return "off";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.OnOff (line 8, column 15 - line 10, column 15): " + [v.constructor.name]);
};

module.exports = {
  On: On,
  Off: Off,
  renderOnOff: renderOnOff
};
},{}],"output/DOM.HTML.Indexed.OrderedListType/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Uppercase = function () {
  function Uppercase() {}

  ;
  Uppercase.value = new Uppercase();
  return Uppercase;
}();

var Lowercase = function () {
  function Lowercase() {}

  ;
  Lowercase.value = new Lowercase();
  return Lowercase;
}();

var NumeralDecimal = function () {
  function NumeralDecimal() {}

  ;
  NumeralDecimal.value = new NumeralDecimal();
  return NumeralDecimal;
}();

var NumeralRoman = function () {
  function NumeralRoman(value0) {
    this.value0 = value0;
  }

  ;

  NumeralRoman.create = function (value0) {
    return new NumeralRoman(value0);
  };

  return NumeralRoman;
}();

var OrderedListNumeric = function () {
  function OrderedListNumeric(value0) {
    this.value0 = value0;
  }

  ;

  OrderedListNumeric.create = function (value0) {
    return new OrderedListNumeric(value0);
  };

  return OrderedListNumeric;
}();

var OrderedListAlphabetic = function () {
  function OrderedListAlphabetic(value0) {
    this.value0 = value0;
  }

  ;

  OrderedListAlphabetic.create = function (value0) {
    return new OrderedListAlphabetic(value0);
  };

  return OrderedListAlphabetic;
}();

var renderOrderedListType = function renderOrderedListType(v) {
  if (v instanceof OrderedListNumeric && v.value0 instanceof NumeralDecimal) {
    return "1";
  }

  ;

  if (v instanceof OrderedListNumeric && v.value0 instanceof NumeralRoman && v.value0.value0 instanceof Lowercase) {
    return "i";
  }

  ;

  if (v instanceof OrderedListNumeric && v.value0 instanceof NumeralRoman && v.value0.value0 instanceof Uppercase) {
    return "I";
  }

  ;

  if (v instanceof OrderedListAlphabetic && v.value0 instanceof Lowercase) {
    return "a";
  }

  ;

  if (v instanceof OrderedListAlphabetic && v.value0 instanceof Uppercase) {
    return "A";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.OrderedListType (line 16, column 25 - line 21, column 41): " + [v.constructor.name]);
};

module.exports = {
  Uppercase: Uppercase,
  Lowercase: Lowercase,
  NumeralDecimal: NumeralDecimal,
  NumeralRoman: NumeralRoman,
  OrderedListNumeric: OrderedListNumeric,
  OrderedListAlphabetic: OrderedListAlphabetic,
  renderOrderedListType: renderOrderedListType
};
},{}],"output/DOM.HTML.Indexed.PreloadValue/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var PreloadNone = function () {
  function PreloadNone() {}

  ;
  PreloadNone.value = new PreloadNone();
  return PreloadNone;
}();

var PreloadAuto = function () {
  function PreloadAuto() {}

  ;
  PreloadAuto.value = new PreloadAuto();
  return PreloadAuto;
}();

var PreloadMetadata = function () {
  function PreloadMetadata() {}

  ;
  PreloadMetadata.value = new PreloadMetadata();
  return PreloadMetadata;
}();

var renderPreloadValue = function renderPreloadValue(v) {
  if (v instanceof PreloadNone) {
    return "none";
  }

  ;

  if (v instanceof PreloadAuto) {
    return "auto";
  }

  ;

  if (v instanceof PreloadMetadata) {
    return "metadata";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.PreloadValue (line 9, column 22 - line 12, column 32): " + [v.constructor.name]);
};

module.exports = {
  PreloadNone: PreloadNone,
  PreloadAuto: PreloadAuto,
  PreloadMetadata: PreloadMetadata,
  renderPreloadValue: renderPreloadValue
};
},{}],"output/DOM.HTML.Indexed.ScopeValue/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var ScopeRow = function () {
  function ScopeRow() {}

  ;
  ScopeRow.value = new ScopeRow();
  return ScopeRow;
}();

var ScopeCol = function () {
  function ScopeCol() {}

  ;
  ScopeCol.value = new ScopeCol();
  return ScopeCol;
}();

var ScopeRowGroup = function () {
  function ScopeRowGroup() {}

  ;
  ScopeRowGroup.value = new ScopeRowGroup();
  return ScopeRowGroup;
}();

var ScopeColGroup = function () {
  function ScopeColGroup() {}

  ;
  ScopeColGroup.value = new ScopeColGroup();
  return ScopeColGroup;
}();

var ScopeAuto = function () {
  function ScopeAuto() {}

  ;
  ScopeAuto.value = new ScopeAuto();
  return ScopeAuto;
}();

var renderScopeValue = function renderScopeValue(v) {
  if (v instanceof ScopeRow) {
    return "row";
  }

  ;

  if (v instanceof ScopeCol) {
    return "col";
  }

  ;

  if (v instanceof ScopeRowGroup) {
    return "rowgroup";
  }

  ;

  if (v instanceof ScopeColGroup) {
    return "colgroup";
  }

  ;

  if (v instanceof ScopeAuto) {
    return "auto";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.ScopeValue (line 11, column 20 - line 16, column 22): " + [v.constructor.name]);
};

module.exports = {
  ScopeRow: ScopeRow,
  ScopeCol: ScopeCol,
  ScopeRowGroup: ScopeRowGroup,
  ScopeColGroup: ScopeColGroup,
  ScopeAuto: ScopeAuto,
  renderScopeValue: renderScopeValue
};
},{}],"output/DOM.HTML.Indexed.StepValue/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Show = require("../Data.Show/index.js");

var Any = function () {
  function Any() {}

  ;
  Any.value = new Any();
  return Any;
}();

var Step = function () {
  function Step(value0) {
    this.value0 = value0;
  }

  ;

  Step.create = function (value0) {
    return new Step(value0);
  };

  return Step;
}();

var renderStepValue = function renderStepValue(v) {
  if (v instanceof Any) {
    return "any";
  }

  ;

  if (v instanceof Step) {
    return Data_Show.show(Data_Show.showNumber)(v.value0);
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.StepValue (line 10, column 19 - line 12, column 19): " + [v.constructor.name]);
};

module.exports = {
  Any: Any,
  Step: Step,
  renderStepValue: renderStepValue
};
},{"../Data.Show/index.js":"output/Data.Show/index.js"}],"output/DOM.HTML.Indexed.WrapValue/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Hard = function () {
  function Hard() {}

  ;
  Hard.value = new Hard();
  return Hard;
}();

var Soft = function () {
  function Soft() {}

  ;
  Soft.value = new Soft();
  return Soft;
}();

var renderWrapValue = function renderWrapValue(v) {
  if (v instanceof Hard) {
    return "hard";
  }

  ;

  if (v instanceof Soft) {
    return "soft";
  }

  ;
  throw new Error("Failed pattern match at DOM.HTML.Indexed.WrapValue (line 8, column 19 - line 10, column 17): " + [v.constructor.name]);
};

module.exports = {
  Hard: Hard,
  Soft: Soft,
  renderWrapValue: renderWrapValue
};
},{}],"output/Data.MediaType/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var MediaType = function MediaType(x) {
  return x;
};

var showMediaType = new Data_Show.Show(function (v) {
  return "(MediaType " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
  return n;
}, MediaType);
var eqMediaType = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x === y;
  };
});
var ordMediaType = new Data_Ord.Ord(function () {
  return eqMediaType;
}, function (x) {
  return function (y) {
    return Data_Ord.compare(Data_Ord.ordString)(x)(y);
  };
});
module.exports = {
  MediaType: MediaType,
  newtypeMediaType: newtypeMediaType,
  eqMediaType: eqMediaType,
  ordMediaType: ordMediaType,
  showMediaType: showMediaType
};
},{"../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Halogen.Query.Input/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var RefLabel = function RefLabel(x) {
  return x;
};

var RefUpdate = function () {
  function RefUpdate(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  RefUpdate.create = function (value0) {
    return function (value1) {
      return new RefUpdate(value0, value1);
    };
  };

  return RefUpdate;
}();

var Action = function () {
  function Action(value0) {
    this.value0 = value0;
  }

  ;

  Action.create = function (value0) {
    return new Action(value0);
  };

  return Action;
}();

var ordRefLabel = Data_Ord.ordString;
var newtypeRefLabel = new Data_Newtype.Newtype(function (n) {
  return n;
}, RefLabel);
var functorInput = new Data_Functor.Functor(function (f) {
  return function (m) {
    if (m instanceof RefUpdate) {
      return new RefUpdate(m.value0, m.value1);
    }

    ;

    if (m instanceof Action) {
      return new Action(f(m.value0));
    }

    ;
    throw new Error("Failed pattern match at Halogen.Query.Input (line 19, column 1 - line 19, column 46): " + [m.constructor.name]);
  };
});
var eqRefLabel = Data_Eq.eqString;
module.exports = {
  RefLabel: RefLabel,
  RefUpdate: RefUpdate,
  Action: Action,
  newtypeRefLabel: newtypeRefLabel,
  eqRefLabel: eqRefLabel,
  ordRefLabel: ordRefLabel,
  functorInput: functorInput
};
},{"../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js"}],"output/Foreign/foreign.js":[function(require,module,exports) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.unsafeToForeign = function (value) {
  return value;
};

exports.unsafeFromForeign = function (value) {
  return value;
};

exports.typeOf = function (value) {
  return _typeof(value);
};

exports.tagOf = function (value) {
  return Object.prototype.toString.call(value).slice(8, -1);
};

exports.isNull = function (value) {
  return value === null;
};

exports.isUndefined = function (value) {
  return value === undefined;
};

exports.isArray = Array.isArray || function (value) {
  return Object.prototype.toString.call(value) === "[object Array]";
};
},{}],"output/Control.Monad.Except/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);

var runExcept = function () {
  var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
  return function ($1) {
    return $0(Control_Monad_Except_Trans.runExceptT($1));
  };
}();

var mapExcept = function mapExcept(f) {
  return Control_Monad_Except_Trans.mapExceptT(function () {
    var $2 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
    return function ($3) {
      return Data_Identity.Identity(f($2($3)));
    };
  }());
};

module.exports = {
  runExcept: runExcept,
  mapExcept: mapExcept,
  withExcept: withExcept
};
},{"../Control.Monad.Except.Trans/index.js":"output/Control.Monad.Except.Trans/index.js","../Data.Identity/index.js":"output/Data.Identity/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js"}],"output/Data.Int/foreign.js":[function(require,module,exports) {
"use strict";

exports.fromNumberImpl = function (just) {
  return function (nothing) {
    return function (n) {
      /* jshint bitwise: false */
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};

exports.toNumber = function (n) {
  return n;
};

exports.fromStringAsImpl = function (just) {
  return function (nothing) {
    return function (radix) {
      var digits;

      if (radix < 11) {
        digits = "[0-" + (radix - 1).toString() + "]";
      } else if (radix === 11) {
        digits = "[0-9a]";
      } else {
        digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
      }

      var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");
      return function (s) {
        /* jshint bitwise: false */
        if (pattern.test(s)) {
          var i = parseInt(s, radix);
          return (i | 0) === i ? just(i) : nothing;
        } else {
          return nothing;
        }
      };
    };
  };
};

exports.toStringAs = function (radix) {
  return function (i) {
    return i.toString(radix);
  };
};

exports.quot = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x / y | 0;
  };
};

exports.rem = function (x) {
  return function (y) {
    return x % y;
  };
};

exports.pow = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return Math.pow(x, y) | 0;
  };
};
},{}],"output/Data.DivisionRing/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var DivisionRing = function DivisionRing(Ring0, recip) {
  this.Ring0 = Ring0;
  this.recip = recip;
};

var recip = function recip(dict) {
  return dict.recip;
};

var rightDiv = function rightDiv(dictDivisionRing) {
  return function (a) {
    return function (b) {
      return Data_Semiring.mul(dictDivisionRing.Ring0().Semiring0())(a)(recip(dictDivisionRing)(b));
    };
  };
};

var leftDiv = function leftDiv(dictDivisionRing) {
  return function (a) {
    return function (b) {
      return Data_Semiring.mul(dictDivisionRing.Ring0().Semiring0())(recip(dictDivisionRing)(b))(a);
    };
  };
};

var divisionringNumber = new DivisionRing(function () {
  return Data_Ring.ringNumber;
}, function (x) {
  return 1.0 / x;
});
module.exports = {
  DivisionRing: DivisionRing,
  recip: recip,
  leftDiv: leftDiv,
  rightDiv: rightDiv,
  divisionringNumber: divisionringNumber
};
},{"../Data.Ring/index.js":"output/Data.Ring/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js"}],"output/Global/foreign.js":[function(require,module,exports) {
/* globals exports */
"use strict";

exports.nan = NaN;
exports.isNaN = isNaN;
exports.infinity = Infinity;
exports.isFinite = isFinite;

exports.readInt = function (radix) {
  return function (n) {
    return parseInt(n, radix);
  };
};

exports.readFloat = parseFloat;

var formatNumber = function formatNumber(format) {
  return function (fail, succ, digits, n) {
    try {
      return succ(n[format](digits));
    } catch (e) {
      return fail(e.message);
    }
  };
};

exports._toFixed = formatNumber("toFixed");
exports._toExponential = formatNumber("toExponential");
exports._toPrecision = formatNumber("toPrecision");

var encdecURI = function encdecURI(encdec) {
  return function (fail, succ, s) {
    try {
      return succ(encdec(s));
    } catch (e) {
      return fail(e.message);
    }
  };
};

exports._decodeURI = encdecURI(decodeURI);
exports._encodeURI = encdecURI(encodeURI);
exports._decodeURIComponent = encdecURI(decodeURIComponent);
exports._encodeURIComponent = encdecURI(encodeURIComponent);
},{}],"output/Global/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var toPrecision = function toPrecision(digits) {
  return function (n) {
    return $foreign["_toPrecision"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
  };
};

var toFixed = function toFixed(digits) {
  return function (n) {
    return $foreign["_toFixed"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
  };
};

var toExponential = function toExponential(digits) {
  return function (n) {
    return $foreign["_toExponential"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
  };
};

var $$encodeURIComponent = function $$encodeURIComponent(s) {
  return $foreign["_encodeURIComponent"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};

var $$encodeURI = function $$encodeURI(s) {
  return $foreign["_encodeURI"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};

var $$decodeURIComponent = function $$decodeURIComponent(s) {
  return $foreign["_decodeURIComponent"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};

var $$decodeURI = function $$decodeURI(s) {
  return $foreign["_decodeURI"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};

module.exports = {
  toFixed: toFixed,
  toExponential: toExponential,
  toPrecision: toPrecision,
  "decodeURI": $$decodeURI,
  "encodeURI": $$encodeURI,
  "decodeURIComponent": $$decodeURIComponent,
  "encodeURIComponent": $$encodeURIComponent,
  nan: $foreign.nan,
  "isNaN": $foreign["isNaN"],
  infinity: $foreign.infinity,
  "isFinite": $foreign["isFinite"],
  readInt: $foreign.readInt,
  readFloat: $foreign.readFloat
};
},{"./foreign.js":"output/Global/foreign.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js"}],"output/Math/foreign.js":[function(require,module,exports) {
"use strict"; // module Math

exports.abs = Math.abs;
exports.acos = Math.acos;
exports.asin = Math.asin;
exports.atan = Math.atan;

exports.atan2 = function (y) {
  return function (x) {
    return Math.atan2(y, x);
  };
};

exports.ceil = Math.ceil;
exports.cos = Math.cos;
exports.exp = Math.exp;
exports.floor = Math.floor;

exports.trunc = Math.trunc || function (n) {
  return n < 0 ? Math.ceil(n) : Math.floor(n);
};

exports.log = Math.log;

exports.max = function (n1) {
  return function (n2) {
    return Math.max(n1, n2);
  };
};

exports.min = function (n1) {
  return function (n2) {
    return Math.min(n1, n2);
  };
};

exports.pow = function (n) {
  return function (p) {
    return Math.pow(n, p);
  };
};

exports.remainder = function (n) {
  return function (m) {
    return n % m;
  };
};

exports.round = Math.round;
exports.sin = Math.sin;
exports.sqrt = Math.sqrt;
exports.tan = Math.tan;
exports.e = Math.E;
exports.ln2 = Math.LN2;
exports.ln10 = Math.LN10;
exports.log2e = Math.LOG2E;
exports.log10e = Math.LOG10E;
exports.pi = Math.PI;
exports.tau = 2 * Math.PI;
exports.sqrt1_2 = Math.SQRT1_2;
exports.sqrt2 = Math.SQRT2;
},{}],"output/Math/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  abs: $foreign.abs,
  acos: $foreign.acos,
  asin: $foreign.asin,
  atan: $foreign.atan,
  atan2: $foreign.atan2,
  ceil: $foreign.ceil,
  cos: $foreign.cos,
  exp: $foreign.exp,
  floor: $foreign.floor,
  log: $foreign.log,
  max: $foreign.max,
  min: $foreign.min,
  pow: $foreign.pow,
  round: $foreign.round,
  sin: $foreign.sin,
  sqrt: $foreign.sqrt,
  tan: $foreign.tan,
  trunc: $foreign.trunc,
  remainder: $foreign.remainder,
  e: $foreign.e,
  ln2: $foreign.ln2,
  ln10: $foreign.ln10,
  log2e: $foreign.log2e,
  log10e: $foreign.log10e,
  pi: $foreign.pi,
  tau: $foreign.tau,
  sqrt1_2: $foreign.sqrt1_2,
  sqrt2: $foreign.sqrt2
};
},{"./foreign.js":"output/Math/foreign.js"}],"output/Data.Int/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_DivisionRing = require("../Data.DivisionRing/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Global = require("../Global/index.js");

var $$Math = require("../Math/index.js");

var Radix = function Radix(x) {
  return x;
};

var Even = function () {
  function Even() {}

  ;
  Even.value = new Even();
  return Even;
}();

var Odd = function () {
  function Odd() {}

  ;
  Odd.value = new Odd();
  return Odd;
}();

var showParity = new Data_Show.Show(function (v) {
  if (v instanceof Even) {
    return "Even";
  }

  ;

  if (v instanceof Odd) {
    return "Odd";
  }

  ;
  throw new Error("Failed pattern match at Data.Int (line 112, column 1 - line 114, column 19): " + [v.constructor.name]);
});

var radix = function radix(n) {
  if (n >= 2 && n <= 36) {
    return new Data_Maybe.Just(n);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Int (line 193, column 1 - line 193, column 28): " + [n.constructor.name]);
};

var odd = function odd(x) {
  return (x & 1) !== 0;
};

var octal = 8;
var hexadecimal = 16;
var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromString = fromStringAs(10);
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var unsafeClamp = function unsafeClamp(x) {
  if (x === Global.infinity) {
    return 0;
  }

  ;

  if (x === -Global.infinity) {
    return 0;
  }

  ;

  if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
    return Data_Bounded.top(Data_Bounded.boundedInt);
  }

  ;

  if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
    return Data_Bounded.bottom(Data_Bounded.boundedInt);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.fromMaybe(0)(fromNumber(x));
  }

  ;
  throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [x.constructor.name]);
};

var round = function round($23) {
  return unsafeClamp($$Math.round($23));
};

var floor = function floor($24) {
  return unsafeClamp($$Math.floor($24));
};

var even = function even(x) {
  return (x & 1) === 0;
};

var parity = function parity(n) {
  var $14 = even(n);

  if ($14) {
    return Even.value;
  }

  ;
  return Odd.value;
};

var eqParity = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof Even && y instanceof Even) {
      return true;
    }

    ;

    if (x instanceof Odd && y instanceof Odd) {
      return true;
    }

    ;
    return false;
  };
});
var ordParity = new Data_Ord.Ord(function () {
  return eqParity;
}, function (x) {
  return function (y) {
    if (x instanceof Even && y instanceof Even) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Even) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Even) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Odd && y instanceof Odd) {
      return Data_Ordering.EQ.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Int (line 110, column 1 - line 110, column 40): " + [x.constructor.name, y.constructor.name]);
  };
});
var semiringParity = new Data_Semiring.Semiring(function (x) {
  return function (y) {
    var $19 = Data_Eq.eq(eqParity)(x)(y);

    if ($19) {
      return Even.value;
    }

    ;
    return Odd.value;
  };
}, function (v) {
  return function (v1) {
    if (v instanceof Odd && v1 instanceof Odd) {
      return Odd.value;
    }

    ;
    return Even.value;
  };
}, Odd.value, Even.value);
var ringParity = new Data_Ring.Ring(function () {
  return semiringParity;
}, Data_Semiring.add(semiringParity));
var divisionRingParity = new Data_DivisionRing.DivisionRing(function () {
  return ringParity;
}, Control_Category.identity(Control_Category.categoryFn));
var decimal = 10;
var commutativeRingParity = new Data_CommutativeRing.CommutativeRing(function () {
  return ringParity;
});
var euclideanRingParity = new Data_EuclideanRing.EuclideanRing(function () {
  return commutativeRingParity;
}, function (v) {
  if (v instanceof Even) {
    return 0;
  }

  ;

  if (v instanceof Odd) {
    return 1;
  }

  ;
  throw new Error("Failed pattern match at Data.Int (line 132, column 1 - line 136, column 17): " + [v.constructor.name]);
}, function (x) {
  return function (v) {
    return x;
  };
}, function (v) {
  return function (v1) {
    return Even.value;
  };
});

var ceil = function ceil($25) {
  return unsafeClamp($$Math.ceil($25));
};

var boundedParity = new Data_Bounded.Bounded(function () {
  return ordParity;
}, Even.value, Odd.value);
var binary = 2;
var base36 = 36;
module.exports = {
  fromNumber: fromNumber,
  ceil: ceil,
  floor: floor,
  round: round,
  fromString: fromString,
  radix: radix,
  binary: binary,
  octal: octal,
  decimal: decimal,
  hexadecimal: hexadecimal,
  base36: base36,
  fromStringAs: fromStringAs,
  Even: Even,
  Odd: Odd,
  parity: parity,
  even: even,
  odd: odd,
  eqParity: eqParity,
  ordParity: ordParity,
  showParity: showParity,
  boundedParity: boundedParity,
  semiringParity: semiringParity,
  ringParity: ringParity,
  commutativeRingParity: commutativeRingParity,
  euclideanRingParity: euclideanRingParity,
  divisionRingParity: divisionRingParity,
  toNumber: $foreign.toNumber,
  toStringAs: $foreign.toStringAs,
  quot: $foreign.quot,
  rem: $foreign.rem,
  pow: $foreign.pow
};
},{"./foreign.js":"output/Data.Int/foreign.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.CommutativeRing/index.js":"output/Data.CommutativeRing/index.js","../Data.DivisionRing/index.js":"output/Data.DivisionRing/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.EuclideanRing/index.js":"output/Data.EuclideanRing/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Ring/index.js":"output/Data.Ring/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Global/index.js":"output/Global/index.js","../Math/index.js":"output/Math/index.js"}],"output/Data.String.CodeUnits/foreign.js":[function(require,module,exports) {
"use strict";

exports.fromCharArray = function (a) {
  return a.join("");
};

exports.toCharArray = function (s) {
  return s.split("");
};

exports.singleton = function (c) {
  return c;
};

exports._charAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (s) {
        return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
      };
    };
  };
};

exports._toChar = function (just) {
  return function (nothing) {
    return function (s) {
      return s.length === 1 ? just(s) : nothing;
    };
  };
};

exports.length = function (s) {
  return s.length;
};

exports.countPrefix = function (p) {
  return function (s) {
    var i = 0;

    while (i < s.length && p(s.charAt(i))) {
      i++;
    }

    return i;
  };
};

exports._indexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.indexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports._indexOfStartingAt = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.indexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports._lastIndexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.lastIndexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports._lastIndexOfStartingAt = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.lastIndexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports.take = function (n) {
  return function (s) {
    return s.substr(0, n);
  };
};

exports.drop = function (n) {
  return function (s) {
    return s.substring(n);
  };
};

exports._slice = function (b) {
  return function (e) {
    return function (s) {
      return s.slice(b, e);
    };
  };
};

exports.splitAt = function (i) {
  return function (s) {
    return {
      before: s.substring(0, i),
      after: s.substring(i)
    };
  };
};
},{}],"output/Data.String.Unsafe/foreign.js":[function(require,module,exports) {
"use strict";

exports.charAt = function (i) {
  return function (s) {
    if (i >= 0 && i < s.length) return s.charAt(i);
    throw new Error("Data.String.Unsafe.charAt: Invalid index.");
  };
};

exports.char = function (s) {
  if (s.length === 1) return s.charAt(0);
  throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
};
},{}],"output/Data.String.Unsafe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  "char": $foreign["char"],
  charAt: $foreign.charAt
};
},{"./foreign.js":"output/Data.String.Unsafe/foreign.js"}],"output/Data.String.CodeUnits/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");

var uncons = function uncons(v) {
  if (v === "") {
    return Data_Maybe.Nothing.value;
  }

  ;
  return new Data_Maybe.Just({
    head: Data_String_Unsafe.charAt(0)(v),
    tail: $foreign.drop(1)(v)
  });
};

var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var takeWhile = function takeWhile(p) {
  return function (s) {
    return $foreign.take($foreign.countPrefix(p)(s))(s);
  };
};

var takeRight = function takeRight(i) {
  return function (s) {
    return $foreign.drop($foreign.length(s) - i | 0)(s);
  };
};

var stripSuffix = function stripSuffix(v) {
  return function (str) {
    var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);
    var $9 = v1.after === v;

    if ($9) {
      return new Data_Maybe.Just(v1.before);
    }

    ;
    return Data_Maybe.Nothing.value;
  };
};

var stripPrefix = function stripPrefix(v) {
  return function (str) {
    var v1 = $foreign.splitAt($foreign.length(v))(str);
    var $15 = v1.before === v;

    if ($15) {
      return new Data_Maybe.Just(v1.after);
    }

    ;
    return Data_Maybe.Nothing.value;
  };
};

var slice = function slice(b) {
  return function (e) {
    return function (s) {
      var l = $foreign.length(s);

      var norm = function norm(x) {
        if (x < 0) {
          return l + x | 0;
        }

        ;

        if (Data_Boolean.otherwise) {
          return x;
        }

        ;
        throw new Error("Failed pattern match at Data.String.CodeUnits (line 312, column 5 - line 313, column 27): " + [x.constructor.name]);
      };

      var e$prime = norm(e);
      var b$prime = norm(b);
      var $19 = b$prime < 0 || b$prime >= l || e$prime < 0 || e$prime > l || b$prime > e$prime;

      if ($19) {
        return Data_Maybe.Nothing.value;
      }

      ;
      return new Data_Maybe.Just($foreign["_slice"](b)(e)(s));
    };
  };
};

var lastIndexOf$prime = $foreign["_lastIndexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var dropWhile = function dropWhile(p) {
  return function (s) {
    return $foreign.drop($foreign.countPrefix(p)(s))(s);
  };
};

var dropRight = function dropRight(i) {
  return function (s) {
    return $foreign.take($foreign.length(s) - i | 0)(s);
  };
};

var contains = function contains(pat) {
  var $20 = indexOf(pat);
  return function ($21) {
    return Data_Maybe.isJust($20($21));
  };
};

var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
  stripPrefix: stripPrefix,
  stripSuffix: stripSuffix,
  contains: contains,
  charAt: charAt,
  toChar: toChar,
  uncons: uncons,
  indexOf: indexOf,
  "indexOf'": indexOf$prime,
  lastIndexOf: lastIndexOf,
  "lastIndexOf'": lastIndexOf$prime,
  takeRight: takeRight,
  takeWhile: takeWhile,
  dropRight: dropRight,
  dropWhile: dropWhile,
  slice: slice,
  singleton: $foreign.singleton,
  fromCharArray: $foreign.fromCharArray,
  toCharArray: $foreign.toCharArray,
  length: $foreign.length,
  countPrefix: $foreign.countPrefix,
  take: $foreign.take,
  drop: $foreign.drop,
  splitAt: $foreign.splitAt
};
},{"./foreign.js":"output/Data.String.CodeUnits/foreign.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.String.Unsafe/index.js":"output/Data.String.Unsafe/index.js"}],"output/Foreign/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Except = require("../Control.Monad.Except/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");

var ForeignError = function () {
  function ForeignError(value0) {
    this.value0 = value0;
  }

  ;

  ForeignError.create = function (value0) {
    return new ForeignError(value0);
  };

  return ForeignError;
}();

var TypeMismatch = function () {
  function TypeMismatch(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  TypeMismatch.create = function (value0) {
    return function (value1) {
      return new TypeMismatch(value0, value1);
    };
  };

  return TypeMismatch;
}();

var ErrorAtIndex = function () {
  function ErrorAtIndex(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  ErrorAtIndex.create = function (value0) {
    return function (value1) {
      return new ErrorAtIndex(value0, value1);
    };
  };

  return ErrorAtIndex;
}();

var ErrorAtProperty = function () {
  function ErrorAtProperty(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  ErrorAtProperty.create = function (value0) {
    return function (value1) {
      return new ErrorAtProperty(value0, value1);
    };
  };

  return ErrorAtProperty;
}();

var showForeignError = new Data_Show.Show(function (v) {
  if (v instanceof ForeignError) {
    return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
  }

  ;

  if (v instanceof ErrorAtIndex) {
    return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
  }

  ;

  if (v instanceof ErrorAtProperty) {
    return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
  }

  ;

  if (v instanceof TypeMismatch) {
    return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
  }

  ;
  throw new Error("Failed pattern match at Foreign (line 63, column 1 - line 67, column 89): " + [v.constructor.name]);
});

var renderForeignError = function renderForeignError(v) {
  if (v instanceof ForeignError) {
    return v.value0;
  }

  ;

  if (v instanceof ErrorAtIndex) {
    return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
  }

  ;

  if (v instanceof ErrorAtProperty) {
    return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
  }

  ;

  if (v instanceof TypeMismatch) {
    return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
  }

  ;
  throw new Error("Failed pattern match at Foreign (line 72, column 1 - line 72, column 45): " + [v.constructor.name]);
};

var readUndefined = function readUndefined(value) {
  if ($foreign.isUndefined(value)) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
  }

  ;
  throw new Error("Failed pattern match at Foreign (line 157, column 1 - line 157, column 46): " + [value.constructor.name]);
};

var readNullOrUndefined = function readNullOrUndefined(value) {
  if ($foreign.isNull(value) || $foreign.isUndefined(value)) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
  }

  ;
  throw new Error("Failed pattern match at Foreign (line 162, column 1 - line 162, column 52): " + [value.constructor.name]);
};

var readNull = function readNull(value) {
  if ($foreign.isNull(value)) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
  }

  ;
  throw new Error("Failed pattern match at Foreign (line 152, column 1 - line 152, column 41): " + [value.constructor.name]);
};

var fail = function () {
  var $107 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
  return function ($108) {
    return $107(Data_List_NonEmpty.singleton($108));
  };
}();

var readArray = function readArray(value) {
  if ($foreign.isArray(value)) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
  }

  ;

  if (Data_Boolean.otherwise) {
    return fail(new TypeMismatch("array", $foreign.tagOf(value)));
  }

  ;
  throw new Error("Failed pattern match at Foreign (line 147, column 1 - line 147, column 42): " + [value.constructor.name]);
};

var unsafeReadTagged = function unsafeReadTagged(tag) {
  return function (value) {
    if ($foreign.tagOf(value) === tag) {
      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
    }

    ;

    if (Data_Boolean.otherwise) {
      return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
    }

    ;
    throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [tag.constructor.name, value.constructor.name]);
  };
};

var readBoolean = unsafeReadTagged("Boolean");
var readNumber = unsafeReadTagged("Number");

var readInt = function readInt(value) {
  var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));

  var fromNumber = function () {
    var $109 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
    return function ($110) {
      return $109(Data_Int.fromNumber($110));
    };
  }();

  return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
};

var readString = unsafeReadTagged("String");

var readChar = function readChar(value) {
  var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Char", $foreign.tagOf(value))));

  var fromString = function () {
    var $111 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
    return function ($112) {
      return $111(Data_String_CodeUnits.toChar($112));
    };
  }();

  return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromString))(readString(value));
};

var eqForeignError = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof ForeignError && y instanceof ForeignError) {
      return x.value0 === y.value0;
    }

    ;

    if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
      return x.value0 === y.value0 && x.value1 === y.value1;
    }

    ;

    if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
      return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
    }

    ;

    if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
      return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
    }

    ;
    return false;
  };
});
var ordForeignError = new Data_Ord.Ord(function () {
  return eqForeignError;
}, function (x) {
  return function (y) {
    if (x instanceof ForeignError && y instanceof ForeignError) {
      return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
    }

    ;

    if (x instanceof ForeignError) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof ForeignError) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
      var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);

      if (v instanceof Data_Ordering.LT) {
        return Data_Ordering.LT.value;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return Data_Ordering.GT.value;
      }

      ;
      return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
    }

    ;

    if (x instanceof TypeMismatch) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof TypeMismatch) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
      var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);

      if (v instanceof Data_Ordering.LT) {
        return Data_Ordering.LT.value;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return Data_Ordering.GT.value;
      }

      ;
      return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
    }

    ;

    if (x instanceof ErrorAtIndex) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof ErrorAtIndex) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
      var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);

      if (v instanceof Data_Ordering.LT) {
        return Data_Ordering.LT.value;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return Data_Ordering.GT.value;
      }

      ;
      return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
    }

    ;
    throw new Error("Failed pattern match at Foreign (line 61, column 1 - line 61, column 52): " + [x.constructor.name, y.constructor.name]);
  };
});
module.exports = {
  ForeignError: ForeignError,
  TypeMismatch: TypeMismatch,
  ErrorAtIndex: ErrorAtIndex,
  ErrorAtProperty: ErrorAtProperty,
  renderForeignError: renderForeignError,
  unsafeReadTagged: unsafeReadTagged,
  readString: readString,
  readChar: readChar,
  readBoolean: readBoolean,
  readNumber: readNumber,
  readInt: readInt,
  readArray: readArray,
  readNull: readNull,
  readUndefined: readUndefined,
  readNullOrUndefined: readNullOrUndefined,
  fail: fail,
  eqForeignError: eqForeignError,
  ordForeignError: ordForeignError,
  showForeignError: showForeignError,
  unsafeToForeign: $foreign.unsafeToForeign,
  unsafeFromForeign: $foreign.unsafeFromForeign,
  typeOf: $foreign.typeOf,
  tagOf: $foreign.tagOf,
  isNull: $foreign.isNull,
  isUndefined: $foreign.isUndefined,
  isArray: $foreign.isArray
};
},{"./foreign.js":"output/Foreign/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Except/index.js":"output/Control.Monad.Except/index.js","../Control.Monad.Except.Trans/index.js":"output/Control.Monad.Except.Trans/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Identity/index.js":"output/Data.Identity/index.js","../Data.Int/index.js":"output/Data.Int/index.js","../Data.List.NonEmpty/index.js":"output/Data.List.NonEmpty/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.String.CodeUnits/index.js":"output/Data.String.CodeUnits/index.js"}],"output/Foreign.Object/foreign.js":[function(require,module,exports) {
"use strict";

exports._copyST = function (m) {
  return function () {
    var r = {};

    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r[k] = m[k];
      }
    }

    return r;
  };
};

exports.empty = {};

exports.runST = function (f) {
  return f();
};

exports._fmapObject = function (m0, f) {
  var m = {};

  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(m0[k]);
    }
  }

  return m;
};

exports._mapWithKey = function (m0, f) {
  var m = {};

  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(k)(m0[k]);
    }
  }

  return m;
};

exports._foldM = function (bind) {
  return function (f) {
    return function (mz) {
      return function (m) {
        var acc = mz;

        function g(k) {
          return function (z) {
            return f(z)(k)(m[k]);
          };
        }

        for (var k in m) {
          if (hasOwnProperty.call(m, k)) {
            acc = bind(acc)(g(k));
          }
        }

        return acc;
      };
    };
  };
};

exports._foldSCObject = function (m, z, f, fromMaybe) {
  var acc = z;

  for (var k in m) {
    if (hasOwnProperty.call(m, k)) {
      var maybeR = f(acc)(k)(m[k]);
      var r = fromMaybe(null)(maybeR);
      if (r === null) return acc;else acc = r;
    }
  }

  return acc;
};

exports.all = function (f) {
  return function (m) {
    for (var k in m) {
      if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
    }

    return true;
  };
};

exports.size = function (m) {
  var s = 0;

  for (var k in m) {
    if (hasOwnProperty.call(m, k)) {
      ++s;
    }
  }

  return s;
};

exports._lookup = function (no, yes, k, m) {
  return k in m ? yes(m[k]) : no;
};

exports._lookupST = function (no, yes, k, m) {
  return function () {
    return k in m ? yes(m[k]) : no;
  };
};

function toArrayWithKey(f) {
  return function (m) {
    var r = [];

    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r.push(f(k)(m[k]));
      }
    }

    return r;
  };
}

exports.toArrayWithKey = toArrayWithKey;
exports.keys = Object.keys || toArrayWithKey(function (k) {
  return function () {
    return k;
  };
});
},{}],"output/Foreign.Object/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Foreign_Object_ST = require("../Foreign.Object.ST/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var values = $foreign.toArrayWithKey(function (v) {
  return function (v1) {
    return v1;
  };
});

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  var $36 = Data_Array.toUnfoldable(dictUnfoldable);
  var $37 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
  return function ($38) {
    return $36($37($38));
  };
};

var toAscUnfoldable = function toAscUnfoldable(dictUnfoldable) {
  var $39 = Data_Array.toUnfoldable(dictUnfoldable);
  var $40 = Data_Array.sortWith(Data_Ord.ordString)(Data_Tuple.fst);
  var $41 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
  return function ($42) {
    return $39($40($41($42)));
  };
};

var toAscArray = toAscUnfoldable(Data_Unfoldable.unfoldableArray);
var toArray = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
var thawST = $foreign["_copyST"];

var singleton = function singleton(k) {
  return function (v) {
    return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
  };
};

var showObject = function showObject(dictShow) {
  return new Data_Show.Show(function (m) {
    return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(dictShow)))(toArray(m)) + ")");
  });
};

var mutate = function mutate(f) {
  return function (m) {
    return $foreign.runST(function __do() {
      var s = thawST(m)();
      f(s)();
      return s;
    });
  };
};

var member = Data_Function_Uncurried.runFn4($foreign["_lookup"])(false)(Data_Function["const"](true));

var mapWithKey = function mapWithKey(f) {
  return function (m) {
    return $foreign["_mapWithKey"](m, f);
  };
};

var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);

var isSubmap = function isSubmap(dictEq) {
  return function (m1) {
    return function (m2) {
      var f = function f(k) {
        return function (v) {
          return $foreign["_lookup"](false, Data_Eq.eq(dictEq)(v), k, m2);
        };
      };

      return $foreign.all(f)(m1);
    };
  };
};

var isEmpty = $foreign.all(function (v) {
  return function (v1) {
    return false;
  };
});

var insert = function insert(k) {
  return function (v) {
    return mutate(Foreign_Object_ST.poke(k)(v));
  };
};

var functorObject = new Data_Functor.Functor(function (f) {
  return function (m) {
    return $foreign["_fmapObject"](m, f);
  };
});
var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorObject;
}, mapWithKey);

var fromHomogeneous = function fromHomogeneous(dictHomogeneous) {
  return Unsafe_Coerce.unsafeCoerce;
};

var fromFoldableWith = function fromFoldableWith(dictFoldable) {
  return function (f) {
    return function (l) {
      return $foreign.runST(function __do() {
        var s = Foreign_Object_ST["new"]();
        Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(l)(function (v) {
          return function __do() {
            var v$prime = $foreign["_lookupST"](v.value1, f(v.value1), v.value0, s)();
            return Foreign_Object_ST.poke(v.value0)(v$prime)(s)();
          };
        })();
        return s;
      });
    };
  };
};

var fromFoldable = function fromFoldable(dictFoldable) {
  return function (l) {
    return $foreign.runST(function __do() {
      var s = Foreign_Object_ST["new"]();
      Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
      })();
      return s;
    });
  };
};

var freezeST = $foreign["_copyST"];

var foldMaybe = function foldMaybe(f) {
  return function (z) {
    return function (m) {
      return $foreign["_foldSCObject"](m, z, f, Data_Maybe.fromMaybe);
    };
  };
};

var foldM = function foldM(dictMonad) {
  return function (f) {
    return function (z) {
      return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
    };
  };
};

var semigroupObject = function semigroupObject(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (m1) {
    return function (m2) {
      return mutate(function (s1) {
        return foldM(Control_Monad_ST_Internal.monadST)(function (s2) {
          return function (k) {
            return function (v2) {
              return Foreign_Object_ST.poke(k)($foreign["_lookup"](v2, function (v1) {
                return Data_Semigroup.append(dictSemigroup)(v1)(v2);
              }, k, m2))(s2);
            };
          };
        })(s1)(m1);
      })(m2);
    };
  });
};

var monoidObject = function monoidObject(dictSemigroup) {
  return new Data_Monoid.Monoid(function () {
    return semigroupObject(dictSemigroup);
  }, $foreign.empty);
};

var union = function union(m) {
  return mutate(function (s) {
    return foldM(Control_Monad_ST_Internal.monadST)(function (s$prime) {
      return function (k) {
        return function (v) {
          return Foreign_Object_ST.poke(k)(v)(s$prime);
        };
      };
    })(s)(m);
  });
};

var unions = function unions(dictFoldable) {
  return Data_Foldable.foldl(dictFoldable)(union)($foreign.empty);
};

var fold = $foreign["_foldM"](Data_Function.applyFlipped);

var foldMap = function foldMap(dictMonoid) {
  return function (f) {
    return fold(function (acc) {
      return function (k) {
        return function (v) {
          return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
        };
      };
    })(Data_Monoid.mempty(dictMonoid));
  };
};

var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return foldMap(dictMonoid)(Data_Function["const"](f));
  };
}, function (f) {
  return fold(function (z) {
    return function (v) {
      return f(z);
    };
  });
}, function (f) {
  return function (z) {
    return function (m) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
    };
  };
});
var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableObject;
}, function (dictMonoid) {
  return foldMap(dictMonoid);
}, function (f) {
  return fold(Data_Function.flip(f));
}, function (f) {
  return function (z) {
    return function (m) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
    };
  };
});
var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexObject;
}, function () {
  return functorWithIndexObject;
}, function () {
  return traversableObject;
}, function (dictApplicative) {
  return function (f) {
    return function (ms) {
      return fold(function (acc) {
        return function (k) {
          return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
          };
        };
      })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
    };
  };
});
var traversableObject = new Data_Traversable.Traversable(function () {
  return foldableObject;
}, function () {
  return functorObject;
}, function (dictApplicative) {
  return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
  var $43 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
  return function ($44) {
    return $43(Data_Function["const"]($44));
  };
});

var filterWithKey = function filterWithKey(predicate) {
  return function (m) {
    var go = function () {
      var step = function step(acc) {
        return function (k) {
          return function (v) {
            var $33 = predicate(k)(v);

            if ($33) {
              return Foreign_Object_ST.poke(k)(v)(acc);
            }

            ;
            return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(acc);
          };
        };
      };

      return function __do() {
        var m$prime = Foreign_Object_ST["new"]();
        return foldM(Control_Monad_ST_Internal.monadST)(step)(m$prime)(m)();
      };
    }();

    return $foreign.runST(go);
  };
};

var filterKeys = function filterKeys(predicate) {
  return filterWithKey(function ($45) {
    return Data_Function["const"](predicate($45));
  });
};

var filter = function filter(predicate) {
  return filterWithKey(Data_Function["const"](predicate));
};

var eqObject = function eqObject(dictEq) {
  return new Data_Eq.Eq(function (m1) {
    return function (m2) {
      return isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1);
    };
  });
};

var ordObject = function ordObject(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqObject(dictOrd.Eq0());
  }, function (m1) {
    return function (m2) {
      return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(dictOrd)))(toAscArray(m1))(toAscArray(m2));
    };
  });
};

var eq1Object = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqObject(dictEq));
});

var $$delete = function $$delete(k) {
  return mutate(Foreign_Object_ST["delete"](k));
};

var pop = function pop(k) {
  return function (m) {
    return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(lookup(k)(m))(function (a) {
      return new Data_Tuple.Tuple(a, $$delete(k)(m));
    });
  };
};

var alter = function alter(f) {
  return function (k) {
    return function (m) {
      var v = f(lookup(k)(m));

      if (v instanceof Data_Maybe.Nothing) {
        return $$delete(k)(m);
      }

      ;

      if (v instanceof Data_Maybe.Just) {
        return insert(k)(v.value0)(m);
      }

      ;
      throw new Error("Failed pattern match at Foreign.Object (line 206, column 15 - line 208, column 25): " + [v.constructor.name]);
    };
  };
};

var update = function update(f) {
  return function (k) {
    return function (m) {
      return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
    };
  };
};

module.exports = {
  isEmpty: isEmpty,
  singleton: singleton,
  insert: insert,
  lookup: lookup,
  toUnfoldable: toUnfoldable,
  toAscUnfoldable: toAscUnfoldable,
  fromFoldable: fromFoldable,
  fromFoldableWith: fromFoldableWith,
  fromHomogeneous: fromHomogeneous,
  "delete": $$delete,
  pop: pop,
  member: member,
  alter: alter,
  update: update,
  mapWithKey: mapWithKey,
  filterWithKey: filterWithKey,
  filterKeys: filterKeys,
  filter: filter,
  values: values,
  union: union,
  unions: unions,
  isSubmap: isSubmap,
  fold: fold,
  foldMap: foldMap,
  foldM: foldM,
  foldMaybe: foldMaybe,
  thawST: thawST,
  freezeST: freezeST,
  functorObject: functorObject,
  functorWithIndexObject: functorWithIndexObject,
  foldableObject: foldableObject,
  foldableWithIndexObject: foldableWithIndexObject,
  traversableObject: traversableObject,
  traversableWithIndexObject: traversableWithIndexObject,
  eqObject: eqObject,
  eq1Object: eq1Object,
  ordObject: ordObject,
  showObject: showObject,
  semigroupObject: semigroupObject,
  monoidObject: monoidObject,
  empty: $foreign.empty,
  size: $foreign.size,
  keys: $foreign.keys,
  all: $foreign.all,
  runST: $foreign.runST,
  toArrayWithKey: $foreign.toArrayWithKey
};
},{"./foreign.js":"output/Foreign.Object/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Monad.ST.Internal/index.js":"output/Control.Monad.ST.Internal/index.js","../Data.Array/index.js":"output/Data.Array/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Function.Uncurried/index.js":"output/Data.Function.Uncurried/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js","../Foreign.Object.ST/index.js":"output/Foreign.Object.ST/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Halogen.VDom.DOM.Prop/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var Foreign = require("../Foreign/index.js");

var Foreign_Object = require("../Foreign.Object/index.js");

var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");

var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");

var Created = function () {
  function Created(value0) {
    this.value0 = value0;
  }

  ;

  Created.create = function (value0) {
    return new Created(value0);
  };

  return Created;
}();

var Removed = function () {
  function Removed(value0) {
    this.value0 = value0;
  }

  ;

  Removed.create = function (value0) {
    return new Removed(value0);
  };

  return Removed;
}();

var Attribute = function () {
  function Attribute(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  Attribute.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new Attribute(value0, value1, value2);
      };
    };
  };

  return Attribute;
}();

var Property = function () {
  function Property(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Property.create = function (value0) {
    return function (value1) {
      return new Property(value0, value1);
    };
  };

  return Property;
}();

var Handler = function () {
  function Handler(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Handler.create = function (value0) {
    return function (value1) {
      return new Handler(value0, value1);
    };
  };

  return Handler;
}();

var Ref = function () {
  function Ref(value0) {
    this.value0 = value0;
  }

  ;

  Ref.create = function (value0) {
    return new Ref(value0);
  };

  return Ref;
}();

var unsafeGetProperty = Halogen_VDom_Util.unsafeGetAny;
var setProperty = Halogen_VDom_Util.unsafeSetAny;

var removeProperty = function removeProperty(key, el) {
  var v = Halogen_VDom_Util.hasAttribute(Data_Nullable["null"], key, el);

  if (v) {
    return Halogen_VDom_Util.removeAttribute(Data_Nullable["null"], key, el);
  }

  ;
  var v1 = Foreign.typeOf(Halogen_VDom_Util.unsafeGetAny(key, el));

  if (v1 === "string") {
    return Halogen_VDom_Util.unsafeSetAny(key, "", el);
  }

  ;

  if (key === "rowSpan") {
    return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
  }

  ;

  if (key === "colSpan") {
    return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
  }

  ;
  return Halogen_VDom_Util.unsafeSetAny(key, Halogen_VDom_Util.jsUndefined, el);
};

var propToStrKey = function propToStrKey(v) {
  if (v instanceof Attribute && v.value0 instanceof Data_Maybe.Just) {
    return "attr/" + (v.value0.value0 + (":" + v.value1));
  }

  ;

  if (v instanceof Attribute) {
    return "attr/:" + v.value1;
  }

  ;

  if (v instanceof Property) {
    return "prop/" + v.value0;
  }

  ;

  if (v instanceof Handler) {
    return "handler/" + v.value0;
  }

  ;

  if (v instanceof Ref) {
    return "ref";
  }

  ;
  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 182, column 16 - line 187, column 16): " + [v.constructor.name]);
};

var propFromString = Unsafe_Coerce.unsafeCoerce;
var propFromNumber = Unsafe_Coerce.unsafeCoerce;
var propFromInt = Unsafe_Coerce.unsafeCoerce;
var propFromBoolean = Unsafe_Coerce.unsafeCoerce;
var functorProp = new Data_Functor.Functor(function (f) {
  return function (v) {
    if (v instanceof Handler) {
      return new Handler(v.value0, Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value1));
    }

    ;

    if (v instanceof Ref) {
      return new Ref(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value0));
    }

    ;
    return v;
  };
});
var functorElemRef = new Data_Functor.Functor(function (f) {
  return function (v) {
    if (v instanceof Created) {
      return new Created(f(v.value0));
    }

    ;

    if (v instanceof Removed) {
      return new Removed(f(v.value0));
    }

    ;
    throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 49, column 1 - line 51, column 36): " + [f.constructor.name, v.constructor.name]);
  };
});

var buildProp = function buildProp(emit) {
  return function (el) {
    var removeProp = function removeProp(prevEvents) {
      return function (v, v1) {
        if (v1 instanceof Attribute) {
          return Halogen_VDom_Util.removeAttribute(Data_Nullable.toNullable(v1.value0), v1.value1, el);
        }

        ;

        if (v1 instanceof Property) {
          return removeProperty(v1.value0, el);
        }

        ;

        if (v1 instanceof Handler) {
          var handler = Halogen_VDom_Util.unsafeLookup(v1.value0, prevEvents);
          return Halogen_VDom_Util.removeEventListener(v1.value0, Data_Tuple.fst(handler), el);
        }

        ;

        if (v1 instanceof Ref) {
          return Data_Unit.unit;
        }

        ;
        throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 169, column 5 - line 179, column 18): " + [v1.constructor.name]);
      };
    };

    var mbEmit = function mbEmit(v) {
      if (v instanceof Data_Maybe.Just) {
        return emit(v.value0)();
      }

      ;
      return Data_Unit.unit;
    };

    var haltProp = function haltProp(state) {
      var v = Foreign_Object.lookup("ref")(state.props);

      if (v instanceof Data_Maybe.Just && v.value0 instanceof Ref) {
        return mbEmit(v.value0.value0(new Removed(el)));
      }

      ;
      return Data_Unit.unit;
    };

    var diffProp = function diffProp(prevEvents, events) {
      return function (v, v1, v11, v2) {
        if (v11 instanceof Attribute && v2 instanceof Attribute) {
          var $56 = v11.value2 === v2.value2;

          if ($56) {
            return v2;
          }

          ;
          Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
          return v2;
        }

        ;

        if (v11 instanceof Property && v2 instanceof Property) {
          var v4 = Halogen_VDom_Util.refEq(v11.value1, v2.value1);

          if (v4) {
            return v2;
          }

          ;

          if (v2.value0 === "value") {
            var elVal = unsafeGetProperty("value", el);
            var $65 = Halogen_VDom_Util.refEq(elVal, v2.value1);

            if ($65) {
              return v2;
            }

            ;
            setProperty(v2.value0, v2.value1, el);
            return v2;
          }

          ;
          setProperty(v2.value0, v2.value1, el);
          return v2;
        }

        ;

        if (v11 instanceof Handler && v2 instanceof Handler) {
          var handler = Halogen_VDom_Util.unsafeLookup(v2.value0, prevEvents);
          Effect_Ref.write(v2.value1)(Data_Tuple.snd(handler))();
          Halogen_VDom_Util.pokeMutMap(v2.value0, handler, events);
          return v2;
        }

        ;
        return v2;
      };
    };

    var applyProp = function applyProp(events) {
      return function (v, v1, v2) {
        if (v2 instanceof Attribute) {
          Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
          return v2;
        }

        ;

        if (v2 instanceof Property) {
          setProperty(v2.value0, v2.value1, el);
          return v2;
        }

        ;

        if (v2 instanceof Handler) {
          var v3 = Halogen_VDom_Util.unsafeGetAny(v2.value0, events);

          if (Halogen_VDom_Util.unsafeHasAny(v2.value0, events)) {
            Effect_Ref.write(v2.value1)(Data_Tuple.snd(v3))();
            return v2;
          }

          ;
          var ref = Effect_Ref["new"](v2.value1)();
          var listener = Web_Event_EventTarget.eventListener(function (ev) {
            return function __do() {
              var f$prime = Effect_Ref.read(ref)();
              return mbEmit(f$prime(ev));
            };
          })();
          Halogen_VDom_Util.pokeMutMap(v2.value0, new Data_Tuple.Tuple(listener, ref), events);
          Halogen_VDom_Util.addEventListener(v2.value0, listener, el);
          return v2;
        }

        ;

        if (v2 instanceof Ref) {
          mbEmit(v2.value0(new Created(el)));
          return v2;
        }

        ;
        throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 113, column 5 - line 135, column 15): " + [v2.constructor.name]);
      };
    };

    var patchProp = function patchProp(state, ps2) {
      var events = Halogen_VDom_Util.newMutMap();
      var onThis = removeProp(state.events);
      var onThese = diffProp(state.events, events);
      var onThat = applyProp(events);
      var props = Halogen_VDom_Util.diffWithKeyAndIxE(state.props, ps2, propToStrKey, onThese, onThis, onThat);
      var nextState = {
        events: Halogen_VDom_Util.unsafeFreeze(events),
        props: props
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, nextState, patchProp, haltProp));
    };

    var renderProp = function renderProp(ps1) {
      var events = Halogen_VDom_Util.newMutMap();
      var ps1$prime = Halogen_VDom_Util.strMapWithIxE(ps1, propToStrKey, applyProp(events));
      var state = {
        events: Halogen_VDom_Util.unsafeFreeze(events),
        props: ps1$prime
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, state, patchProp, haltProp));
    };

    return renderProp;
  };
};

module.exports = {
  Attribute: Attribute,
  Property: Property,
  Handler: Handler,
  Ref: Ref,
  Created: Created,
  Removed: Removed,
  propFromString: propFromString,
  propFromBoolean: propFromBoolean,
  propFromInt: propFromInt,
  propFromNumber: propFromNumber,
  buildProp: buildProp,
  functorProp: functorProp,
  functorElemRef: functorElemRef
};
},{"../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect.Ref/index.js":"output/Effect.Ref/index.js","../Foreign/index.js":"output/Foreign/index.js","../Foreign.Object/index.js":"output/Foreign.Object/index.js","../Halogen.VDom.Machine/index.js":"output/Halogen.VDom.Machine/index.js","../Halogen.VDom.Util/index.js":"output/Halogen.VDom.Util/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js","../Web.Event.EventTarget/index.js":"output/Web.Event.EventTarget/index.js"}],"output/Halogen.HTML.Core/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var DOM_HTML_Indexed_ButtonType = require("../DOM.HTML.Indexed.ButtonType/index.js");

var DOM_HTML_Indexed_CrossOriginValue = require("../DOM.HTML.Indexed.CrossOriginValue/index.js");

var DOM_HTML_Indexed_DirValue = require("../DOM.HTML.Indexed.DirValue/index.js");

var DOM_HTML_Indexed_FormMethod = require("../DOM.HTML.Indexed.FormMethod/index.js");

var DOM_HTML_Indexed_InputAcceptType = require("../DOM.HTML.Indexed.InputAcceptType/index.js");

var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");

var DOM_HTML_Indexed_KindValue = require("../DOM.HTML.Indexed.KindValue/index.js");

var DOM_HTML_Indexed_MenuType = require("../DOM.HTML.Indexed.MenuType/index.js");

var DOM_HTML_Indexed_MenuitemType = require("../DOM.HTML.Indexed.MenuitemType/index.js");

var DOM_HTML_Indexed_OnOff = require("../DOM.HTML.Indexed.OnOff/index.js");

var DOM_HTML_Indexed_OrderedListType = require("../DOM.HTML.Indexed.OrderedListType/index.js");

var DOM_HTML_Indexed_PreloadValue = require("../DOM.HTML.Indexed.PreloadValue/index.js");

var DOM_HTML_Indexed_ScopeValue = require("../DOM.HTML.Indexed.ScopeValue/index.js");

var DOM_HTML_Indexed_StepValue = require("../DOM.HTML.Indexed.StepValue/index.js");

var DOM_HTML_Indexed_WrapValue = require("../DOM.HTML.Indexed.WrapValue/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_MediaType = require("../Data.MediaType/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");

var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");

var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");

var PropName = function PropName(x) {
  return x;
};

var HTML = function HTML(x) {
  return x;
};

var ClassName = function ClassName(x) {
  return x;
};

var AttrName = function AttrName(x) {
  return x;
};

var IsProp = function IsProp(toPropValue) {
  this.toPropValue = toPropValue;
};

var widget = function widget($30) {
  return HTML(Halogen_VDom_Types.Widget.create($30));
};

var toPropValue = function toPropValue(dict) {
  return dict.toPropValue;
};

var text = function text($31) {
  return HTML(Halogen_VDom_Types.Text.create($31));
};

var semigroupClassName = Data_Semigroup.semigroupString;

var ref = function ref(f) {
  return Halogen_VDom_DOM_Prop.Ref.create(function ($32) {
    return f(function (v) {
      if (v instanceof Halogen_VDom_DOM_Prop.Created) {
        return new Data_Maybe.Just(v.value0);
      }

      ;

      if (v instanceof Halogen_VDom_DOM_Prop.Removed) {
        return Data_Maybe.Nothing.value;
      }

      ;
      throw new Error("Failed pattern match at Halogen.HTML.Core (line 104, column 21 - line 106, column 23): " + [v.constructor.name]);
    }($32));
  });
};

var prop = function prop(dictIsProp) {
  return function (v) {
    var $33 = Halogen_VDom_DOM_Prop.Property.create(v);
    var $34 = toPropValue(dictIsProp);
    return function ($35) {
      return $33($34($35));
    };
  };
};

var ordPropName = Data_Ord.ordString;
var ordClassName = Data_Ord.ordString;
var ordAttrName = Data_Ord.ordString;
var newtypePropName = new Data_Newtype.Newtype(function (n) {
  return n;
}, PropName);
var newtypeHTML = new Data_Newtype.Newtype(function (n) {
  return n;
}, HTML);

var renderWidget = function renderWidget(f) {
  return function (g) {
    return function (v) {
      return Halogen_VDom_Types.renderWidget(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(f))))(function () {
        var $36 = Data_Newtype.un(newtypeHTML)(HTML);
        return function ($37) {
          return $36(g($37));
        };
      }())(v);
    };
  };
};

var newtypeClassName = new Data_Newtype.Newtype(function (n) {
  return n;
}, ClassName);
var newtypeAttrName = new Data_Newtype.Newtype(function (n) {
  return n;
}, AttrName);

var keyed = function keyed(ns) {
  return function (name) {
    return function (props) {
      return function (children) {
        return new Halogen_VDom_Types.Keyed(ns, name, props, children);
      };
    };
  };
};

var isPropWrapValue = new IsProp(function ($38) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_WrapValue.renderWrapValue($38));
});
var isPropString = new IsProp(Halogen_VDom_DOM_Prop.propFromString);
var isPropStepValue = new IsProp(function ($39) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_StepValue.renderStepValue($39));
});
var isPropScopeValue = new IsProp(function ($40) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ScopeValue.renderScopeValue($40));
});
var isPropPreloadValue = new IsProp(function ($41) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_PreloadValue.renderPreloadValue($41));
});
var isPropOrderedListType = new IsProp(function ($42) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_OrderedListType.renderOrderedListType($42));
});
var isPropOnOff = new IsProp(function ($43) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_OnOff.renderOnOff($43));
});
var isPropNumber = new IsProp(Halogen_VDom_DOM_Prop.propFromNumber);
var isPropMenuitemType = new IsProp(function ($44) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_MenuitemType.renderMenuitemType($44));
});
var isPropMenuType = new IsProp(function ($45) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_MenuType.renderMenuType($45));
});
var isPropMediaType = new IsProp(function () {
  var $46 = Data_Newtype.unwrap(Data_MediaType.newtypeMediaType);
  return function ($47) {
    return Halogen_VDom_DOM_Prop.propFromString($46($47));
  };
}());
var isPropKindValue = new IsProp(function ($48) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_KindValue.renderKindValue($48));
});
var isPropInt = new IsProp(Halogen_VDom_DOM_Prop.propFromInt);
var isPropInputType = new IsProp(function ($49) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputType.renderInputType($49));
});
var isPropInputAcceptType = new IsProp(function ($50) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputAcceptType.renderInputAcceptType($50));
});
var isPropFormMethod = new IsProp(function ($51) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_FormMethod.renderFormMethod($51));
});
var isPropDirValue = new IsProp(function ($52) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_DirValue.renderDirValue($52));
});
var isPropCrossOriginValue = new IsProp(function ($53) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_CrossOriginValue.renderCrossOriginValue($53));
});
var isPropButtonType = new IsProp(function ($54) {
  return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ButtonType.renderButtonType($54));
});
var isPropBoolean = new IsProp(Halogen_VDom_DOM_Prop.propFromBoolean);
var handler = Halogen_VDom_DOM_Prop.Handler.create;
var eqPropName = Data_Eq.eqString;
var eqClassName = Data_Eq.eqString;
var eqAttrName = Data_Eq.eqString;

var element = function element(ns) {
  return function (name) {
    return function (props) {
      return function (children) {
        return new Halogen_VDom_Types.Elem(ns, name, props, children);
      };
    };
  };
};

var bifunctorHTML = new Data_Bifunctor.Bifunctor(function (f) {
  return function (g) {
    return function (v) {
      return Data_Bifunctor.bimap(Halogen_VDom_Types.bifunctorVDom)(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(g))))(f)(v);
    };
  };
});
var functorHTML = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorHTML));

var attr = function attr(ns) {
  return function (v) {
    return Halogen_VDom_DOM_Prop.Attribute.create(ns)(v);
  };
};

module.exports = {
  HTML: HTML,
  renderWidget: renderWidget,
  widget: widget,
  text: text,
  element: element,
  keyed: keyed,
  prop: prop,
  attr: attr,
  handler: handler,
  ref: ref,
  IsProp: IsProp,
  toPropValue: toPropValue,
  PropName: PropName,
  AttrName: AttrName,
  ClassName: ClassName,
  newtypeHTML: newtypeHTML,
  bifunctorHTML: bifunctorHTML,
  functorHTML: functorHTML,
  isPropString: isPropString,
  isPropInt: isPropInt,
  isPropNumber: isPropNumber,
  isPropBoolean: isPropBoolean,
  isPropMediaType: isPropMediaType,
  isPropButtonType: isPropButtonType,
  isPropCrossOriginValue: isPropCrossOriginValue,
  isPropDirValue: isPropDirValue,
  isPropFormMethod: isPropFormMethod,
  isPropInputType: isPropInputType,
  isPropKindValue: isPropKindValue,
  isPropMenuitemType: isPropMenuitemType,
  isPropMenuType: isPropMenuType,
  isPropOnOff: isPropOnOff,
  isPropOrderedListType: isPropOrderedListType,
  isPropPreloadValue: isPropPreloadValue,
  isPropScopeValue: isPropScopeValue,
  isPropStepValue: isPropStepValue,
  isPropWrapValue: isPropWrapValue,
  isPropInputAcceptType: isPropInputAcceptType,
  newtypePropName: newtypePropName,
  eqPropName: eqPropName,
  ordPropName: ordPropName,
  newtypeAttrName: newtypeAttrName,
  eqAttrName: eqAttrName,
  ordAttrName: ordAttrName,
  newtypeClassName: newtypeClassName,
  eqClassName: eqClassName,
  ordClassName: ordClassName,
  semigroupClassName: semigroupClassName
};
},{"../DOM.HTML.Indexed.ButtonType/index.js":"output/DOM.HTML.Indexed.ButtonType/index.js","../DOM.HTML.Indexed.CrossOriginValue/index.js":"output/DOM.HTML.Indexed.CrossOriginValue/index.js","../DOM.HTML.Indexed.DirValue/index.js":"output/DOM.HTML.Indexed.DirValue/index.js","../DOM.HTML.Indexed.FormMethod/index.js":"output/DOM.HTML.Indexed.FormMethod/index.js","../DOM.HTML.Indexed.InputAcceptType/index.js":"output/DOM.HTML.Indexed.InputAcceptType/index.js","../DOM.HTML.Indexed.InputType/index.js":"output/DOM.HTML.Indexed.InputType/index.js","../DOM.HTML.Indexed.KindValue/index.js":"output/DOM.HTML.Indexed.KindValue/index.js","../DOM.HTML.Indexed.MenuType/index.js":"output/DOM.HTML.Indexed.MenuType/index.js","../DOM.HTML.Indexed.MenuitemType/index.js":"output/DOM.HTML.Indexed.MenuitemType/index.js","../DOM.HTML.Indexed.OnOff/index.js":"output/DOM.HTML.Indexed.OnOff/index.js","../DOM.HTML.Indexed.OrderedListType/index.js":"output/DOM.HTML.Indexed.OrderedListType/index.js","../DOM.HTML.Indexed.PreloadValue/index.js":"output/DOM.HTML.Indexed.PreloadValue/index.js","../DOM.HTML.Indexed.ScopeValue/index.js":"output/DOM.HTML.Indexed.ScopeValue/index.js","../DOM.HTML.Indexed.StepValue/index.js":"output/DOM.HTML.Indexed.StepValue/index.js","../DOM.HTML.Indexed.WrapValue/index.js":"output/DOM.HTML.Indexed.WrapValue/index.js","../Data.Bifunctor/index.js":"output/Data.Bifunctor/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.MediaType/index.js":"output/Data.MediaType/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Halogen.Query.Input/index.js":"output/Halogen.Query.Input/index.js","../Halogen.VDom.DOM.Prop/index.js":"output/Halogen.VDom.DOM.Prop/index.js","../Halogen.VDom.Types/index.js":"output/Halogen.VDom.Types/index.js"}],"output/Halogen.HTML.Elements/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");

var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");

var withKeys_ = function withKeys_(ctor) {
  return function (children) {
    var v = ctor([]);

    if (v instanceof Halogen_VDom_Types.Elem) {
      return new Halogen_VDom_Types.Keyed(v.value0, v.value1, v.value2, children);
    }

    ;
    return v;
  };
};

var withKeys = function withKeys(ctor) {
  return function (props) {
    return function (children) {
      var v = ctor(props)([]);

      if (v instanceof Halogen_VDom_Types.Elem) {
        return new Halogen_VDom_Types.Keyed(v.value0, v.value1, v.value2, children);
      }

      ;
      return v;
    };
  };
};

var keyedNS = function () {
  var $12 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
  return function ($13) {
    return Halogen_HTML_Core.keyed($12($13));
  };
}();

var keyed = Halogen_HTML_Core.keyed(Data_Maybe.Nothing.value);

var elementNS = function () {
  var $14 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
  return function ($15) {
    return Halogen_HTML_Core.element($14($15));
  };
}();

var element = Halogen_HTML_Core.element(Data_Maybe.Nothing.value);
var em = element("em");
var em_ = em([]);
var embed = element("embed");
var embed_ = embed([]);
var fieldset = element("fieldset");
var fieldset_ = fieldset([]);
var figcaption = element("figcaption");
var figcaption_ = figcaption([]);
var figure = element("figure");
var figure_ = figure([]);
var footer = element("footer");
var footer_ = footer([]);
var form = element("form");
var form_ = form([]);
var h1 = element("h1");
var h1_ = h1([]);
var h2 = element("h2");
var h2_ = h2([]);
var h3 = element("h3");
var h3_ = h3([]);
var h4 = element("h4");
var h4_ = h4([]);
var h5 = element("h5");
var h5_ = h5([]);
var h6 = element("h6");
var h6_ = h6([]);
var head = element("head");
var head_ = head([]);
var header = element("header");
var header_ = header([]);

var hr = function hr(props) {
  return element("hr")(props)([]);
};

var hr_ = hr([]);
var html = element("html");
var html_ = html([]);
var i = element("i");
var i_ = i([]);

var iframe = function iframe(props) {
  return element("iframe")(props)([]);
};

var img = function img(props) {
  return element("img")(props)([]);
};

var input = function input(props) {
  return element("input")(props)([]);
};

var ins = element("ins");
var ins_ = ins([]);
var kbd = element("kbd");
var kbd_ = kbd([]);
var label = element("label");
var label_ = label([]);
var legend = element("legend");
var legend_ = legend([]);
var li = element("li");
var li_ = li([]);

var link = function link(props) {
  return element("link")(props)([]);
};

var main = element("main");
var main_ = main([]);
var map = element("map");
var map_ = map([]);
var mark = element("mark");
var mark_ = mark([]);
var menu = element("menu");
var menu_ = menu([]);
var menuitem = element("menuitem");
var menuitem_ = menuitem([]);

var meta = function meta(props) {
  return element("meta")(props)([]);
};

var meter = element("meter");
var meter_ = meter([]);
var nav = element("nav");
var nav_ = nav([]);
var noscript = element("noscript");
var noscript_ = noscript([]);
var object = element("object");
var object_ = object([]);
var ol = element("ol");
var ol_ = ol([]);
var optgroup = element("optgroup");
var optgroup_ = optgroup([]);
var option = element("option");
var option_ = option([]);
var output = element("output");
var output_ = output([]);
var p = element("p");
var p_ = p([]);

var param = function param(props) {
  return element("param")(props)([]);
};

var pre = element("pre");
var pre_ = pre([]);
var progress = element("progress");
var progress_ = progress([]);
var q = element("q");
var q_ = q([]);
var rp = element("rp");
var rp_ = rp([]);
var rt = element("rt");
var rt_ = rt([]);
var ruby = element("ruby");
var ruby_ = ruby([]);
var samp = element("samp");
var samp_ = samp([]);
var script = element("script");
var script_ = script([]);
var section = element("section");
var section_ = section([]);
var select = element("select");
var select_ = select([]);
var small = element("small");
var small_ = small([]);

var source = function source(props) {
  return element("source")(props)([]);
};

var span = element("span");
var span_ = span([]);
var strong = element("strong");
var strong_ = strong([]);
var style = element("style");
var style_ = style([]);
var sub = element("sub");
var sub_ = sub([]);
var summary = element("summary");
var summary_ = summary([]);
var sup = element("sup");
var sup_ = sup([]);
var table = element("table");
var table_ = table([]);
var tbody = element("tbody");
var tbody_ = tbody([]);
var td = element("td");
var td_ = td([]);

var textarea = function textarea(es) {
  return element("textarea")(es)([]);
};

var tfoot = element("tfoot");
var tfoot_ = tfoot([]);
var th = element("th");
var th_ = th([]);
var thead = element("thead");
var thead_ = thead([]);
var time = element("time");
var time_ = time([]);
var title = element("title");
var title_ = title([]);
var tr = element("tr");
var tr_ = tr([]);

var track = function track(props) {
  return element("track")(props)([]);
};

var u = element("u");
var u_ = u([]);
var ul = element("ul");
var ul_ = ul([]);
var $$var = element("var");
var var_ = $$var([]);
var video = element("video");
var video_ = video([]);

var wbr = function wbr(props) {
  return element("wbr")(props)([]);
};

var dt = element("dt");
var dt_ = dt([]);
var dl = element("dl");
var dl_ = dl([]);
var div = element("div");
var div_ = div([]);
var dialog = element("dialog");
var dialog_ = dialog([]);
var dfn = element("dfn");
var dfn_ = dfn([]);
var details = element("details");
var details_ = details([]);
var del = element("del");
var del_ = del([]);
var dd = element("dd");
var dd_ = dd([]);
var datalist = element("datalist");
var datalist_ = datalist([]);

var command = function command(props) {
  return element("command")(props)([]);
};

var colgroup = element("colgroup");
var colgroup_ = colgroup([]);

var col = function col(props) {
  return element("col")(props)([]);
};

var code = element("code");
var code_ = code([]);
var cite = element("cite");
var cite_ = cite([]);
var caption = element("caption");
var caption_ = caption([]);

var canvas = function canvas(props) {
  return element("canvas")(props)([]);
};

var button = element("button");
var button_ = button([]);

var br = function br(props) {
  return element("br")(props)([]);
};

var br_ = br([]);
var body = element("body");
var body_ = body([]);
var blockquote = element("blockquote");
var blockquote_ = blockquote([]);
var bdo = element("bdo");
var bdo_ = bdo([]);
var bdi = element("bdi");
var bdi_ = bdi([]);

var base = function base(props) {
  return element("base")(props)([]);
};

var b = element("b");
var b_ = b([]);
var audio = element("audio");
var audio_ = audio([]);
var aside = element("aside");
var aside_ = aside([]);
var article = element("article");
var article_ = article([]);

var area = function area(props) {
  return element("area")(props)([]);
};

var address = element("address");
var address_ = address([]);
var abbr = element("abbr");
var abbr_ = abbr([]);
var a = element("a");
var a_ = a([]);
module.exports = {
  element: element,
  elementNS: elementNS,
  keyed: keyed,
  keyedNS: keyedNS,
  withKeys: withKeys,
  withKeys_: withKeys_,
  a: a,
  a_: a_,
  abbr: abbr,
  abbr_: abbr_,
  address: address,
  address_: address_,
  area: area,
  article: article,
  article_: article_,
  aside: aside,
  aside_: aside_,
  audio: audio,
  audio_: audio_,
  b: b,
  b_: b_,
  base: base,
  bdi: bdi,
  bdi_: bdi_,
  bdo: bdo,
  bdo_: bdo_,
  blockquote: blockquote,
  blockquote_: blockquote_,
  body: body,
  body_: body_,
  br: br,
  br_: br_,
  button: button,
  button_: button_,
  canvas: canvas,
  caption: caption,
  caption_: caption_,
  cite: cite,
  cite_: cite_,
  code: code,
  code_: code_,
  col: col,
  colgroup: colgroup,
  colgroup_: colgroup_,
  command: command,
  datalist: datalist,
  datalist_: datalist_,
  dd: dd,
  dd_: dd_,
  del: del,
  del_: del_,
  details: details,
  details_: details_,
  dfn: dfn,
  dfn_: dfn_,
  dialog: dialog,
  dialog_: dialog_,
  div: div,
  div_: div_,
  dl: dl,
  dl_: dl_,
  dt: dt,
  dt_: dt_,
  em: em,
  em_: em_,
  embed: embed,
  embed_: embed_,
  fieldset: fieldset,
  fieldset_: fieldset_,
  figcaption: figcaption,
  figcaption_: figcaption_,
  figure: figure,
  figure_: figure_,
  footer: footer,
  footer_: footer_,
  form: form,
  form_: form_,
  h1: h1,
  h1_: h1_,
  h2: h2,
  h2_: h2_,
  h3: h3,
  h3_: h3_,
  h4: h4,
  h4_: h4_,
  h5: h5,
  h5_: h5_,
  h6: h6,
  h6_: h6_,
  head: head,
  head_: head_,
  header: header,
  header_: header_,
  hr: hr,
  hr_: hr_,
  html: html,
  html_: html_,
  i: i,
  i_: i_,
  iframe: iframe,
  img: img,
  input: input,
  ins: ins,
  ins_: ins_,
  kbd: kbd,
  kbd_: kbd_,
  label: label,
  label_: label_,
  legend: legend,
  legend_: legend_,
  li: li,
  li_: li_,
  link: link,
  main: main,
  main_: main_,
  map: map,
  map_: map_,
  mark: mark,
  mark_: mark_,
  menu: menu,
  menu_: menu_,
  menuitem: menuitem,
  menuitem_: menuitem_,
  meta: meta,
  meter: meter,
  meter_: meter_,
  nav: nav,
  nav_: nav_,
  noscript: noscript,
  noscript_: noscript_,
  object: object,
  object_: object_,
  ol: ol,
  ol_: ol_,
  optgroup: optgroup,
  optgroup_: optgroup_,
  option: option,
  option_: option_,
  output: output,
  output_: output_,
  p: p,
  p_: p_,
  param: param,
  pre: pre,
  pre_: pre_,
  progress: progress,
  progress_: progress_,
  q: q,
  q_: q_,
  rp: rp,
  rp_: rp_,
  rt: rt,
  rt_: rt_,
  ruby: ruby,
  ruby_: ruby_,
  samp: samp,
  samp_: samp_,
  script: script,
  script_: script_,
  section: section,
  section_: section_,
  select: select,
  select_: select_,
  small: small,
  small_: small_,
  source: source,
  span: span,
  span_: span_,
  strong: strong,
  strong_: strong_,
  style: style,
  style_: style_,
  sub: sub,
  sub_: sub_,
  summary: summary,
  summary_: summary_,
  sup: sup,
  sup_: sup_,
  table: table,
  table_: table_,
  tbody: tbody,
  tbody_: tbody_,
  td: td,
  td_: td_,
  textarea: textarea,
  tfoot: tfoot,
  tfoot_: tfoot_,
  th: th,
  th_: th_,
  thead: thead,
  thead_: thead_,
  time: time,
  time_: time_,
  title: title,
  title_: title_,
  tr: tr,
  tr_: tr_,
  track: track,
  u: u,
  u_: u_,
  ul: ul,
  ul_: ul_,
  "var": $$var,
  var_: var_,
  video: video,
  video_: video_,
  wbr: wbr
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Halogen.HTML.Core/index.js":"output/Halogen.HTML.Core/index.js","../Halogen.VDom.Types/index.js":"output/Halogen.VDom.Types/index.js"}],"output/Foreign.Index/foreign.js":[function(require,module,exports) {
"use strict";

exports.unsafeReadPropImpl = function (f, s, key, value) {
  return value == null ? f : s(value[key]);
};

exports.unsafeHasOwnProperty = function (prop, value) {
  return Object.prototype.hasOwnProperty.call(value, prop);
};

exports.unsafeHasProperty = function (prop, value) {
  return prop in value;
};
},{}],"output/Foreign.Index/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Foreign = require("../Foreign/index.js");

var Indexable = function Indexable(ix) {
  this.ix = ix;
};

var Index = function Index(errorAt, hasOwnProperty, hasProperty, index) {
  this.errorAt = errorAt;
  this.hasOwnProperty = hasOwnProperty;
  this.hasProperty = hasProperty;
  this.index = index;
};

var unsafeReadProp = function unsafeReadProp(k) {
  return function (value) {
    return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
  };
};

var readProp = unsafeReadProp;
var readIndex = unsafeReadProp;

var ix = function ix(dict) {
  return dict.ix;
};

var index = function index(dict) {
  return dict.index;
};

var indexableExceptT = new Indexable(function (dictIndex) {
  return function (f) {
    return function (i) {
      return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Function.flip(index(dictIndex))(i))(f);
    };
  };
});
var indexableForeign = new Indexable(function (dictIndex) {
  return index(dictIndex);
});

var hasPropertyImpl = function hasPropertyImpl(v) {
  return function (value) {
    if (Foreign.isNull(value)) {
      return false;
    }

    ;

    if (Foreign.isUndefined(value)) {
      return false;
    }

    ;

    if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
      return $foreign.unsafeHasProperty(v, value);
    }

    ;
    return false;
  };
};

var hasProperty = function hasProperty(dict) {
  return dict.hasProperty;
};

var hasOwnPropertyImpl = function hasOwnPropertyImpl(v) {
  return function (value) {
    if (Foreign.isNull(value)) {
      return false;
    }

    ;

    if (Foreign.isUndefined(value)) {
      return false;
    }

    ;

    if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
      return $foreign.unsafeHasOwnProperty(v, value);
    }

    ;
    return false;
  };
};

var indexInt = new Index(Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readIndex));
var indexString = new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));

var hasOwnProperty = function hasOwnProperty(dict) {
  return dict.hasOwnProperty;
};

var errorAt = function errorAt(dict) {
  return dict.errorAt;
};

module.exports = {
  Index: Index,
  Indexable: Indexable,
  readProp: readProp,
  readIndex: readIndex,
  ix: ix,
  index: index,
  hasProperty: hasProperty,
  hasOwnProperty: hasOwnProperty,
  errorAt: errorAt,
  indexString: indexString,
  indexInt: indexInt,
  indexableForeign: indexableForeign,
  indexableExceptT: indexableExceptT
};
},{"./foreign.js":"output/Foreign.Index/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad.Except.Trans/index.js":"output/Control.Monad.Except.Trans/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Identity/index.js":"output/Data.Identity/index.js","../Foreign/index.js":"output/Foreign/index.js"}],"output/Web.Clipboard.ClipboardEvent.EventTypes/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var paste = "paste";
var cut = "cut";
var copy = "copy";
var clipboardchange = "clipboardchange";
module.exports = {
  clipboardchange: clipboardchange,
  copy: copy,
  cut: cut,
  paste: paste
};
},{}],"output/Web.Event.Event/foreign.js":[function(require,module,exports) {
"use strict";

exports.bubbles = function (e) {
  return e.bubbles;
};

exports.cancelable = function (e) {
  return e.cancelable;
};

exports._currentTarget = function (e) {
  return e.currentTarget;
};

exports.defaultPrevented = function (e) {
  return function () {
    return e.defaultPrevented;
  };
};

exports.eventPhaseIndex = function (e) {
  return e.eventPhase;
};

exports._target = function (e) {
  return e.target;
};

exports.timeStamp = function (e) {
  return e.timeStamp;
};

exports.type_ = function (e) {
  return e.type;
};

exports.preventDefault = function (e) {
  return function () {
    return e.preventDefault();
  };
};

exports.stopImmediatePropagation = function (e) {
  return function () {
    return e.stopImmediatePropagation();
  };
};

exports.stopPropagation = function (e) {
  return function () {
    return e.stopPropagation();
  };
};
},{}],"output/Data.Enum/foreign.js":[function(require,module,exports) {
"use strict";

exports.toCharCode = function (c) {
  return c.charCodeAt(0);
};

exports.fromCharCode = function (c) {
  return String.fromCharCode(c);
};
},{}],"output/Data.Enum/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Cardinality = function Cardinality(x) {
  return x;
};

var Enum = function Enum(Ord0, pred, succ) {
  this.Ord0 = Ord0;
  this.pred = pred;
  this.succ = succ;
};

var BoundedEnum = function BoundedEnum(Bounded0, Enum1, cardinality, fromEnum, toEnum) {
  this.Bounded0 = Bounded0;
  this.Enum1 = Enum1;
  this.cardinality = cardinality;
  this.fromEnum = fromEnum;
  this.toEnum = toEnum;
};

var toEnum = function toEnum(dict) {
  return dict.toEnum;
};

var succ = function succ(dict) {
  return dict.succ;
};

var upFromIncluding = function upFromIncluding(dictEnum) {
  return function (dictUnfoldable1) {
    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(succ(dictEnum)));
  };
};

var showCardinality = new Data_Show.Show(function (v) {
  return "(Cardinality " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});

var pred = function pred(dict) {
  return dict.pred;
};

var ordCardinality = Data_Ord.ordInt;
var newtypeCardinality = new Data_Newtype.Newtype(function (n) {
  return n;
}, Cardinality);

var fromEnum = function fromEnum(dict) {
  return dict.fromEnum;
};

var toEnumWithDefaults = function toEnumWithDefaults(dictBoundedEnum) {
  return function (low) {
    return function (high) {
      return function (x) {
        var v = toEnum(dictBoundedEnum)(x);

        if (v instanceof Data_Maybe.Just) {
          return v.value0;
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));

          if ($54) {
            return low;
          }

          ;
          return high;
        }

        ;
        throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [v.constructor.name]);
      };
    };
  };
};

var eqCardinality = Data_Eq.eqInt;
var enumUnit = new Enum(function () {
  return Data_Ord.ordUnit;
}, Data_Function["const"](Data_Maybe.Nothing.value), Data_Function["const"](Data_Maybe.Nothing.value));

var enumTuple = function enumTuple(dictEnum) {
  return function (dictBoundedEnum) {
    return new Enum(function () {
      return Data_Tuple.ordTuple(dictEnum.Ord0())(dictBoundedEnum.Enum1().Ord0());
    }, function (v) {
      return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))(function () {
        var $96 = Data_Tuple.Tuple.create(v.value0);
        return function ($97) {
          return Data_Maybe.Just.create($96($97));
        };
      }())(pred(dictBoundedEnum.Enum1())(v.value1));
    }, function (v) {
      return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))(function () {
        var $98 = Data_Tuple.Tuple.create(v.value0);
        return function ($99) {
          return Data_Maybe.Just.create($98($99));
        };
      }())(succ(dictBoundedEnum.Enum1())(v.value1));
    });
  };
};

var enumOrdering = new Enum(function () {
  return Data_Ord.ordOrdering;
}, function (v) {
  if (v instanceof Data_Ordering.LT) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_Ordering.EQ) {
    return new Data_Maybe.Just(Data_Ordering.LT.value);
  }

  ;

  if (v instanceof Data_Ordering.GT) {
    return new Data_Maybe.Just(Data_Ordering.EQ.value);
  }

  ;
  throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [v.constructor.name]);
}, function (v) {
  if (v instanceof Data_Ordering.LT) {
    return new Data_Maybe.Just(Data_Ordering.EQ.value);
  }

  ;

  if (v instanceof Data_Ordering.EQ) {
    return new Data_Maybe.Just(Data_Ordering.GT.value);
  }

  ;

  if (v instanceof Data_Ordering.GT) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [v.constructor.name]);
});

var enumMaybe = function enumMaybe(dictBoundedEnum) {
  return new Enum(function () {
    return Data_Maybe.ordMaybe(dictBoundedEnum.Enum1().Ord0());
  }, function (v) {
    if (v instanceof Data_Maybe.Nothing) {
      return Data_Maybe.Nothing.value;
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return new Data_Maybe.Just(pred(dictBoundedEnum.Enum1())(v.value0));
    }

    ;
    throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [v.constructor.name]);
  }, function (v) {
    if (v instanceof Data_Maybe.Nothing) {
      return new Data_Maybe.Just(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
    }

    ;
    throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [v.constructor.name]);
  });
};

var enumInt = new Enum(function () {
  return Data_Ord.ordInt;
}, function (n) {
  var $67 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);

  if ($67) {
    return new Data_Maybe.Just(n - 1 | 0);
  }

  ;
  return Data_Maybe.Nothing.value;
}, function (n) {
  var $68 = n < Data_Bounded.top(Data_Bounded.boundedInt);

  if ($68) {
    return new Data_Maybe.Just(n + 1 | 0);
  }

  ;
  return Data_Maybe.Nothing.value;
});

var enumFromTo = function enumFromTo(dictEnum) {
  return function (dictUnfoldable1) {
    var go = function go(step) {
      return function (op) {
        return function (to) {
          return function (a) {
            return new Data_Tuple.Tuple(a, Control_Bind.bind(Data_Maybe.bindMaybe)(step(a))(function (a$prime) {
              return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(op(a$prime)(to)))(a$prime);
            }));
          };
        };
      };
    };

    return function (v) {
      return function (v1) {
        if (Data_Eq.eq(dictEnum.Ord0().Eq0())(v)(v1)) {
          return Data_Unfoldable1.singleton(dictUnfoldable1)(v);
        }

        ;

        if (Data_Ord.lessThan(dictEnum.Ord0())(v)(v1)) {
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(succ(dictEnum))(Data_Ord.lessThanOrEq(dictEnum.Ord0()))(v1))(v);
        }

        ;

        if (Data_Boolean.otherwise) {
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(pred(dictEnum))(Data_Ord.greaterThanOrEq(dictEnum.Ord0()))(v1))(v);
        }

        ;
        throw new Error("Failed pattern match at Data.Enum (line 183, column 14 - line 187, column 51): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  };
};

var enumFromThenTo = function enumFromThenTo(dictUnfoldable) {
  return function (dictFunctor) {
    return function (dictBoundedEnum) {
      var go = function go(step) {
        return function (to) {
          return function (e) {
            if (e <= to) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));
            }

            ;

            if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
            }

            ;
            throw new Error("Failed pattern match at Data.Enum (line 214, column 5 - line 216, column 28): " + [step.constructor.name, to.constructor.name, e.constructor.name]);
          };
        };
      };

      return function (a) {
        return function (b) {
          return function (c) {
            var c$prime = fromEnum(dictBoundedEnum)(c);
            var b$prime = fromEnum(dictBoundedEnum)(b);
            var a$prime = fromEnum(dictBoundedEnum)(a);
            return Data_Functor.map(dictFunctor)(function () {
              var $100 = Data_Maybe.fromJust();
              var $101 = toEnum(dictBoundedEnum);
              return function ($102) {
                return $100($101($102));
              };
            }())(Data_Unfoldable.unfoldr(dictUnfoldable)(go(b$prime - a$prime | 0)(c$prime))(a$prime));
          };
        };
      };
    };
  };
};

var enumEither = function enumEither(dictBoundedEnum) {
  return function (dictBoundedEnum1) {
    return new Enum(function () {
      return Data_Either.ordEither(dictBoundedEnum.Enum1().Ord0())(dictBoundedEnum1.Enum1().Ord0());
    }, function (v) {
      if (v instanceof Data_Either.Left) {
        return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($103) {
          return Data_Maybe.Just.create(Data_Either.Left.create($103));
        })(pred(dictBoundedEnum.Enum1())(v.value0));
      }

      ;

      if (v instanceof Data_Either.Right) {
        return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function ($104) {
          return Data_Maybe.Just.create(Data_Either.Right.create($104));
        })(pred(dictBoundedEnum1.Enum1())(v.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [v.constructor.name]);
    }, function (v) {
      if (v instanceof Data_Either.Left) {
        return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function ($105) {
          return Data_Maybe.Just.create(Data_Either.Left.create($105));
        })(succ(dictBoundedEnum.Enum1())(v.value0));
      }

      ;

      if (v instanceof Data_Either.Right) {
        return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($106) {
          return Data_Maybe.Just.create(Data_Either.Right.create($106));
        })(succ(dictBoundedEnum1.Enum1())(v.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [v.constructor.name]);
    });
  };
};

var enumBoolean = new Enum(function () {
  return Data_Ord.ordBoolean;
}, function (v) {
  if (v) {
    return new Data_Maybe.Just(false);
  }

  ;
  return Data_Maybe.Nothing.value;
}, function (v) {
  if (!v) {
    return new Data_Maybe.Just(true);
  }

  ;
  return Data_Maybe.Nothing.value;
});

var downFromIncluding = function downFromIncluding(dictEnum) {
  return function (dictUnfoldable1) {
    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(pred(dictEnum)));
  };
};

var diag = function diag(a) {
  return new Data_Tuple.Tuple(a, a);
};

var downFrom = function downFrom(dictEnum) {
  return function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function () {
      var $107 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
      var $108 = pred(dictEnum);
      return function ($109) {
        return $107($108($109));
      };
    }());
  };
};

var upFrom = function upFrom(dictEnum) {
  return function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function () {
      var $110 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
      var $111 = succ(dictEnum);
      return function ($112) {
        return $110($111($112));
      };
    }());
  };
};

var defaultToEnum = function defaultToEnum(dictBounded) {
  return function (dictEnum) {
    return function (i$prime) {
      var go = function go($copy_i) {
        return function ($copy_x) {
          var $tco_var_i = $copy_i;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(i, x) {
            var $82 = i === 0;

            if ($82) {
              $tco_done = true;
              return new Data_Maybe.Just(x);
            }

            ;
            var v = succ(dictEnum)(x);

            if (v instanceof Data_Maybe.Just) {
              $tco_var_i = i - 1 | 0;
              $copy_x = v.value0;
              return;
            }

            ;

            if (v instanceof Data_Maybe.Nothing) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }

            ;
            throw new Error("Failed pattern match at Data.Enum (line 293, column 12 - line 295, column 33): " + [v.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_i, $copy_x);
          }

          ;
          return $tco_result;
        };
      };

      var $85 = i$prime < 0;

      if ($85) {
        return Data_Maybe.Nothing.value;
      }

      ;
      return go(i$prime)(Data_Bounded.bottom(dictBounded));
    };
  };
};

var defaultSucc = function defaultSucc(toEnum$prime) {
  return function (fromEnum$prime) {
    return function (a) {
      return toEnum$prime(fromEnum$prime(a) + 1 | 0);
    };
  };
};

var defaultPred = function defaultPred(toEnum$prime) {
  return function (fromEnum$prime) {
    return function (a) {
      return toEnum$prime(fromEnum$prime(a) - 1 | 0);
    };
  };
};

var defaultFromEnum = function defaultFromEnum(dictEnum) {
  var go = function go($copy_i) {
    return function ($copy_x) {
      var $tco_var_i = $copy_i;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(i, x) {
        var v = pred(dictEnum)(x);

        if (v instanceof Data_Maybe.Just) {
          $tco_var_i = i + 1 | 0;
          $copy_x = v.value0;
          return;
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return i;
        }

        ;
        throw new Error("Failed pattern match at Data.Enum (line 306, column 5 - line 308, column 19): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_i, $copy_x);
      }

      ;
      return $tco_result;
    };
  };

  return go(0);
};

var defaultCardinality = function defaultCardinality(dictBounded) {
  return function (dictEnum) {
    var go = function go($copy_i) {
      return function ($copy_x) {
        var $tco_var_i = $copy_i;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(i, x) {
          var v = succ(dictEnum)(x);

          if (v instanceof Data_Maybe.Just) {
            $tco_var_i = i + 1 | 0;
            $copy_x = v.value0;
            return;
          }

          ;

          if (v instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return i;
          }

          ;
          throw new Error("Failed pattern match at Data.Enum (line 273, column 5 - line 275, column 19): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_i, $copy_x);
        }

        ;
        return $tco_result;
      };
    };

    return Cardinality(go(1)(Data_Bounded.bottom(dictBounded)));
  };
};

var charToEnum = function charToEnum(v) {
  if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
    return new Data_Maybe.Just($foreign.fromCharCode(v));
  }

  ;
  return Data_Maybe.Nothing.value;
};

var enumChar = new Enum(function () {
  return Data_Ord.ordChar;
}, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));

var cardinality = function cardinality(dict) {
  return dict.cardinality;
};

var boundedEnumUnit = new BoundedEnum(function () {
  return Data_Bounded.boundedUnit;
}, function () {
  return enumUnit;
}, 1, Data_Function["const"](0), function (v) {
  if (v === 0) {
    return new Data_Maybe.Just(Data_Unit.unit);
  }

  ;
  return Data_Maybe.Nothing.value;
});
var boundedEnumOrdering = new BoundedEnum(function () {
  return Data_Bounded.boundedOrdering;
}, function () {
  return enumOrdering;
}, 3, function (v) {
  if (v instanceof Data_Ordering.LT) {
    return 0;
  }

  ;

  if (v instanceof Data_Ordering.EQ) {
    return 1;
  }

  ;

  if (v instanceof Data_Ordering.GT) {
    return 2;
  }

  ;
  throw new Error("Failed pattern match at Data.Enum (line 137, column 1 - line 145, column 18): " + [v.constructor.name]);
}, function (v) {
  if (v === 0) {
    return new Data_Maybe.Just(Data_Ordering.LT.value);
  }

  ;

  if (v === 1) {
    return new Data_Maybe.Just(Data_Ordering.EQ.value);
  }

  ;

  if (v === 2) {
    return new Data_Maybe.Just(Data_Ordering.GT.value);
  }

  ;
  return Data_Maybe.Nothing.value;
});
var boundedEnumChar = new BoundedEnum(function () {
  return Data_Bounded.boundedChar;
}, function () {
  return enumChar;
}, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
var boundedEnumBoolean = new BoundedEnum(function () {
  return Data_Bounded.boundedBoolean;
}, function () {
  return enumBoolean;
}, 2, function (v) {
  if (!v) {
    return 0;
  }

  ;

  if (v) {
    return 1;
  }

  ;
  throw new Error("Failed pattern match at Data.Enum (line 118, column 1 - line 124, column 20): " + [v.constructor.name]);
}, function (v) {
  if (v === 0) {
    return new Data_Maybe.Just(false);
  }

  ;

  if (v === 1) {
    return new Data_Maybe.Just(true);
  }

  ;
  return Data_Maybe.Nothing.value;
});
module.exports = {
  Enum: Enum,
  succ: succ,
  pred: pred,
  BoundedEnum: BoundedEnum,
  cardinality: cardinality,
  toEnum: toEnum,
  fromEnum: fromEnum,
  toEnumWithDefaults: toEnumWithDefaults,
  Cardinality: Cardinality,
  enumFromTo: enumFromTo,
  enumFromThenTo: enumFromThenTo,
  upFrom: upFrom,
  upFromIncluding: upFromIncluding,
  downFrom: downFrom,
  downFromIncluding: downFromIncluding,
  defaultSucc: defaultSucc,
  defaultPred: defaultPred,
  defaultCardinality: defaultCardinality,
  defaultToEnum: defaultToEnum,
  defaultFromEnum: defaultFromEnum,
  enumBoolean: enumBoolean,
  enumInt: enumInt,
  enumChar: enumChar,
  enumUnit: enumUnit,
  enumOrdering: enumOrdering,
  enumMaybe: enumMaybe,
  enumEither: enumEither,
  enumTuple: enumTuple,
  boundedEnumBoolean: boundedEnumBoolean,
  boundedEnumChar: boundedEnumChar,
  boundedEnumUnit: boundedEnumUnit,
  boundedEnumOrdering: boundedEnumOrdering,
  newtypeCardinality: newtypeCardinality,
  eqCardinality: eqCardinality,
  ordCardinality: ordCardinality,
  showCardinality: showCardinality
};
},{"./foreign.js":"output/Data.Enum/foreign.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"output/Data.Unfoldable1/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Web.Event.EventPhase/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var None = function () {
  function None() {}

  ;
  None.value = new None();
  return None;
}();

var Capturing = function () {
  function Capturing() {}

  ;
  Capturing.value = new Capturing();
  return Capturing;
}();

var AtTarget = function () {
  function AtTarget() {}

  ;
  AtTarget.value = new AtTarget();
  return AtTarget;
}();

var Bubbling = function () {
  function Bubbling() {}

  ;
  Bubbling.value = new Bubbling();
  return Bubbling;
}();

var toEnumEventPhase = function toEnumEventPhase(v) {
  if (v === 0) {
    return new Data_Maybe.Just(None.value);
  }

  ;

  if (v === 1) {
    return new Data_Maybe.Just(Capturing.value);
  }

  ;

  if (v === 2) {
    return new Data_Maybe.Just(AtTarget.value);
  }

  ;

  if (v === 3) {
    return new Data_Maybe.Just(Bubbling.value);
  }

  ;
  return Data_Maybe.Nothing.value;
};

var fromEnumEventPhase = function fromEnumEventPhase(v) {
  if (v instanceof None) {
    return 0;
  }

  ;

  if (v instanceof Capturing) {
    return 1;
  }

  ;

  if (v instanceof AtTarget) {
    return 2;
  }

  ;

  if (v instanceof Bubbling) {
    return 3;
  }

  ;
  throw new Error("Failed pattern match at Web.Event.EventPhase (line 40, column 3 - line 44, column 18): " + [v.constructor.name]);
};

var eqEventPhase = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof None && y instanceof None) {
      return true;
    }

    ;

    if (x instanceof Capturing && y instanceof Capturing) {
      return true;
    }

    ;

    if (x instanceof AtTarget && y instanceof AtTarget) {
      return true;
    }

    ;

    if (x instanceof Bubbling && y instanceof Bubbling) {
      return true;
    }

    ;
    return false;
  };
});
var ordEventPhase = new Data_Ord.Ord(function () {
  return eqEventPhase;
}, function (x) {
  return function (y) {
    if (x instanceof None && y instanceof None) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof None) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof None) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Capturing && y instanceof Capturing) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Capturing) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Capturing) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof AtTarget && y instanceof AtTarget) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof AtTarget) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof AtTarget) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Bubbling && y instanceof Bubbling) {
      return Data_Ordering.EQ.value;
    }

    ;
    throw new Error("Failed pattern match at Web.Event.EventPhase (line 14, column 1 - line 14, column 48): " + [x.constructor.name, y.constructor.name]);
  };
});
var enumEventPhase = new Data_Enum.Enum(function () {
  return ordEventPhase;
}, Data_Enum.defaultPred(toEnumEventPhase)(fromEnumEventPhase), Data_Enum.defaultSucc(toEnumEventPhase)(fromEnumEventPhase));
var boundedEventPhase = new Data_Bounded.Bounded(function () {
  return ordEventPhase;
}, None.value, Bubbling.value);
var boundedEnumEventPhase = new Data_Enum.BoundedEnum(function () {
  return boundedEventPhase;
}, function () {
  return enumEventPhase;
}, 4, fromEnumEventPhase, toEnumEventPhase);
module.exports = {
  None: None,
  Capturing: Capturing,
  AtTarget: AtTarget,
  Bubbling: Bubbling,
  toEnumEventPhase: toEnumEventPhase,
  fromEnumEventPhase: fromEnumEventPhase,
  eqEventPhase: eqEventPhase,
  ordEventPhase: ordEventPhase,
  boundedEventPhase: boundedEventPhase,
  enumEventPhase: enumEventPhase,
  boundedEnumEventPhase: boundedEnumEventPhase
};
},{"../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js"}],"output/Web.Event.Event/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Web_Event_EventPhase = require("../Web.Event.EventPhase/index.js");

var EventType = function EventType(x) {
  return x;
};

var target = function target($4) {
  return Data_Nullable.toMaybe($foreign["_target"]($4));
};

var ordEventType = Data_Ord.ordString;
var newtypeEventType = new Data_Newtype.Newtype(function (n) {
  return n;
}, EventType);

var eventPhase = function eventPhase(dictPartial) {
  var $5 = Data_Maybe.fromJust();
  var $6 = Data_Enum.toEnum(Web_Event_EventPhase.boundedEnumEventPhase);
  return function ($7) {
    return $5($6($foreign.eventPhaseIndex($7)));
  };
};

var eqEventType = Data_Eq.eqString;

var currentTarget = function currentTarget($8) {
  return Data_Nullable.toMaybe($foreign["_currentTarget"]($8));
};

module.exports = {
  EventType: EventType,
  target: target,
  currentTarget: currentTarget,
  eventPhase: eventPhase,
  newtypeEventType: newtypeEventType,
  eqEventType: eqEventType,
  ordEventType: ordEventType,
  type_: $foreign.type_,
  stopPropagation: $foreign.stopPropagation,
  stopImmediatePropagation: $foreign.stopImmediatePropagation,
  bubbles: $foreign.bubbles,
  cancelable: $foreign.cancelable,
  preventDefault: $foreign.preventDefault,
  defaultPrevented: $foreign.defaultPrevented,
  timeStamp: $foreign.timeStamp
};
},{"./foreign.js":"output/Web.Event.Event/foreign.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Web.Event.EventPhase/index.js":"output/Web.Event.EventPhase/index.js"}],"output/Web.File.FileList/foreign.js":[function(require,module,exports) {
"use strict";

exports.length = function (fileList) {
  return fileList.length;
};

exports._item = function (index) {
  return function (fileList) {
    return fileList.item(index);
  };
};
},{}],"output/Web.File.FileList/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var item = function item(i) {
  var $1 = $foreign["_item"](i);
  return function ($2) {
    return Data_Nullable.toMaybe($1($2));
  };
};

var items = function items(dictUnfoldable) {
  return function (fl) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (i) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(i + 1 | 0))(item(i)(fl));
    })(0);
  };
};

module.exports = {
  item: item,
  items: items,
  length: $foreign.length
};
},{"./foreign.js":"output/Web.File.FileList/foreign.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js"}],"output/Web.HTML.Event.DragEvent.EventTypes/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var drop = "drop";
var dragstart = "dragstart";
var dragover = "dragover";
var dragleave = "dragleave";
var dragexit = "dragexit";
var dragenter = "dragenter";
var dragend = "dragend";
var drag = "drag";
module.exports = {
  dragstart: dragstart,
  drag: drag,
  dragenter: dragenter,
  dragexit: dragexit,
  dragleave: dragleave,
  dragover: dragover,
  drop: drop,
  dragend: dragend
};
},{}],"output/Web.HTML.HTMLInputElement/foreign.js":[function(require,module,exports) {
"use strict";

exports.accept = function (input) {
  return function () {
    return input.accept;
  };
};

exports.setAccept = function (accept) {
  return function (input) {
    return function () {
      input.accept = accept;
    };
  };
}; // ----------------------------------------------------------------------------


exports.alt = function (input) {
  return function () {
    return input.alt;
  };
};

exports.setAlt = function (alt) {
  return function (input) {
    return function () {
      input.alt = alt;
    };
  };
}; // ----------------------------------------------------------------------------


exports.autocomplete = function (input) {
  return function () {
    return input.autocomplete;
  };
};

exports.setAutocomplete = function (autocomplete) {
  return function (input) {
    return function () {
      input.autocomplete = autocomplete;
    };
  };
}; // ----------------------------------------------------------------------------


exports.autofocus = function (input) {
  return function () {
    return input.autofocus;
  };
};

exports.setAutofocus = function (autofocus) {
  return function (input) {
    return function () {
      input.autofocus = autofocus;
    };
  };
}; // ----------------------------------------------------------------------------


exports.defaultChecked = function (input) {
  return function () {
    return input.defaultChecked;
  };
};

exports.setDefaultChecked = function (defaultChecked) {
  return function (input) {
    return function () {
      input.defaultChecked = defaultChecked;
    };
  };
}; // ----------------------------------------------------------------------------


exports.checked = function (input) {
  return function () {
    return input.checked;
  };
};

exports.setChecked = function (checked) {
  return function (input) {
    return function () {
      input.checked = checked;
    };
  };
}; // ----------------------------------------------------------------------------


exports.dirName = function (input) {
  return function () {
    return input.dirName;
  };
};

exports.setDirName = function (dirName) {
  return function (input) {
    return function () {
      input.dirName = dirName;
    };
  };
}; // ----------------------------------------------------------------------------


exports.disabled = function (input) {
  return function () {
    return input.disabled;
  };
};

exports.setDisabled = function (disabled) {
  return function (input) {
    return function () {
      input.disabled = disabled;
    };
  };
}; // ----------------------------------------------------------------------------


exports._form = function (input) {
  return function () {
    return input.form;
  };
}; // ----------------------------------------------------------------------------


exports._files = function (input) {
  return function () {
    return input.files;
  };
}; // ----------------------------------------------------------------------------


exports.formAction = function (input) {
  return function () {
    return input.formAction;
  };
};

exports.setFormAction = function (formAction) {
  return function (input) {
    return function () {
      input.formAction = formAction;
    };
  };
}; // ----------------------------------------------------------------------------


exports.formEnctype = function (input) {
  return function () {
    return input.formEnctype;
  };
};

exports.setFormEnctype = function (formEnctype) {
  return function (input) {
    return function () {
      input.formEnctype = formEnctype;
    };
  };
}; // ----------------------------------------------------------------------------


exports.formMethod = function (input) {
  return function () {
    return input.formMethod;
  };
};

exports.setFormMethod = function (formMethod) {
  return function (input) {
    return function () {
      input.formMethod = formMethod;
    };
  };
}; // ----------------------------------------------------------------------------


exports.formNoValidate = function (input) {
  return function () {
    return input.formNoValidate;
  };
};

exports.setFormNoValidate = function (formNoValidate) {
  return function (input) {
    return function () {
      input.formNoValidate = formNoValidate;
    };
  };
}; // ----------------------------------------------------------------------------


exports.formTarget = function (input) {
  return function () {
    return input.formTarget;
  };
};

exports.setFormTarget = function (formTarget) {
  return function (input) {
    return function () {
      input.formTarget = formTarget;
    };
  };
}; // ----------------------------------------------------------------------------


exports.height = function (input) {
  return function () {
    return input.height;
  };
};

exports.setHeight = function (height) {
  return function (input) {
    return function () {
      input.height = height;
    };
  };
}; // ----------------------------------------------------------------------------


exports.indeterminate = function (input) {
  return function () {
    return input.indeterminate;
  };
};

exports.setIndeterminate = function (indeterminate) {
  return function (input) {
    return function () {
      input.indeterminate = indeterminate;
    };
  };
}; // ----------------------------------------------------------------------------


exports._list = function (input) {
  return function () {
    return input.list;
  };
}; // ----------------------------------------------------------------------------


exports.max = function (input) {
  return function () {
    return input.max;
  };
};

exports.setMax = function (max) {
  return function (input) {
    return function () {
      input.max = max;
    };
  };
}; // ----------------------------------------------------------------------------


exports.maxLength = function (input) {
  return function () {
    return input.maxLength;
  };
};

exports.setMaxLength = function (maxLength) {
  return function (input) {
    return function () {
      input.maxLength = maxLength;
    };
  };
}; // ----------------------------------------------------------------------------


exports.min = function (input) {
  return function () {
    return input.min;
  };
};

exports.setMin = function (min) {
  return function (input) {
    return function () {
      input.min = min;
    };
  };
}; // ----------------------------------------------------------------------------


exports.minLength = function (input) {
  return function () {
    return input.minLength;
  };
};

exports.setMinLength = function (minLength) {
  return function (input) {
    return function () {
      input.minLength = minLength;
    };
  };
}; // ----------------------------------------------------------------------------


exports.multiple = function (input) {
  return function () {
    return input.multiple;
  };
};

exports.setMultiple = function (multiple) {
  return function (input) {
    return function () {
      input.multiple = multiple;
    };
  };
}; // ----------------------------------------------------------------------------


exports.name = function (input) {
  return function () {
    return input.name;
  };
};

exports.setName = function (name) {
  return function (input) {
    return function () {
      input.name = name;
    };
  };
}; // ----------------------------------------------------------------------------


exports.pattern = function (input) {
  return function () {
    return input.pattern;
  };
};

exports.setPattern = function (pattern) {
  return function (input) {
    return function () {
      input.pattern = pattern;
    };
  };
}; // ----------------------------------------------------------------------------


exports.placeholder = function (input) {
  return function () {
    return input.placeholder;
  };
};

exports.setPlaceholder = function (placeholder) {
  return function (input) {
    return function () {
      input.placeholder = placeholder;
    };
  };
}; // ----------------------------------------------------------------------------


exports.readOnly = function (input) {
  return function () {
    return input.readOnly;
  };
};

exports.setReadOnly = function (readOnly) {
  return function (input) {
    return function () {
      input.readOnly = readOnly;
    };
  };
}; // ----------------------------------------------------------------------------


exports.required = function (input) {
  return function () {
    return input.required;
  };
};

exports.setRequired = function (required) {
  return function (input) {
    return function () {
      input.required = required;
    };
  };
}; // ----------------------------------------------------------------------------


exports.size = function (input) {
  return function () {
    return input.size;
  };
};

exports.setSize = function (size) {
  return function (input) {
    return function () {
      input.size = size;
    };
  };
}; // ----------------------------------------------------------------------------


exports.src = function (input) {
  return function () {
    return input.src;
  };
};

exports.setSrc = function (src) {
  return function (input) {
    return function () {
      input.src = src;
    };
  };
}; // ----------------------------------------------------------------------------


exports.step = function (input) {
  return function () {
    return input.step;
  };
};

exports.setStep = function (step) {
  return function (input) {
    return function () {
      input.step = step;
    };
  };
}; // ----------------------------------------------------------------------------


exports.type_ = function (input) {
  return function () {
    return input.type;
  };
};

exports.setType = function (type) {
  return function (input) {
    return function () {
      input.type = type;
    };
  };
}; // ----------------------------------------------------------------------------


exports.defaultValue = function (input) {
  return function () {
    return input.defaultValue;
  };
};

exports.setDefaultValue = function (defaultValue) {
  return function (input) {
    return function () {
      input.defaultValue = defaultValue;
    };
  };
}; // ----------------------------------------------------------------------------


exports.value = function (input) {
  return function () {
    return input.value;
  };
};

exports.setValue = function (value) {
  return function (input) {
    return function () {
      input.value = value;
    };
  };
}; // ----------------------------------------------------------------------------


exports.valueAsDate = function (input) {
  return function () {
    return input.valueAsDate;
  };
};

exports.setValueAsDate = function (valueAsDate) {
  return function (input) {
    return function () {
      input.valueAsDate = valueAsDate;
    };
  };
}; // ----------------------------------------------------------------------------


exports.valueAsNumber = function (input) {
  return function () {
    return input.valueAsNumber;
  };
};

exports.setValueAsNumber = function (valueAsNumber) {
  return function (input) {
    return function () {
      input.valueAsNumber = valueAsNumber;
    };
  };
}; // ----------------------------------------------------------------------------


exports.width = function (input) {
  return function () {
    return input.width;
  };
};

exports.setWidth = function (width) {
  return function (input) {
    return function () {
      input.width = width;
    };
  };
}; // ----------------------------------------------------------------------------


exports["stepUp'"] = function (n) {
  return function (input) {
    return function () {
      input.stepUp(n);
    };
  };
}; // ----------------------------------------------------------------------------


exports["stepDown'"] = function (n) {
  return function (input) {
    return function () {
      input.stepDown(n);
    };
  };
}; // ----------------------------------------------------------------------------


exports.willValidate = function (input) {
  return function () {
    return input.willValidate;
  };
}; // ----------------------------------------------------------------------------


exports.validity = function (input) {
  return function () {
    return input.validity;
  };
}; // ----------------------------------------------------------------------------


exports.validationMessage = function (input) {
  return function () {
    return input.validationMessage;
  };
}; // ----------------------------------------------------------------------------


exports.checkValidity = function (input) {
  return function () {
    return input.checkValidity();
  };
}; // ----------------------------------------------------------------------------


exports.reportValidity = function (input) {
  return function () {
    return input.reportValidity();
  };
}; // ----------------------------------------------------------------------------


exports.setCustomValidity = function (value) {
  return function (input) {
    return function () {
      input.setCustomValidity(value);
    };
  };
}; // ----------------------------------------------------------------------------


exports.labels = function (input) {
  return function () {
    return input.labels;
  };
}; // ----------------------------------------------------------------------------


exports.select = function (input) {
  return function () {
    input.select();
  };
}; // ----------------------------------------------------------------------------


exports.selectionStart = function (input) {
  return function () {
    return input.selectionStart;
  };
};

exports.setSelectionStart = function (selectionStart) {
  return function (input) {
    return function () {
      input.selectionStart = selectionStart;
    };
  };
}; // ----------------------------------------------------------------------------


exports.selectionEnd = function (input) {
  return function () {
    return input.selectionEnd;
  };
};

exports.setSelectionEnd = function (selectionEnd) {
  return function (input) {
    return function () {
      input.selectionEnd = selectionEnd;
    };
  };
}; // ----------------------------------------------------------------------------


exports.selectionDirection = function (input) {
  return function () {
    return input.selectionDirection;
  };
};

exports.setSelectionDirection = function (selectionDirection) {
  return function (input) {
    return function () {
      input.selectionDirection = selectionDirection;
    };
  };
}; // ----------------------------------------------------------------------------


exports.setRangeText = function (replacement) {
  return function (input) {
    return function () {
      input.setRangeText(replacement);
    };
  };
};

exports._setRangeText = function (replacement, start, end, selectionMode, textarea) {
  textarea.setRangeText(replacement, start, end, selectionMode);
}; // ----------------------------------------------------------------------------


exports.setSelectionRange = function (start) {
  return function (end) {
    return function (direction) {
      return function (input) {
        return function () {
          input.setSelectionRange(start, end, direction, input);
        };
      };
    };
  };
};
},{}],"output/Web.HTML.SelectionMode/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Preserve = function () {
  function Preserve() {}

  ;
  Preserve.value = new Preserve();
  return Preserve;
}();

var Select = function () {
  function Select() {}

  ;
  Select.value = new Select();
  return Select;
}();

var Start = function () {
  function Start() {}

  ;
  Start.value = new Start();
  return Start;
}();

var End = function () {
  function End() {}

  ;
  End.value = new End();
  return End;
}();

var showSelectionMode = new Data_Show.Show(function (v) {
  if (v instanceof Preserve) {
    return "Preserve";
  }

  ;

  if (v instanceof Select) {
    return "Select";
  }

  ;

  if (v instanceof Start) {
    return "Start";
  }

  ;

  if (v instanceof End) {
    return "End";
  }

  ;
  throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 17, column 10 - line 21, column 17): " + [v.constructor.name]);
});

var print = function print(v) {
  if (v instanceof Preserve) {
    return "preserve";
  }

  ;

  if (v instanceof Select) {
    return "select";
  }

  ;

  if (v instanceof Start) {
    return "start";
  }

  ;

  if (v instanceof End) {
    return "end";
  }

  ;
  throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 32, column 9 - line 36, column 15): " + [v.constructor.name]);
};

var parse = function parse(v) {
  if (v === "preserve") {
    return new Data_Maybe.Just(Preserve.value);
  }

  ;

  if (v === "select") {
    return new Data_Maybe.Just(Select.value);
  }

  ;

  if (v === "start") {
    return new Data_Maybe.Just(Start.value);
  }

  ;

  if (v === "end") {
    return new Data_Maybe.Just(End.value);
  }

  ;
  return Data_Maybe.Nothing.value;
};

var eqSelectionMode = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof Preserve && y instanceof Preserve) {
      return true;
    }

    ;

    if (x instanceof Select && y instanceof Select) {
      return true;
    }

    ;

    if (x instanceof Start && y instanceof Start) {
      return true;
    }

    ;

    if (x instanceof End && y instanceof End) {
      return true;
    }

    ;
    return false;
  };
});
var ordSelectionMode = new Data_Ord.Ord(function () {
  return eqSelectionMode;
}, function (x) {
  return function (y) {
    if (x instanceof Preserve && y instanceof Preserve) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Preserve) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Preserve) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Select && y instanceof Select) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Select) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Select) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Start && y instanceof Start) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Start) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Start) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof End && y instanceof End) {
      return Data_Ordering.EQ.value;
    }

    ;
    throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 14, column 1 - line 14, column 54): " + [x.constructor.name, y.constructor.name]);
  };
});
module.exports = {
  Preserve: Preserve,
  Select: Select,
  Start: Start,
  End: End,
  parse: parse,
  print: print,
  eqSelectionMode: eqSelectionMode,
  ordSelectionMode: ordSelectionMode,
  showSelectionMode: showSelectionMode
};
},{"../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Web.HTML.HTMLInputElement/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Effect = require("../Effect/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_HTML_SelectionMode = require("../Web.HTML.SelectionMode/index.js");

var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");

var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toElement = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var stepUp = $foreign["stepUp'"](1);
var stepDown = $foreign["stepDown'"](1);

var setRangeText$prime = function setRangeText$prime(rpl) {
  return function (s) {
    return function (e) {
      return function (mode) {
        return function (area) {
          return function () {
            return $foreign["_setRangeText"](rpl, s, e, Web_HTML_SelectionMode.print(mode), area);
          };
        };
      };
    };
  };
};

var list = function () {
  var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($1) {
    return $0($foreign["_list"]($1));
  };
}();

var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");

var form = function () {
  var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($3) {
    return $2($foreign["_form"]($3));
  };
}();

var files = function () {
  var $4 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($5) {
    return $4($foreign["_files"]($5));
  };
}();

module.exports = {
  fromHTMLElement: fromHTMLElement,
  fromElement: fromElement,
  fromNode: fromNode,
  fromChildNode: fromChildNode,
  fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
  fromParentNode: fromParentNode,
  fromEventTarget: fromEventTarget,
  toHTMLElement: toHTMLElement,
  toElement: toElement,
  toNode: toNode,
  toChildNode: toChildNode,
  toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
  toParentNode: toParentNode,
  toEventTarget: toEventTarget,
  form: form,
  files: files,
  list: list,
  "setRangeText'": setRangeText$prime,
  accept: $foreign.accept,
  setAccept: $foreign.setAccept,
  alt: $foreign.alt,
  setAlt: $foreign.setAlt,
  autocomplete: $foreign.autocomplete,
  setAutocomplete: $foreign.setAutocomplete,
  autofocus: $foreign.autofocus,
  setAutofocus: $foreign.setAutofocus,
  defaultChecked: $foreign.defaultChecked,
  setDefaultChecked: $foreign.setDefaultChecked,
  checked: $foreign.checked,
  setChecked: $foreign.setChecked,
  dirName: $foreign.dirName,
  setDirName: $foreign.setDirName,
  disabled: $foreign.disabled,
  setDisabled: $foreign.setDisabled,
  formAction: $foreign.formAction,
  setFormAction: $foreign.setFormAction,
  formEnctype: $foreign.formEnctype,
  setFormEnctype: $foreign.setFormEnctype,
  formMethod: $foreign.formMethod,
  setFormMethod: $foreign.setFormMethod,
  formNoValidate: $foreign.formNoValidate,
  setFormNoValidate: $foreign.setFormNoValidate,
  formTarget: $foreign.formTarget,
  setFormTarget: $foreign.setFormTarget,
  height: $foreign.height,
  setHeight: $foreign.setHeight,
  indeterminate: $foreign.indeterminate,
  setIndeterminate: $foreign.setIndeterminate,
  max: $foreign.max,
  setMax: $foreign.setMax,
  maxLength: $foreign.maxLength,
  setMaxLength: $foreign.setMaxLength,
  min: $foreign.min,
  setMin: $foreign.setMin,
  minLength: $foreign.minLength,
  setMinLength: $foreign.setMinLength,
  multiple: $foreign.multiple,
  setMultiple: $foreign.setMultiple,
  name: $foreign.name,
  setName: $foreign.setName,
  pattern: $foreign.pattern,
  setPattern: $foreign.setPattern,
  placeholder: $foreign.placeholder,
  setPlaceholder: $foreign.setPlaceholder,
  readOnly: $foreign.readOnly,
  setReadOnly: $foreign.setReadOnly,
  required: $foreign.required,
  setRequired: $foreign.setRequired,
  size: $foreign.size,
  setSize: $foreign.setSize,
  src: $foreign.src,
  setSrc: $foreign.setSrc,
  step: $foreign.step,
  setStep: $foreign.setStep,
  type_: $foreign.type_,
  setType: $foreign.setType,
  defaultValue: $foreign.defaultValue,
  setDefaultValue: $foreign.setDefaultValue,
  value: $foreign.value,
  setValue: $foreign.setValue,
  valueAsDate: $foreign.valueAsDate,
  setValueAsDate: $foreign.setValueAsDate,
  valueAsNumber: $foreign.valueAsNumber,
  setValueAsNumber: $foreign.setValueAsNumber,
  width: $foreign.width,
  setWidth: $foreign.setWidth,
  "stepUp'": $foreign["stepUp'"],
  "stepDown'": $foreign["stepDown'"],
  willValidate: $foreign.willValidate,
  validity: $foreign.validity,
  validationMessage: $foreign.validationMessage,
  checkValidity: $foreign.checkValidity,
  reportValidity: $foreign.reportValidity,
  setCustomValidity: $foreign.setCustomValidity,
  labels: $foreign.labels,
  select: $foreign.select,
  selectionStart: $foreign.selectionStart,
  setSelectionStart: $foreign.setSelectionStart,
  selectionEnd: $foreign.selectionEnd,
  setSelectionEnd: $foreign.setSelectionEnd,
  selectionDirection: $foreign.selectionDirection,
  setSelectionDirection: $foreign.setSelectionDirection,
  setRangeText: $foreign.setRangeText,
  setSelectionRange: $foreign.setSelectionRange
};
},{"./foreign.js":"output/Web.HTML.HTMLInputElement/foreign.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Effect/index.js":"output/Effect/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js","../Web.HTML.SelectionMode/index.js":"output/Web.HTML.SelectionMode/index.js","../Web.Internal.FFI/index.js":"output/Web.Internal.FFI/index.js"}],"output/Web.UIEvent.FocusEvent.EventTypes/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var focusout = "focusout";
var focusin = "focusin";
var focus = "focus";
var blur = "blur";
module.exports = {
  blur: blur,
  focus: focus,
  focusin: focusin,
  focusout: focusout
};
},{}],"output/Web.UIEvent.KeyboardEvent.EventTypes/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var keyup = "keyup";
var keydown = "keydown";
module.exports = {
  keydown: keydown,
  keyup: keyup
};
},{}],"output/Web.UIEvent.MouseEvent.EventTypes/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var mouseup = "mouseup";
var mouseover = "mouseover";
var mouseout = "mouseout";
var mousemove = "mousemove";
var mouseleave = "mouseleave";
var mouseenter = "mouseenter";
var mousedown = "mousedown";
var dblclick = "dblclick";
var click = "click";
module.exports = {
  click: click,
  dblclick: dblclick,
  mousedown: mousedown,
  mouseenter: mouseenter,
  mouseleave: mouseleave,
  mousemove: mousemove,
  mouseout: mouseout,
  mouseover: mouseover,
  mouseup: mouseup
};
},{}],"output/Web.UIEvent.WheelEvent.EventTypes/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var wheel = "wheel";
module.exports = {
  wheel: wheel
};
},{}],"output/Halogen.HTML.Events/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_Except = require("../Control.Monad.Except/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Effect_Unsafe = require("../Effect.Unsafe/index.js");

var Foreign = require("../Foreign/index.js");

var Foreign_Index = require("../Foreign.Index/index.js");

var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");

var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_Clipboard_ClipboardEvent_EventTypes = require("../Web.Clipboard.ClipboardEvent.EventTypes/index.js");

var Web_Event_Event = require("../Web.Event.Event/index.js");

var Web_File_FileList = require("../Web.File.FileList/index.js");

var Web_HTML_Event_DragEvent_EventTypes = require("../Web.HTML.Event.DragEvent.EventTypes/index.js");

var Web_HTML_Event_EventTypes = require("../Web.HTML.Event.EventTypes/index.js");

var Web_HTML_HTMLInputElement = require("../Web.HTML.HTMLInputElement/index.js");

var Web_UIEvent_FocusEvent_EventTypes = require("../Web.UIEvent.FocusEvent.EventTypes/index.js");

var Web_UIEvent_KeyboardEvent_EventTypes = require("../Web.UIEvent.KeyboardEvent.EventTypes/index.js");

var Web_UIEvent_MouseEvent_EventTypes = require("../Web.UIEvent.MouseEvent.EventTypes/index.js");

var Web_UIEvent_WheelEvent_EventTypes = require("../Web.UIEvent.WheelEvent.EventTypes/index.js");

var wheelHandler = Unsafe_Coerce.unsafeCoerce;
var touchHandler = Unsafe_Coerce.unsafeCoerce;
var mouseHandler = Unsafe_Coerce.unsafeCoerce;
var keyHandler = Unsafe_Coerce.unsafeCoerce;

var handler = function handler(et) {
  var $1 = Halogen_HTML_Core.handler(et);
  var $2 = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Halogen_Query_Input.Action.create));
  return function ($3) {
    return $1($2($3));
  };
};

var onAbort = handler("abort");
var onChange = handler(Web_HTML_Event_EventTypes.change);

var onClick = function () {
  var $4 = handler(Web_UIEvent_MouseEvent_EventTypes.click);
  return function ($5) {
    return $4(mouseHandler($5));
  };
}();

var onDoubleClick = function () {
  var $6 = handler(Web_UIEvent_MouseEvent_EventTypes.dblclick);
  return function ($7) {
    return $6(mouseHandler($7));
  };
}();

var onError = handler(Web_HTML_Event_EventTypes.error);

var onFileUpload = function onFileUpload(dictUnfoldable) {
  return function (f) {
    return handler(Web_HTML_Event_EventTypes.change)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Web_Event_Event.target)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Web_HTML_HTMLInputElement.fromEventTarget)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(function ($8) {
      return Effect_Unsafe.unsafePerformEffect(Web_HTML_HTMLInputElement.files($8));
    })(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(function () {
      var $9 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
      var $10 = Web_File_FileList.items(dictUnfoldable);
      return function ($11) {
        return $9($10($11));
      };
    }())(f)))));
  };
};

var onInput = handler(Web_HTML_Event_EventTypes.input);
var onInvalid = handler(Web_HTML_Event_EventTypes.invalid);

var onKeyDown = function () {
  var $12 = handler(Web_UIEvent_KeyboardEvent_EventTypes.keydown);
  return function ($13) {
    return $12(keyHandler($13));
  };
}();

var onKeyUp = function () {
  var $14 = handler(Web_UIEvent_KeyboardEvent_EventTypes.keyup);
  return function ($15) {
    return $14(keyHandler($15));
  };
}();

var onLoad = handler(Web_HTML_Event_EventTypes.load);

var onMouseDown = function () {
  var $16 = handler(Web_UIEvent_MouseEvent_EventTypes.mousedown);
  return function ($17) {
    return $16(mouseHandler($17));
  };
}();

var onMouseEnter = function () {
  var $18 = handler(Web_UIEvent_MouseEvent_EventTypes.mouseenter);
  return function ($19) {
    return $18(mouseHandler($19));
  };
}();

var onMouseLeave = function () {
  var $20 = handler(Web_UIEvent_MouseEvent_EventTypes.mouseleave);
  return function ($21) {
    return $20(mouseHandler($21));
  };
}();

var onMouseMove = function () {
  var $22 = handler(Web_UIEvent_MouseEvent_EventTypes.mousemove);
  return function ($23) {
    return $22(mouseHandler($23));
  };
}();

var onMouseOut = function () {
  var $24 = handler(Web_UIEvent_MouseEvent_EventTypes.mouseout);
  return function ($25) {
    return $24(mouseHandler($25));
  };
}();

var onMouseOver = function () {
  var $26 = handler(Web_UIEvent_MouseEvent_EventTypes.mouseover);
  return function ($27) {
    return $26(mouseHandler($27));
  };
}();

var onMouseUp = function () {
  var $28 = handler(Web_UIEvent_MouseEvent_EventTypes.mouseup);
  return function ($29) {
    return $28(mouseHandler($29));
  };
}();

var onReset = handler("reset");
var onResize = handler("resize");
var onScroll = handler("scroll");
var onSelect = handler(Web_HTML_Event_EventTypes.select);
var onSubmit = handler("submit");

var onTouchCancel = function () {
  var $30 = handler("touchcancel");
  return function ($31) {
    return $30(touchHandler($31));
  };
}();

var onTouchEnd = function () {
  var $32 = handler("touchend");
  return function ($33) {
    return $32(touchHandler($33));
  };
}();

var onTouchEnter = function () {
  var $34 = handler("touchenter");
  return function ($35) {
    return $34(touchHandler($35));
  };
}();

var onTouchLeave = function () {
  var $36 = handler("touchleave");
  return function ($37) {
    return $36(touchHandler($37));
  };
}();

var onTouchMove = function () {
  var $38 = handler("touchmove");
  return function ($39) {
    return $38(touchHandler($39));
  };
}();

var onTouchStart = function () {
  var $40 = handler("touchstart");
  return function ($41) {
    return $40(touchHandler($41));
  };
}();

var onTransitionEnd = handler("transitionend");

var onWheel = function () {
  var $42 = handler(Web_UIEvent_WheelEvent_EventTypes.wheel);
  return function ($43) {
    return $42(wheelHandler($43));
  };
}();

var focusHandler = Unsafe_Coerce.unsafeCoerce;

var onBlur = function () {
  var $44 = handler(Web_HTML_Event_EventTypes.blur);
  return function ($45) {
    return $44(focusHandler($45));
  };
}();

var onFocus = function () {
  var $46 = handler(Web_UIEvent_FocusEvent_EventTypes.focus);
  return function ($47) {
    return $46(focusHandler($47));
  };
}();

var onFocusIn = function () {
  var $48 = handler(Web_UIEvent_FocusEvent_EventTypes.focusin);
  return function ($49) {
    return $48(focusHandler($49));
  };
}();

var onFocusOut = function () {
  var $50 = handler(Web_UIEvent_FocusEvent_EventTypes.focusout);
  return function ($51) {
    return $50(focusHandler($51));
  };
}();

var dragHandler = Unsafe_Coerce.unsafeCoerce;

var onDrag = function () {
  var $52 = handler(Web_HTML_Event_DragEvent_EventTypes.drag);
  return function ($53) {
    return $52(dragHandler($53));
  };
}();

var onDragEnd = function () {
  var $54 = handler(Web_HTML_Event_DragEvent_EventTypes.dragend);
  return function ($55) {
    return $54(dragHandler($55));
  };
}();

var onDragEnter = function () {
  var $56 = handler(Web_HTML_Event_DragEvent_EventTypes.dragenter);
  return function ($57) {
    return $56(dragHandler($57));
  };
}();

var onDragExit = function () {
  var $58 = handler(Web_HTML_Event_DragEvent_EventTypes.dragexit);
  return function ($59) {
    return $58(dragHandler($59));
  };
}();

var onDragLeave = function () {
  var $60 = handler(Web_HTML_Event_DragEvent_EventTypes.dragleave);
  return function ($61) {
    return $60(dragHandler($61));
  };
}();

var onDragOver = function () {
  var $62 = handler(Web_HTML_Event_DragEvent_EventTypes.dragover);
  return function ($63) {
    return $62(dragHandler($63));
  };
}();

var onDragStart = function () {
  var $64 = handler(Web_HTML_Event_DragEvent_EventTypes.dragstart);
  return function ($65) {
    return $64(dragHandler($65));
  };
}();

var onDrop = function () {
  var $66 = handler(Web_HTML_Event_DragEvent_EventTypes.drop);
  return function ($67) {
    return $66(dragHandler($67));
  };
}();

var clipboardHandler = Unsafe_Coerce.unsafeCoerce;

var onCopy = function () {
  var $68 = handler(Web_Clipboard_ClipboardEvent_EventTypes.copy);
  return function ($69) {
    return $68(clipboardHandler($69));
  };
}();

var onCut = function () {
  var $70 = handler(Web_Clipboard_ClipboardEvent_EventTypes.cut);
  return function ($71) {
    return $70(clipboardHandler($71));
  };
}();

var onPaste = function () {
  var $72 = handler(Web_Clipboard_ClipboardEvent_EventTypes.paste);
  return function ($73) {
    return $72(clipboardHandler($73));
  };
}();

var addForeignPropHandler = function addForeignPropHandler(key) {
  return function (prop) {
    return function (reader) {
      return function (f) {
        var go = function go(a) {
          return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(reader)(Foreign_Index.readProp(prop))(Foreign.unsafeToForeign(a));
        };

        return handler(key)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Web_Event_Event.currentTarget)(function (e) {
          return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(f)(Control_Monad_Except.runExcept(go(e)));
        }));
      };
    };
  };
};

var onChecked = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("checked")(Foreign.readBoolean);
var onSelectedIndexChange = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("selectedIndex")(Foreign.readInt);
var onValueChange = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("value")(Foreign.readString);
var onValueInput = addForeignPropHandler(Web_HTML_Event_EventTypes.input)("value")(Foreign.readString);
module.exports = {
  handler: handler,
  onAbort: onAbort,
  onError: onError,
  onLoad: onLoad,
  onScroll: onScroll,
  onChange: onChange,
  onFileUpload: onFileUpload,
  onInput: onInput,
  onInvalid: onInvalid,
  onReset: onReset,
  onSelect: onSelect,
  onSubmit: onSubmit,
  onTransitionEnd: onTransitionEnd,
  onCopy: onCopy,
  onPaste: onPaste,
  onCut: onCut,
  onClick: onClick,
  onDoubleClick: onDoubleClick,
  onMouseDown: onMouseDown,
  onMouseEnter: onMouseEnter,
  onMouseLeave: onMouseLeave,
  onMouseMove: onMouseMove,
  onMouseOver: onMouseOver,
  onMouseOut: onMouseOut,
  onMouseUp: onMouseUp,
  onWheel: onWheel,
  onKeyDown: onKeyDown,
  onKeyUp: onKeyUp,
  onBlur: onBlur,
  onFocus: onFocus,
  onFocusIn: onFocusIn,
  onFocusOut: onFocusOut,
  onDrag: onDrag,
  onDragEnd: onDragEnd,
  onDragExit: onDragExit,
  onDragEnter: onDragEnter,
  onDragLeave: onDragLeave,
  onDragOver: onDragOver,
  onDragStart: onDragStart,
  onDrop: onDrop,
  onTouchCancel: onTouchCancel,
  onTouchEnd: onTouchEnd,
  onTouchEnter: onTouchEnter,
  onTouchLeave: onTouchLeave,
  onTouchMove: onTouchMove,
  onTouchStart: onTouchStart,
  onResize: onResize,
  onValueChange: onValueChange,
  onValueInput: onValueInput,
  onSelectedIndexChange: onSelectedIndexChange,
  onChecked: onChecked
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad.Except/index.js":"output/Control.Monad.Except/index.js","../Control.Monad.Except.Trans/index.js":"output/Control.Monad.Except.Trans/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Identity/index.js":"output/Data.Identity/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Effect.Unsafe/index.js":"output/Effect.Unsafe/index.js","../Foreign/index.js":"output/Foreign/index.js","../Foreign.Index/index.js":"output/Foreign.Index/index.js","../Halogen.HTML.Core/index.js":"output/Halogen.HTML.Core/index.js","../Halogen.Query.Input/index.js":"output/Halogen.Query.Input/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js","../Web.Clipboard.ClipboardEvent.EventTypes/index.js":"output/Web.Clipboard.ClipboardEvent.EventTypes/index.js","../Web.Event.Event/index.js":"output/Web.Event.Event/index.js","../Web.File.FileList/index.js":"output/Web.File.FileList/index.js","../Web.HTML.Event.DragEvent.EventTypes/index.js":"output/Web.HTML.Event.DragEvent.EventTypes/index.js","../Web.HTML.Event.EventTypes/index.js":"output/Web.HTML.Event.EventTypes/index.js","../Web.HTML.HTMLInputElement/index.js":"output/Web.HTML.HTMLInputElement/index.js","../Web.UIEvent.FocusEvent.EventTypes/index.js":"output/Web.UIEvent.FocusEvent.EventTypes/index.js","../Web.UIEvent.KeyboardEvent.EventTypes/index.js":"output/Web.UIEvent.KeyboardEvent.EventTypes/index.js","../Web.UIEvent.MouseEvent.EventTypes/index.js":"output/Web.UIEvent.MouseEvent.EventTypes/index.js","../Web.UIEvent.WheelEvent.EventTypes/index.js":"output/Web.UIEvent.WheelEvent.EventTypes/index.js"}],"../output/Halogen.HTML.Properties/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var DOM_HTML_Indexed_OnOff = require("../DOM.HTML.Indexed.OnOff/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_String_Common = require("../Data.String.Common/index.js");

var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");

var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");

var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var IProp = function IProp(x) {
  return x;
};

var ref = function () {
  var go = function go(p) {
    return function (mel) {
      return new Data_Maybe.Just(new Halogen_Query_Input.RefUpdate(p, mel));
    };
  };

  return function ($11) {
    return Halogen_HTML_Core.ref(go($11));
  };
}();

var prop = function prop(dictIsProp) {
  return Halogen_HTML_Core.prop(dictIsProp);
};

var readOnly = prop(Halogen_HTML_Core.isPropBoolean)("readOnly");
var rel = prop(Halogen_HTML_Core.isPropString)("rel");
var required = prop(Halogen_HTML_Core.isPropBoolean)("required");
var rowSpan = prop(Halogen_HTML_Core.isPropInt)("rowSpan");
var rows = prop(Halogen_HTML_Core.isPropInt)("rows");
var selected = prop(Halogen_HTML_Core.isPropBoolean)("selected");
var selectedIndex = prop(Halogen_HTML_Core.isPropInt)("selectedIndex");
var spellcheck = prop(Halogen_HTML_Core.isPropBoolean)("spellcheck");
var src = prop(Halogen_HTML_Core.isPropString)("src");
var step = prop(Halogen_HTML_Core.isPropStepValue)("step");
var tabIndex = prop(Halogen_HTML_Core.isPropInt)("tabIndex");
var target = prop(Halogen_HTML_Core.isPropString)("target");
var title = prop(Halogen_HTML_Core.isPropString)("title");

var type_ = function type_(dictIsProp) {
  return prop(dictIsProp)("type");
};

var value = prop(Halogen_HTML_Core.isPropString)("value");
var width = prop(Halogen_HTML_Core.isPropInt)("width");
var preload = prop(Halogen_HTML_Core.isPropPreloadValue)("preload");
var poster = prop(Halogen_HTML_Core.isPropString)("poster");
var placeholder = prop(Halogen_HTML_Core.isPropString)("placeholder");
var pattern = prop(Halogen_HTML_Core.isPropString)("pattern");
var noValidate = prop(Halogen_HTML_Core.isPropBoolean)("noValidate");
var newtypeIProp = new Data_Newtype.Newtype(function (n) {
  return n;
}, IProp);
var name = prop(Halogen_HTML_Core.isPropString)("name");
var muted = prop(Halogen_HTML_Core.isPropBoolean)("muted");
var multiple = prop(Halogen_HTML_Core.isPropBoolean)("multiple");
var min = prop(Halogen_HTML_Core.isPropNumber)("min");
var method = prop(Halogen_HTML_Core.isPropFormMethod)("method");
var max = prop(Halogen_HTML_Core.isPropNumber)("max");
var loop = prop(Halogen_HTML_Core.isPropBoolean)("loop");
var id_ = prop(Halogen_HTML_Core.isPropString)("id");
var href = prop(Halogen_HTML_Core.isPropString)("href");
var height = prop(Halogen_HTML_Core.isPropInt)("height");
var functorIProp = new Data_Functor.Functor(function (f) {
  return function (m) {
    return Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(f))(m);
  };
});
var $$for = prop(Halogen_HTML_Core.isPropString)("htmlFor");

var expand = function expand(dictUnion) {
  return Unsafe_Coerce.unsafeCoerce;
};

var enctype = prop(Halogen_HTML_Core.isPropMediaType)("enctype");
var draggable = prop(Halogen_HTML_Core.isPropBoolean)("draggable");
var download = prop(Halogen_HTML_Core.isPropString)("download");
var disabled = prop(Halogen_HTML_Core.isPropBoolean)("disabled");

var enabled = function () {
  var $12 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
  return function ($13) {
    return disabled($12($13));
  };
}();

var controls = prop(Halogen_HTML_Core.isPropBoolean)("controls");
var cols = prop(Halogen_HTML_Core.isPropInt)("cols");
var colSpan = prop(Halogen_HTML_Core.isPropInt)("colSpan");

var classes = function () {
  var $14 = prop(Halogen_HTML_Core.isPropString)("className");
  var $15 = Data_String_Common.joinWith(" ");
  var $16 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName));
  return function ($17) {
    return $14($15($16($17)));
  };
}();

var class_ = function () {
  var $18 = prop(Halogen_HTML_Core.isPropString)("className");
  var $19 = Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName);
  return function ($20) {
    return $18($19($20));
  };
}();

var checked = prop(Halogen_HTML_Core.isPropBoolean)("checked");
var charset = prop(Halogen_HTML_Core.isPropString)("charset");
var autoplay = prop(Halogen_HTML_Core.isPropBoolean)("autoplay");
var autofocus = prop(Halogen_HTML_Core.isPropBoolean)("autofocus");

var autocomplete = function () {
  var $21 = prop(Halogen_HTML_Core.isPropOnOff)("autocomplete");
  return function ($22) {
    return $21(function (b) {
      if (b) {
        return DOM_HTML_Indexed_OnOff.On.value;
      }

      ;
      return DOM_HTML_Indexed_OnOff.Off.value;
    }($22));
  };
}();

var attrNS = function () {
  var $23 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
  return function ($24) {
    return Halogen_HTML_Core.attr($23($24));
  };
}();

var attr = Halogen_HTML_Core.attr(Data_Maybe.Nothing.value);
var list = attr("list");
var alt = prop(Halogen_HTML_Core.isPropString)("alt");
var action = prop(Halogen_HTML_Core.isPropString)("action");
var accept = prop(Halogen_HTML_Core.isPropInputAcceptType)("accept");
module.exports = {
  IProp: IProp,
  prop: prop,
  attr: attr,
  attrNS: attrNS,
  ref: ref,
  expand: expand,
  alt: alt,
  charset: charset,
  class_: class_,
  classes: classes,
  cols: cols,
  rows: rows,
  colSpan: colSpan,
  rowSpan: rowSpan,
  "for": $$for,
  height: height,
  width: width,
  href: href,
  id_: id_,
  name: name,
  rel: rel,
  src: src,
  target: target,
  title: title,
  download: download,
  method: method,
  action: action,
  enctype: enctype,
  noValidate: noValidate,
  type_: type_,
  value: value,
  min: min,
  max: max,
  step: step,
  disabled: disabled,
  enabled: enabled,
  required: required,
  readOnly: readOnly,
  spellcheck: spellcheck,
  checked: checked,
  selected: selected,
  selectedIndex: selectedIndex,
  placeholder: placeholder,
  autocomplete: autocomplete,
  list: list,
  autofocus: autofocus,
  multiple: multiple,
  pattern: pattern,
  accept: accept,
  autoplay: autoplay,
  controls: controls,
  loop: loop,
  muted: muted,
  poster: poster,
  preload: preload,
  draggable: draggable,
  tabIndex: tabIndex,
  newtypeIProp: newtypeIProp,
  functorIProp: functorIProp
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../DOM.HTML.Indexed.OnOff/index.js":"output/DOM.HTML.Indexed.OnOff/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.String.Common/index.js":"output/Data.String.Common/index.js","../Halogen.HTML.Core/index.js":"output/Halogen.HTML.Core/index.js","../Halogen.Query.Input/index.js":"output/Halogen.Query.Input/index.js","../Halogen.VDom.DOM.Prop/index.js":"output/Halogen.VDom.DOM.Prop/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Control.Monad.Fork.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Completed = function () {
  function Completed(value0) {
    this.value0 = value0;
  }

  ;

  Completed.create = function (value0) {
    return new Completed(value0);
  };

  return Completed;
}();

var Failed = function () {
  function Failed(value0) {
    this.value0 = value0;
  }

  ;

  Failed.create = function (value0) {
    return new Failed(value0);
  };

  return Failed;
}();

var Killed = function () {
  function Killed(value0) {
    this.value0 = value0;
  }

  ;

  Killed.create = function (value0) {
    return new Killed(value0);
  };

  return Killed;
}();

var MonadFork = function MonadFork(Functor1, Monad0, fork, join, suspend) {
  this.Functor1 = Functor1;
  this.Monad0 = Monad0;
  this.fork = fork;
  this.join = join;
  this.suspend = suspend;
};

var MonadKill = function MonadKill(MonadFork0, MonadThrow1, kill) {
  this.MonadFork0 = MonadFork0;
  this.MonadThrow1 = MonadThrow1;
  this.kill = kill;
};

var MonadBracket = function MonadBracket(MonadError1, MonadKill0, bracket, never, uninterruptible) {
  this.MonadError1 = MonadError1;
  this.MonadKill0 = MonadKill0;
  this.bracket = bracket;
  this.never = never;
  this.uninterruptible = uninterruptible;
};

var uninterruptible = function uninterruptible(dict) {
  return dict.uninterruptible;
};

var suspend = function suspend(dict) {
  return dict.suspend;
};

var never = function never(dict) {
  return dict.never;
};

var monadForkAff = new MonadFork(function () {
  return Effect_Aff.functorFiber;
}, function () {
  return Effect_Aff.monadAff;
}, Effect_Aff.forkAff, Effect_Aff.joinFiber, Effect_Aff.suspendAff);
var monadKillAff = new MonadKill(function () {
  return monadForkAff;
}, function () {
  return Effect_Aff.monadThrowAff;
}, Effect_Aff.killFiber);
var monadBracketAff = new MonadBracket(function () {
  return Effect_Aff.monadErrorAff;
}, function () {
  return monadKillAff;
}, function (acquire) {
  return function (release) {
    return function (run) {
      return Effect_Aff.generalBracket(acquire)({
        completed: function completed($11) {
          return release(Completed.create($11));
        },
        failed: function failed($12) {
          return release(Failed.create($12));
        },
        killed: function killed($13) {
          return release(Killed.create($13));
        }
      })(run);
    };
  };
}, Effect_Aff.never, Effect_Aff.invincible);

var kill = function kill(dict) {
  return dict.kill;
};

var join = function join(dict) {
  return dict.join;
};

var fork = function fork(dict) {
  return dict.fork;
};

var monadForkReaderT = function monadForkReaderT(dictMonadFork) {
  return new MonadFork(dictMonadFork.Functor1, function () {
    return Control_Monad_Reader_Trans.monadReaderT(dictMonadFork.Monad0());
  }, function (v) {
    var $14 = fork(dictMonadFork);
    return function ($15) {
      return $14(v($15));
    };
  }, function () {
    var $16 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonadFork.Monad0());
    var $17 = join(dictMonadFork);
    return function ($18) {
      return $16($17($18));
    };
  }(), function (v) {
    var $19 = suspend(dictMonadFork);
    return function ($20) {
      return $19(v($20));
    };
  });
};

var monadKillReaderT = function monadKillReaderT(dictMonadKill) {
  return new MonadKill(function () {
    return monadForkReaderT(dictMonadKill.MonadFork0());
  }, function () {
    return Control_Monad_Reader_Trans.monadThrowReaderT(dictMonadKill.MonadThrow1());
  }, function (e) {
    var $21 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonadKill.MonadThrow1().Monad0());
    var $22 = kill(dictMonadKill)(e);
    return function ($23) {
      return $21($22($23));
    };
  });
};

var bracket = function bracket(dict) {
  return dict.bracket;
};

var monadBracketReaderT = function monadBracketReaderT(dictMonadBracket) {
  return new MonadBracket(function () {
    return Control_Monad_Reader_Trans.monadErrorReaderT(dictMonadBracket.MonadError1());
  }, function () {
    return monadKillReaderT(dictMonadBracket.MonadKill0());
  }, function (v) {
    return function (release) {
      return function (run) {
        return function (r) {
          return bracket(dictMonadBracket)(v(r))(function (c) {
            return function (a) {
              return Control_Monad_Reader_Trans.runReaderT(release(c)(a))(r);
            };
          })(function (a) {
            return Control_Monad_Reader_Trans.runReaderT(run(a))(r);
          });
        };
      };
    };
  }, Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonadBracket.MonadError1().MonadThrow0().Monad0())(never(dictMonadBracket)), function (k) {
    return function (r) {
      return uninterruptible(dictMonadBracket)(Control_Monad_Reader_Trans.runReaderT(k)(r));
    };
  });
};

module.exports = {
  bracket: bracket,
  fork: fork,
  join: join,
  kill: kill,
  never: never,
  suspend: suspend,
  uninterruptible: uninterruptible,
  MonadFork: MonadFork,
  MonadKill: MonadKill,
  Completed: Completed,
  Failed: Failed,
  Killed: Killed,
  MonadBracket: MonadBracket,
  monadForkAff: monadForkAff,
  monadForkReaderT: monadForkReaderT,
  monadKillAff: monadKillAff,
  monadKillReaderT: monadKillReaderT,
  monadBracketAff: monadBracketAff,
  monadBracketReaderT: monadBracketReaderT
};
},{"../Control.Monad.Reader.Trans/index.js":"output/Control.Monad.Reader.Trans/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Effect.Aff/index.js":"output/Effect.Aff/index.js"}],"output/Effect.Console/foreign.js":[function(require,module,exports) {
"use strict";

exports.log = function (s) {
  return function () {
    console.log(s);
    return {};
  };
};

exports.warn = function (s) {
  return function () {
    console.warn(s);
    return {};
  };
};

exports.error = function (s) {
  return function () {
    console.error(s);
    return {};
  };
};

exports.info = function (s) {
  return function () {
    console.info(s);
    return {};
  };
};

exports.time = function (s) {
  return function () {
    console.time(s);
    return {};
  };
};

exports.timeLog = function (s) {
  return function () {
    console.timeLog(s);
    return {};
  };
};

exports.timeEnd = function (s) {
  return function () {
    console.timeEnd(s);
    return {};
  };
};

exports.clear = function () {
  console.clear();
  return {};
};
},{}],"output/Effect.Console/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Show = require("../Data.Show/index.js");

var warnShow = function warnShow(dictShow) {
  return function (a) {
    return $foreign.warn(Data_Show.show(dictShow)(a));
  };
};

var logShow = function logShow(dictShow) {
  return function (a) {
    return $foreign.log(Data_Show.show(dictShow)(a));
  };
};

var infoShow = function infoShow(dictShow) {
  return function (a) {
    return $foreign.info(Data_Show.show(dictShow)(a));
  };
};

var errorShow = function errorShow(dictShow) {
  return function (a) {
    return $foreign.error(Data_Show.show(dictShow)(a));
  };
};

module.exports = {
  logShow: logShow,
  warnShow: warnShow,
  errorShow: errorShow,
  infoShow: infoShow,
  log: $foreign.log,
  warn: $foreign.warn,
  error: $foreign.error,
  info: $foreign.info,
  time: $foreign.time,
  timeLog: $foreign.timeLog,
  timeEnd: $foreign.timeEnd,
  clear: $foreign.clear
};
},{"./foreign.js":"output/Effect.Console/foreign.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Halogen.Aff.Driver.State/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Map_Internal = require("../Data.Map.Internal/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var DriverStateRef = function DriverStateRef(x) {
  return x;
};

var DriverState = function DriverState(x) {
  return x;
};

var unRenderStateX = Unsafe_Coerce.unsafeCoerce;
var unDriverStateX = Unsafe_Coerce.unsafeCoerce;

var renderStateX_ = function renderStateX_(dictApplicative) {
  return function (f) {
    return unDriverStateX(function (st) {
      return Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(f)(st.rendering);
    });
  };
};

var mkRenderStateX = Unsafe_Coerce.unsafeCoerce;

var renderStateX = function renderStateX(dictFunctor) {
  return function (f) {
    return unDriverStateX(function (st) {
      return mkRenderStateX(f(st.rendering));
    });
  };
};

var mkDriverStateXRef = Unsafe_Coerce.unsafeCoerce;

var mapDriverState = function mapDriverState(f) {
  return function (v) {
    return f(v);
  };
};

var initDriverState = function initDriverState(component) {
  return function (input) {
    return function (handler) {
      return function (lchs) {
        return function __do() {
          var selfRef = Effect_Ref["new"]({})();
          var childrenIn = Effect_Ref["new"](Halogen_Data_Slot.empty)();
          var childrenOut = Effect_Ref["new"](Halogen_Data_Slot.empty)();
          var handlerRef = Effect_Ref["new"](handler)();
          var pendingQueries = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
          var pendingOuts = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
          var pendingHandlers = Effect_Ref["new"](Data_Maybe.Nothing.value)();
          var fresh = Effect_Ref["new"](1)();
          var subscriptions = Effect_Ref["new"](new Data_Maybe.Just(Data_Map_Internal.empty))();
          var forks = Effect_Ref["new"](Data_Map_Internal.empty)();
          var ds = {
            component: component,
            state: component.initialState(input),
            refs: Data_Map_Internal.empty,
            children: Halogen_Data_Slot.empty,
            childrenIn: childrenIn,
            childrenOut: childrenOut,
            selfRef: selfRef,
            handlerRef: handlerRef,
            pendingQueries: pendingQueries,
            pendingOuts: pendingOuts,
            pendingHandlers: pendingHandlers,
            rendering: Data_Maybe.Nothing.value,
            fresh: fresh,
            subscriptions: subscriptions,
            forks: forks,
            lifecycleHandlers: lchs
          };
          Effect_Ref.write(ds)(selfRef)();
          return mkDriverStateXRef(selfRef);
        };
      };
    };
  };
};

module.exports = {
  DriverState: DriverState,
  mapDriverState: mapDriverState,
  DriverStateRef: DriverStateRef,
  unDriverStateX: unDriverStateX,
  mkDriverStateXRef: mkDriverStateXRef,
  renderStateX: renderStateX,
  renderStateX_: renderStateX_,
  unRenderStateX: unRenderStateX,
  initDriverState: initDriverState
};
},{"../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Map.Internal/index.js":"output/Data.Map.Internal/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Effect.Ref/index.js":"output/Effect.Ref/index.js","../Halogen.Data.Slot/index.js":"output/Halogen.Data.Slot/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Unsafe.Reference/foreign.js":[function(require,module,exports) {
"use strict";

exports.reallyUnsafeRefEq = function (a) {
  return function (b) {
    return a === b;
  };
};
},{}],"output/Unsafe.Reference/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var unsafeRefEq = $foreign.reallyUnsafeRefEq;
module.exports = {
  unsafeRefEq: unsafeRefEq,
  reallyUnsafeRefEq: $foreign.reallyUnsafeRefEq
};
},{"./foreign.js":"output/Unsafe.Reference/foreign.js"}],"output/Halogen.Aff.Driver.Eval/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Applicative_Free = require("../Control.Applicative.Free/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Coroutine = require("../Control.Coroutine/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Fork_Class = require("../Control.Monad.Fork.Class/index.js");

var Control_Monad_Free = require("../Control.Monad.Free/index.js");

var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Parallel = require("../Control.Parallel/index.js");

var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Coyoneda = require("../Data.Coyoneda/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Map_Internal = require("../Data.Map.Internal/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Exception = require("../Effect.Exception/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");

var Halogen_Query_ChildQuery = require("../Halogen.Query.ChildQuery/index.js");

var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");

var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");

var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");

var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");

var Unsafe_Reference = require("../Unsafe.Reference/index.js");

var unsubscribe = function unsubscribe(sid) {
  return function (ref) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v.subscriptions)))(function (subs) {
        return Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Halogen_Query_EventSource.finalize)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs));
      });
    });
  };
};

var queueOrRun = function queueOrRun(ref) {
  return function (au) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
      if (v instanceof Data_Maybe.Nothing) {
        return au;
      }

      ;

      if (v instanceof Data_Maybe.Just) {
        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(new Data_Maybe.Just(new Data_List_Types.Cons(au, v.value0)))(ref));
      }

      ;
      throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 195, column 33 - line 197, column 57): " + [v.constructor.name]);
    });
  };
};

var handleLifecycle = function handleLifecycle(lchs) {
  return function (f) {
    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
      initializers: Data_List_Types.Nil.value,
      finalizers: Data_List_Types.Nil.value
    })(lchs)))(function () {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(function (result) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(lchs)))(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(v.finalizers))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(v.initializers))(function () {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(result);
            });
          });
        });
      });
    });
  };
};

var fresh = function fresh(f) {
  return function (ref) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["modify'"](function (i) {
        return {
          state: i + 1 | 0,
          value: f(i)
        };
      })(v.fresh));
    });
  };
};

var evalQ = function evalQ(render) {
  return function (ref) {
    return function (q) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
        return evalM(render)(ref)(v["component"]["eval"](new Halogen_Query_HalogenQ.Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(Data_Maybe.Just.create)(Data_Coyoneda.liftCoyoneda(q)), Data_Function["const"](Data_Maybe.Nothing.value))));
      });
    };
  };
};

var evalM = function evalM(render) {
  return function (initRef) {
    return function (v) {
      var evalChildQuery = function evalChildQuery(ref) {
        return function (cqb) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
            return Halogen_Query_ChildQuery.unChildQueryBox(function (v2) {
              var evalChild = function evalChild(v3) {
                return Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3)))(function (dsx) {
                  return Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                    return evalQ(render)(ds.selfRef)(v2.value1);
                  })(dsx);
                }));
              };

              return Data_Functor.map(Effect_Aff.functorAff)(v2.value2)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(v2.value0(Effect_Aff.applicativeParAff)(evalChild)(v1.children)));
            })(cqb);
          });
        };
      };

      var go = function go(ref) {
        return function (v1) {
          if (v1 instanceof Halogen_Query_HalogenM.State) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
              var v3 = v1.value0(v2.state);

              if (Unsafe_Reference.unsafeRefEq(v2.state)(v3.value1)) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
              }

              ;

              if (Data_Boolean.otherwise) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
                  component: v2.component,
                  state: v3.value1,
                  refs: v2.refs,
                  children: v2.children,
                  childrenIn: v2.childrenIn,
                  childrenOut: v2.childrenOut,
                  selfRef: v2.selfRef,
                  handlerRef: v2.handlerRef,
                  pendingQueries: v2.pendingQueries,
                  pendingOuts: v2.pendingOuts,
                  pendingHandlers: v2.pendingHandlers,
                  rendering: v2.rendering,
                  fresh: v2.fresh,
                  subscriptions: v2.subscriptions,
                  forks: v2.forks,
                  lifecycleHandlers: v2.lifecycleHandlers
                })(ref)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(handleLifecycle(v2.lifecycleHandlers)(render(v2.lifecycleHandlers)(ref)))(function () {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                  });
                });
              }

              ;
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 85, column 7 - line 91, column 21): " + [v3.constructor.name]);
            });
          }

          ;

          if (v1 instanceof Halogen_Query_HalogenM.Subscribe) {
            return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.SubscriptionId)(ref))(function (sid) {
              var v2 = v1.value0(sid);
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v3) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.bind(Effect_Aff.bindAff)(v2)(function (v4) {
                  var done = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3.subscriptions)))(function (subs) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordSubscriptionId)(sid)))(v3.subscriptions)))(function () {
                      return Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Maybe.maybe(false)(Data_Map_Internal.member(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs))(Halogen_Query_EventSource.finalize(v4.finalizer));
                    });
                  });
                  var consumer = Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Coroutine["await"](Effect_Aff.monadAff))(function (act) {
                    return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Effect_Aff.monadAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3.subscriptions))))(function (subs) {
                      return Control_Applicative.when(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.member(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs))(new Data_Maybe.Just(true)))(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Effect_Aff.monadAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(evalF(render)(ref)(new Halogen_Query_Input.Action(act)))))(function () {
                        return consumer;
                      }));
                    });
                  });
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordSubscriptionId)(sid)(done)))(v3.subscriptions)))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Coroutine.runProcess(Effect_Aff.monadRecAff)(Control_Coroutine.pullFrom(Effect_Aff.monadRecAff)(consumer)(v4.producer)))(function () {
                      return Halogen_Query_EventSource.finalize(done);
                    });
                  });
                })))(function () {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(sid));
                });
              });
            });
          }

          ;

          if (v1 instanceof Halogen_Query_HalogenM.Unsubscribe) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(unsubscribe(v1.value0)(ref))(function () {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
            });
          }

          ;

          if (v1 instanceof Halogen_Query_HalogenM.Lift) {
            return v1.value0;
          }

          ;

          if (v1 instanceof Halogen_Query_HalogenM.ChildQuery) {
            return evalChildQuery(ref)(v1.value0);
          }

          ;

          if (v1 instanceof Halogen_Query_HalogenM.Raise) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.handlerRef)))(function (handler) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(queueOrRun(v2.pendingOuts)(handler(v1.value0)))(function () {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                });
              });
            });
          }

          ;

          if (v1 instanceof Halogen_Query_HalogenM.Par) {
            return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Applicative_Free.retractFreeAp(Effect_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp(function () {
              var $85 = Control_Parallel_Class.parallel(Effect_Aff.parallelAff);
              var $86 = evalM(render)(ref);
              return function ($87) {
                return $85($86($87));
              };
            }())(v1.value0)));
          }

          ;

          if (v1 instanceof Halogen_Query_HalogenM.Fork) {
            return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.ForkId)(ref))(function (fid) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (doneRef) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Effect_Aff["finally"](Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                    Effect_Ref.modify_(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordForkId)(fid))(v2.forks)();
                    return Effect_Ref.write(true)(doneRef)();
                  }))(evalM(render)(ref)(v1.value0))))(function (fiber) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(doneRef))(Effect_Ref.modify_(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordForkId)(fid)(fiber))(v2.forks))))(function () {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(fid));
                    });
                  });
                });
              });
            });
          }

          ;

          if (v1 instanceof Halogen_Query_HalogenM.Kill) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.forks)))(function (forkMap) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Effect_Aff.killFiber(Effect_Exception.error("Cancelled")))(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordForkId)(v1.value0)(forkMap)))(function () {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                });
              });
            });
          }

          ;

          if (v1 instanceof Halogen_Query_HalogenM.GetRef) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0)(v2.refs)));
            });
          }

          ;
          throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 82, column 12 - line 146, column 33): " + [v1.constructor.name]);
        };
      };

      return Control_Monad_Free.foldFree(Effect_Aff.monadRecAff)(go(initRef))(v);
    };
  };
};

var evalF = function evalF(render) {
  return function (ref) {
    return function (v) {
      if (v instanceof Halogen_Query_Input.RefUpdate) {
        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Function.flip(Effect_Ref.modify_)(ref)(Halogen_Aff_Driver_State.mapDriverState(function (st) {
          return {
            component: st.component,
            state: st.state,
            refs: Data_Map_Internal.alter(Data_Ord.ordString)(Data_Function["const"](v.value1))(v.value0)(st.refs),
            children: st.children,
            childrenIn: st.childrenIn,
            childrenOut: st.childrenOut,
            selfRef: st.selfRef,
            handlerRef: st.handlerRef,
            pendingQueries: st.pendingQueries,
            pendingOuts: st.pendingOuts,
            pendingHandlers: st.pendingHandlers,
            rendering: st.rendering,
            fresh: st.fresh,
            subscriptions: st.subscriptions,
            forks: st.forks,
            lifecycleHandlers: st.lifecycleHandlers
          };
        })));
      }

      ;

      if (v instanceof Halogen_Query_Input.Action) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
          return evalM(render)(ref)(v1["component"]["eval"](new Halogen_Query_HalogenQ.Action(v.value0, Data_Unit.unit)));
        });
      }

      ;
      throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 51, column 20 - line 57, column 62): " + [v.constructor.name]);
    };
  };
};

module.exports = {
  evalF: evalF,
  evalQ: evalQ,
  evalM: evalM,
  handleLifecycle: handleLifecycle,
  queueOrRun: queueOrRun
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Applicative.Free/index.js":"output/Control.Applicative.Free/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Coroutine/index.js":"output/Control.Coroutine/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Control.Monad.Fork.Class/index.js":"output/Control.Monad.Fork.Class/index.js","../Control.Monad.Free/index.js":"output/Control.Monad.Free/index.js","../Control.Monad.Free.Trans/index.js":"output/Control.Monad.Free.Trans/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.Parallel/index.js":"output/Control.Parallel/index.js","../Control.Parallel.Class/index.js":"output/Control.Parallel.Class/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Coyoneda/index.js":"output/Data.Coyoneda/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Map.Internal/index.js":"output/Data.Map.Internal/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect/index.js":"output/Effect/index.js","../Effect.Aff/index.js":"output/Effect.Aff/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js","../Effect.Exception/index.js":"output/Effect.Exception/index.js","../Effect.Ref/index.js":"output/Effect.Ref/index.js","../Halogen.Aff.Driver.State/index.js":"output/Halogen.Aff.Driver.State/index.js","../Halogen.Query.ChildQuery/index.js":"output/Halogen.Query.ChildQuery/index.js","../Halogen.Query.EventSource/index.js":"output/Halogen.Query.EventSource/index.js","../Halogen.Query.HalogenM/index.js":"output/Halogen.Query.HalogenM/index.js","../Halogen.Query.HalogenQ/index.js":"output/Halogen.Query.HalogenQ/index.js","../Halogen.Query.Input/index.js":"output/Halogen.Query.Input/index.js","../Unsafe.Reference/index.js":"output/Unsafe.Reference/index.js"}],"output/Halogen.Aff.Driver/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Coroutine = require("../Control.Coroutine/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Fork_Class = require("../Control.Monad.Fork.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Parallel = require("../Control.Parallel/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Map_Internal = require("../Data.Map.Internal/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Effect_Aff_AVar = require("../Effect.Aff.AVar/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Console = require("../Effect.Console/index.js");

var Effect_Exception = require("../Effect.Exception/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var Halogen_Aff_Driver_Eval = require("../Halogen.Aff.Driver.Eval/index.js");

var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");

var Halogen_Component = require("../Halogen.Component/index.js");

var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");

var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");

var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");

var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");

var newLifecycleHandlers = Effect_Ref["new"]({
  initializers: Data_List_Types.Nil.value,
  finalizers: Data_List_Types.Nil.value
});
var handleAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));

var handlePending = function handlePending(ref) {
  return function __do() {
    var queue = Effect_Ref.read(ref)();
    Effect_Ref.write(Data_Maybe.Nothing.value)(ref)();
    return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(queue)(function () {
      var $25 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
      return function ($26) {
        return handleAff($25(Data_List.reverse($26)));
      };
    }())();
  };
};

var cleanupSubscriptionsAndForks = function cleanupSubscriptionsAndForks(v) {
  return function __do() {
    Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function () {
      var $27 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Map_Internal.foldableMap)(function () {
        var $29 = Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff);
        return function ($30) {
          return $29(Halogen_Query_EventSource.finalize($30));
        };
      }());
      return function ($28) {
        return handleAff($27($28));
      };
    }()))(Effect_Ref.read(v.subscriptions))();
    Effect_Ref.write(Data_Maybe.Nothing.value)(v.subscriptions)();
    Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(function () {
      var $31 = Effect_Aff.killFiber(Effect_Exception.error("finalized"));
      return function ($32) {
        return handleAff($31($32));
      };
    }()))(Effect_Ref.read(v.forks))();
    return Effect_Ref.write(Data_Map_Internal.empty)(v.forks)();
  };
};

var runUI = function runUI(renderSpec) {
  return function (component) {
    return function (i) {
      var subscribe = function subscribe(fresh) {
        return function (ref) {
          return function (consumer) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (inputVar) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                var listenerId = Effect_Ref.read(fresh)();
                Effect_Ref.modify_(function (v) {
                  return v + 1 | 0;
                })(fresh)();
                Effect_Ref.modify_(Data_Map_Internal.insert(Data_Ord.ordInt)(listenerId)(inputVar))(ref)();
                return listenerId;
              }))(function (listenerId) {
                var producer = Control_Coroutine.producer(Effect_Aff.monadAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Function["const"](new Data_Either.Right(Data_Unit.unit)))(Data_Either.Left.create))(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_AVar.take(inputVar))));
                return Data_Functor["void"](Effect_Aff.functorAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Coroutine.runProcess(Effect_Aff.monadRecAff)(Control_Coroutine.connect(Effect_Aff.monadRecAff)(Effect_Aff.parallelAff)(producer)(consumer)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordInt)(listenerId))(ref)))(function () {
                    return Effect_Aff_AVar.kill(Effect_Exception.error("ended"))(inputVar);
                  });
                })));
              });
            });
          };
        };
      };

      var rootHandler = function rootHandler(ref) {
        return function (message) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (listeners) {
            return Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Map_Internal.foldableMap)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(Data_Functor.map(Data_Map_Internal.functorMap)(Effect_Aff_AVar.put(message))(listeners));
          });
        };
      };

      var squashChildInitializers = function squashChildInitializers(lchs) {
        return function (preInits) {
          return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
            var parentInitializer = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Initialize(Data_Unit.unit)));
            return Effect_Ref.modify_(function (handlers) {
              return {
                initializers: new Data_List_Types.Cons(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(Data_List.reverse(handlers.initializers)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(parentInitializer)(function () {
                    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                      handlePending(st.pendingQueries)();
                      return handlePending(st.pendingOuts)();
                    });
                  });
                }), preInits),
                finalizers: handlers.finalizers
              };
            })(lchs);
          });
        };
      };

      var runComponent = function runComponent(lchs) {
        return function (handler) {
          return function (j) {
            return Halogen_Component.unComponent(function (c) {
              return function __do() {
                var lchs$prime = newLifecycleHandlers();
                var $$var = Halogen_Aff_Driver_State.initDriverState(c)(j)(handler)(lchs$prime)();
                var pre = Effect_Ref.read(lchs)();
                Effect_Ref.write({
                  initializers: Data_List_Types.Nil.value,
                  finalizers: pre.finalizers
                })(lchs)();
                Control_Bind.bindFlipped(Effect.bindEffect)(Halogen_Aff_Driver_State.unDriverStateX(function () {
                  var $33 = render(lchs);
                  return function ($34) {
                    return $33(function (v) {
                      return v.selfRef;
                    }($34));
                  };
                }()))(Effect_Ref.read($$var))();
                Control_Bind.bindFlipped(Effect.bindEffect)(squashChildInitializers(lchs)(pre.initializers))(Effect_Ref.read($$var))();
                return $$var;
              };
            });
          };
        };
      };

      var renderChild = function renderChild(lchs) {
        return function (handler) {
          return function (childrenInRef) {
            return function (childrenOutRef) {
              return Halogen_Component.unComponentSlot(function (slot) {
                return function __do() {
                  var childrenIn = Data_Functor.map(Effect.functorEffect)(slot.pop)(Effect_Ref.read(childrenInRef))();

                  var $$var = function () {
                    if (childrenIn instanceof Data_Maybe.Just) {
                      Effect_Ref.write(childrenIn.value0.value1)(childrenInRef)();
                      var dsx = Effect_Ref.read(childrenIn.value0.value0)();
                      Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                        return function __do() {
                          Data_Function.flip(Effect_Ref.write)(st.handlerRef)(function () {
                            var $35 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                            return function ($36) {
                              return $35(slot.output($36));
                            };
                          }())();
                          return handleAff(Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Receive(slot.input, Data_Unit.unit))))();
                        };
                      })(dsx)();
                      return childrenIn.value0.value0;
                    }

                    ;

                    if (childrenIn instanceof Data_Maybe.Nothing) {
                      return runComponent(lchs)(function () {
                        var $37 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                        return function ($38) {
                          return $37(slot.output($38));
                        };
                      }())(slot.input)(slot.component)();
                    }

                    ;
                    throw new Error("Failed pattern match at Halogen.Aff.Driver (line 236, column 14 - line 245, column 98): " + [childrenIn.constructor.name]);
                  }();

                  var isDuplicate = Data_Functor.map(Effect.functorEffect)(function ($39) {
                    return Data_Maybe.isJust(slot.get($39));
                  })(Effect_Ref.read(childrenOutRef))();
                  Control_Applicative.when(Effect.applicativeEffect)(isDuplicate)(Effect_Console.warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur"))();
                  Effect_Ref.modify_(slot.set($$var))(childrenOutRef)();
                  return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read($$var))(Halogen_Aff_Driver_State.renderStateX(Effect.functorEffect)(function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                      return Effect_Exception["throw"]("Halogen internal error: child was not initialized in renderChild");
                    }

                    ;

                    if (v instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(renderSpec.renderChild(v.value0));
                    }

                    ;
                    throw new Error("Failed pattern match at Halogen.Aff.Driver (line 250, column 37 - line 252, column 50): " + [v.constructor.name]);
                  }))();
                };
              });
            };
          };
        };
      };

      var render = function render(lchs) {
        return function ($$var) {
          return function __do() {
            var v = Effect_Ref.read($$var)();
            var shouldProcessHandlers = Data_Functor.map(Effect.functorEffect)(Data_Maybe.isNothing)(Effect_Ref.read(v.pendingHandlers))();
            Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(v.pendingHandlers))();
            Effect_Ref.write(Halogen_Data_Slot.empty)(v.childrenOut)();
            Effect_Ref.write(v.children)(v.childrenIn)();
            var selfRef = Control_Category.identity(Control_Category.categoryFn)(v.selfRef);
            var pendingQueries = Control_Category.identity(Control_Category.categoryFn)(v.pendingQueries);
            var pendingHandlers = Control_Category.identity(Control_Category.categoryFn)(v.pendingHandlers);

            var handler = function () {
              var $40 = Halogen_Aff_Driver_Eval.queueOrRun(pendingHandlers);
              var $41 = Data_Functor["void"](Effect_Aff.functorAff);
              var $42 = Halogen_Aff_Driver_Eval.evalF(render)(selfRef);
              return function ($43) {
                return $40($41($42($43)));
              };
            }();

            var childHandler = function () {
              var $44 = Halogen_Aff_Driver_Eval.queueOrRun(pendingQueries);
              return function ($45) {
                return $44(handler(Halogen_Query_Input.Action.create($45)));
              };
            }();

            var rendering = renderSpec.render(function ($46) {
              return handleAff(handler($46));
            })(renderChild(lchs)(childHandler)(v.childrenIn)(v.childrenOut))(v.component.render(v.state))(v.rendering)();
            var children = Effect_Ref.read(v.childrenOut)();
            var childrenIn = Effect_Ref.read(v.childrenIn)();
            Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(childrenIn)(function (v1) {
              return function __do() {
                var childDS = Effect_Ref.read(v1)();
                Halogen_Aff_Driver_State.renderStateX_(Effect.applicativeEffect)(renderSpec.removeChild)(childDS)();
                return finalize(lchs)(childDS)();
              };
            })();
            Data_Function.flip(Effect_Ref.modify_)(v.selfRef)(Halogen_Aff_Driver_State.mapDriverState(function (ds$prime) {
              return {
                component: ds$prime.component,
                state: ds$prime.state,
                refs: ds$prime.refs,
                children: children,
                childrenIn: ds$prime.childrenIn,
                childrenOut: ds$prime.childrenOut,
                selfRef: ds$prime.selfRef,
                handlerRef: ds$prime.handlerRef,
                pendingQueries: ds$prime.pendingQueries,
                pendingOuts: ds$prime.pendingOuts,
                pendingHandlers: ds$prime.pendingHandlers,
                rendering: new Data_Maybe.Just(rendering),
                fresh: ds$prime.fresh,
                subscriptions: ds$prime.subscriptions,
                forks: ds$prime.forks,
                lifecycleHandlers: ds$prime.lifecycleHandlers
              };
            }))();
            return Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Data_Function.flip(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEffect))(Data_Unit.unit)(function (v1) {
              return function __do() {
                var handlers = Effect_Ref.read(pendingHandlers)();
                Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(pendingHandlers)();
                Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function () {
                  var $47 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
                  return function ($48) {
                    return handleAff($47(Data_List.reverse($48)));
                  };
                }())(handlers)();
                var mmore = Effect_Ref.read(pendingHandlers)();
                var $21 = Data_Maybe.maybe(false)(Data_List["null"])(mmore);

                if ($21) {
                  return Data_Functor.voidLeft(Effect.functorEffect)(Effect_Ref.write(Data_Maybe.Nothing.value)(pendingHandlers))(new Control_Monad_Rec_Class.Done(Data_Unit.unit))();
                }

                ;
                return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
              };
            }))();
          };
        };
      };

      var finalize = function finalize(lchs) {
        return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
          return function __do() {
            cleanupSubscriptionsAndForks(st)();
            var f = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Finalize(Data_Unit.unit)));
            Effect_Ref.modify_(function (handlers) {
              return {
                initializers: handlers.initializers,
                finalizers: new Data_List_Types.Cons(f, handlers.finalizers)
              };
            })(lchs)();
            return Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(st.children)(function (v) {
              return function __do() {
                var dsx = Effect_Ref.read(v)();
                return finalize(lchs)(dsx)();
              };
            })();
          };
        });
      };

      var evalDriver = function evalDriver(disposed) {
        return function (ref) {
          return function (q) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(disposed)))(function (v) {
              if (v) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
              }

              ;
              return Halogen_Aff_Driver_Eval.evalQ(render)(ref)(q);
            });
          };
        };
      };

      var dispose = function dispose(disposed) {
        return function (lchs) {
          return function (dsx) {
            return function (subsRef) {
              return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                var v = Effect_Ref.read(disposed)();

                if (v) {
                  return Data_Unit.unit;
                }

                ;
                Effect_Ref.write(true)(disposed)();
                Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(function () {
                  var $49 = Effect_Aff_AVar.kill(Effect_Exception.error("disposed"));
                  return function ($50) {
                    return Effect_Aff.launchAff_($49($50));
                  };
                }()))(Effect_Ref.read(subsRef))();
                finalize(lchs)(dsx)();
                return Halogen_Aff_Driver_State.unDriverStateX(function () {
                  var $51 = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(renderSpec.dispose);
                  return function ($52) {
                    return $51(function (v1) {
                      return v1.rendering;
                    }($52));
                  };
                }())(dsx)();
              });
            };
          };
        };
      };

      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(newLifecycleHandlers))(function (lchs) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](0)))(function (fresh) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (disposed) {
            return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
              var listeners = Effect_Ref["new"](Data_Map_Internal.empty)();
              var dsx = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref.read)(runComponent(lchs)(rootHandler(listeners))(i)(component))();
              return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                return Control_Applicative.pure(Effect.applicativeEffect)({
                  query: evalDriver(disposed)(st.selfRef),
                  subscribe: subscribe(fresh)(listeners),
                  dispose: dispose(disposed)(lchs)(dsx)(listeners)
                });
              })(dsx)();
            });
          });
        });
      });
    };
  };
};

module.exports = {
  runUI: runUI
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Control.Coroutine/index.js":"output/Control.Coroutine/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Fork.Class/index.js":"output/Control.Monad.Fork.Class/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Parallel/index.js":"output/Control.Parallel/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.List/index.js":"output/Data.List/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Map.Internal/index.js":"output/Data.Map.Internal/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect/index.js":"output/Effect/index.js","../Effect.Aff/index.js":"output/Effect.Aff/index.js","../Effect.Aff.AVar/index.js":"output/Effect.Aff.AVar/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js","../Effect.Console/index.js":"output/Effect.Console/index.js","../Effect.Exception/index.js":"output/Effect.Exception/index.js","../Effect.Ref/index.js":"output/Effect.Ref/index.js","../Halogen.Aff.Driver.Eval/index.js":"output/Halogen.Aff.Driver.Eval/index.js","../Halogen.Aff.Driver.State/index.js":"output/Halogen.Aff.Driver.State/index.js","../Halogen.Component/index.js":"output/Halogen.Component/index.js","../Halogen.Data.Slot/index.js":"output/Halogen.Data.Slot/index.js","../Halogen.Query.EventSource/index.js":"output/Halogen.Query.EventSource/index.js","../Halogen.Query.HalogenQ/index.js":"output/Halogen.Query.HalogenQ/index.js","../Halogen.Query.Input/index.js":"output/Halogen.Query.Input/index.js"}],"output/Web.DOM.Node/foreign.js":[function(require,module,exports) {
"use strict";

var getEffProp = function getEffProp(name) {
  return function (node) {
    return function () {
      return node[name];
    };
  };
};

exports.nodeTypeIndex = function (node) {
  return node.nodeType;
};

exports.nodeName = function (node) {
  return node.nodeName;
};

exports.baseURI = getEffProp("baseURI");
exports._ownerDocument = getEffProp("ownerDocument");
exports._parentNode = getEffProp("parentNode");
exports._parentElement = getEffProp("parentElement");

exports.hasChildNodes = function (node) {
  return function () {
    return node.hasChildNodes();
  };
};

exports.childNodes = getEffProp("childNodes");
exports._firstChild = getEffProp("firstChild");
exports._lastChild = getEffProp("lastChild");
exports._previousSibling = getEffProp("previousSibling");
exports._nextSibling = getEffProp("nextSibling");
exports._nodeValue = getEffProp("nodeValue");

exports.setNodeValue = function (value) {
  return function (node) {
    return function () {
      node.nodeValue = value;
      return {};
    };
  };
};

exports.textContent = getEffProp("textContent");

exports.setTextContent = function (value) {
  return function (node) {
    return function () {
      node.textContent = value;
      return {};
    };
  };
};

exports.normalize = function (node) {
  return function () {
    node.normalize();
    return {};
  };
};

exports.clone = function (node) {
  return function () {
    return node.cloneNode(false);
  };
};

exports.deepClone = function (node) {
  return function () {
    return node.cloneNode(true);
  };
};

exports.isEqualNode = function (node1) {
  return function (node2) {
    return function () {
      return node1.isEqualNode(node2);
    };
  };
};

exports.compareDocumentPositionBits = function (node1) {
  return function (node2) {
    return function () {
      return node1.compareDocumentPosition(node2);
    };
  };
};

exports.contains = function (node1) {
  return function (node2) {
    return function () {
      return node1.contains(node2);
    };
  };
};

exports._lookupPrefix = function (prefix) {
  return function (node) {
    return function () {
      return node.lookupPrefix(prefix);
    };
  };
};

exports._lookupNamespaceURI = function (ns) {
  return function (node) {
    return function () {
      return node.lookupNamespaceURI(ns);
    };
  };
};

exports.isDefaultNamespace = function (ns) {
  return function (node) {
    return function () {
      return node.isDefaultNamespace(ns);
    };
  };
};

exports.insertBefore = function (node1) {
  return function (node2) {
    return function (parent) {
      return function () {
        return parent.insertBefore(node1, node2);
      };
    };
  };
};

exports.appendChild = function (node) {
  return function (parent) {
    return function () {
      return parent.appendChild(node);
    };
  };
};

exports.replaceChild = function (newChild) {
  return function (oldChild) {
    return function (parent) {
      return function () {
        return parent.replaceChild(newChild, oldChild);
      };
    };
  };
};

exports.removeChild = function (node) {
  return function (parent) {
    return function () {
      return parent.removeChild(node);
    };
  };
};
},{}],"output/Web.DOM.NodeType/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var ElementNode = function () {
  function ElementNode() {}

  ;
  ElementNode.value = new ElementNode();
  return ElementNode;
}();

var AttributeNode = function () {
  function AttributeNode() {}

  ;
  AttributeNode.value = new AttributeNode();
  return AttributeNode;
}();

var TextNode = function () {
  function TextNode() {}

  ;
  TextNode.value = new TextNode();
  return TextNode;
}();

var CDATASectionNode = function () {
  function CDATASectionNode() {}

  ;
  CDATASectionNode.value = new CDATASectionNode();
  return CDATASectionNode;
}();

var EntityReferenceNode = function () {
  function EntityReferenceNode() {}

  ;
  EntityReferenceNode.value = new EntityReferenceNode();
  return EntityReferenceNode;
}();

var EntityNode = function () {
  function EntityNode() {}

  ;
  EntityNode.value = new EntityNode();
  return EntityNode;
}();

var ProcessingInstructionNode = function () {
  function ProcessingInstructionNode() {}

  ;
  ProcessingInstructionNode.value = new ProcessingInstructionNode();
  return ProcessingInstructionNode;
}();

var CommentNode = function () {
  function CommentNode() {}

  ;
  CommentNode.value = new CommentNode();
  return CommentNode;
}();

var DocumentNode = function () {
  function DocumentNode() {}

  ;
  DocumentNode.value = new DocumentNode();
  return DocumentNode;
}();

var DocumentTypeNode = function () {
  function DocumentTypeNode() {}

  ;
  DocumentTypeNode.value = new DocumentTypeNode();
  return DocumentTypeNode;
}();

var DocumentFragmentNode = function () {
  function DocumentFragmentNode() {}

  ;
  DocumentFragmentNode.value = new DocumentFragmentNode();
  return DocumentFragmentNode;
}();

var NotationNode = function () {
  function NotationNode() {}

  ;
  NotationNode.value = new NotationNode();
  return NotationNode;
}();

var toEnumNodeType = function toEnumNodeType(v) {
  if (v === 1) {
    return new Data_Maybe.Just(ElementNode.value);
  }

  ;

  if (v === 2) {
    return new Data_Maybe.Just(AttributeNode.value);
  }

  ;

  if (v === 3) {
    return new Data_Maybe.Just(TextNode.value);
  }

  ;

  if (v === 4) {
    return new Data_Maybe.Just(CDATASectionNode.value);
  }

  ;

  if (v === 5) {
    return new Data_Maybe.Just(EntityReferenceNode.value);
  }

  ;

  if (v === 6) {
    return new Data_Maybe.Just(EntityNode.value);
  }

  ;

  if (v === 7) {
    return new Data_Maybe.Just(ProcessingInstructionNode.value);
  }

  ;

  if (v === 8) {
    return new Data_Maybe.Just(CommentNode.value);
  }

  ;

  if (v === 9) {
    return new Data_Maybe.Just(DocumentNode.value);
  }

  ;

  if (v === 10) {
    return new Data_Maybe.Just(DocumentTypeNode.value);
  }

  ;

  if (v === 11) {
    return new Data_Maybe.Just(DocumentFragmentNode.value);
  }

  ;

  if (v === 12) {
    return new Data_Maybe.Just(NotationNode.value);
  }

  ;
  return Data_Maybe.Nothing.value;
};

var showNodeType = new Data_Show.Show(function (v) {
  if (v instanceof ElementNode) {
    return "ElementNode";
  }

  ;

  if (v instanceof AttributeNode) {
    return "AttributeNode";
  }

  ;

  if (v instanceof TextNode) {
    return "TextNode";
  }

  ;

  if (v instanceof CDATASectionNode) {
    return "CDATASectionNode";
  }

  ;

  if (v instanceof EntityReferenceNode) {
    return "EntityReferenceNode";
  }

  ;

  if (v instanceof EntityNode) {
    return "EntityNode";
  }

  ;

  if (v instanceof ProcessingInstructionNode) {
    return "ProcessingInstructionNode";
  }

  ;

  if (v instanceof CommentNode) {
    return "CommentNode";
  }

  ;

  if (v instanceof DocumentNode) {
    return "DocumentNode";
  }

  ;

  if (v instanceof DocumentTypeNode) {
    return "DocumentTypeNode";
  }

  ;

  if (v instanceof DocumentFragmentNode) {
    return "DocumentFragmentNode";
  }

  ;

  if (v instanceof NotationNode) {
    return "NotationNode";
  }

  ;
  throw new Error("Failed pattern match at Web.DOM.NodeType (line 39, column 1 - line 51, column 37): " + [v.constructor.name]);
});

var fromEnumNodeType = function fromEnumNodeType(v) {
  if (v instanceof ElementNode) {
    return 1;
  }

  ;

  if (v instanceof AttributeNode) {
    return 2;
  }

  ;

  if (v instanceof TextNode) {
    return 3;
  }

  ;

  if (v instanceof CDATASectionNode) {
    return 4;
  }

  ;

  if (v instanceof EntityReferenceNode) {
    return 5;
  }

  ;

  if (v instanceof EntityNode) {
    return 6;
  }

  ;

  if (v instanceof ProcessingInstructionNode) {
    return 7;
  }

  ;

  if (v instanceof CommentNode) {
    return 8;
  }

  ;

  if (v instanceof DocumentNode) {
    return 9;
  }

  ;

  if (v instanceof DocumentTypeNode) {
    return 10;
  }

  ;

  if (v instanceof DocumentFragmentNode) {
    return 11;
  }

  ;

  if (v instanceof NotationNode) {
    return 12;
  }

  ;
  throw new Error("Failed pattern match at Web.DOM.NodeType (line 68, column 1 - line 68, column 36): " + [v.constructor.name]);
};

var eqNodeType = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof ElementNode && y instanceof ElementNode) {
      return true;
    }

    ;

    if (x instanceof AttributeNode && y instanceof AttributeNode) {
      return true;
    }

    ;

    if (x instanceof TextNode && y instanceof TextNode) {
      return true;
    }

    ;

    if (x instanceof CDATASectionNode && y instanceof CDATASectionNode) {
      return true;
    }

    ;

    if (x instanceof EntityReferenceNode && y instanceof EntityReferenceNode) {
      return true;
    }

    ;

    if (x instanceof EntityNode && y instanceof EntityNode) {
      return true;
    }

    ;

    if (x instanceof ProcessingInstructionNode && y instanceof ProcessingInstructionNode) {
      return true;
    }

    ;

    if (x instanceof CommentNode && y instanceof CommentNode) {
      return true;
    }

    ;

    if (x instanceof DocumentNode && y instanceof DocumentNode) {
      return true;
    }

    ;

    if (x instanceof DocumentTypeNode && y instanceof DocumentTypeNode) {
      return true;
    }

    ;

    if (x instanceof DocumentFragmentNode && y instanceof DocumentFragmentNode) {
      return true;
    }

    ;

    if (x instanceof NotationNode && y instanceof NotationNode) {
      return true;
    }

    ;
    return false;
  };
});
var ordNodeType = new Data_Ord.Ord(function () {
  return eqNodeType;
}, function (x) {
  return function (y) {
    return Data_Ord.compare(Data_Ord.ordInt)(fromEnumNodeType(x))(fromEnumNodeType(y));
  };
});
var enumNodeType = new Data_Enum.Enum(function () {
  return ordNodeType;
}, Data_Enum.defaultPred(toEnumNodeType)(fromEnumNodeType), Data_Enum.defaultSucc(toEnumNodeType)(fromEnumNodeType));
var boundedNodeType = new Data_Bounded.Bounded(function () {
  return ordNodeType;
}, ElementNode.value, NotationNode.value);
var boundedEnumNodeType = new Data_Enum.BoundedEnum(function () {
  return boundedNodeType;
}, function () {
  return enumNodeType;
}, 12, fromEnumNodeType, toEnumNodeType);
module.exports = {
  ElementNode: ElementNode,
  AttributeNode: AttributeNode,
  TextNode: TextNode,
  CDATASectionNode: CDATASectionNode,
  EntityReferenceNode: EntityReferenceNode,
  EntityNode: EntityNode,
  ProcessingInstructionNode: ProcessingInstructionNode,
  CommentNode: CommentNode,
  DocumentNode: DocumentNode,
  DocumentTypeNode: DocumentTypeNode,
  DocumentFragmentNode: DocumentFragmentNode,
  NotationNode: NotationNode,
  eqNodeType: eqNodeType,
  ordNodeType: ordNodeType,
  boundedNodeType: boundedNodeType,
  enumNodeType: enumNodeType,
  boundedEnumNodeType: boundedEnumNodeType,
  showNodeType: showNodeType
};
},{"../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Web.DOM.Node/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Effect = require("../Effect/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_DOM_NodeType = require("../Web.DOM.NodeType/index.js");

var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");

var toEventTarget = Unsafe_Coerce.unsafeCoerce;

var previousSibling = function () {
  var $1 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($2) {
    return $1($foreign["_previousSibling"]($2));
  };
}();

var parentNode = function () {
  var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($4) {
    return $3($foreign["_parentNode"]($4));
  };
}();

var parentElement = function () {
  var $5 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($6) {
    return $5($foreign["_parentElement"]($6));
  };
}();

var ownerDocument = function () {
  var $7 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($8) {
    return $7($foreign["_ownerDocument"]($8));
  };
}();

var nodeValue = function () {
  var $9 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($10) {
    return $9($foreign["_nodeValue"]($10));
  };
}();

var nodeType = function nodeType(dictPartial) {
  var $11 = Data_Maybe.fromJust();
  var $12 = Data_Enum.toEnum(Web_DOM_NodeType.boundedEnumNodeType);
  return function ($13) {
    return $11($12($foreign.nodeTypeIndex($13)));
  };
};

var nextSibling = function () {
  var $14 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($15) {
    return $14($foreign["_nextSibling"]($15));
  };
}();

var lookupPrefix = function lookupPrefix(p) {
  var $16 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  var $17 = $foreign["_lookupPrefix"](p);
  return function ($18) {
    return $16($17($18));
  };
};

var lookupNamespaceURI = function lookupNamespaceURI(ns) {
  var $19 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  var $20 = $foreign["_lookupNamespaceURI"](ns);
  return function ($21) {
    return $19($20($21));
  };
};

var lastChild = function () {
  var $22 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($23) {
    return $22($foreign["_lastChild"]($23));
  };
}();

var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Node");

var firstChild = function () {
  var $24 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($25) {
    return $24($foreign["_firstChild"]($25));
  };
}();

module.exports = {
  fromEventTarget: fromEventTarget,
  toEventTarget: toEventTarget,
  nodeType: nodeType,
  ownerDocument: ownerDocument,
  parentNode: parentNode,
  parentElement: parentElement,
  firstChild: firstChild,
  lastChild: lastChild,
  previousSibling: previousSibling,
  nextSibling: nextSibling,
  nodeValue: nodeValue,
  lookupPrefix: lookupPrefix,
  lookupNamespaceURI: lookupNamespaceURI,
  nodeTypeIndex: $foreign.nodeTypeIndex,
  nodeName: $foreign.nodeName,
  baseURI: $foreign.baseURI,
  hasChildNodes: $foreign.hasChildNodes,
  childNodes: $foreign.childNodes,
  setNodeValue: $foreign.setNodeValue,
  textContent: $foreign.textContent,
  setTextContent: $foreign.setTextContent,
  normalize: $foreign.normalize,
  clone: $foreign.clone,
  deepClone: $foreign.deepClone,
  isEqualNode: $foreign.isEqualNode,
  compareDocumentPositionBits: $foreign.compareDocumentPositionBits,
  contains: $foreign.contains,
  isDefaultNamespace: $foreign.isDefaultNamespace,
  insertBefore: $foreign.insertBefore,
  appendChild: $foreign.appendChild,
  replaceChild: $foreign.replaceChild,
  removeChild: $foreign.removeChild
};
},{"./foreign.js":"output/Web.DOM.Node/foreign.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Effect/index.js":"output/Effect/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js","../Web.DOM.NodeType/index.js":"output/Web.DOM.NodeType/index.js","../Web.Internal.FFI/index.js":"output/Web.Internal.FFI/index.js"}],"output/Halogen.VDom.Driver/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var Halogen_Aff_Driver = require("../Halogen.Aff.Driver/index.js");

var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");

var Halogen_Component = require("../Halogen.Component/index.js");

var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");

var Halogen_VDom_DOM = require("../Halogen.VDom.DOM/index.js");

var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");

var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");

var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");

var Unsafe_Reference = require("../Unsafe.Reference/index.js");

var Web_DOM_Node = require("../Web.DOM.Node/index.js");

var Web_HTML = require("../Web.HTML/index.js");

var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");

var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");

var Web_HTML_Window = require("../Web.HTML.Window/index.js");

var RenderState = function RenderState(x) {
  return x;
};

var substInParent = function substInParent(v) {
  return function (v1) {
    return function (v2) {
      if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
        return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.insertBefore(v)(v1.value0)(v2.value0));
      }

      ;

      if (v1 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Just) {
        return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(v)(v2.value0));
      }

      ;
      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
    };
  };
};

var removeChild = function removeChild(v) {
  return function __do() {
    var npn = Web_DOM_Node.parentNode(v.node)();
    return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (pn) {
      return Web_DOM_Node.removeChild(v.node)(pn);
    })(npn)();
  };
};

var mkSpec = function mkSpec(handler) {
  return function (renderChildRef) {
    return function (document) {
      var getNode = Halogen_Aff_Driver_State.unRenderStateX(function (v) {
        return v.node;
      });

      var done = function done(st) {
        if (st instanceof Data_Maybe.Just) {
          return Halogen_VDom_Machine.halt(st.value0);
        }

        ;
        return Data_Unit.unit;
      };

      var buildWidget = function buildWidget(spec) {
        var buildThunk = Halogen_VDom_Thunk.buildThunk(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeHTML))(spec);

        var renderComponentSlot = function renderComponentSlot(cs) {
          var renderChild = Effect_Ref.read(renderChildRef)();
          var rsx = renderChild(cs)();
          var node = getNode(rsx);
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, Data_Maybe.Nothing.value, patch, done));
        };

        var render = function render(slot) {
          if (slot instanceof Halogen_Component.ComponentSlot) {
            return renderComponentSlot(slot.value0);
          }

          ;

          if (slot instanceof Halogen_Component.ThunkSlot) {
            var step = buildThunk(slot.value0);
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step), new Data_Maybe.Just(step), patch, done));
          }

          ;
          throw new Error("Failed pattern match at Halogen.VDom.Driver (line 85, column 7 - line 90, column 75): " + [slot.constructor.name]);
        };

        var patch = function patch(st, slot) {
          if (st instanceof Data_Maybe.Just) {
            if (slot instanceof Halogen_Component.ComponentSlot) {
              Halogen_VDom_Machine.halt(st.value0);
              return renderComponentSlot(slot.value0);
            }

            ;

            if (slot instanceof Halogen_Component.ThunkSlot) {
              var step$prime = Halogen_VDom_Machine.step(st.value0, slot.value0);
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step$prime), new Data_Maybe.Just(step$prime), patch, done));
            }

            ;
            throw new Error("Failed pattern match at Halogen.VDom.Driver (line 98, column 22 - line 104, column 79): " + [slot.constructor.name]);
          }

          ;
          return render(slot);
        };

        return render;
      };

      var buildAttributes = Halogen_VDom_DOM_Prop.buildProp(handler);
      return {
        buildWidget: buildWidget,
        buildAttributes: buildAttributes,
        document: document
      };
    };
  };
};

var renderSpec = function renderSpec(document) {
  return function (container) {
    var render = function render(handler) {
      return function (child) {
        return function (v) {
          return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
              return function __do() {
                var renderChildRef = Effect_Ref["new"](child)();
                var spec = mkSpec(handler)(renderChildRef)(document);
                var machine = Halogen_VDom_DOM.buildVDom(spec)(v);
                var node = Halogen_VDom_Machine.extract(machine);
                Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(node)(Web_HTML_HTMLElement.toNode(container)))();
                return {
                  machine: machine,
                  node: node,
                  renderChildRef: renderChildRef
                };
              };
            }

            ;

            if (v1 instanceof Data_Maybe.Just) {
              return function __do() {
                Effect_Ref.write(child)(v1.value0.renderChildRef)();
                var parent = Web_DOM_Node.parentNode(v1.value0.node)();
                var nextSib = Web_DOM_Node.nextSibling(v1.value0.node)();
                var machine$prime = Halogen_VDom_Machine.step(v1.value0.machine, v);
                var newNode = Halogen_VDom_Machine.extract(machine$prime);
                Control_Applicative.when(Effect.applicativeEffect)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Unsafe_Reference.unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(nextSib)(parent))();
                return {
                  machine: machine$prime,
                  node: newNode,
                  renderChildRef: v1.value0.renderChildRef
                };
              };
            }

            ;
            throw new Error("Failed pattern match at Halogen.VDom.Driver (line 159, column 5 - line 175, column 80): " + [v1.constructor.name]);
          };
        };
      };
    };

    return {
      render: render,
      renderChild: Control_Category.identity(Control_Category.categoryFn),
      removeChild: removeChild,
      dispose: removeChild
    };
  };
};

var runUI = function runUI(component) {
  return function (i) {
    return function (element) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toDocument)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))))(function (document) {
        return Halogen_Aff_Driver.runUI(renderSpec(document)(element))(component)(i);
      });
    };
  };
};

module.exports = {
  runUI: runUI
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect/index.js":"output/Effect/index.js","../Effect.Aff/index.js":"output/Effect.Aff/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js","../Effect.Ref/index.js":"output/Effect.Ref/index.js","../Halogen.Aff.Driver/index.js":"output/Halogen.Aff.Driver/index.js","../Halogen.Aff.Driver.State/index.js":"output/Halogen.Aff.Driver.State/index.js","../Halogen.Component/index.js":"output/Halogen.Component/index.js","../Halogen.HTML.Core/index.js":"output/Halogen.HTML.Core/index.js","../Halogen.VDom.DOM/index.js":"output/Halogen.VDom.DOM/index.js","../Halogen.VDom.DOM.Prop/index.js":"output/Halogen.VDom.DOM.Prop/index.js","../Halogen.VDom.Machine/index.js":"output/Halogen.VDom.Machine/index.js","../Halogen.VDom.Thunk/index.js":"output/Halogen.VDom.Thunk/index.js","../Unsafe.Reference/index.js":"output/Unsafe.Reference/index.js","../Web.DOM.Node/index.js":"output/Web.DOM.Node/index.js","../Web.HTML/index.js":"output/Web.HTML/index.js","../Web.HTML.HTMLDocument/index.js":"output/Web.HTML.HTMLDocument/index.js","../Web.HTML.HTMLElement/index.js":"output/Web.HTML.HTMLElement/index.js","../Web.HTML.Window/index.js":"output/Web.HTML.Window/index.js"}],"output/Data.Generic.Rep/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Maybe = require("../Data.Maybe/index.js");

var Inl = function () {
  function Inl(value0) {
    this.value0 = value0;
  }

  ;

  Inl.create = function (value0) {
    return new Inl(value0);
  };

  return Inl;
}();

var Inr = function () {
  function Inr(value0) {
    this.value0 = value0;
  }

  ;

  Inr.create = function (value0) {
    return new Inr(value0);
  };

  return Inr;
}();

var Product = function () {
  function Product(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Product.create = function (value0) {
    return function (value1) {
      return new Product(value0, value1);
    };
  };

  return Product;
}();

var NoArguments = function () {
  function NoArguments() {}

  ;
  NoArguments.value = new NoArguments();
  return NoArguments;
}();

var Constructor = function Constructor(x) {
  return x;
};

var Argument = function Argument(x) {
  return x;
};

var Generic = function Generic(from, to) {
  this.from = from;
  this.to = to;
};

var to = function to(dict) {
  return dict.to;
};

var genericMaybe = new Generic(function (v) {
  if (v instanceof Data_Maybe.Nothing) {
    return new Inl(NoArguments.value);
  }

  ;

  if (v instanceof Data_Maybe.Just) {
    return new Inr(v.value0);
  }

  ;
  throw new Error("Failed pattern match at Data.Generic.Rep (line 40, column 1 - line 47, column 49): " + [v.constructor.name]);
}, function (v) {
  if (v instanceof Inl) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Inr) {
    return new Data_Maybe.Just(v.value0);
  }

  ;
  throw new Error("Failed pattern match at Data.Generic.Rep (line 40, column 1 - line 47, column 49): " + [v.constructor.name]);
});

var from = function from(dict) {
  return dict.from;
};

module.exports = {
  Generic: Generic,
  to: to,
  from: from,
  NoArguments: NoArguments,
  Inl: Inl,
  Inr: Inr,
  Product: Product,
  Constructor: Constructor,
  Argument: Argument,
  genericMaybe: genericMaybe
};
},{"../Data.Maybe/index.js":"output/Data.Maybe/index.js"}],"output/Data.Generic.Rep.Show/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var GenericShowArgs = function GenericShowArgs(genericShowArgs) {
  this.genericShowArgs = genericShowArgs;
};

var GenericShow = function GenericShow(genericShow$prime) {
  this["genericShow'"] = genericShow$prime;
};

var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
  return [];
});

var genericShowArgsArgument = function genericShowArgsArgument(dictShow) {
  return new GenericShowArgs(function (v) {
    return [Data_Show.show(dictShow)(v)];
  });
};

var genericShowArgs = function genericShowArgs(dict) {
  return dict.genericShowArgs;
};

var genericShowArgsProduct = function genericShowArgsProduct(dictGenericShowArgs) {
  return function (dictGenericShowArgs1) {
    return new GenericShowArgs(function (v) {
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(genericShowArgs(dictGenericShowArgs)(v.value0))(genericShowArgs(dictGenericShowArgs1)(v.value1));
    });
  };
};

var genericShowConstructor = function genericShowConstructor(dictGenericShowArgs) {
  return function (dictIsSymbol) {
    return new GenericShow(function (v) {
      var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
      var v1 = genericShowArgs(dictGenericShowArgs)(v);

      if (v1.length === 0) {
        return ctor;
      }

      ;
      return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ctor])(v1)) + ")");
    });
  };
};

var genericShow$prime = function genericShow$prime(dict) {
  return dict["genericShow'"];
};

var genericShowNoConstructors = new GenericShow(function (a) {
  return genericShow$prime(genericShowNoConstructors)(a);
});

var genericShowSum = function genericShowSum(dictGenericShow) {
  return function (dictGenericShow1) {
    return new GenericShow(function (v) {
      if (v instanceof Data_Generic_Rep.Inl) {
        return genericShow$prime(dictGenericShow)(v.value0);
      }

      ;

      if (v instanceof Data_Generic_Rep.Inr) {
        return genericShow$prime(dictGenericShow1)(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Generic.Rep.Show (line 26, column 1 - line 28, column 40): " + [v.constructor.name]);
    });
  };
};

var genericShow = function genericShow(dictGeneric) {
  return function (dictGenericShow) {
    return function (x) {
      return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
    };
  };
};

module.exports = {
  GenericShow: GenericShow,
  "genericShow'": genericShow$prime,
  genericShow: genericShow,
  GenericShowArgs: GenericShowArgs,
  genericShowArgs: genericShowArgs,
  genericShowNoConstructors: genericShowNoConstructors,
  genericShowArgsNoArguments: genericShowArgsNoArguments,
  genericShowSum: genericShowSum,
  genericShowArgsProduct: genericShowArgsProduct,
  genericShowConstructor: genericShowConstructor,
  genericShowArgsArgument: genericShowArgsArgument
};
},{"../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Generic.Rep/index.js":"output/Data.Generic.Rep/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js"}],"output/Data.HashMap/foreign.js":[function(require,module,exports) {
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
"use strict";
/** @constructor */

function MapNode(datamap, nodemap, content) {
  this.datamap = datamap;
  this.nodemap = nodemap;
  this.content = content;
}

MapNode.prototype.lookup = function lookup(Nothing, Just, keyEquals, key, keyHash, shift) {
  var bit = mask(keyHash, shift);

  if ((this.datamap & bit) !== 0) {
    var i = index(this.datamap, bit);
    if (keyEquals(key)(this.content[i * 2])) return new Just(this.content[i * 2 + 1]);
    return Nothing;
  }

  if ((this.nodemap & bit) !== 0) {
    return this.content[this.content.length - 1 - index(this.nodemap, bit)].lookup(Nothing, Just, keyEquals, key, keyHash, shift + 5);
  }

  return Nothing;
};

function remove2insert1Mut(a, removeIndex, insertIndex, v1) {
  for (var i = removeIndex; i < insertIndex; i++) {
    a[i] = a[i + 2];
  }

  a[i++] = v1;

  for (; i < a.length - 1; i++) {
    a[i] = a[i + 1];
  }

  a.length = a.length - 1;
}

MapNode.prototype.insertMut = function insertMut(keyEquals, hashFunction, key, keyHash, value, shift) {
  var bit = mask(keyHash, shift);
  var i = index(this.datamap, bit);

  if ((this.datamap & bit) !== 0) {
    var k = this.content[i * 2];

    if (keyEquals(k)(key)) {
      this.content[i * 2 + 1] = value;
    } else {
      var newNode = binaryNode(k, hashFunction(k), this.content[i * 2 + 1], key, keyHash, value, shift + 5);
      this.datamap = this.datamap ^ bit;
      this.nodemap = this.nodemap | bit;
      remove2insert1Mut(this.content, i * 2, this.content.length - index(this.nodemap, bit) - 2, newNode);
    }
  } else if ((this.nodemap & bit) !== 0) {
    var n = this.content.length - 1 - index(this.nodemap, bit);
    this.content[n].insertMut(keyEquals, hashFunction, key, keyHash, value, shift + 5);
  } else {
    this.datamap = this.datamap | bit;
    this.content.splice(i * 2, 0, key, value);
  }
};

MapNode.prototype.insert = function insert(keyEquals, hashFunction, key, keyHash, value, shift) {
  var bit = mask(keyHash, shift);
  var i = index(this.datamap, bit);

  if ((this.datamap & bit) !== 0) {
    var k = this.content[i * 2];
    if (keyEquals(k)(key)) return new MapNode(this.datamap, this.nodemap, overwriteTwoElements(this.content, i * 2, key, value));
    var newNode = binaryNode(k, hashFunction(k), this.content[i * 2 + 1], key, keyHash, value, shift + 5);
    return new MapNode(this.datamap ^ bit, this.nodemap | bit, remove2insert1(this.content, i * 2, this.content.length - index(this.nodemap, bit) - 2, newNode));
  }

  if ((this.nodemap & bit) !== 0) {
    var n = this.content.length - 1 - index(this.nodemap, bit);
    return new MapNode(this.datamap, this.nodemap, copyAndOverwriteOrExtend1(this.content, n, this.content[n].insert(keyEquals, hashFunction, key, keyHash, value, shift + 5)));
  }

  return new MapNode(this.datamap | bit, this.nodemap, insert2(this.content, i * 2, key, value));
};

MapNode.prototype.insertWith = function insertWith(keyEquals, hashFunction, f, key, keyHash, value, shift) {
  var bit = mask(keyHash, shift);
  var i = index(this.datamap, bit);

  if ((this.datamap & bit) !== 0) {
    var k = this.content[i * 2];
    if (keyEquals(k)(key)) return new MapNode(this.datamap, this.nodemap, overwriteTwoElements(this.content, i * 2, key, f(this.content[i * 2 + 1])(value)));
    var newNode = binaryNode(k, hashFunction(k), this.content[i * 2 + 1], key, keyHash, value, shift + 5);
    return new MapNode(this.datamap ^ bit, this.nodemap | bit, remove2insert1(this.content, i * 2, this.content.length - index(this.nodemap, bit) - 2, newNode));
  }

  if ((this.nodemap & bit) !== 0) {
    var n = this.content.length - 1 - index(this.nodemap, bit);
    return new MapNode(this.datamap, this.nodemap, copyAndOverwriteOrExtend1(this.content, n, this.content[n].insertWith(keyEquals, hashFunction, f, key, keyHash, value, shift + 5)));
  }

  return new MapNode(this.datamap | bit, this.nodemap, insert2(this.content, i * 2, key, value));
};

MapNode.prototype.delet = function delet(keyEquals, key, keyHash, shift) {
  var bit = mask(keyHash, shift);

  if ((this.datamap & bit) !== 0) {
    var dataIndex = index(this.datamap, bit);

    if (keyEquals(this.content[dataIndex * 2])(key)) {
      if (this.nodemap === 0 && this.content.length === 2) return empty;
      return new MapNode(this.datamap ^ bit, this.nodemap, remove2(this.content, dataIndex * 2));
    }

    return this;
  }

  if ((this.nodemap & bit) !== 0) {
    var nodeIndex = index(this.nodemap, bit);
    var recNode = this.content[this.content.length - 1 - nodeIndex];
    var recRes = recNode.delet(keyEquals, key, keyHash, shift + 5);
    if (recNode === recRes) return this;

    if (recRes.isSingleton()) {
      if (this.content.length === 1) {
        recRes.datamap = this.nodemap;
        return recRes;
      }

      return new MapNode(this.datamap | bit, this.nodemap ^ bit, insert2remove1(this.content, 2 * index(this.datamap, bit), recRes.content[0], recRes.content[1], this.content.length - 1 - nodeIndex));
    }

    return new MapNode(this.datamap, this.nodemap, copyAndOverwriteOrExtend1(this.content, this.content.length - 1 - nodeIndex, recRes));
  }

  return this;
};

MapNode.prototype.toArrayBy = function (f, res) {
  for (var i = 0; i < popCount(this.datamap) * 2;) {
    var k = this.content[i++];
    var v = this.content[i++];
    res.push(f(k)(v));
  }

  for (; i < this.content.length; i++) {
    this.content[i].toArrayBy(f, res);
  }
};

MapNode.prototype.isSingleton = function () {
  return this.nodemap === 0 && this.content.length === 2;
};

MapNode.prototype.eq = function (kf, vf, that) {
  if (this === that) return true;
  if (this.constructor !== that.constructor || this.nodemap !== that.nodemap || this.datamap !== that.datamap) return false;

  for (var i = 0; i < popCount(this.datamap) * 2;) {
    if (kf(this.content[i])(that.content[i])) i++;else return false;
    if (vf(this.content[i])(that.content[i])) i++;else return false;
  }

  for (; i < this.content.length; i++) {
    if (!this.content[i].eq(kf, vf, that.content[i])) return false;
  }

  return true;
};

MapNode.prototype.hash = function (vhash) {
  var h = this.datamap;

  for (var i = 0; i < popCount(this.datamap); i++) {
    h = h * 31 + vhash(this.content[i * 2 + 1]) | 0;
  }

  for (var j = 0; j < popCount(this.nodemap); j++) {
    h = h * 31 + this.content[this.content.length - j - 1].hash(vhash) | 0;
  }

  return h;
};

MapNode.prototype.size = function () {
  var res = popCount(this.datamap);

  for (var i = res * 2; i < this.content.length; i++) {
    res += this.content[i].size();
  }

  return res;
};

MapNode.prototype.imap = function (f) {
  var newContent = this.content.slice();

  for (var i = 0; i < popCount(this.datamap) * 2;) {
    var k = this.content[i++];
    var v = this.content[i++];
    newContent[i - 2] = k;
    newContent[i - 1] = f(k)(v);
  }

  for (; i < this.content.length; i++) {
    newContent[i] = this.content[i].imap(f);
  }

  return new MapNode(this.datamap, this.nodemap, newContent);
};

MapNode.prototype.ifoldMap = function (m, mappend, f) {
  for (var i = 0; i < popCount(this.datamap) * 2;) {
    var k = this.content[i++];
    var v = this.content[i++];
    m = mappend(m)(f(k)(v));
  }

  for (; i < this.content.length; i++) {
    m = this.content[i].ifoldMap(m, mappend, f);
  }

  return m;
};

function lowestBit(n) {
  return n & -n;
}

function mergeState(bit, thisnode, thisdata, thatnode, thatdata) {
  /* Returns one of these constants:
      const NONE_NONE = 0;
     const NODE_NONE = 1;
     const DATA_NONE = 2;
     const NONE_NODE = 4;
     const NONE_DATA = 8;
     const DATA_NODE = DATA_NONE | NONE_NODE;
     const NODE_DATA = NODE_NONE | NONE_DATA;
     const DATA_DATA = DATA_NONE | NONE_DATA;
     const NODE_NODE = NODE_NONE | NONE_NODE;
      I would love to declare them in the file, but purs compile
     complains about `const` and purs bundle removes variables.
  */
  var state = 0;
  state |= (bit & thisnode) !== 0 ? 1 : 0;
  state |= (bit & thisdata) !== 0 ? 2 : 0;
  state |= (bit & thatnode) !== 0 ? 4 : 0;
  state |= (bit & thatdata) !== 0 ? 8 : 0;
  return state;
}

MapNode.prototype.unionWith = function (eq, hash, f, that, shift) {
  if (this.constructor !== that.constructor) throw "Trying to union a MapNode with something else"; // I'd rather declare these locally in the branches, but purs
  // compile complains about `const`.

  var thisDataIndex, thatDataIndex, thisNodeIndex, thatNodeIndex;
  var datamap = 0;
  var nodemap = 0;
  var data = [];
  var nodes = []; // Conceptually, we go through all of the 32 bits in the result
  // and then handle the (in/notin + left/right + data/node)
  // combinations. With this clever trick, we get to skip the 0 bits.

  var skipmap = this.datamap | this.nodemap | that.datamap | that.nodemap;

  while (skipmap !== 0) {
    var bit = lowestBit(skipmap);
    skipmap &= ~bit;

    switch (mergeState(bit, this.nodemap, this.datamap, that.nodemap, that.datamap)) {
      case 1
      /* NODE_NONE */
      :
        thisNodeIndex = index(this.nodemap, bit);
        nodemap |= bit;
        nodes.push(this.content[this.content.length - thisNodeIndex - 1]);
        break;

      case 2
      /* DATA_NONE */
      :
        thisDataIndex = index(this.datamap, bit);
        datamap |= bit;
        data.push(this.content[thisDataIndex * 2], this.content[thisDataIndex * 2 + 1]);
        break;

      case 4
      /* NONE_NODE */
      :
        thatNodeIndex = index(that.nodemap, bit);
        nodemap |= bit;
        nodes.push(that.content[that.content.length - thatNodeIndex - 1]);
        break;

      case 5
      /* NODE_NODE */
      :
        thisNodeIndex = index(this.nodemap, bit);
        thatNodeIndex = index(that.nodemap, bit);
        nodemap |= bit;
        nodes.push(this.content[this.content.length - thisNodeIndex - 1].unionWith(eq, hash, f, that.content[that.content.length - thatNodeIndex - 1], shift + 5));
        break;

      case 6
      /* DATA_NODE */
      :
        thisDataIndex = index(this.datamap, bit);
        thatNodeIndex = index(that.nodemap, bit);
        var k = this.content[thisDataIndex * 2];
        var v = this.content[thisDataIndex * 2 + 1];
        var hk = hash(k);

        var flippedF = function flippedF(a) {
          return function (b) {
            return f(b)(a);
          };
        };

        nodemap |= bit;
        nodes.push(that.content[that.content.length - thatNodeIndex - 1].insertWith(eq, hash, flippedF, k, hk, v, shift + 5));
        break;

      case 8
      /* NONE_DATA */
      :
        thatDataIndex = index(that.datamap, bit);
        datamap |= bit;
        data.push(that.content[thatDataIndex * 2], that.content[thatDataIndex * 2 + 1]);
        break;

      case 9
      /* NODE_DATA */
      :
        thatDataIndex = index(that.datamap, bit);
        thisNodeIndex = index(this.nodemap, bit);
        var k = that.content[thatDataIndex * 2];
        var v = that.content[thatDataIndex * 2 + 1];
        var hk = hash(k);
        nodemap |= bit;
        nodes.push(this.content[this.content.length - thisNodeIndex - 1].insertWith(eq, hash, f, k, hk, v, shift + 5));
        break;

      case 10
      /* DATA_DATA */
      :
        thisDataIndex = index(this.datamap, bit);
        thatDataIndex = index(that.datamap, bit);

        if (eq(this.content[thisDataIndex * 2])(that.content[thatDataIndex * 2])) {
          // equal, merge with f
          datamap |= bit;
          data.push(this.content[thisDataIndex * 2], f(this.content[thisDataIndex * 2 + 1])(that.content[thatDataIndex * 2 + 1]));
        } else {
          // key hashes equal at this level, merge into node
          nodemap |= bit;
          nodes.push(binaryNode(this.content[thisDataIndex * 2], hash(this.content[thisDataIndex * 2]), this.content[thisDataIndex * 2 + 1], that.content[thatDataIndex * 2], hash(that.content[thatDataIndex * 2]), that.content[thatDataIndex * 2 + 1], shift + 5));
        }

        break;
    }
  }

  return new MapNode(datamap, nodemap, data.concat(nodes.reverse()));
};

MapNode.prototype.intersectionWith = function (Nothing, Just, eq, hash, f, that, shift) {
  if (this.constructor !== that.constructor) throw "Trying to intersect a MapNode with something else"; // I'd rather declare these locally in the branches, but purs
  // compile complains about `const`.

  var thisDataIndex, thatDataIndex, thisNodeIndex, thatNodeIndex;
  var datamap = 0;
  var nodemap = 0;
  var data = [];
  var nodes = []; // Conceptually, we go through all of the 32 bits in the result
  // and then handle the (in/notin + left/right + data/node)
  // combinations. With this clever trick, we get to skip the 0 bits.

  var skipmap = (this.datamap | this.nodemap) & (that.datamap | that.nodemap);

  while (skipmap !== 0) {
    var bit = lowestBit(skipmap);
    skipmap &= ~bit;

    switch (mergeState(bit, this.nodemap, this.datamap, that.nodemap, that.datamap)) {
      case 5
      /* NODE_NODE */
      :
        thisNodeIndex = index(this.nodemap, bit);
        thatNodeIndex = index(that.nodemap, bit);
        var recRes = this.content[this.content.length - thisNodeIndex - 1].intersectionWith(Nothing, Just, eq, hash, f, that.content[that.content.length - thatNodeIndex - 1], shift + 5);
        if (isEmpty(recRes)) continue;

        if (recRes.isSingleton()) {
          datamap |= bit;
          data.push(recRes.content[0], recRes.content[1]);
        } else {
          nodemap |= bit;
          nodes.push(recRes);
        }

        break;

      case 6
      /* DATA_NODE */
      :
        thisDataIndex = index(this.datamap, bit);
        thatNodeIndex = index(that.nodemap, bit);
        var k = this.content[thisDataIndex * 2];
        var v = this.content[thisDataIndex * 2 + 1];
        var hk = hash(k);
        var res = that.content[that.content.length - thatNodeIndex - 1].lookup(Nothing, Just, eq, k, hk, shift + 5);

        if (res !== Nothing) {
          datamap |= bit;
          data.push(k, f(v)(res.value0));
        }

        break;

      case 9
      /* NODE_DATA */
      :
        thatDataIndex = index(that.datamap, bit);
        thisNodeIndex = index(this.nodemap, bit);
        var k = that.content[thatDataIndex * 2];
        var v = that.content[thatDataIndex * 2 + 1];
        var hk = hash(k);
        var res = this.content[this.content.length - thisNodeIndex - 1].lookup(Nothing, Just, eq, k, hk, shift + 5);

        if (res !== Nothing) {
          datamap |= bit;
          data.push(k, f(res.value0)(v));
        }

        break;

      case 10
      /* DATA_DATA */
      :
        thisDataIndex = index(this.datamap, bit);
        thatDataIndex = index(that.datamap, bit);

        if (eq(this.content[thisDataIndex * 2])(that.content[thatDataIndex * 2])) {
          datamap |= bit;
          data.push(this.content[thisDataIndex * 2], f(this.content[thisDataIndex * 2 + 1])(that.content[thatDataIndex * 2 + 1]));
        }

        break;
    }
  }

  return new MapNode(datamap, nodemap, data.concat(nodes.reverse()));
};

MapNode.prototype.filterWithKey = function filterWithKey(f) {
  var datamap = 0;
  var nodemap = 0;
  var data = [];
  var nodes = [];
  var skipmap = this.datamap | this.nodemap;

  while (skipmap !== 0) {
    var bit = lowestBit(skipmap);
    skipmap &= ~bit;

    if ((this.datamap & bit) !== 0) {
      var dataIndex = index(this.datamap, bit);
      var k = this.content[dataIndex * 2];
      var v = this.content[dataIndex * 2 + 1];

      if (f(k)(v)) {
        datamap |= bit;
        data.push(k, v);
      }
    } else {
      // assert (this.nodemap & bit) !== 0
      var nodeIndex = index(this.nodemap, bit);
      var node = this.content[this.content.length - nodeIndex - 1].filterWithKey(f);
      if (isEmpty(node)) continue;

      if (node.isSingleton()) {
        datamap |= bit;
        data.push(node.content[0], node.content[1]);
      } else {
        nodemap |= bit;
        nodes.push(node);
      }
    }
  }

  return new MapNode(datamap, nodemap, data.concat(nodes.reverse()));
}; // This builds an n-ary curried function that takes all values and all
// subnodes as arguments and places them in a copy of the hashmap
// preserving the keys, datamap, and nodemap. Basically, a (Hashmap k
// v) with s key-value pairs and t nodes turns into a function:
//
// k_0 -> .. -> k_s -> HashMap_0 k v -> .. -> HashMap_t k v -> HashMap k v
//
// Indices here are to be understood as count.
//
// The main use for this is the as the partial hashmap constructor in
// place of the hole in this concept of an implementation of
// traverseWithKey:
//
// pure ?here <*> f k1 v1 <*> f k2 v2 <*> traverseWithKey f n1 <*> traverseWithKey f n2


MapNode.prototype.travHelper = function () {
  // TODO could have two helpers that basically switch mode from
  // setting values to setting nodes. That way branches would be
  // more predictable. Because the value branch is essentially
  // unpredictable.
  function go(vi, vm, ni, nm, copy) {
    if (vi < vm) return function (v) {
      return go(vi + 1, vm, ni, nm, function () {
        var res = copy();
        res.content[vi * 2 + 1] = v;
        return res;
      });
    };
    if (ni < nm) return function (n) {
      return go(vi, vm, ni + 1, nm, function () {
        var res = copy(); // order of parameters must match stored order

        res.content[vm * 2 + ni] = n;
        return res;
      });
    };
    return copy();
  }

  var vm = popCount(this.datamap);
  var self = this;
  return go(0, vm, 0, this.content.length - vm * 2, function () {
    return new MapNode(self.datamap, self.nodemap, self.content.slice());
  });
};

MapNode.prototype.ifoldMap = function (m, mappend, f) {
  for (var i = 0; i < popCount(this.datamap) * 2;) {
    var k = this.content[i++];
    var v = this.content[i++];
    m = mappend(m)(f(k)(v));
  }

  for (; i < this.content.length; i++) {
    m = this.content[i].ifoldMap(m, mappend, f);
  }

  return m;
};

MapNode.prototype.itraverse = function (pure, apply, f) {
  var m = pure(this.travHelper());

  for (var i = 0; i < popCount(this.datamap) * 2;) {
    var k = this.content[i++];
    var v = this.content[i++];
    m = apply(m)(f(k)(v));
  }

  for (; i < this.content.length; i++) {
    m = apply(m)(this.content[i].itraverse(pure, apply, f));
  }

  return m;
};
/** @constructor */


function Collision(keys, values) {
  this.keys = keys;
  this.values = values;
}

Collision.prototype.lookup = function collisionLookup(Nothing, Just, keyEquals, key, keyHash, shift) {
  for (var i = 0; i < this.keys.length; i++) {
    if (keyEquals(key)(this.keys[i])) return new Just(this.values[i]);
  }

  return Nothing;
};

Collision.prototype.insert = function collisionInsert(keyEquals, hashFunction, key, keyHash, value, shift) {
  var i = 0;

  for (; i < this.keys.length; i++) {
    if (keyEquals(key)(this.keys[i])) break;
  }

  return new Collision(copyAndOverwriteOrExtend1(this.keys, i, key), copyAndOverwriteOrExtend1(this.values, i, value));
};

Collision.prototype.insertMut = function collisionInsertMut(keyEquals, hashFunction, key, keyHash, value, shift) {
  var i = 0;

  for (; i < this.keys.length; i++) {
    if (keyEquals(key)(this.keys[i])) break;
  } // i may be *after* the last element, if the key is not already in the map


  this.keys[i] = key;
  this.values[i] = value;
};

Collision.prototype.insertWith = function collisionInsert(keyEquals, hashFunction, f, key, keyHash, value, shift) {
  var i = 0;

  for (; i < this.keys.length; i++) {
    if (keyEquals(key)(this.keys[i])) return new Collision(copyAndOverwriteOrExtend1(this.keys, i, key), copyAndOverwriteOrExtend1(this.values, i, f(this.values[i])(value)));
  }

  return new Collision(copyAndOverwriteOrExtend1(this.keys, i, key), copyAndOverwriteOrExtend1(this.values, i, value));
};

Collision.prototype.delet = function collisionDelete(keyEquals, key, keyHash, shift) {
  var i = 0;

  for (; i < this.keys.length; i++) {
    if (keyEquals(key)(this.keys[i])) break;
  }

  if (i === this.keys.length) return this;
  if (this.keys.length === 2) return new MapNode(1 << (keyHash & 31), 0, [this.keys[1 - i], this.values[1 - i]]);
  return new Collision(remove1(this.keys, i), remove1(this.values, i));
};

Collision.prototype.toArrayBy = function (f, res) {
  for (var i = 0; i < this.keys.length; i++) {
    res.push(f(this.keys[i])(this.values[i]));
  }
};

Collision.prototype.isSingleton = function () {
  return false;
};

Collision.prototype.eq = function (kf, vf, that) {
  if (this.constructor !== that.constructor || this.keys.length !== that.keys.length) return false;

  outer: for (var i = 0; i < this.keys.length; i++) {
    for (var j = 0; j < that.keys.length; j++) {
      if (kf(this.keys[i])(that.keys[j])) {
        if (vf(this.values[i])(that.values[j])) continue outer;else return false;
      }
    }
  }

  return true;
};

Collision.prototype.hash = function (vhash) {
  // We ignore keys because they have all the same hash anyways
  // (we're in a collision node!)
  var h = 0; // We use just + here, not multiply&add, because order in
  // collision nodes is undefined. A commutative combining operation
  // allows us to simply ignore the order.

  for (var i = 0; i < this.values.length; i++) {
    h += vhash(this.values[i]);
  }

  return h;
};

Collision.prototype.size = function () {
  return this.keys.length;
};

Collision.prototype.imap = function (f) {
  var newValues = this.values.slice();

  for (var i = 0; i < this.values.length; i++) {
    newValues[i] = f(this.keys[i])(this.values[i]);
  }

  return new Collision(this.keys, newValues);
};

Collision.prototype.ifoldMap = function (m, mappend, f) {
  for (var i = 0; i < this.keys.length; i++) {
    m = mappend(m)(f(this.keys[i])(this.values[i]));
  }

  return m;
};

Collision.prototype.travHelper = function () {
  function go(i, m, copy) {
    if (i < m) return function (v) {
      return go(i + 1, m, function () {
        var res = copy();
        res.values[i] = v;
        return res;
      });
    };
    return copy();
  }

  var self = this;
  return go(0, this.keys.length, function () {
    return new Collision(self.keys, self.values.slice());
  });
};

Collision.prototype.itraverse = function (pure, apply, f) {
  var m = pure(this.travHelper());

  for (var i = 0; i < this.keys.length; i++) {
    m = apply(m)(f(this.keys[i])(this.values[i]));
  }

  return m;
};

Collision.prototype.unionWith = function (eq, hash, f, that, shift) {
  if (that.constructor !== Collision) throw "Trying to union a Collision with something else";
  var keys = [];
  var values = [];
  var added = Array(that.keys.length).fill(false);

  outer: for (var i = 0; i < this.keys.length; i++) {
    for (var j = 0; j < that.keys.length; j++) {
      if (eq(this.keys[i])(that.keys[j])) {
        keys.push(this.keys[i]);
        values.push(f(this.values[i])(that.values[j]));
        added[j] = true;
        continue outer;
      }
    }

    keys.push(this.keys[i]);
    values.push(this.values[i]);
    added[j] = true;
  }

  for (var k = 0; k < that.keys.length; k++) {
    if (!added[k]) {
      keys.push(that.keys[k]);
      values.push(that.values[k]);
    }
  }

  return new Collision(keys, values);
};

Collision.prototype.intersectionWith = function (Nothing, Just, eq, hash, f, that, shift) {
  if (that.constructor !== Collision) throw "Trying to intersect a Collision with something else";
  var keys = [];
  var values = [];

  outer: for (var i = 0; i < this.keys.length; i++) {
    for (var j = 0; j < that.keys.length; j++) {
      if (eq(this.keys[i])(that.keys[j])) {
        keys.push(this.keys[i]);
        values.push(f(this.values[i])(that.values[j]));
        continue outer;
      }
    }
  }

  if (keys.length === 0) return empty; // This is a bit dodgy. We return a fake MapNode (wrong datamap
  // (WHICH CANNOT BE 0, OTHERWISE isEmpty THINKS IT'S EMPTY!) and
  // nodemap), but it's okay, because we will immediately
  // deconstruct it in the MapNode.intersectionWith.

  if (keys.length === 1) return new MapNode(1, 0, [keys[0], values[0]]);
  return new Collision(keys, values);
};

Collision.prototype.filterWithKey = function collisionFilterWithKey(f) {
  var keys = [];
  var values = [];

  for (var i = 0; i < this.keys.length; i++) {
    var k = this.keys[i];
    var v = this.values[i];

    if (f(k)(v)) {
      keys.push(k);
      values.push(v);
    }
  }

  if (keys.length === 0) return empty; // This is a bit dodgy. We return a fake MapNode (wrong datamap
  // (WHICH CANNOT BE 0, OTHERWISE isEmpty THINKS IT'S EMPTY!) and
  // nodemap), but it's okay, because we will immediately
  // deconstruct it in MapNode's filterWithKey.

  if (keys.length === 1) return new MapNode(1, 0, [keys[0], values[0]]);
  return new Collision(keys, values);
};

function mask(keyHash, shift) {
  return 1 << (keyHash >>> shift & 31);
}

function index(map, bit) {
  return popCount(map & bit - 1);
}

function popCount(n) {
  n = n - (n >> 1 & 0x55555555);
  n = (n & 0x33333333) + (n >> 2 & 0x33333333);
  return (n + (n >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;
}

function binaryNode(k1, kh1, v1, k2, kh2, v2, s) {
  if (s >= 32) return new Collision([k1, k2], [v1, v2]);
  var b1 = kh1 >>> s & 31;
  var b2 = kh2 >>> s & 31;
  if (b1 !== b2) return new MapNode(1 << b1 | 1 << b2, 0, b1 >>> 0 < b2 >>> 0 ? [k1, v1, k2, v2] : [k2, v2, k1, v1]);
  return new MapNode(0, 1 << b1, [binaryNode(k1, kh1, v1, k2, kh2, v2, s + 5)]);
}

function overwriteTwoElements(a, index, v1, v2) {
  var res = a.slice();
  res[index] = v1;
  res[index + 1] = v2;
  return res;
} // TODO benchmark some alternative implementations (manual copy, slice
// left + copy?, slice both + concat?, ...)


function remove2(a, index) {
  var res = a.slice();
  res.splice(index, 2);
  return res;
} // I think this is always called with a node index? Therefore, the
// left will often be larger than the right. Does that help?


function remove1(a, index) {
  var res = a.slice();
  res.splice(index, 1);
  return res;
} // Make a copy while overwriting the element at index, or adding one element if index == a.length


function copyAndOverwriteOrExtend1(a, index, v) {
  var res = a.slice();
  res[index] = v;
  return res;
}

function remove2insert1(a, removeIndex, insertIndex, v1) {
  var res = new Array(a.length - 1);

  for (var i = 0; i < removeIndex; i++) {
    res[i] = a[i];
  }

  for (; i < insertIndex; i++) {
    res[i] = a[i + 2];
  }

  res[i++] = v1;

  for (; i < res.length; i++) {
    res[i] = a[i + 1];
  }

  return res;
}

function insert2(a, index, v1, v2) {
  var res = new Array(a.length + 2);

  for (var i = 0; i < index; i++) {
    res[i] = a[i];
  }

  res[i++] = v1;
  res[i++] = v2;

  for (; i < res.length; i++) {
    res[i] = a[i - 2];
  }

  return res;
}

function insert2remove1(a, insertIndex, v1, v2, removeIndex) {
  var res = new Array(a.length + 1);

  for (var i = 0; i < insertIndex; i++) {
    res[i] = a[i];
  }

  res[i++] = v1;
  res[i++] = v2;

  for (; i < removeIndex + 2; i++) {
    res[i] = a[i - 2];
  }

  for (; i < res.length; i++) {
    res[i] = a[i - 1];
  }

  return res;
}

var empty = new MapNode(0, 0, []);
exports.empty = empty;

exports.lookupPurs = function (Nothing, Just, keyEquals, key, keyHash) {
  return function (m) {
    return m.lookup(Nothing, Just, keyEquals, key, keyHash, 0);
  };
};

exports.fromArrayPurs = function (keyEquals, hashFunction) {
  return function (kf) {
    return function (vf) {
      return function (a) {
        var m = new MapNode(0, 0, []);

        for (var i = 0; i < a.length; i++) {
          var x = a[i];
          var k = kf(x);
          m.insertMut(keyEquals, hashFunction, k, hashFunction(k), vf(x), 0);
        }

        return m;
      };
    };
  };
};

exports.insertPurs = function (keyEquals, hashFunction) {
  return function (key) {
    return function (value) {
      return function (m) {
        return m.insert(keyEquals, hashFunction, key, hashFunction(key), value, 0);
      };
    };
  };
};

exports.insertWithPurs = function (keyEquals, hashFunction) {
  return function (f) {
    return function (key) {
      return function (value) {
        return function (m) {
          return m.insertWith(keyEquals, hashFunction, f, key, hashFunction(key), value, 0);
        };
      };
    };
  };
};

exports.deletePurs = function (keyEquals, key, keyHash) {
  return function (m) {
    return m.delet(keyEquals, key, keyHash, 0);
  };
};

exports.unionWithPurs = function (eq, hash, f) {
  return function (l) {
    return function (r) {
      return l.unionWith(eq, hash, f, r, 0);
    };
  };
};

exports.intersectionWithPurs = function (Nothing, Just, eq, hash, f) {
  return function (l) {
    return function (r) {
      return l.intersectionWith(Nothing, Just, eq, hash, f, r, 0);
    };
  };
};

exports.toArrayBy = function (f) {
  return function (m) {
    var res = [];
    m.toArrayBy(f, res);
    return res;
  };
};

exports.debugShow = function (m) {
  return JSON.stringify(m);
};

exports.singletonPurs = function (k) {
  return function (keyHash) {
    return function (v) {
      return new MapNode(1 << (keyHash & 31), 0, [k, v]);
    };
  };
};

exports.eqPurs = function (keq, veq) {
  return function (a) {
    return function (b) {
      return a.eq(keq, veq, b);
    };
  };
};

function isEmpty(m) {
  return m.datamap === 0 && m.nodemap === 0;
}

exports.isEmpty = isEmpty;

exports.size = function (m) {
  return m.size();
};

exports.mapWithIndexPurs = function (f) {
  return function (m) {
    return m.imap(f);
  };
};

exports.foldMapWithIndexPurs = function (mempty) {
  return function (mappend) {
    return function (f) {
      return function (m) {
        return m.ifoldMap(mempty, mappend, f);
      };
    };
  };
};

exports.traverseWithIndexPurs = function (pure) {
  return function (apply) {
    return function (f) {
      return function (m) {
        return isEmpty(m) ? pure(empty) : m.itraverse(pure, apply, f);
      };
    };
  };
};

exports.hashPurs = function (vhash) {
  return function (m) {
    return m.hash(vhash);
  };
};

exports.filterWithKey = function (f) {
  return function (m) {
    return m.filterWithKey(f);
  };
};

exports.nubHashPurs = function (Nothing, Just, eq, hash) {
  return function (a) {
    var m = new MapNode(0, 0, []);
    var r = [];

    for (var i = 0; i < a.length; i++) {
      var x = a[i];
      var hx = hash(x);
      if (m.lookup(Nothing, Just, eq, x, hx, 0) !== Nothing) continue;
      m.insertMut(eq, hash, x, hx, null, 0);
      r.push(x);
    }

    return r;
  };
};
},{}],"output/Data.Hashable/foreign.js":[function(require,module,exports) {
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
"use strict";

exports.hashNumber = function (o) {
  if (o !== o || o === Infinity) {
    return 0;
  }

  var h = o | 0;

  if (h !== o) {
    h ^= o * 0xffffffff;
  }

  while (o > 0xffffffff) {
    o /= 0xffffffff;
    h ^= o;
  }

  return h;
};

exports.hashString = function (s) {
  var h = 0;

  for (var i = 0; i < s.length; i++) {
    h = 31 * h + s.charCodeAt(i) | 0;
  }

  return h;
};
},{}],"output/Record.Unsafe.Union/foreign.js":[function(require,module,exports) {
"use strict";

exports.unsafeUnionFn = function (r1, r2) {
  var copy = {};

  for (var k1 in r2) {
    if ({}.hasOwnProperty.call(r2, k1)) {
      copy[k1] = r2[k1];
    }
  }

  for (var k2 in r1) {
    if ({}.hasOwnProperty.call(r1, k2)) {
      copy[k2] = r1[k2];
    }
  }

  return copy;
};
},{}],"output/Record.Unsafe.Union/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");

var unsafeUnion = Data_Function_Uncurried.runFn2($foreign.unsafeUnionFn);
module.exports = {
  unsafeUnion: unsafeUnion,
  unsafeUnionFn: $foreign.unsafeUnionFn
};
},{"./foreign.js":"output/Record.Unsafe.Union/foreign.js","../Data.Function.Uncurried/index.js":"output/Data.Function.Uncurried/index.js"}],"output/Record/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Record_Unsafe_Union = require("../Record.Unsafe.Union/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var EqualFields = function EqualFields(equalFields) {
  this.equalFields = equalFields;
};

var union = function union(dictUnion) {
  return function (l) {
    return function (r) {
      return Record_Unsafe_Union.unsafeUnionFn(l, r);
    };
  };
};

var set = function set(dictIsSymbol) {
  return function (dictCons) {
    return function (dictCons1) {
      return function (l) {
        return function (b) {
          return function (r) {
            return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
          };
        };
      };
    };
  };
};

var nub = function nub(dictNub) {
  return Unsafe_Coerce.unsafeCoerce;
};

var merge = function merge(dictUnion) {
  return function (dictNub) {
    return function (l) {
      return function (r) {
        return Record_Unsafe_Union.unsafeUnionFn(l, r);
      };
    };
  };
};

var insert = function insert(dictIsSymbol) {
  return function (dictLacks) {
    return function (dictCons) {
      return function (l) {
        return function (a) {
          return function (r) {
            return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
          };
        };
      };
    };
  };
};

var get = function get(dictIsSymbol) {
  return function (dictCons) {
    return function (l) {
      return function (r) {
        return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
      };
    };
  };
};

var modify = function modify(dictIsSymbol) {
  return function (dictCons) {
    return function (dictCons1) {
      return function (l) {
        return function (f) {
          return function (r) {
            return set(dictIsSymbol)()()(l)(f(get(dictIsSymbol)()(l)(r)))(r);
          };
        };
      };
    };
  };
};

var equalFieldsNil = new EqualFields(function (v) {
  return function (v1) {
    return function (v2) {
      return true;
    };
  };
});

var equalFields = function equalFields(dict) {
  return dict.equalFields;
};

var equalFieldsCons = function equalFieldsCons(dictIsSymbol) {
  return function (dictEq) {
    return function (dictCons) {
      return function (dictEqualFields) {
        return new EqualFields(function (v) {
          return function (a) {
            return function (b) {
              var get$prime = get(dictIsSymbol)()(Data_Symbol.SProxy.value);
              var equalRest = equalFields(dictEqualFields)(Type_Data_RowList.RLProxy.value);
              return Data_Eq.eq(dictEq)(get$prime(a))(get$prime(b)) && equalRest(a)(b);
            };
          };
        });
      };
    };
  };
};

var equal = function equal(dictRowToList) {
  return function (dictEqualFields) {
    return function (a) {
      return function (b) {
        return equalFields(dictEqualFields)(Type_Data_RowList.RLProxy.value)(a)(b);
      };
    };
  };
};

var disjointUnion = function disjointUnion(dictUnion) {
  return function (dictNub) {
    return function (l) {
      return function (r) {
        return Record_Unsafe_Union.unsafeUnionFn(l, r);
      };
    };
  };
};

var $$delete = function $$delete(dictIsSymbol) {
  return function (dictLacks) {
    return function (dictCons) {
      return function (l) {
        return function (r) {
          return Record_Unsafe.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
        };
      };
    };
  };
};

var rename = function rename(dictIsSymbol) {
  return function (dictIsSymbol1) {
    return function (dictCons) {
      return function (dictLacks) {
        return function (dictCons1) {
          return function (dictLacks1) {
            return function (prev) {
              return function (next) {
                return function (record) {
                  return insert(dictIsSymbol1)()()(next)(get(dictIsSymbol)()(prev)(record))($$delete(dictIsSymbol)()()(prev)(record));
                };
              };
            };
          };
        };
      };
    };
  };
};

module.exports = {
  get: get,
  set: set,
  modify: modify,
  insert: insert,
  "delete": $$delete,
  rename: rename,
  equal: equal,
  merge: merge,
  union: union,
  disjointUnion: disjointUnion,
  nub: nub,
  EqualFields: EqualFields,
  equalFields: equalFields,
  equalFieldsCons: equalFieldsCons,
  equalFieldsNil: equalFieldsNil
};
},{"../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Record.Unsafe.Union/index.js":"output/Record.Unsafe.Union/index.js","../Type.Data.RowList/index.js":"output/Type.Data.RowList/index.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Data.Hashable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Record = require("../Record/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var HashableRecord = function HashableRecord(EqRecord0, hashRecord) {
  this.EqRecord0 = EqRecord0;
  this.hashRecord = hashRecord;
};

var Hashable = function Hashable(Eq0, hash) {
  this.Eq0 = Eq0;
  this.hash = hash;
};

var hashableVoid = new Hashable(function () {
  return Data_Eq.eqVoid;
}, function (v) {
  return 0;
});
var hashableUnit = new Hashable(function () {
  return Data_Eq.eqUnit;
}, function (v) {
  return 1;
});
var hashableString = new Hashable(function () {
  return Data_Eq.eqString;
}, $foreign.hashString);
var hashableRecordNil = new HashableRecord(function () {
  return Data_Eq.eqRowNil;
}, function (v) {
  return function (v1) {
    return 0;
  };
});
var hashableNumber = new Hashable(function () {
  return Data_Eq.eqNumber;
}, $foreign.hashNumber);
var hashableInt = new Hashable(function () {
  return Data_Eq.eqInt;
}, function (n) {
  return n;
});
var hashableChar = new Hashable(function () {
  return Data_Eq.eqChar;
}, Data_Enum.fromEnum(Data_Enum.boundedEnumChar));
var hashableBoolean = new Hashable(function () {
  return Data_Eq.eqBoolean;
}, function (v) {
  if (!v) {
    return 0;
  }

  ;

  if (v) {
    return 1;
  }

  ;
  throw new Error("Failed pattern match at Data.Hashable (line 52, column 1 - line 54, column 16): " + [v.constructor.name]);
});

var hashRecord = function hashRecord(dict) {
  return dict.hashRecord;
};

var hashableRecord = function hashableRecord(dictRowToList) {
  return function (dictHashableRecord) {
    return function (dictEqRecord) {
      return new Hashable(function () {
        return Data_Eq.eqRec()(dictEqRecord);
      }, hashRecord(dictHashableRecord)(Type_Data_RowList.RLProxy.value));
    };
  };
};

var hash = function hash(dict) {
  return dict.hash;
};

var hashFoldable = function hashFoldable(dictFoldable) {
  return function (dictHashable) {
    return Data_Foldable.foldl(dictFoldable)(function (h) {
      return function (a) {
        return (31 * h | 0) + hash(dictHashable)(a) | 0;
      };
    })(1);
  };
};

var hashableArray = function hashableArray(dictHashable) {
  return new Hashable(function () {
    return Data_Eq.eqArray(dictHashable.Eq0());
  }, hashFoldable(Data_Foldable.foldableArray)(dictHashable));
};

var hashableList = function hashableList(dictHashable) {
  return new Hashable(function () {
    return Data_List_Types.eqList(dictHashable.Eq0());
  }, hashFoldable(Data_List_Types.foldableList)(dictHashable));
};

var hashableEither = function hashableEither(dictHashable) {
  return function (dictHashable1) {
    return new Hashable(function () {
      return Data_Either.eqEither(dictHashable.Eq0())(dictHashable1.Eq0());
    }, function (v) {
      if (v instanceof Data_Either.Left) {
        return hash(dictHashable)(v.value0) ^ 1431655765;
      }

      ;

      if (v instanceof Data_Either.Right) {
        return hash(dictHashable1)(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Hashable (line 88, column 1 - line 90, column 26): " + [v.constructor.name]);
    });
  };
};

var hashableMaybe = function hashableMaybe(dictHashable) {
  return new Hashable(function () {
    return Data_Maybe.eqMaybe(dictHashable.Eq0());
  }, function (v) {
    if (v instanceof Data_Maybe.Nothing) {
      return 0;
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return 1 + hash(dictHashable)(v.value0) | 0;
    }

    ;
    throw new Error("Failed pattern match at Data.Hashable (line 84, column 1 - line 86, column 29): " + [v.constructor.name]);
  });
};

var hashableRecordCons = function hashableRecordCons(dictHashable) {
  return function (dictHashableRecord) {
    return function (dictIsSymbol) {
      return function (dictCons) {
        return new HashableRecord(function () {
          return Data_Eq.eqRowCons(dictHashableRecord.EqRecord0())()(dictIsSymbol)(dictHashable.Eq0());
        }, function (rlp) {
          return function (record) {
            return (hash(dictHashable)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(record)) * 31 | 0) + hashRecord(dictHashableRecord)(Type_Data_RowList.RLProxy.value)(record) | 0;
          };
        });
      };
    };
  };
};

var hashableTuple = function hashableTuple(dictHashable) {
  return function (dictHashable1) {
    return new Hashable(function () {
      return Data_Tuple.eqTuple(dictHashable.Eq0())(dictHashable1.Eq0());
    }, function (v) {
      return (hash(dictHashable)(v.value0) * 31 | 0) + hash(dictHashable1)(v.value1) | 0;
    });
  };
};

module.exports = {
  Hashable: Hashable,
  hash: hash,
  HashableRecord: HashableRecord,
  hashRecord: hashRecord,
  hashableBoolean: hashableBoolean,
  hashableInt: hashableInt,
  hashableNumber: hashableNumber,
  hashableChar: hashableChar,
  hashableString: hashableString,
  hashableArray: hashableArray,
  hashableList: hashableList,
  hashableTuple: hashableTuple,
  hashableMaybe: hashableMaybe,
  hashableEither: hashableEither,
  hashableUnit: hashableUnit,
  hashableVoid: hashableVoid,
  hashableRecordNil: hashableRecordNil,
  hashableRecordCons: hashableRecordCons,
  hashableRecord: hashableRecord
};
},{"./foreign.js":"output/Data.Hashable/foreign.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Record/index.js":"output/Record/index.js","../Type.Data.RowList/index.js":"output/Type.Data.RowList/index.js"}],"output/Data.HashMap/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Hashable = require("../Data.Hashable/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var values = $foreign.toArrayBy(function (v) {
  return function (v1) {
    return v1;
  };
});

var unionWith = function unionWith(dictHashable) {
  return function (f) {
    return $foreign.unionWithPurs(Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable), f);
  };
};

var union = function union(dictHashable) {
  return $foreign.unionWithPurs(Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable), Data_Function["const"]);
};

var singleton = function singleton(dictHashable) {
  return function (k) {
    return $foreign.singletonPurs(k)(Data_Hashable.hash(dictHashable)(k));
  };
};

var showHashMap = function showHashMap(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (m) {
      return "(fromArray " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))($foreign.toArrayBy(Data_Tuple.Tuple.create)(m)) + ")");
    });
  };
};

var semigroupHashMap = function semigroupHashMap(dictHashable) {
  return new Data_Semigroup.Semigroup(union(dictHashable));
};

var nubHash = function nubHash(dictHashable) {
  return $foreign.nubHashPurs(Data_Maybe.Nothing.value, Data_Maybe.Just.create, Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable));
};

var monoidHashMap = function monoidHashMap(dictHashable) {
  return new Data_Monoid.Monoid(function () {
    return semigroupHashMap(dictHashable);
  }, $foreign.empty);
};

var lookup = function lookup(dictHashable) {
  return function (k) {
    return $foreign.lookupPurs(Data_Maybe.Nothing.value, Data_Maybe.Just.create, Data_Eq.eq(dictHashable.Eq0()), k, Data_Hashable.hash(dictHashable)(k));
  };
};

var member = function member(dictHashable) {
  return function (k) {
    var $48 = lookup(dictHashable)(k);
    return function ($49) {
      return Data_Maybe.isJust($48($49));
    };
  };
};

var keys = $foreign.toArrayBy(Data_Function["const"]);

var intersectionWith = function intersectionWith(dictHashable) {
  return function (f) {
    return $foreign.intersectionWithPurs(Data_Maybe.Nothing.value, Data_Maybe.Just.create, Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable), f);
  };
};

var intersection = function intersection(dictHashable) {
  return intersectionWith(dictHashable)(function (v) {
    return function (x) {
      return x;
    };
  });
};

var insertWith = function insertWith(dictHashable) {
  return $foreign.insertWithPurs(Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable));
};

var upsert = function upsert(dictHashable) {
  return function (f) {
    return insertWith(dictHashable)(function (v) {
      return function (v1) {
        return f(v1);
      };
    });
  };
};

var insert = function insert(dictHashable) {
  return $foreign.insertPurs(Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable));
};

var functorWithIndexHashMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorHashMap;
}, $foreign.mapWithIndexPurs);
var functorHashMap = new Data_Functor.Functor(function (f) {
  return Data_FunctorWithIndex.mapWithIndex(functorWithIndexHashMap)(Data_Function["const"](f));
});

var fromFoldableWithIndex = function fromFoldableWithIndex(dictFoldableWithIndex) {
  return function (dictHashable) {
    return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function (k) {
      return function (m) {
        return function (v) {
          return insert(dictHashable)(k)(v)(m);
        };
      };
    })($foreign.empty);
  };
};

var fromFoldableBy = function fromFoldableBy(dictFoldable) {
  return function (dictHashable) {
    return function (kf) {
      return function (vf) {
        return Data_Foldable.foldl(dictFoldable)(function (m) {
          return function (a) {
            return insert(dictHashable)(kf(a))(vf(a))(m);
          };
        })($foreign.empty);
      };
    };
  };
};

var fromFoldable = function fromFoldable(dictFoldable) {
  return function (dictHashable) {
    return Data_Foldable.foldl(dictFoldable)(function (m) {
      return function (v) {
        return insert(dictHashable)(v.value0)(v.value1)(m);
      };
    })($foreign.empty);
  };
};

var fromArrayBy = function fromArrayBy(dictHashable) {
  return $foreign.fromArrayPurs(Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable));
};

var fromArray = function fromArray(dictHashable) {
  return fromArrayBy(dictHashable)(Data_Tuple.fst)(Data_Tuple.snd);
};

var foldableWithIndexHashMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableHashMap;
}, function (dictMonoid) {
  return $foreign.foldMapWithIndexPurs(Data_Monoid.mempty(dictMonoid))(Data_Semigroup.append(dictMonoid.Semigroup0()));
}, function (f) {
  return Data_FoldableWithIndex.foldlWithIndexDefault(foldableWithIndexHashMap)(f);
}, function (f) {
  return Data_FoldableWithIndex.foldrWithIndexDefault(foldableWithIndexHashMap)(f);
});
var foldableHashMap = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return Data_FoldableWithIndex.foldMapWithIndex(foldableWithIndexHashMap)(dictMonoid)(Data_Function["const"](f));
  };
}, function (f) {
  return Data_Foldable.foldlDefault(foldableHashMap)(f);
}, function (f) {
  return Data_Foldable.foldrDefault(foldableHashMap)(f);
});
var traversableWithIndexHashMap = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexHashMap;
}, function () {
  return functorWithIndexHashMap;
}, function () {
  return traversableHashMap;
}, function (dictApplicative) {
  return function (f) {
    return function (m) {
      return $foreign.traverseWithIndexPurs(Control_Applicative.pure(dictApplicative))(Control_Apply.apply(dictApplicative.Apply0()))(f)(m);
    };
  };
});
var traversableHashMap = new Data_Traversable.Traversable(function () {
  return foldableHashMap;
}, function () {
  return functorHashMap;
}, function (dictApplicative) {
  return Data_Traversable.traverse(traversableHashMap)(dictApplicative)(function (x) {
    return x;
  });
}, function (dictApplicative) {
  return function (f) {
    return Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexHashMap)(dictApplicative)(Data_Function["const"](f));
  };
});

var filterKeys = function filterKeys(f) {
  return $foreign.filterWithKey(function (k) {
    return function (v) {
      return f(k);
    };
  });
};

var filter = function filter(f) {
  return $foreign.filterWithKey(Data_Function["const"](f));
};

var mapMaybeWithKey = function mapMaybeWithKey(f) {
  var $50 = Data_Functor.map(functorHashMap)(Data_Maybe.fromJust());
  var $51 = filter(Data_Maybe.isJust);
  var $52 = Data_FunctorWithIndex.mapWithIndex(functorWithIndexHashMap)(f);
  return function ($53) {
    return $50($51($52($53)));
  };
};

var mapMaybe = function mapMaybe($54) {
  return mapMaybeWithKey(Data_Function["const"]($54));
};

var eqHashMap = function eqHashMap(dictEq) {
  return function (dictEq1) {
    return new Data_Eq.Eq($foreign.eqPurs(Data_Eq.eq(dictEq), Data_Eq.eq(dictEq1)));
  };
};

var hashHashMap = function hashHashMap(dictHashable) {
  return function (dictHashable1) {
    return new Data_Hashable.Hashable(function () {
      return eqHashMap(dictHashable.Eq0())(dictHashable1.Eq0());
    }, $foreign.hashPurs(Data_Hashable.hash(dictHashable1)));
  };
};

var $$delete = function $$delete(dictHashable) {
  return function (k) {
    return $foreign.deletePurs(Data_Eq.eq(dictHashable.Eq0()), k, Data_Hashable.hash(dictHashable)(k));
  };
};

var difference = function difference(dictHashable) {
  return function (l) {
    return function (r) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictHashable))(l)(keys(r));
    };
  };
};

var alter = function alter(dictHashable) {
  return function (f) {
    return function (k) {
      return function (m) {
        var v = f(lookup(dictHashable)(k)(m));

        if (v instanceof Data_Maybe.Nothing) {
          return $$delete(dictHashable)(k)(m);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return insert(dictHashable)(k)(v.value0)(m);
        }

        ;
        throw new Error("Failed pattern match at Data.HashMap (line 265, column 15 - line 267, column 25): " + [v.constructor.name]);
      };
    };
  };
};

var update = function update(dictHashable) {
  return function (f) {
    return alter(dictHashable)(function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(f);
    });
  };
};

module.exports = {
  singleton: singleton,
  lookup: lookup,
  insert: insert,
  "delete": $$delete,
  member: member,
  upsert: upsert,
  insertWith: insertWith,
  update: update,
  alter: alter,
  filter: filter,
  filterKeys: filterKeys,
  mapMaybe: mapMaybe,
  mapMaybeWithKey: mapMaybeWithKey,
  fromArray: fromArray,
  fromFoldable: fromFoldable,
  fromArrayBy: fromArrayBy,
  fromFoldableBy: fromFoldableBy,
  fromFoldableWithIndex: fromFoldableWithIndex,
  keys: keys,
  values: values,
  union: union,
  unionWith: unionWith,
  intersection: intersection,
  intersectionWith: intersectionWith,
  difference: difference,
  nubHash: nubHash,
  eqHashMap: eqHashMap,
  hashHashMap: hashHashMap,
  monoidHashMap: monoidHashMap,
  semigroupHashMap: semigroupHashMap,
  functorHashMap: functorHashMap,
  functorWithIndexHashMap: functorWithIndexHashMap,
  foldableHashMap: foldableHashMap,
  foldableWithIndexHashMap: foldableWithIndexHashMap,
  traversableHashMap: traversableHashMap,
  traversableWithIndexHashMap: traversableWithIndexHashMap,
  showHashMap: showHashMap,
  empty: $foreign.empty,
  size: $foreign.size,
  isEmpty: $foreign.isEmpty,
  filterWithKey: $foreign.filterWithKey,
  toArrayBy: $foreign.toArrayBy,
  debugShow: $foreign.debugShow
};
},{"./foreign.js":"output/Data.HashMap/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"output/Data.FunctorWithIndex/index.js","../Data.Hashable/index.js":"output/Data.Hashable/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js"}],"output/Data.Char.Unicode/foreign.js":[function(require,module,exports) {
exports.withCharCode = function (f) {
  return function (c) {
    return String.fromCharCode(f(c.charCodeAt()));
  };
};
},{}],"output/Data.Char/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Enum = require("../Data.Enum/index.js");

var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
module.exports = {
  toCharCode: toCharCode,
  fromCharCode: fromCharCode
};
},{"../Data.Enum/index.js":"output/Data.Enum/index.js"}],"output/Data.Char.Unicode.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Array = require("../Data.Array/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var NUMCAT_LU = function () {
  function NUMCAT_LU() {}

  ;
  NUMCAT_LU.value = new NUMCAT_LU();
  return NUMCAT_LU;
}();

var NUMCAT_LL = function () {
  function NUMCAT_LL() {}

  ;
  NUMCAT_LL.value = new NUMCAT_LL();
  return NUMCAT_LL;
}();

var NUMCAT_LT = function () {
  function NUMCAT_LT() {}

  ;
  NUMCAT_LT.value = new NUMCAT_LT();
  return NUMCAT_LT;
}();

var NUMCAT_LM = function () {
  function NUMCAT_LM() {}

  ;
  NUMCAT_LM.value = new NUMCAT_LM();
  return NUMCAT_LM;
}();

var NUMCAT_LO = function () {
  function NUMCAT_LO() {}

  ;
  NUMCAT_LO.value = new NUMCAT_LO();
  return NUMCAT_LO;
}();

var NUMCAT_MN = function () {
  function NUMCAT_MN() {}

  ;
  NUMCAT_MN.value = new NUMCAT_MN();
  return NUMCAT_MN;
}();

var NUMCAT_MC = function () {
  function NUMCAT_MC() {}

  ;
  NUMCAT_MC.value = new NUMCAT_MC();
  return NUMCAT_MC;
}();

var NUMCAT_ME = function () {
  function NUMCAT_ME() {}

  ;
  NUMCAT_ME.value = new NUMCAT_ME();
  return NUMCAT_ME;
}();

var NUMCAT_ND = function () {
  function NUMCAT_ND() {}

  ;
  NUMCAT_ND.value = new NUMCAT_ND();
  return NUMCAT_ND;
}();

var NUMCAT_NL = function () {
  function NUMCAT_NL() {}

  ;
  NUMCAT_NL.value = new NUMCAT_NL();
  return NUMCAT_NL;
}();

var NUMCAT_NO = function () {
  function NUMCAT_NO() {}

  ;
  NUMCAT_NO.value = new NUMCAT_NO();
  return NUMCAT_NO;
}();

var NUMCAT_PC = function () {
  function NUMCAT_PC() {}

  ;
  NUMCAT_PC.value = new NUMCAT_PC();
  return NUMCAT_PC;
}();

var NUMCAT_PD = function () {
  function NUMCAT_PD() {}

  ;
  NUMCAT_PD.value = new NUMCAT_PD();
  return NUMCAT_PD;
}();

var NUMCAT_PS = function () {
  function NUMCAT_PS() {}

  ;
  NUMCAT_PS.value = new NUMCAT_PS();
  return NUMCAT_PS;
}();

var NUMCAT_PE = function () {
  function NUMCAT_PE() {}

  ;
  NUMCAT_PE.value = new NUMCAT_PE();
  return NUMCAT_PE;
}();

var NUMCAT_PI = function () {
  function NUMCAT_PI() {}

  ;
  NUMCAT_PI.value = new NUMCAT_PI();
  return NUMCAT_PI;
}();

var NUMCAT_PF = function () {
  function NUMCAT_PF() {}

  ;
  NUMCAT_PF.value = new NUMCAT_PF();
  return NUMCAT_PF;
}();

var NUMCAT_PO = function () {
  function NUMCAT_PO() {}

  ;
  NUMCAT_PO.value = new NUMCAT_PO();
  return NUMCAT_PO;
}();

var NUMCAT_SM = function () {
  function NUMCAT_SM() {}

  ;
  NUMCAT_SM.value = new NUMCAT_SM();
  return NUMCAT_SM;
}();

var NUMCAT_SC = function () {
  function NUMCAT_SC() {}

  ;
  NUMCAT_SC.value = new NUMCAT_SC();
  return NUMCAT_SC;
}();

var NUMCAT_SK = function () {
  function NUMCAT_SK() {}

  ;
  NUMCAT_SK.value = new NUMCAT_SK();
  return NUMCAT_SK;
}();

var NUMCAT_SO = function () {
  function NUMCAT_SO() {}

  ;
  NUMCAT_SO.value = new NUMCAT_SO();
  return NUMCAT_SO;
}();

var NUMCAT_ZS = function () {
  function NUMCAT_ZS() {}

  ;
  NUMCAT_ZS.value = new NUMCAT_ZS();
  return NUMCAT_ZS;
}();

var NUMCAT_ZL = function () {
  function NUMCAT_ZL() {}

  ;
  NUMCAT_ZL.value = new NUMCAT_ZL();
  return NUMCAT_ZL;
}();

var NUMCAT_ZP = function () {
  function NUMCAT_ZP() {}

  ;
  NUMCAT_ZP.value = new NUMCAT_ZP();
  return NUMCAT_ZP;
}();

var NUMCAT_CC = function () {
  function NUMCAT_CC() {}

  ;
  NUMCAT_CC.value = new NUMCAT_CC();
  return NUMCAT_CC;
}();

var NUMCAT_CF = function () {
  function NUMCAT_CF() {}

  ;
  NUMCAT_CF.value = new NUMCAT_CF();
  return NUMCAT_CF;
}();

var NUMCAT_CS = function () {
  function NUMCAT_CS() {}

  ;
  NUMCAT_CS.value = new NUMCAT_CS();
  return NUMCAT_CS;
}();

var NUMCAT_CO = function () {
  function NUMCAT_CO() {}

  ;
  NUMCAT_CO.value = new NUMCAT_CO();
  return NUMCAT_CO;
}();

var NUMCAT_CN = function () {
  function NUMCAT_CN() {}

  ;
  NUMCAT_CN.value = new NUMCAT_CN();
  return NUMCAT_CN;
}();

var ConversionRule = function ConversionRule(x) {
  return x;
};

var CharBlock = function CharBlock(x) {
  return x;
};

var showUnicodeCategory = new Data_Show.Show(function (v) {
  if (v instanceof NUMCAT_LU) {
    return "NUMCAT_LU";
  }

  ;

  if (v instanceof NUMCAT_LL) {
    return "NUMCAT_LL";
  }

  ;

  if (v instanceof NUMCAT_LT) {
    return "NUMCAT_LT";
  }

  ;

  if (v instanceof NUMCAT_LM) {
    return "NUMCAT_LM";
  }

  ;

  if (v instanceof NUMCAT_LO) {
    return "NUMCAT_LO";
  }

  ;

  if (v instanceof NUMCAT_MN) {
    return "NUMCAT_MN";
  }

  ;

  if (v instanceof NUMCAT_MC) {
    return "NUMCAT_MC";
  }

  ;

  if (v instanceof NUMCAT_ME) {
    return "NUMCAT_ME";
  }

  ;

  if (v instanceof NUMCAT_ND) {
    return "NUMCAT_ND";
  }

  ;

  if (v instanceof NUMCAT_NL) {
    return "NUMCAT_NL";
  }

  ;

  if (v instanceof NUMCAT_NO) {
    return "NUMCAT_NO";
  }

  ;

  if (v instanceof NUMCAT_PC) {
    return "NUMCAT_PC";
  }

  ;

  if (v instanceof NUMCAT_PD) {
    return "NUMCAT_PD";
  }

  ;

  if (v instanceof NUMCAT_PS) {
    return "NUMCAT_PS";
  }

  ;

  if (v instanceof NUMCAT_PE) {
    return "NUMCAT_PE";
  }

  ;

  if (v instanceof NUMCAT_PI) {
    return "NUMCAT_PI";
  }

  ;

  if (v instanceof NUMCAT_PF) {
    return "NUMCAT_PF";
  }

  ;

  if (v instanceof NUMCAT_PO) {
    return "NUMCAT_PO";
  }

  ;

  if (v instanceof NUMCAT_SM) {
    return "NUMCAT_SM";
  }

  ;

  if (v instanceof NUMCAT_SC) {
    return "NUMCAT_SC";
  }

  ;

  if (v instanceof NUMCAT_SK) {
    return "NUMCAT_SK";
  }

  ;

  if (v instanceof NUMCAT_SO) {
    return "NUMCAT_SO";
  }

  ;

  if (v instanceof NUMCAT_ZS) {
    return "NUMCAT_ZS";
  }

  ;

  if (v instanceof NUMCAT_ZL) {
    return "NUMCAT_ZL";
  }

  ;

  if (v instanceof NUMCAT_ZP) {
    return "NUMCAT_ZP";
  }

  ;

  if (v instanceof NUMCAT_CC) {
    return "NUMCAT_CC";
  }

  ;

  if (v instanceof NUMCAT_CF) {
    return "NUMCAT_CF";
  }

  ;

  if (v instanceof NUMCAT_CS) {
    return "NUMCAT_CS";
  }

  ;

  if (v instanceof NUMCAT_CO) {
    return "NUMCAT_CO";
  }

  ;

  if (v instanceof NUMCAT_CN) {
    return "NUMCAT_CN";
  }

  ;
  throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 49, column 1 - line 79, column 33): " + [v.constructor.name]);
});
var showConversionRule = new Data_Show.Show(function (v) {
  return "ConversionRule { category: " + (Data_Show.show(Data_Show.showInt)(v.category) + (", unicodeCat: " + (Data_Show.show(showUnicodeCategory)(v.unicodeCat) + (", possible: " + (Data_Show.show(Data_Show.showInt)(v.possible) + (", updist: " + (Data_Show.show(Data_Show.showInt)(v.updist) + (", lowdist: " + (Data_Show.show(Data_Show.showInt)(v.lowdist) + (", titledist: " + (Data_Show.show(Data_Show.showInt)(v.titledist) + " }")))))))))));
});
var showCharBlock = new Data_Show.Show(function (v) {
  return "CharBlock { start: " + (Data_Show.show(Data_Show.showInt)(v.start) + (", length: " + (Data_Show.show(Data_Show.showInt)(v.length) + (", convRule: " + (Data_Show.show(showConversionRule)(v.convRule) + " }")))));
});
var numSpaceBlocks = 8;
var numRules = 167;
var numLat1Blocks = 63;
var numConvBlocks = 1230;
var numBlocks = 2783;
var maxUniChar = 1114109;
var gencatZS = 2;
var rule1 = {
  category: gencatZS,
  unicodeCat: NUMCAT_ZS.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var spacechars = [{
  start: 32,
  length: 1,
  convRule: rule1
}, {
  start: 160,
  length: 1,
  convRule: rule1
}, {
  start: 5760,
  length: 1,
  convRule: rule1
}, {
  start: 6158,
  length: 1,
  convRule: rule1
}, {
  start: 8192,
  length: 11,
  convRule: rule1
}, {
  start: 8239,
  length: 1,
  convRule: rule1
}, {
  start: 8287,
  length: 1,
  convRule: rule1
}, {
  start: 12288,
  length: 1,
  convRule: rule1
}];
var gencatZP = 67108864;
var rule140 = {
  category: gencatZP,
  unicodeCat: NUMCAT_ZP.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatZL = 33554432;
var rule139 = {
  category: gencatZL,
  unicodeCat: NUMCAT_ZL.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatSO = 8192;
var rule13 = {
  category: gencatSO,
  unicodeCat: NUMCAT_SO.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var rule148 = {
  category: gencatSO,
  unicodeCat: NUMCAT_SO.value,
  possible: 1,
  updist: 0,
  lowdist: 26,
  titledist: 0
};
var rule149 = {
  category: gencatSO,
  unicodeCat: NUMCAT_SO.value,
  possible: 1,
  updist: -26 | 0,
  lowdist: 0,
  titledist: -26 | 0
};
var gencatSM = 64;
var rule6 = {
  category: gencatSM,
  unicodeCat: NUMCAT_SM.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatSK = 1024;
var rule10 = {
  category: gencatSK,
  unicodeCat: NUMCAT_SK.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatSC = 8;
var rule3 = {
  category: gencatSC,
  unicodeCat: NUMCAT_SC.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatPS = 16;
var rule4 = {
  category: gencatPS,
  unicodeCat: NUMCAT_PS.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatPO = 4;
var rule2 = {
  category: gencatPO,
  unicodeCat: NUMCAT_PO.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatPI = 16384;
var rule15 = {
  category: gencatPI,
  unicodeCat: NUMCAT_PI.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatPF = 131072;
var rule19 = {
  category: gencatPF,
  unicodeCat: NUMCAT_PF.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatPE = 32;
var rule5 = {
  category: gencatPE,
  unicodeCat: NUMCAT_PE.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatPD = 128;
var rule7 = {
  category: gencatPD,
  unicodeCat: NUMCAT_PD.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatPC = 2048;
var rule11 = {
  category: gencatPC,
  unicodeCat: NUMCAT_PC.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatNO = 65536;
var rule17 = {
  category: gencatNO,
  unicodeCat: NUMCAT_NO.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatNL = 16777216;
var rule116 = {
  category: gencatNL,
  unicodeCat: NUMCAT_NL.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var rule146 = {
  category: gencatNL,
  unicodeCat: NUMCAT_NL.value,
  possible: 1,
  updist: 0,
  lowdist: 16,
  titledist: 0
};
var rule147 = {
  category: gencatNL,
  unicodeCat: NUMCAT_NL.value,
  possible: 1,
  updist: -16 | 0,
  lowdist: 0,
  titledist: -16 | 0
};
var gencatND = 256;
var rule8 = {
  category: gencatND,
  unicodeCat: NUMCAT_ND.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatMN = 2097152;
var rule84 = {
  category: gencatMN,
  unicodeCat: NUMCAT_MN.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var rule85 = {
  category: gencatMN,
  unicodeCat: NUMCAT_MN.value,
  possible: 1,
  updist: 84,
  lowdist: 0,
  titledist: 84
};
var gencatME = 4194304;
var rule109 = {
  category: gencatME,
  unicodeCat: NUMCAT_ME.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatMC = 8388608;
var rule114 = {
  category: gencatMC,
  unicodeCat: NUMCAT_MC.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatLU = 512;
var nullrule = {
  category: gencatLU,
  unicodeCat: NUMCAT_CN.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var rule105 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -60 | 0,
  titledist: 0
};
var rule107 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -7 | 0,
  titledist: 0
};
var rule108 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 80,
  titledist: 0
};
var rule110 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 15,
  titledist: 0
};
var rule112 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 48,
  titledist: 0
};
var rule115 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 7264,
  titledist: 0
};
var rule120 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -7615 | 0,
  titledist: 0
};
var rule122 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -8 | 0,
  titledist: 0
};
var rule131 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -74 | 0,
  titledist: 0
};
var rule134 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -86 | 0,
  titledist: 0
};
var rule135 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -100 | 0,
  titledist: 0
};
var rule136 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -112 | 0,
  titledist: 0
};
var rule137 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -128 | 0,
  titledist: 0
};
var rule138 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -126 | 0,
  titledist: 0
};
var rule141 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -7517 | 0,
  titledist: 0
};
var rule142 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -8383 | 0,
  titledist: 0
};
var rule143 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -8262 | 0,
  titledist: 0
};
var rule144 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 28,
  titledist: 0
};
var rule150 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -10743 | 0,
  titledist: 0
};
var rule151 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -3814 | 0,
  titledist: 0
};
var rule152 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -10727 | 0,
  titledist: 0
};
var rule155 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -10780 | 0,
  titledist: 0
};
var rule156 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -10749 | 0,
  titledist: 0
};
var rule157 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -10783 | 0,
  titledist: 0
};
var rule158 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -10782 | 0,
  titledist: 0
};
var rule159 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -10815 | 0,
  titledist: 0
};
var rule161 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -35332 | 0,
  titledist: 0
};
var rule162 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -42280 | 0,
  titledist: 0
};
var rule165 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 40,
  titledist: 0
};
var rule21 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 1,
  titledist: 0
};
var rule23 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -199 | 0,
  titledist: 0
};
var rule25 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -121 | 0,
  titledist: 0
};
var rule28 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 210,
  titledist: 0
};
var rule29 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 206,
  titledist: 0
};
var rule30 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 205,
  titledist: 0
};
var rule31 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 79,
  titledist: 0
};
var rule32 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 202,
  titledist: 0
};
var rule33 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 203,
  titledist: 0
};
var rule34 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 207,
  titledist: 0
};
var rule36 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 211,
  titledist: 0
};
var rule37 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 209,
  titledist: 0
};
var rule39 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 213,
  titledist: 0
};
var rule41 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 214,
  titledist: 0
};
var rule42 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 218,
  titledist: 0
};
var rule43 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 217,
  titledist: 0
};
var rule44 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 219,
  titledist: 0
};
var rule47 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 2,
  titledist: 1
};
var rule51 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -97 | 0,
  titledist: 0
};
var rule52 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -56 | 0,
  titledist: 0
};
var rule53 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -130 | 0,
  titledist: 0
};
var rule54 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 10795,
  titledist: 0
};
var rule55 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -163 | 0,
  titledist: 0
};
var rule56 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 10792,
  titledist: 0
};
var rule58 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: -195 | 0,
  titledist: 0
};
var rule59 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 69,
  titledist: 0
};
var rule60 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 71,
  titledist: 0
};
var rule86 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 38,
  titledist: 0
};
var rule87 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 37,
  titledist: 0
};
var rule88 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 64,
  titledist: 0
};
var rule89 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 63,
  titledist: 0
};
var rule9 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 32,
  titledist: 0
};
var rule95 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 1,
  updist: 0,
  lowdist: 8,
  titledist: 0
};
var rule98 = {
  category: gencatLU,
  unicodeCat: NUMCAT_LU.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatLT = 524288;
var rule129 = {
  category: gencatLT,
  unicodeCat: NUMCAT_LT.value,
  possible: 1,
  updist: 0,
  lowdist: -8 | 0,
  titledist: 0
};
var rule132 = {
  category: gencatLT,
  unicodeCat: NUMCAT_LT.value,
  possible: 1,
  updist: 0,
  lowdist: -9 | 0,
  titledist: 0
};
var rule48 = {
  category: gencatLT,
  unicodeCat: NUMCAT_LT.value,
  possible: 1,
  updist: -1 | 0,
  lowdist: 1,
  titledist: 0
};
var gencatLO = 262144;
var rule45 = {
  category: gencatLO,
  unicodeCat: NUMCAT_LO.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatLM = 1048576;
var rule83 = {
  category: gencatLM,
  unicodeCat: NUMCAT_LM.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatLL = 4096;
var rule100 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -54 | 0,
  lowdist: 0,
  titledist: -54 | 0
};
var rule101 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -8 | 0,
  lowdist: 0,
  titledist: -8 | 0
};
var rule102 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -86 | 0,
  lowdist: 0,
  titledist: -86 | 0
};
var rule103 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -80 | 0,
  lowdist: 0,
  titledist: -80 | 0
};
var rule104 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 7,
  lowdist: 0,
  titledist: 7
};
var rule106 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -96 | 0,
  lowdist: 0,
  titledist: -96 | 0
};
var rule111 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -15 | 0,
  lowdist: 0,
  titledist: -15 | 0
};
var rule113 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -48 | 0,
  lowdist: 0,
  titledist: -48 | 0
};
var rule117 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 35332,
  lowdist: 0,
  titledist: 35332
};
var rule118 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 3814,
  lowdist: 0,
  titledist: 3814
};
var rule119 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -59 | 0,
  lowdist: 0,
  titledist: -59 | 0
};
var rule12 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -32 | 0,
  lowdist: 0,
  titledist: -32 | 0
};
var rule121 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 8,
  lowdist: 0,
  titledist: 8
};
var rule123 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 74,
  lowdist: 0,
  titledist: 74
};
var rule124 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 86,
  lowdist: 0,
  titledist: 86
};
var rule125 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 100,
  lowdist: 0,
  titledist: 100
};
var rule126 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 128,
  lowdist: 0,
  titledist: 128
};
var rule127 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 112,
  lowdist: 0,
  titledist: 112
};
var rule128 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 126,
  lowdist: 0,
  titledist: 126
};
var rule130 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 9,
  lowdist: 0,
  titledist: 9
};
var rule133 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -7205 | 0,
  lowdist: 0,
  titledist: -7205 | 0
};
var rule14 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var rule145 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -28 | 0,
  lowdist: 0,
  titledist: -28 | 0
};
var rule153 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -10795 | 0,
  lowdist: 0,
  titledist: -10795 | 0
};
var rule154 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -10792 | 0,
  lowdist: 0,
  titledist: -10792 | 0
};
var rule160 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -7264 | 0,
  lowdist: 0,
  titledist: -7264 | 0
};
var rule166 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -40 | 0,
  lowdist: 0,
  titledist: -40 | 0
};
var rule18 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 743,
  lowdist: 0,
  titledist: 743
};
var rule20 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 121,
  lowdist: 0,
  titledist: 121
};
var rule22 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -1 | 0,
  lowdist: 0,
  titledist: -1 | 0
};
var rule24 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -232 | 0,
  lowdist: 0,
  titledist: -232 | 0
};
var rule26 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -300 | 0,
  lowdist: 0,
  titledist: -300 | 0
};
var rule27 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 195,
  lowdist: 0,
  titledist: 195
};
var rule35 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 97,
  lowdist: 0,
  titledist: 97
};
var rule38 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 163,
  lowdist: 0,
  titledist: 163
};
var rule40 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 130,
  lowdist: 0,
  titledist: 130
};
var rule46 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 56,
  lowdist: 0,
  titledist: 56
};
var rule49 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -2 | 0,
  lowdist: 0,
  titledist: -1 | 0
};
var rule50 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -79 | 0,
  lowdist: 0,
  titledist: -79 | 0
};
var rule57 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 10815,
  lowdist: 0,
  titledist: 10815
};
var rule61 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 10783,
  lowdist: 0,
  titledist: 10783
};
var rule62 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 10780,
  lowdist: 0,
  titledist: 10780
};
var rule63 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 10782,
  lowdist: 0,
  titledist: 10782
};
var rule64 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -210 | 0,
  lowdist: 0,
  titledist: -210 | 0
};
var rule65 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -206 | 0,
  lowdist: 0,
  titledist: -206 | 0
};
var rule66 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -205 | 0,
  lowdist: 0,
  titledist: -205 | 0
};
var rule67 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -202 | 0,
  lowdist: 0,
  titledist: -202 | 0
};
var rule68 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -203 | 0,
  lowdist: 0,
  titledist: -203 | 0
};
var rule69 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -207 | 0,
  lowdist: 0,
  titledist: -207 | 0
};
var rule70 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 42280,
  lowdist: 0,
  titledist: 42280
};
var rule71 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -209 | 0,
  lowdist: 0,
  titledist: -209 | 0
};
var rule72 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -211 | 0,
  lowdist: 0,
  titledist: -211 | 0
};
var rule73 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 10743,
  lowdist: 0,
  titledist: 10743
};
var rule74 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 10749,
  lowdist: 0,
  titledist: 10749
};
var rule75 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -213 | 0,
  lowdist: 0,
  titledist: -213 | 0
};
var rule76 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -214 | 0,
  lowdist: 0,
  titledist: -214 | 0
};
var rule77 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: 10727,
  lowdist: 0,
  titledist: 10727
};
var rule78 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -218 | 0,
  lowdist: 0,
  titledist: -218 | 0
};
var rule79 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -69 | 0,
  lowdist: 0,
  titledist: -69 | 0
};
var rule80 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -217 | 0,
  lowdist: 0,
  titledist: -217 | 0
};
var rule81 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -71 | 0,
  lowdist: 0,
  titledist: -71 | 0
};
var rule82 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -219 | 0,
  lowdist: 0,
  titledist: -219 | 0
};
var rule90 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -38 | 0,
  lowdist: 0,
  titledist: -38 | 0
};
var rule91 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -37 | 0,
  lowdist: 0,
  titledist: -37 | 0
};
var rule92 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -31 | 0,
  lowdist: 0,
  titledist: -31 | 0
};
var rule93 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -64 | 0,
  lowdist: 0,
  titledist: -64 | 0
};
var rule94 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -63 | 0,
  lowdist: 0,
  titledist: -63 | 0
};
var rule96 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -62 | 0,
  lowdist: 0,
  titledist: -62 | 0
};
var rule97 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -57 | 0,
  lowdist: 0,
  titledist: -57 | 0
};
var rule99 = {
  category: gencatLL,
  unicodeCat: NUMCAT_LL.value,
  possible: 1,
  updist: -47 | 0,
  lowdist: 0,
  titledist: -47 | 0
};
var gencatCS = 134217728;
var rule163 = {
  category: gencatCS,
  unicodeCat: NUMCAT_CS.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatCO = 268435456;
var rule164 = {
  category: gencatCO,
  unicodeCat: NUMCAT_CO.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatCF = 32768;
var rule16 = {
  category: gencatCF,
  unicodeCat: NUMCAT_CF.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var gencatCC = 1;
var rule0 = {
  category: gencatCC,
  unicodeCat: NUMCAT_CC.value,
  possible: 0,
  updist: 0,
  lowdist: 0,
  titledist: 0
};
var convchars = [{
  start: 65,
  length: 26,
  convRule: rule9
}, {
  start: 97,
  length: 26,
  convRule: rule12
}, {
  start: 181,
  length: 1,
  convRule: rule18
}, {
  start: 192,
  length: 23,
  convRule: rule9
}, {
  start: 216,
  length: 7,
  convRule: rule9
}, {
  start: 224,
  length: 23,
  convRule: rule12
}, {
  start: 248,
  length: 7,
  convRule: rule12
}, {
  start: 255,
  length: 1,
  convRule: rule20
}, {
  start: 256,
  length: 1,
  convRule: rule21
}, {
  start: 257,
  length: 1,
  convRule: rule22
}, {
  start: 258,
  length: 1,
  convRule: rule21
}, {
  start: 259,
  length: 1,
  convRule: rule22
}, {
  start: 260,
  length: 1,
  convRule: rule21
}, {
  start: 261,
  length: 1,
  convRule: rule22
}, {
  start: 262,
  length: 1,
  convRule: rule21
}, {
  start: 263,
  length: 1,
  convRule: rule22
}, {
  start: 264,
  length: 1,
  convRule: rule21
}, {
  start: 265,
  length: 1,
  convRule: rule22
}, {
  start: 266,
  length: 1,
  convRule: rule21
}, {
  start: 267,
  length: 1,
  convRule: rule22
}, {
  start: 268,
  length: 1,
  convRule: rule21
}, {
  start: 269,
  length: 1,
  convRule: rule22
}, {
  start: 270,
  length: 1,
  convRule: rule21
}, {
  start: 271,
  length: 1,
  convRule: rule22
}, {
  start: 272,
  length: 1,
  convRule: rule21
}, {
  start: 273,
  length: 1,
  convRule: rule22
}, {
  start: 274,
  length: 1,
  convRule: rule21
}, {
  start: 275,
  length: 1,
  convRule: rule22
}, {
  start: 276,
  length: 1,
  convRule: rule21
}, {
  start: 277,
  length: 1,
  convRule: rule22
}, {
  start: 278,
  length: 1,
  convRule: rule21
}, {
  start: 279,
  length: 1,
  convRule: rule22
}, {
  start: 280,
  length: 1,
  convRule: rule21
}, {
  start: 281,
  length: 1,
  convRule: rule22
}, {
  start: 282,
  length: 1,
  convRule: rule21
}, {
  start: 283,
  length: 1,
  convRule: rule22
}, {
  start: 284,
  length: 1,
  convRule: rule21
}, {
  start: 285,
  length: 1,
  convRule: rule22
}, {
  start: 286,
  length: 1,
  convRule: rule21
}, {
  start: 287,
  length: 1,
  convRule: rule22
}, {
  start: 288,
  length: 1,
  convRule: rule21
}, {
  start: 289,
  length: 1,
  convRule: rule22
}, {
  start: 290,
  length: 1,
  convRule: rule21
}, {
  start: 291,
  length: 1,
  convRule: rule22
}, {
  start: 292,
  length: 1,
  convRule: rule21
}, {
  start: 293,
  length: 1,
  convRule: rule22
}, {
  start: 294,
  length: 1,
  convRule: rule21
}, {
  start: 295,
  length: 1,
  convRule: rule22
}, {
  start: 296,
  length: 1,
  convRule: rule21
}, {
  start: 297,
  length: 1,
  convRule: rule22
}, {
  start: 298,
  length: 1,
  convRule: rule21
}, {
  start: 299,
  length: 1,
  convRule: rule22
}, {
  start: 300,
  length: 1,
  convRule: rule21
}, {
  start: 301,
  length: 1,
  convRule: rule22
}, {
  start: 302,
  length: 1,
  convRule: rule21
}, {
  start: 303,
  length: 1,
  convRule: rule22
}, {
  start: 304,
  length: 1,
  convRule: rule23
}, {
  start: 305,
  length: 1,
  convRule: rule24
}, {
  start: 306,
  length: 1,
  convRule: rule21
}, {
  start: 307,
  length: 1,
  convRule: rule22
}, {
  start: 308,
  length: 1,
  convRule: rule21
}, {
  start: 309,
  length: 1,
  convRule: rule22
}, {
  start: 310,
  length: 1,
  convRule: rule21
}, {
  start: 311,
  length: 1,
  convRule: rule22
}, {
  start: 313,
  length: 1,
  convRule: rule21
}, {
  start: 314,
  length: 1,
  convRule: rule22
}, {
  start: 315,
  length: 1,
  convRule: rule21
}, {
  start: 316,
  length: 1,
  convRule: rule22
}, {
  start: 317,
  length: 1,
  convRule: rule21
}, {
  start: 318,
  length: 1,
  convRule: rule22
}, {
  start: 319,
  length: 1,
  convRule: rule21
}, {
  start: 320,
  length: 1,
  convRule: rule22
}, {
  start: 321,
  length: 1,
  convRule: rule21
}, {
  start: 322,
  length: 1,
  convRule: rule22
}, {
  start: 323,
  length: 1,
  convRule: rule21
}, {
  start: 324,
  length: 1,
  convRule: rule22
}, {
  start: 325,
  length: 1,
  convRule: rule21
}, {
  start: 326,
  length: 1,
  convRule: rule22
}, {
  start: 327,
  length: 1,
  convRule: rule21
}, {
  start: 328,
  length: 1,
  convRule: rule22
}, {
  start: 330,
  length: 1,
  convRule: rule21
}, {
  start: 331,
  length: 1,
  convRule: rule22
}, {
  start: 332,
  length: 1,
  convRule: rule21
}, {
  start: 333,
  length: 1,
  convRule: rule22
}, {
  start: 334,
  length: 1,
  convRule: rule21
}, {
  start: 335,
  length: 1,
  convRule: rule22
}, {
  start: 336,
  length: 1,
  convRule: rule21
}, {
  start: 337,
  length: 1,
  convRule: rule22
}, {
  start: 338,
  length: 1,
  convRule: rule21
}, {
  start: 339,
  length: 1,
  convRule: rule22
}, {
  start: 340,
  length: 1,
  convRule: rule21
}, {
  start: 341,
  length: 1,
  convRule: rule22
}, {
  start: 342,
  length: 1,
  convRule: rule21
}, {
  start: 343,
  length: 1,
  convRule: rule22
}, {
  start: 344,
  length: 1,
  convRule: rule21
}, {
  start: 345,
  length: 1,
  convRule: rule22
}, {
  start: 346,
  length: 1,
  convRule: rule21
}, {
  start: 347,
  length: 1,
  convRule: rule22
}, {
  start: 348,
  length: 1,
  convRule: rule21
}, {
  start: 349,
  length: 1,
  convRule: rule22
}, {
  start: 350,
  length: 1,
  convRule: rule21
}, {
  start: 351,
  length: 1,
  convRule: rule22
}, {
  start: 352,
  length: 1,
  convRule: rule21
}, {
  start: 353,
  length: 1,
  convRule: rule22
}, {
  start: 354,
  length: 1,
  convRule: rule21
}, {
  start: 355,
  length: 1,
  convRule: rule22
}, {
  start: 356,
  length: 1,
  convRule: rule21
}, {
  start: 357,
  length: 1,
  convRule: rule22
}, {
  start: 358,
  length: 1,
  convRule: rule21
}, {
  start: 359,
  length: 1,
  convRule: rule22
}, {
  start: 360,
  length: 1,
  convRule: rule21
}, {
  start: 361,
  length: 1,
  convRule: rule22
}, {
  start: 362,
  length: 1,
  convRule: rule21
}, {
  start: 363,
  length: 1,
  convRule: rule22
}, {
  start: 364,
  length: 1,
  convRule: rule21
}, {
  start: 365,
  length: 1,
  convRule: rule22
}, {
  start: 366,
  length: 1,
  convRule: rule21
}, {
  start: 367,
  length: 1,
  convRule: rule22
}, {
  start: 368,
  length: 1,
  convRule: rule21
}, {
  start: 369,
  length: 1,
  convRule: rule22
}, {
  start: 370,
  length: 1,
  convRule: rule21
}, {
  start: 371,
  length: 1,
  convRule: rule22
}, {
  start: 372,
  length: 1,
  convRule: rule21
}, {
  start: 373,
  length: 1,
  convRule: rule22
}, {
  start: 374,
  length: 1,
  convRule: rule21
}, {
  start: 375,
  length: 1,
  convRule: rule22
}, {
  start: 376,
  length: 1,
  convRule: rule25
}, {
  start: 377,
  length: 1,
  convRule: rule21
}, {
  start: 378,
  length: 1,
  convRule: rule22
}, {
  start: 379,
  length: 1,
  convRule: rule21
}, {
  start: 380,
  length: 1,
  convRule: rule22
}, {
  start: 381,
  length: 1,
  convRule: rule21
}, {
  start: 382,
  length: 1,
  convRule: rule22
}, {
  start: 383,
  length: 1,
  convRule: rule26
}, {
  start: 384,
  length: 1,
  convRule: rule27
}, {
  start: 385,
  length: 1,
  convRule: rule28
}, {
  start: 386,
  length: 1,
  convRule: rule21
}, {
  start: 387,
  length: 1,
  convRule: rule22
}, {
  start: 388,
  length: 1,
  convRule: rule21
}, {
  start: 389,
  length: 1,
  convRule: rule22
}, {
  start: 390,
  length: 1,
  convRule: rule29
}, {
  start: 391,
  length: 1,
  convRule: rule21
}, {
  start: 392,
  length: 1,
  convRule: rule22
}, {
  start: 393,
  length: 2,
  convRule: rule30
}, {
  start: 395,
  length: 1,
  convRule: rule21
}, {
  start: 396,
  length: 1,
  convRule: rule22
}, {
  start: 398,
  length: 1,
  convRule: rule31
}, {
  start: 399,
  length: 1,
  convRule: rule32
}, {
  start: 400,
  length: 1,
  convRule: rule33
}, {
  start: 401,
  length: 1,
  convRule: rule21
}, {
  start: 402,
  length: 1,
  convRule: rule22
}, {
  start: 403,
  length: 1,
  convRule: rule30
}, {
  start: 404,
  length: 1,
  convRule: rule34
}, {
  start: 405,
  length: 1,
  convRule: rule35
}, {
  start: 406,
  length: 1,
  convRule: rule36
}, {
  start: 407,
  length: 1,
  convRule: rule37
}, {
  start: 408,
  length: 1,
  convRule: rule21
}, {
  start: 409,
  length: 1,
  convRule: rule22
}, {
  start: 410,
  length: 1,
  convRule: rule38
}, {
  start: 412,
  length: 1,
  convRule: rule36
}, {
  start: 413,
  length: 1,
  convRule: rule39
}, {
  start: 414,
  length: 1,
  convRule: rule40
}, {
  start: 415,
  length: 1,
  convRule: rule41
}, {
  start: 416,
  length: 1,
  convRule: rule21
}, {
  start: 417,
  length: 1,
  convRule: rule22
}, {
  start: 418,
  length: 1,
  convRule: rule21
}, {
  start: 419,
  length: 1,
  convRule: rule22
}, {
  start: 420,
  length: 1,
  convRule: rule21
}, {
  start: 421,
  length: 1,
  convRule: rule22
}, {
  start: 422,
  length: 1,
  convRule: rule42
}, {
  start: 423,
  length: 1,
  convRule: rule21
}, {
  start: 424,
  length: 1,
  convRule: rule22
}, {
  start: 425,
  length: 1,
  convRule: rule42
}, {
  start: 428,
  length: 1,
  convRule: rule21
}, {
  start: 429,
  length: 1,
  convRule: rule22
}, {
  start: 430,
  length: 1,
  convRule: rule42
}, {
  start: 431,
  length: 1,
  convRule: rule21
}, {
  start: 432,
  length: 1,
  convRule: rule22
}, {
  start: 433,
  length: 2,
  convRule: rule43
}, {
  start: 435,
  length: 1,
  convRule: rule21
}, {
  start: 436,
  length: 1,
  convRule: rule22
}, {
  start: 437,
  length: 1,
  convRule: rule21
}, {
  start: 438,
  length: 1,
  convRule: rule22
}, {
  start: 439,
  length: 1,
  convRule: rule44
}, {
  start: 440,
  length: 1,
  convRule: rule21
}, {
  start: 441,
  length: 1,
  convRule: rule22
}, {
  start: 444,
  length: 1,
  convRule: rule21
}, {
  start: 445,
  length: 1,
  convRule: rule22
}, {
  start: 447,
  length: 1,
  convRule: rule46
}, {
  start: 452,
  length: 1,
  convRule: rule47
}, {
  start: 453,
  length: 1,
  convRule: rule48
}, {
  start: 454,
  length: 1,
  convRule: rule49
}, {
  start: 455,
  length: 1,
  convRule: rule47
}, {
  start: 456,
  length: 1,
  convRule: rule48
}, {
  start: 457,
  length: 1,
  convRule: rule49
}, {
  start: 458,
  length: 1,
  convRule: rule47
}, {
  start: 459,
  length: 1,
  convRule: rule48
}, {
  start: 460,
  length: 1,
  convRule: rule49
}, {
  start: 461,
  length: 1,
  convRule: rule21
}, {
  start: 462,
  length: 1,
  convRule: rule22
}, {
  start: 463,
  length: 1,
  convRule: rule21
}, {
  start: 464,
  length: 1,
  convRule: rule22
}, {
  start: 465,
  length: 1,
  convRule: rule21
}, {
  start: 466,
  length: 1,
  convRule: rule22
}, {
  start: 467,
  length: 1,
  convRule: rule21
}, {
  start: 468,
  length: 1,
  convRule: rule22
}, {
  start: 469,
  length: 1,
  convRule: rule21
}, {
  start: 470,
  length: 1,
  convRule: rule22
}, {
  start: 471,
  length: 1,
  convRule: rule21
}, {
  start: 472,
  length: 1,
  convRule: rule22
}, {
  start: 473,
  length: 1,
  convRule: rule21
}, {
  start: 474,
  length: 1,
  convRule: rule22
}, {
  start: 475,
  length: 1,
  convRule: rule21
}, {
  start: 476,
  length: 1,
  convRule: rule22
}, {
  start: 477,
  length: 1,
  convRule: rule50
}, {
  start: 478,
  length: 1,
  convRule: rule21
}, {
  start: 479,
  length: 1,
  convRule: rule22
}, {
  start: 480,
  length: 1,
  convRule: rule21
}, {
  start: 481,
  length: 1,
  convRule: rule22
}, {
  start: 482,
  length: 1,
  convRule: rule21
}, {
  start: 483,
  length: 1,
  convRule: rule22
}, {
  start: 484,
  length: 1,
  convRule: rule21
}, {
  start: 485,
  length: 1,
  convRule: rule22
}, {
  start: 486,
  length: 1,
  convRule: rule21
}, {
  start: 487,
  length: 1,
  convRule: rule22
}, {
  start: 488,
  length: 1,
  convRule: rule21
}, {
  start: 489,
  length: 1,
  convRule: rule22
}, {
  start: 490,
  length: 1,
  convRule: rule21
}, {
  start: 491,
  length: 1,
  convRule: rule22
}, {
  start: 492,
  length: 1,
  convRule: rule21
}, {
  start: 493,
  length: 1,
  convRule: rule22
}, {
  start: 494,
  length: 1,
  convRule: rule21
}, {
  start: 495,
  length: 1,
  convRule: rule22
}, {
  start: 497,
  length: 1,
  convRule: rule47
}, {
  start: 498,
  length: 1,
  convRule: rule48
}, {
  start: 499,
  length: 1,
  convRule: rule49
}, {
  start: 500,
  length: 1,
  convRule: rule21
}, {
  start: 501,
  length: 1,
  convRule: rule22
}, {
  start: 502,
  length: 1,
  convRule: rule51
}, {
  start: 503,
  length: 1,
  convRule: rule52
}, {
  start: 504,
  length: 1,
  convRule: rule21
}, {
  start: 505,
  length: 1,
  convRule: rule22
}, {
  start: 506,
  length: 1,
  convRule: rule21
}, {
  start: 507,
  length: 1,
  convRule: rule22
}, {
  start: 508,
  length: 1,
  convRule: rule21
}, {
  start: 509,
  length: 1,
  convRule: rule22
}, {
  start: 510,
  length: 1,
  convRule: rule21
}, {
  start: 511,
  length: 1,
  convRule: rule22
}, {
  start: 512,
  length: 1,
  convRule: rule21
}, {
  start: 513,
  length: 1,
  convRule: rule22
}, {
  start: 514,
  length: 1,
  convRule: rule21
}, {
  start: 515,
  length: 1,
  convRule: rule22
}, {
  start: 516,
  length: 1,
  convRule: rule21
}, {
  start: 517,
  length: 1,
  convRule: rule22
}, {
  start: 518,
  length: 1,
  convRule: rule21
}, {
  start: 519,
  length: 1,
  convRule: rule22
}, {
  start: 520,
  length: 1,
  convRule: rule21
}, {
  start: 521,
  length: 1,
  convRule: rule22
}, {
  start: 522,
  length: 1,
  convRule: rule21
}, {
  start: 523,
  length: 1,
  convRule: rule22
}, {
  start: 524,
  length: 1,
  convRule: rule21
}, {
  start: 525,
  length: 1,
  convRule: rule22
}, {
  start: 526,
  length: 1,
  convRule: rule21
}, {
  start: 527,
  length: 1,
  convRule: rule22
}, {
  start: 528,
  length: 1,
  convRule: rule21
}, {
  start: 529,
  length: 1,
  convRule: rule22
}, {
  start: 530,
  length: 1,
  convRule: rule21
}, {
  start: 531,
  length: 1,
  convRule: rule22
}, {
  start: 532,
  length: 1,
  convRule: rule21
}, {
  start: 533,
  length: 1,
  convRule: rule22
}, {
  start: 534,
  length: 1,
  convRule: rule21
}, {
  start: 535,
  length: 1,
  convRule: rule22
}, {
  start: 536,
  length: 1,
  convRule: rule21
}, {
  start: 537,
  length: 1,
  convRule: rule22
}, {
  start: 538,
  length: 1,
  convRule: rule21
}, {
  start: 539,
  length: 1,
  convRule: rule22
}, {
  start: 540,
  length: 1,
  convRule: rule21
}, {
  start: 541,
  length: 1,
  convRule: rule22
}, {
  start: 542,
  length: 1,
  convRule: rule21
}, {
  start: 543,
  length: 1,
  convRule: rule22
}, {
  start: 544,
  length: 1,
  convRule: rule53
}, {
  start: 546,
  length: 1,
  convRule: rule21
}, {
  start: 547,
  length: 1,
  convRule: rule22
}, {
  start: 548,
  length: 1,
  convRule: rule21
}, {
  start: 549,
  length: 1,
  convRule: rule22
}, {
  start: 550,
  length: 1,
  convRule: rule21
}, {
  start: 551,
  length: 1,
  convRule: rule22
}, {
  start: 552,
  length: 1,
  convRule: rule21
}, {
  start: 553,
  length: 1,
  convRule: rule22
}, {
  start: 554,
  length: 1,
  convRule: rule21
}, {
  start: 555,
  length: 1,
  convRule: rule22
}, {
  start: 556,
  length: 1,
  convRule: rule21
}, {
  start: 557,
  length: 1,
  convRule: rule22
}, {
  start: 558,
  length: 1,
  convRule: rule21
}, {
  start: 559,
  length: 1,
  convRule: rule22
}, {
  start: 560,
  length: 1,
  convRule: rule21
}, {
  start: 561,
  length: 1,
  convRule: rule22
}, {
  start: 562,
  length: 1,
  convRule: rule21
}, {
  start: 563,
  length: 1,
  convRule: rule22
}, {
  start: 570,
  length: 1,
  convRule: rule54
}, {
  start: 571,
  length: 1,
  convRule: rule21
}, {
  start: 572,
  length: 1,
  convRule: rule22
}, {
  start: 573,
  length: 1,
  convRule: rule55
}, {
  start: 574,
  length: 1,
  convRule: rule56
}, {
  start: 575,
  length: 2,
  convRule: rule57
}, {
  start: 577,
  length: 1,
  convRule: rule21
}, {
  start: 578,
  length: 1,
  convRule: rule22
}, {
  start: 579,
  length: 1,
  convRule: rule58
}, {
  start: 580,
  length: 1,
  convRule: rule59
}, {
  start: 581,
  length: 1,
  convRule: rule60
}, {
  start: 582,
  length: 1,
  convRule: rule21
}, {
  start: 583,
  length: 1,
  convRule: rule22
}, {
  start: 584,
  length: 1,
  convRule: rule21
}, {
  start: 585,
  length: 1,
  convRule: rule22
}, {
  start: 586,
  length: 1,
  convRule: rule21
}, {
  start: 587,
  length: 1,
  convRule: rule22
}, {
  start: 588,
  length: 1,
  convRule: rule21
}, {
  start: 589,
  length: 1,
  convRule: rule22
}, {
  start: 590,
  length: 1,
  convRule: rule21
}, {
  start: 591,
  length: 1,
  convRule: rule22
}, {
  start: 592,
  length: 1,
  convRule: rule61
}, {
  start: 593,
  length: 1,
  convRule: rule62
}, {
  start: 594,
  length: 1,
  convRule: rule63
}, {
  start: 595,
  length: 1,
  convRule: rule64
}, {
  start: 596,
  length: 1,
  convRule: rule65
}, {
  start: 598,
  length: 2,
  convRule: rule66
}, {
  start: 601,
  length: 1,
  convRule: rule67
}, {
  start: 603,
  length: 1,
  convRule: rule68
}, {
  start: 608,
  length: 1,
  convRule: rule66
}, {
  start: 611,
  length: 1,
  convRule: rule69
}, {
  start: 613,
  length: 1,
  convRule: rule70
}, {
  start: 616,
  length: 1,
  convRule: rule71
}, {
  start: 617,
  length: 1,
  convRule: rule72
}, {
  start: 619,
  length: 1,
  convRule: rule73
}, {
  start: 623,
  length: 1,
  convRule: rule72
}, {
  start: 625,
  length: 1,
  convRule: rule74
}, {
  start: 626,
  length: 1,
  convRule: rule75
}, {
  start: 629,
  length: 1,
  convRule: rule76
}, {
  start: 637,
  length: 1,
  convRule: rule77
}, {
  start: 640,
  length: 1,
  convRule: rule78
}, {
  start: 643,
  length: 1,
  convRule: rule78
}, {
  start: 648,
  length: 1,
  convRule: rule78
}, {
  start: 649,
  length: 1,
  convRule: rule79
}, {
  start: 650,
  length: 2,
  convRule: rule80
}, {
  start: 652,
  length: 1,
  convRule: rule81
}, {
  start: 658,
  length: 1,
  convRule: rule82
}, {
  start: 837,
  length: 1,
  convRule: rule85
}, {
  start: 880,
  length: 1,
  convRule: rule21
}, {
  start: 881,
  length: 1,
  convRule: rule22
}, {
  start: 882,
  length: 1,
  convRule: rule21
}, {
  start: 883,
  length: 1,
  convRule: rule22
}, {
  start: 886,
  length: 1,
  convRule: rule21
}, {
  start: 887,
  length: 1,
  convRule: rule22
}, {
  start: 891,
  length: 3,
  convRule: rule40
}, {
  start: 902,
  length: 1,
  convRule: rule86
}, {
  start: 904,
  length: 3,
  convRule: rule87
}, {
  start: 908,
  length: 1,
  convRule: rule88
}, {
  start: 910,
  length: 2,
  convRule: rule89
}, {
  start: 913,
  length: 17,
  convRule: rule9
}, {
  start: 931,
  length: 9,
  convRule: rule9
}, {
  start: 940,
  length: 1,
  convRule: rule90
}, {
  start: 941,
  length: 3,
  convRule: rule91
}, {
  start: 945,
  length: 17,
  convRule: rule12
}, {
  start: 962,
  length: 1,
  convRule: rule92
}, {
  start: 963,
  length: 9,
  convRule: rule12
}, {
  start: 972,
  length: 1,
  convRule: rule93
}, {
  start: 973,
  length: 2,
  convRule: rule94
}, {
  start: 975,
  length: 1,
  convRule: rule95
}, {
  start: 976,
  length: 1,
  convRule: rule96
}, {
  start: 977,
  length: 1,
  convRule: rule97
}, {
  start: 981,
  length: 1,
  convRule: rule99
}, {
  start: 982,
  length: 1,
  convRule: rule100
}, {
  start: 983,
  length: 1,
  convRule: rule101
}, {
  start: 984,
  length: 1,
  convRule: rule21
}, {
  start: 985,
  length: 1,
  convRule: rule22
}, {
  start: 986,
  length: 1,
  convRule: rule21
}, {
  start: 987,
  length: 1,
  convRule: rule22
}, {
  start: 988,
  length: 1,
  convRule: rule21
}, {
  start: 989,
  length: 1,
  convRule: rule22
}, {
  start: 990,
  length: 1,
  convRule: rule21
}, {
  start: 991,
  length: 1,
  convRule: rule22
}, {
  start: 992,
  length: 1,
  convRule: rule21
}, {
  start: 993,
  length: 1,
  convRule: rule22
}, {
  start: 994,
  length: 1,
  convRule: rule21
}, {
  start: 995,
  length: 1,
  convRule: rule22
}, {
  start: 996,
  length: 1,
  convRule: rule21
}, {
  start: 997,
  length: 1,
  convRule: rule22
}, {
  start: 998,
  length: 1,
  convRule: rule21
}, {
  start: 999,
  length: 1,
  convRule: rule22
}, {
  start: 1000,
  length: 1,
  convRule: rule21
}, {
  start: 1001,
  length: 1,
  convRule: rule22
}, {
  start: 1002,
  length: 1,
  convRule: rule21
}, {
  start: 1003,
  length: 1,
  convRule: rule22
}, {
  start: 1004,
  length: 1,
  convRule: rule21
}, {
  start: 1005,
  length: 1,
  convRule: rule22
}, {
  start: 1006,
  length: 1,
  convRule: rule21
}, {
  start: 1007,
  length: 1,
  convRule: rule22
}, {
  start: 1008,
  length: 1,
  convRule: rule102
}, {
  start: 1009,
  length: 1,
  convRule: rule103
}, {
  start: 1010,
  length: 1,
  convRule: rule104
}, {
  start: 1012,
  length: 1,
  convRule: rule105
}, {
  start: 1013,
  length: 1,
  convRule: rule106
}, {
  start: 1015,
  length: 1,
  convRule: rule21
}, {
  start: 1016,
  length: 1,
  convRule: rule22
}, {
  start: 1017,
  length: 1,
  convRule: rule107
}, {
  start: 1018,
  length: 1,
  convRule: rule21
}, {
  start: 1019,
  length: 1,
  convRule: rule22
}, {
  start: 1021,
  length: 3,
  convRule: rule53
}, {
  start: 1024,
  length: 16,
  convRule: rule108
}, {
  start: 1040,
  length: 32,
  convRule: rule9
}, {
  start: 1072,
  length: 32,
  convRule: rule12
}, {
  start: 1104,
  length: 16,
  convRule: rule103
}, {
  start: 1120,
  length: 1,
  convRule: rule21
}, {
  start: 1121,
  length: 1,
  convRule: rule22
}, {
  start: 1122,
  length: 1,
  convRule: rule21
}, {
  start: 1123,
  length: 1,
  convRule: rule22
}, {
  start: 1124,
  length: 1,
  convRule: rule21
}, {
  start: 1125,
  length: 1,
  convRule: rule22
}, {
  start: 1126,
  length: 1,
  convRule: rule21
}, {
  start: 1127,
  length: 1,
  convRule: rule22
}, {
  start: 1128,
  length: 1,
  convRule: rule21
}, {
  start: 1129,
  length: 1,
  convRule: rule22
}, {
  start: 1130,
  length: 1,
  convRule: rule21
}, {
  start: 1131,
  length: 1,
  convRule: rule22
}, {
  start: 1132,
  length: 1,
  convRule: rule21
}, {
  start: 1133,
  length: 1,
  convRule: rule22
}, {
  start: 1134,
  length: 1,
  convRule: rule21
}, {
  start: 1135,
  length: 1,
  convRule: rule22
}, {
  start: 1136,
  length: 1,
  convRule: rule21
}, {
  start: 1137,
  length: 1,
  convRule: rule22
}, {
  start: 1138,
  length: 1,
  convRule: rule21
}, {
  start: 1139,
  length: 1,
  convRule: rule22
}, {
  start: 1140,
  length: 1,
  convRule: rule21
}, {
  start: 1141,
  length: 1,
  convRule: rule22
}, {
  start: 1142,
  length: 1,
  convRule: rule21
}, {
  start: 1143,
  length: 1,
  convRule: rule22
}, {
  start: 1144,
  length: 1,
  convRule: rule21
}, {
  start: 1145,
  length: 1,
  convRule: rule22
}, {
  start: 1146,
  length: 1,
  convRule: rule21
}, {
  start: 1147,
  length: 1,
  convRule: rule22
}, {
  start: 1148,
  length: 1,
  convRule: rule21
}, {
  start: 1149,
  length: 1,
  convRule: rule22
}, {
  start: 1150,
  length: 1,
  convRule: rule21
}, {
  start: 1151,
  length: 1,
  convRule: rule22
}, {
  start: 1152,
  length: 1,
  convRule: rule21
}, {
  start: 1153,
  length: 1,
  convRule: rule22
}, {
  start: 1162,
  length: 1,
  convRule: rule21
}, {
  start: 1163,
  length: 1,
  convRule: rule22
}, {
  start: 1164,
  length: 1,
  convRule: rule21
}, {
  start: 1165,
  length: 1,
  convRule: rule22
}, {
  start: 1166,
  length: 1,
  convRule: rule21
}, {
  start: 1167,
  length: 1,
  convRule: rule22
}, {
  start: 1168,
  length: 1,
  convRule: rule21
}, {
  start: 1169,
  length: 1,
  convRule: rule22
}, {
  start: 1170,
  length: 1,
  convRule: rule21
}, {
  start: 1171,
  length: 1,
  convRule: rule22
}, {
  start: 1172,
  length: 1,
  convRule: rule21
}, {
  start: 1173,
  length: 1,
  convRule: rule22
}, {
  start: 1174,
  length: 1,
  convRule: rule21
}, {
  start: 1175,
  length: 1,
  convRule: rule22
}, {
  start: 1176,
  length: 1,
  convRule: rule21
}, {
  start: 1177,
  length: 1,
  convRule: rule22
}, {
  start: 1178,
  length: 1,
  convRule: rule21
}, {
  start: 1179,
  length: 1,
  convRule: rule22
}, {
  start: 1180,
  length: 1,
  convRule: rule21
}, {
  start: 1181,
  length: 1,
  convRule: rule22
}, {
  start: 1182,
  length: 1,
  convRule: rule21
}, {
  start: 1183,
  length: 1,
  convRule: rule22
}, {
  start: 1184,
  length: 1,
  convRule: rule21
}, {
  start: 1185,
  length: 1,
  convRule: rule22
}, {
  start: 1186,
  length: 1,
  convRule: rule21
}, {
  start: 1187,
  length: 1,
  convRule: rule22
}, {
  start: 1188,
  length: 1,
  convRule: rule21
}, {
  start: 1189,
  length: 1,
  convRule: rule22
}, {
  start: 1190,
  length: 1,
  convRule: rule21
}, {
  start: 1191,
  length: 1,
  convRule: rule22
}, {
  start: 1192,
  length: 1,
  convRule: rule21
}, {
  start: 1193,
  length: 1,
  convRule: rule22
}, {
  start: 1194,
  length: 1,
  convRule: rule21
}, {
  start: 1195,
  length: 1,
  convRule: rule22
}, {
  start: 1196,
  length: 1,
  convRule: rule21
}, {
  start: 1197,
  length: 1,
  convRule: rule22
}, {
  start: 1198,
  length: 1,
  convRule: rule21
}, {
  start: 1199,
  length: 1,
  convRule: rule22
}, {
  start: 1200,
  length: 1,
  convRule: rule21
}, {
  start: 1201,
  length: 1,
  convRule: rule22
}, {
  start: 1202,
  length: 1,
  convRule: rule21
}, {
  start: 1203,
  length: 1,
  convRule: rule22
}, {
  start: 1204,
  length: 1,
  convRule: rule21
}, {
  start: 1205,
  length: 1,
  convRule: rule22
}, {
  start: 1206,
  length: 1,
  convRule: rule21
}, {
  start: 1207,
  length: 1,
  convRule: rule22
}, {
  start: 1208,
  length: 1,
  convRule: rule21
}, {
  start: 1209,
  length: 1,
  convRule: rule22
}, {
  start: 1210,
  length: 1,
  convRule: rule21
}, {
  start: 1211,
  length: 1,
  convRule: rule22
}, {
  start: 1212,
  length: 1,
  convRule: rule21
}, {
  start: 1213,
  length: 1,
  convRule: rule22
}, {
  start: 1214,
  length: 1,
  convRule: rule21
}, {
  start: 1215,
  length: 1,
  convRule: rule22
}, {
  start: 1216,
  length: 1,
  convRule: rule110
}, {
  start: 1217,
  length: 1,
  convRule: rule21
}, {
  start: 1218,
  length: 1,
  convRule: rule22
}, {
  start: 1219,
  length: 1,
  convRule: rule21
}, {
  start: 1220,
  length: 1,
  convRule: rule22
}, {
  start: 1221,
  length: 1,
  convRule: rule21
}, {
  start: 1222,
  length: 1,
  convRule: rule22
}, {
  start: 1223,
  length: 1,
  convRule: rule21
}, {
  start: 1224,
  length: 1,
  convRule: rule22
}, {
  start: 1225,
  length: 1,
  convRule: rule21
}, {
  start: 1226,
  length: 1,
  convRule: rule22
}, {
  start: 1227,
  length: 1,
  convRule: rule21
}, {
  start: 1228,
  length: 1,
  convRule: rule22
}, {
  start: 1229,
  length: 1,
  convRule: rule21
}, {
  start: 1230,
  length: 1,
  convRule: rule22
}, {
  start: 1231,
  length: 1,
  convRule: rule111
}, {
  start: 1232,
  length: 1,
  convRule: rule21
}, {
  start: 1233,
  length: 1,
  convRule: rule22
}, {
  start: 1234,
  length: 1,
  convRule: rule21
}, {
  start: 1235,
  length: 1,
  convRule: rule22
}, {
  start: 1236,
  length: 1,
  convRule: rule21
}, {
  start: 1237,
  length: 1,
  convRule: rule22
}, {
  start: 1238,
  length: 1,
  convRule: rule21
}, {
  start: 1239,
  length: 1,
  convRule: rule22
}, {
  start: 1240,
  length: 1,
  convRule: rule21
}, {
  start: 1241,
  length: 1,
  convRule: rule22
}, {
  start: 1242,
  length: 1,
  convRule: rule21
}, {
  start: 1243,
  length: 1,
  convRule: rule22
}, {
  start: 1244,
  length: 1,
  convRule: rule21
}, {
  start: 1245,
  length: 1,
  convRule: rule22
}, {
  start: 1246,
  length: 1,
  convRule: rule21
}, {
  start: 1247,
  length: 1,
  convRule: rule22
}, {
  start: 1248,
  length: 1,
  convRule: rule21
}, {
  start: 1249,
  length: 1,
  convRule: rule22
}, {
  start: 1250,
  length: 1,
  convRule: rule21
}, {
  start: 1251,
  length: 1,
  convRule: rule22
}, {
  start: 1252,
  length: 1,
  convRule: rule21
}, {
  start: 1253,
  length: 1,
  convRule: rule22
}, {
  start: 1254,
  length: 1,
  convRule: rule21
}, {
  start: 1255,
  length: 1,
  convRule: rule22
}, {
  start: 1256,
  length: 1,
  convRule: rule21
}, {
  start: 1257,
  length: 1,
  convRule: rule22
}, {
  start: 1258,
  length: 1,
  convRule: rule21
}, {
  start: 1259,
  length: 1,
  convRule: rule22
}, {
  start: 1260,
  length: 1,
  convRule: rule21
}, {
  start: 1261,
  length: 1,
  convRule: rule22
}, {
  start: 1262,
  length: 1,
  convRule: rule21
}, {
  start: 1263,
  length: 1,
  convRule: rule22
}, {
  start: 1264,
  length: 1,
  convRule: rule21
}, {
  start: 1265,
  length: 1,
  convRule: rule22
}, {
  start: 1266,
  length: 1,
  convRule: rule21
}, {
  start: 1267,
  length: 1,
  convRule: rule22
}, {
  start: 1268,
  length: 1,
  convRule: rule21
}, {
  start: 1269,
  length: 1,
  convRule: rule22
}, {
  start: 1270,
  length: 1,
  convRule: rule21
}, {
  start: 1271,
  length: 1,
  convRule: rule22
}, {
  start: 1272,
  length: 1,
  convRule: rule21
}, {
  start: 1273,
  length: 1,
  convRule: rule22
}, {
  start: 1274,
  length: 1,
  convRule: rule21
}, {
  start: 1275,
  length: 1,
  convRule: rule22
}, {
  start: 1276,
  length: 1,
  convRule: rule21
}, {
  start: 1277,
  length: 1,
  convRule: rule22
}, {
  start: 1278,
  length: 1,
  convRule: rule21
}, {
  start: 1279,
  length: 1,
  convRule: rule22
}, {
  start: 1280,
  length: 1,
  convRule: rule21
}, {
  start: 1281,
  length: 1,
  convRule: rule22
}, {
  start: 1282,
  length: 1,
  convRule: rule21
}, {
  start: 1283,
  length: 1,
  convRule: rule22
}, {
  start: 1284,
  length: 1,
  convRule: rule21
}, {
  start: 1285,
  length: 1,
  convRule: rule22
}, {
  start: 1286,
  length: 1,
  convRule: rule21
}, {
  start: 1287,
  length: 1,
  convRule: rule22
}, {
  start: 1288,
  length: 1,
  convRule: rule21
}, {
  start: 1289,
  length: 1,
  convRule: rule22
}, {
  start: 1290,
  length: 1,
  convRule: rule21
}, {
  start: 1291,
  length: 1,
  convRule: rule22
}, {
  start: 1292,
  length: 1,
  convRule: rule21
}, {
  start: 1293,
  length: 1,
  convRule: rule22
}, {
  start: 1294,
  length: 1,
  convRule: rule21
}, {
  start: 1295,
  length: 1,
  convRule: rule22
}, {
  start: 1296,
  length: 1,
  convRule: rule21
}, {
  start: 1297,
  length: 1,
  convRule: rule22
}, {
  start: 1298,
  length: 1,
  convRule: rule21
}, {
  start: 1299,
  length: 1,
  convRule: rule22
}, {
  start: 1300,
  length: 1,
  convRule: rule21
}, {
  start: 1301,
  length: 1,
  convRule: rule22
}, {
  start: 1302,
  length: 1,
  convRule: rule21
}, {
  start: 1303,
  length: 1,
  convRule: rule22
}, {
  start: 1304,
  length: 1,
  convRule: rule21
}, {
  start: 1305,
  length: 1,
  convRule: rule22
}, {
  start: 1306,
  length: 1,
  convRule: rule21
}, {
  start: 1307,
  length: 1,
  convRule: rule22
}, {
  start: 1308,
  length: 1,
  convRule: rule21
}, {
  start: 1309,
  length: 1,
  convRule: rule22
}, {
  start: 1310,
  length: 1,
  convRule: rule21
}, {
  start: 1311,
  length: 1,
  convRule: rule22
}, {
  start: 1312,
  length: 1,
  convRule: rule21
}, {
  start: 1313,
  length: 1,
  convRule: rule22
}, {
  start: 1314,
  length: 1,
  convRule: rule21
}, {
  start: 1315,
  length: 1,
  convRule: rule22
}, {
  start: 1316,
  length: 1,
  convRule: rule21
}, {
  start: 1317,
  length: 1,
  convRule: rule22
}, {
  start: 1318,
  length: 1,
  convRule: rule21
}, {
  start: 1319,
  length: 1,
  convRule: rule22
}, {
  start: 1329,
  length: 38,
  convRule: rule112
}, {
  start: 1377,
  length: 38,
  convRule: rule113
}, {
  start: 4256,
  length: 38,
  convRule: rule115
}, {
  start: 7545,
  length: 1,
  convRule: rule117
}, {
  start: 7549,
  length: 1,
  convRule: rule118
}, {
  start: 7680,
  length: 1,
  convRule: rule21
}, {
  start: 7681,
  length: 1,
  convRule: rule22
}, {
  start: 7682,
  length: 1,
  convRule: rule21
}, {
  start: 7683,
  length: 1,
  convRule: rule22
}, {
  start: 7684,
  length: 1,
  convRule: rule21
}, {
  start: 7685,
  length: 1,
  convRule: rule22
}, {
  start: 7686,
  length: 1,
  convRule: rule21
}, {
  start: 7687,
  length: 1,
  convRule: rule22
}, {
  start: 7688,
  length: 1,
  convRule: rule21
}, {
  start: 7689,
  length: 1,
  convRule: rule22
}, {
  start: 7690,
  length: 1,
  convRule: rule21
}, {
  start: 7691,
  length: 1,
  convRule: rule22
}, {
  start: 7692,
  length: 1,
  convRule: rule21
}, {
  start: 7693,
  length: 1,
  convRule: rule22
}, {
  start: 7694,
  length: 1,
  convRule: rule21
}, {
  start: 7695,
  length: 1,
  convRule: rule22
}, {
  start: 7696,
  length: 1,
  convRule: rule21
}, {
  start: 7697,
  length: 1,
  convRule: rule22
}, {
  start: 7698,
  length: 1,
  convRule: rule21
}, {
  start: 7699,
  length: 1,
  convRule: rule22
}, {
  start: 7700,
  length: 1,
  convRule: rule21
}, {
  start: 7701,
  length: 1,
  convRule: rule22
}, {
  start: 7702,
  length: 1,
  convRule: rule21
}, {
  start: 7703,
  length: 1,
  convRule: rule22
}, {
  start: 7704,
  length: 1,
  convRule: rule21
}, {
  start: 7705,
  length: 1,
  convRule: rule22
}, {
  start: 7706,
  length: 1,
  convRule: rule21
}, {
  start: 7707,
  length: 1,
  convRule: rule22
}, {
  start: 7708,
  length: 1,
  convRule: rule21
}, {
  start: 7709,
  length: 1,
  convRule: rule22
}, {
  start: 7710,
  length: 1,
  convRule: rule21
}, {
  start: 7711,
  length: 1,
  convRule: rule22
}, {
  start: 7712,
  length: 1,
  convRule: rule21
}, {
  start: 7713,
  length: 1,
  convRule: rule22
}, {
  start: 7714,
  length: 1,
  convRule: rule21
}, {
  start: 7715,
  length: 1,
  convRule: rule22
}, {
  start: 7716,
  length: 1,
  convRule: rule21
}, {
  start: 7717,
  length: 1,
  convRule: rule22
}, {
  start: 7718,
  length: 1,
  convRule: rule21
}, {
  start: 7719,
  length: 1,
  convRule: rule22
}, {
  start: 7720,
  length: 1,
  convRule: rule21
}, {
  start: 7721,
  length: 1,
  convRule: rule22
}, {
  start: 7722,
  length: 1,
  convRule: rule21
}, {
  start: 7723,
  length: 1,
  convRule: rule22
}, {
  start: 7724,
  length: 1,
  convRule: rule21
}, {
  start: 7725,
  length: 1,
  convRule: rule22
}, {
  start: 7726,
  length: 1,
  convRule: rule21
}, {
  start: 7727,
  length: 1,
  convRule: rule22
}, {
  start: 7728,
  length: 1,
  convRule: rule21
}, {
  start: 7729,
  length: 1,
  convRule: rule22
}, {
  start: 7730,
  length: 1,
  convRule: rule21
}, {
  start: 7731,
  length: 1,
  convRule: rule22
}, {
  start: 7732,
  length: 1,
  convRule: rule21
}, {
  start: 7733,
  length: 1,
  convRule: rule22
}, {
  start: 7734,
  length: 1,
  convRule: rule21
}, {
  start: 7735,
  length: 1,
  convRule: rule22
}, {
  start: 7736,
  length: 1,
  convRule: rule21
}, {
  start: 7737,
  length: 1,
  convRule: rule22
}, {
  start: 7738,
  length: 1,
  convRule: rule21
}, {
  start: 7739,
  length: 1,
  convRule: rule22
}, {
  start: 7740,
  length: 1,
  convRule: rule21
}, {
  start: 7741,
  length: 1,
  convRule: rule22
}, {
  start: 7742,
  length: 1,
  convRule: rule21
}, {
  start: 7743,
  length: 1,
  convRule: rule22
}, {
  start: 7744,
  length: 1,
  convRule: rule21
}, {
  start: 7745,
  length: 1,
  convRule: rule22
}, {
  start: 7746,
  length: 1,
  convRule: rule21
}, {
  start: 7747,
  length: 1,
  convRule: rule22
}, {
  start: 7748,
  length: 1,
  convRule: rule21
}, {
  start: 7749,
  length: 1,
  convRule: rule22
}, {
  start: 7750,
  length: 1,
  convRule: rule21
}, {
  start: 7751,
  length: 1,
  convRule: rule22
}, {
  start: 7752,
  length: 1,
  convRule: rule21
}, {
  start: 7753,
  length: 1,
  convRule: rule22
}, {
  start: 7754,
  length: 1,
  convRule: rule21
}, {
  start: 7755,
  length: 1,
  convRule: rule22
}, {
  start: 7756,
  length: 1,
  convRule: rule21
}, {
  start: 7757,
  length: 1,
  convRule: rule22
}, {
  start: 7758,
  length: 1,
  convRule: rule21
}, {
  start: 7759,
  length: 1,
  convRule: rule22
}, {
  start: 7760,
  length: 1,
  convRule: rule21
}, {
  start: 7761,
  length: 1,
  convRule: rule22
}, {
  start: 7762,
  length: 1,
  convRule: rule21
}, {
  start: 7763,
  length: 1,
  convRule: rule22
}, {
  start: 7764,
  length: 1,
  convRule: rule21
}, {
  start: 7765,
  length: 1,
  convRule: rule22
}, {
  start: 7766,
  length: 1,
  convRule: rule21
}, {
  start: 7767,
  length: 1,
  convRule: rule22
}, {
  start: 7768,
  length: 1,
  convRule: rule21
}, {
  start: 7769,
  length: 1,
  convRule: rule22
}, {
  start: 7770,
  length: 1,
  convRule: rule21
}, {
  start: 7771,
  length: 1,
  convRule: rule22
}, {
  start: 7772,
  length: 1,
  convRule: rule21
}, {
  start: 7773,
  length: 1,
  convRule: rule22
}, {
  start: 7774,
  length: 1,
  convRule: rule21
}, {
  start: 7775,
  length: 1,
  convRule: rule22
}, {
  start: 7776,
  length: 1,
  convRule: rule21
}, {
  start: 7777,
  length: 1,
  convRule: rule22
}, {
  start: 7778,
  length: 1,
  convRule: rule21
}, {
  start: 7779,
  length: 1,
  convRule: rule22
}, {
  start: 7780,
  length: 1,
  convRule: rule21
}, {
  start: 7781,
  length: 1,
  convRule: rule22
}, {
  start: 7782,
  length: 1,
  convRule: rule21
}, {
  start: 7783,
  length: 1,
  convRule: rule22
}, {
  start: 7784,
  length: 1,
  convRule: rule21
}, {
  start: 7785,
  length: 1,
  convRule: rule22
}, {
  start: 7786,
  length: 1,
  convRule: rule21
}, {
  start: 7787,
  length: 1,
  convRule: rule22
}, {
  start: 7788,
  length: 1,
  convRule: rule21
}, {
  start: 7789,
  length: 1,
  convRule: rule22
}, {
  start: 7790,
  length: 1,
  convRule: rule21
}, {
  start: 7791,
  length: 1,
  convRule: rule22
}, {
  start: 7792,
  length: 1,
  convRule: rule21
}, {
  start: 7793,
  length: 1,
  convRule: rule22
}, {
  start: 7794,
  length: 1,
  convRule: rule21
}, {
  start: 7795,
  length: 1,
  convRule: rule22
}, {
  start: 7796,
  length: 1,
  convRule: rule21
}, {
  start: 7797,
  length: 1,
  convRule: rule22
}, {
  start: 7798,
  length: 1,
  convRule: rule21
}, {
  start: 7799,
  length: 1,
  convRule: rule22
}, {
  start: 7800,
  length: 1,
  convRule: rule21
}, {
  start: 7801,
  length: 1,
  convRule: rule22
}, {
  start: 7802,
  length: 1,
  convRule: rule21
}, {
  start: 7803,
  length: 1,
  convRule: rule22
}, {
  start: 7804,
  length: 1,
  convRule: rule21
}, {
  start: 7805,
  length: 1,
  convRule: rule22
}, {
  start: 7806,
  length: 1,
  convRule: rule21
}, {
  start: 7807,
  length: 1,
  convRule: rule22
}, {
  start: 7808,
  length: 1,
  convRule: rule21
}, {
  start: 7809,
  length: 1,
  convRule: rule22
}, {
  start: 7810,
  length: 1,
  convRule: rule21
}, {
  start: 7811,
  length: 1,
  convRule: rule22
}, {
  start: 7812,
  length: 1,
  convRule: rule21
}, {
  start: 7813,
  length: 1,
  convRule: rule22
}, {
  start: 7814,
  length: 1,
  convRule: rule21
}, {
  start: 7815,
  length: 1,
  convRule: rule22
}, {
  start: 7816,
  length: 1,
  convRule: rule21
}, {
  start: 7817,
  length: 1,
  convRule: rule22
}, {
  start: 7818,
  length: 1,
  convRule: rule21
}, {
  start: 7819,
  length: 1,
  convRule: rule22
}, {
  start: 7820,
  length: 1,
  convRule: rule21
}, {
  start: 7821,
  length: 1,
  convRule: rule22
}, {
  start: 7822,
  length: 1,
  convRule: rule21
}, {
  start: 7823,
  length: 1,
  convRule: rule22
}, {
  start: 7824,
  length: 1,
  convRule: rule21
}, {
  start: 7825,
  length: 1,
  convRule: rule22
}, {
  start: 7826,
  length: 1,
  convRule: rule21
}, {
  start: 7827,
  length: 1,
  convRule: rule22
}, {
  start: 7828,
  length: 1,
  convRule: rule21
}, {
  start: 7829,
  length: 1,
  convRule: rule22
}, {
  start: 7835,
  length: 1,
  convRule: rule119
}, {
  start: 7838,
  length: 1,
  convRule: rule120
}, {
  start: 7840,
  length: 1,
  convRule: rule21
}, {
  start: 7841,
  length: 1,
  convRule: rule22
}, {
  start: 7842,
  length: 1,
  convRule: rule21
}, {
  start: 7843,
  length: 1,
  convRule: rule22
}, {
  start: 7844,
  length: 1,
  convRule: rule21
}, {
  start: 7845,
  length: 1,
  convRule: rule22
}, {
  start: 7846,
  length: 1,
  convRule: rule21
}, {
  start: 7847,
  length: 1,
  convRule: rule22
}, {
  start: 7848,
  length: 1,
  convRule: rule21
}, {
  start: 7849,
  length: 1,
  convRule: rule22
}, {
  start: 7850,
  length: 1,
  convRule: rule21
}, {
  start: 7851,
  length: 1,
  convRule: rule22
}, {
  start: 7852,
  length: 1,
  convRule: rule21
}, {
  start: 7853,
  length: 1,
  convRule: rule22
}, {
  start: 7854,
  length: 1,
  convRule: rule21
}, {
  start: 7855,
  length: 1,
  convRule: rule22
}, {
  start: 7856,
  length: 1,
  convRule: rule21
}, {
  start: 7857,
  length: 1,
  convRule: rule22
}, {
  start: 7858,
  length: 1,
  convRule: rule21
}, {
  start: 7859,
  length: 1,
  convRule: rule22
}, {
  start: 7860,
  length: 1,
  convRule: rule21
}, {
  start: 7861,
  length: 1,
  convRule: rule22
}, {
  start: 7862,
  length: 1,
  convRule: rule21
}, {
  start: 7863,
  length: 1,
  convRule: rule22
}, {
  start: 7864,
  length: 1,
  convRule: rule21
}, {
  start: 7865,
  length: 1,
  convRule: rule22
}, {
  start: 7866,
  length: 1,
  convRule: rule21
}, {
  start: 7867,
  length: 1,
  convRule: rule22
}, {
  start: 7868,
  length: 1,
  convRule: rule21
}, {
  start: 7869,
  length: 1,
  convRule: rule22
}, {
  start: 7870,
  length: 1,
  convRule: rule21
}, {
  start: 7871,
  length: 1,
  convRule: rule22
}, {
  start: 7872,
  length: 1,
  convRule: rule21
}, {
  start: 7873,
  length: 1,
  convRule: rule22
}, {
  start: 7874,
  length: 1,
  convRule: rule21
}, {
  start: 7875,
  length: 1,
  convRule: rule22
}, {
  start: 7876,
  length: 1,
  convRule: rule21
}, {
  start: 7877,
  length: 1,
  convRule: rule22
}, {
  start: 7878,
  length: 1,
  convRule: rule21
}, {
  start: 7879,
  length: 1,
  convRule: rule22
}, {
  start: 7880,
  length: 1,
  convRule: rule21
}, {
  start: 7881,
  length: 1,
  convRule: rule22
}, {
  start: 7882,
  length: 1,
  convRule: rule21
}, {
  start: 7883,
  length: 1,
  convRule: rule22
}, {
  start: 7884,
  length: 1,
  convRule: rule21
}, {
  start: 7885,
  length: 1,
  convRule: rule22
}, {
  start: 7886,
  length: 1,
  convRule: rule21
}, {
  start: 7887,
  length: 1,
  convRule: rule22
}, {
  start: 7888,
  length: 1,
  convRule: rule21
}, {
  start: 7889,
  length: 1,
  convRule: rule22
}, {
  start: 7890,
  length: 1,
  convRule: rule21
}, {
  start: 7891,
  length: 1,
  convRule: rule22
}, {
  start: 7892,
  length: 1,
  convRule: rule21
}, {
  start: 7893,
  length: 1,
  convRule: rule22
}, {
  start: 7894,
  length: 1,
  convRule: rule21
}, {
  start: 7895,
  length: 1,
  convRule: rule22
}, {
  start: 7896,
  length: 1,
  convRule: rule21
}, {
  start: 7897,
  length: 1,
  convRule: rule22
}, {
  start: 7898,
  length: 1,
  convRule: rule21
}, {
  start: 7899,
  length: 1,
  convRule: rule22
}, {
  start: 7900,
  length: 1,
  convRule: rule21
}, {
  start: 7901,
  length: 1,
  convRule: rule22
}, {
  start: 7902,
  length: 1,
  convRule: rule21
}, {
  start: 7903,
  length: 1,
  convRule: rule22
}, {
  start: 7904,
  length: 1,
  convRule: rule21
}, {
  start: 7905,
  length: 1,
  convRule: rule22
}, {
  start: 7906,
  length: 1,
  convRule: rule21
}, {
  start: 7907,
  length: 1,
  convRule: rule22
}, {
  start: 7908,
  length: 1,
  convRule: rule21
}, {
  start: 7909,
  length: 1,
  convRule: rule22
}, {
  start: 7910,
  length: 1,
  convRule: rule21
}, {
  start: 7911,
  length: 1,
  convRule: rule22
}, {
  start: 7912,
  length: 1,
  convRule: rule21
}, {
  start: 7913,
  length: 1,
  convRule: rule22
}, {
  start: 7914,
  length: 1,
  convRule: rule21
}, {
  start: 7915,
  length: 1,
  convRule: rule22
}, {
  start: 7916,
  length: 1,
  convRule: rule21
}, {
  start: 7917,
  length: 1,
  convRule: rule22
}, {
  start: 7918,
  length: 1,
  convRule: rule21
}, {
  start: 7919,
  length: 1,
  convRule: rule22
}, {
  start: 7920,
  length: 1,
  convRule: rule21
}, {
  start: 7921,
  length: 1,
  convRule: rule22
}, {
  start: 7922,
  length: 1,
  convRule: rule21
}, {
  start: 7923,
  length: 1,
  convRule: rule22
}, {
  start: 7924,
  length: 1,
  convRule: rule21
}, {
  start: 7925,
  length: 1,
  convRule: rule22
}, {
  start: 7926,
  length: 1,
  convRule: rule21
}, {
  start: 7927,
  length: 1,
  convRule: rule22
}, {
  start: 7928,
  length: 1,
  convRule: rule21
}, {
  start: 7929,
  length: 1,
  convRule: rule22
}, {
  start: 7930,
  length: 1,
  convRule: rule21
}, {
  start: 7931,
  length: 1,
  convRule: rule22
}, {
  start: 7932,
  length: 1,
  convRule: rule21
}, {
  start: 7933,
  length: 1,
  convRule: rule22
}, {
  start: 7934,
  length: 1,
  convRule: rule21
}, {
  start: 7935,
  length: 1,
  convRule: rule22
}, {
  start: 7936,
  length: 8,
  convRule: rule121
}, {
  start: 7944,
  length: 8,
  convRule: rule122
}, {
  start: 7952,
  length: 6,
  convRule: rule121
}, {
  start: 7960,
  length: 6,
  convRule: rule122
}, {
  start: 7968,
  length: 8,
  convRule: rule121
}, {
  start: 7976,
  length: 8,
  convRule: rule122
}, {
  start: 7984,
  length: 8,
  convRule: rule121
}, {
  start: 7992,
  length: 8,
  convRule: rule122
}, {
  start: 8000,
  length: 6,
  convRule: rule121
}, {
  start: 8008,
  length: 6,
  convRule: rule122
}, {
  start: 8017,
  length: 1,
  convRule: rule121
}, {
  start: 8019,
  length: 1,
  convRule: rule121
}, {
  start: 8021,
  length: 1,
  convRule: rule121
}, {
  start: 8023,
  length: 1,
  convRule: rule121
}, {
  start: 8025,
  length: 1,
  convRule: rule122
}, {
  start: 8027,
  length: 1,
  convRule: rule122
}, {
  start: 8029,
  length: 1,
  convRule: rule122
}, {
  start: 8031,
  length: 1,
  convRule: rule122
}, {
  start: 8032,
  length: 8,
  convRule: rule121
}, {
  start: 8040,
  length: 8,
  convRule: rule122
}, {
  start: 8048,
  length: 2,
  convRule: rule123
}, {
  start: 8050,
  length: 4,
  convRule: rule124
}, {
  start: 8054,
  length: 2,
  convRule: rule125
}, {
  start: 8056,
  length: 2,
  convRule: rule126
}, {
  start: 8058,
  length: 2,
  convRule: rule127
}, {
  start: 8060,
  length: 2,
  convRule: rule128
}, {
  start: 8064,
  length: 8,
  convRule: rule121
}, {
  start: 8072,
  length: 8,
  convRule: rule129
}, {
  start: 8080,
  length: 8,
  convRule: rule121
}, {
  start: 8088,
  length: 8,
  convRule: rule129
}, {
  start: 8096,
  length: 8,
  convRule: rule121
}, {
  start: 8104,
  length: 8,
  convRule: rule129
}, {
  start: 8112,
  length: 2,
  convRule: rule121
}, {
  start: 8115,
  length: 1,
  convRule: rule130
}, {
  start: 8120,
  length: 2,
  convRule: rule122
}, {
  start: 8122,
  length: 2,
  convRule: rule131
}, {
  start: 8124,
  length: 1,
  convRule: rule132
}, {
  start: 8126,
  length: 1,
  convRule: rule133
}, {
  start: 8131,
  length: 1,
  convRule: rule130
}, {
  start: 8136,
  length: 4,
  convRule: rule134
}, {
  start: 8140,
  length: 1,
  convRule: rule132
}, {
  start: 8144,
  length: 2,
  convRule: rule121
}, {
  start: 8152,
  length: 2,
  convRule: rule122
}, {
  start: 8154,
  length: 2,
  convRule: rule135
}, {
  start: 8160,
  length: 2,
  convRule: rule121
}, {
  start: 8165,
  length: 1,
  convRule: rule104
}, {
  start: 8168,
  length: 2,
  convRule: rule122
}, {
  start: 8170,
  length: 2,
  convRule: rule136
}, {
  start: 8172,
  length: 1,
  convRule: rule107
}, {
  start: 8179,
  length: 1,
  convRule: rule130
}, {
  start: 8184,
  length: 2,
  convRule: rule137
}, {
  start: 8186,
  length: 2,
  convRule: rule138
}, {
  start: 8188,
  length: 1,
  convRule: rule132
}, {
  start: 8486,
  length: 1,
  convRule: rule141
}, {
  start: 8490,
  length: 1,
  convRule: rule142
}, {
  start: 8491,
  length: 1,
  convRule: rule143
}, {
  start: 8498,
  length: 1,
  convRule: rule144
}, {
  start: 8526,
  length: 1,
  convRule: rule145
}, {
  start: 8544,
  length: 16,
  convRule: rule146
}, {
  start: 8560,
  length: 16,
  convRule: rule147
}, {
  start: 8579,
  length: 1,
  convRule: rule21
}, {
  start: 8580,
  length: 1,
  convRule: rule22
}, {
  start: 9398,
  length: 26,
  convRule: rule148
}, {
  start: 9424,
  length: 26,
  convRule: rule149
}, {
  start: 11264,
  length: 47,
  convRule: rule112
}, {
  start: 11312,
  length: 47,
  convRule: rule113
}, {
  start: 11360,
  length: 1,
  convRule: rule21
}, {
  start: 11361,
  length: 1,
  convRule: rule22
}, {
  start: 11362,
  length: 1,
  convRule: rule150
}, {
  start: 11363,
  length: 1,
  convRule: rule151
}, {
  start: 11364,
  length: 1,
  convRule: rule152
}, {
  start: 11365,
  length: 1,
  convRule: rule153
}, {
  start: 11366,
  length: 1,
  convRule: rule154
}, {
  start: 11367,
  length: 1,
  convRule: rule21
}, {
  start: 11368,
  length: 1,
  convRule: rule22
}, {
  start: 11369,
  length: 1,
  convRule: rule21
}, {
  start: 11370,
  length: 1,
  convRule: rule22
}, {
  start: 11371,
  length: 1,
  convRule: rule21
}, {
  start: 11372,
  length: 1,
  convRule: rule22
}, {
  start: 11373,
  length: 1,
  convRule: rule155
}, {
  start: 11374,
  length: 1,
  convRule: rule156
}, {
  start: 11375,
  length: 1,
  convRule: rule157
}, {
  start: 11376,
  length: 1,
  convRule: rule158
}, {
  start: 11378,
  length: 1,
  convRule: rule21
}, {
  start: 11379,
  length: 1,
  convRule: rule22
}, {
  start: 11381,
  length: 1,
  convRule: rule21
}, {
  start: 11382,
  length: 1,
  convRule: rule22
}, {
  start: 11390,
  length: 2,
  convRule: rule159
}, {
  start: 11392,
  length: 1,
  convRule: rule21
}, {
  start: 11393,
  length: 1,
  convRule: rule22
}, {
  start: 11394,
  length: 1,
  convRule: rule21
}, {
  start: 11395,
  length: 1,
  convRule: rule22
}, {
  start: 11396,
  length: 1,
  convRule: rule21
}, {
  start: 11397,
  length: 1,
  convRule: rule22
}, {
  start: 11398,
  length: 1,
  convRule: rule21
}, {
  start: 11399,
  length: 1,
  convRule: rule22
}, {
  start: 11400,
  length: 1,
  convRule: rule21
}, {
  start: 11401,
  length: 1,
  convRule: rule22
}, {
  start: 11402,
  length: 1,
  convRule: rule21
}, {
  start: 11403,
  length: 1,
  convRule: rule22
}, {
  start: 11404,
  length: 1,
  convRule: rule21
}, {
  start: 11405,
  length: 1,
  convRule: rule22
}, {
  start: 11406,
  length: 1,
  convRule: rule21
}, {
  start: 11407,
  length: 1,
  convRule: rule22
}, {
  start: 11408,
  length: 1,
  convRule: rule21
}, {
  start: 11409,
  length: 1,
  convRule: rule22
}, {
  start: 11410,
  length: 1,
  convRule: rule21
}, {
  start: 11411,
  length: 1,
  convRule: rule22
}, {
  start: 11412,
  length: 1,
  convRule: rule21
}, {
  start: 11413,
  length: 1,
  convRule: rule22
}, {
  start: 11414,
  length: 1,
  convRule: rule21
}, {
  start: 11415,
  length: 1,
  convRule: rule22
}, {
  start: 11416,
  length: 1,
  convRule: rule21
}, {
  start: 11417,
  length: 1,
  convRule: rule22
}, {
  start: 11418,
  length: 1,
  convRule: rule21
}, {
  start: 11419,
  length: 1,
  convRule: rule22
}, {
  start: 11420,
  length: 1,
  convRule: rule21
}, {
  start: 11421,
  length: 1,
  convRule: rule22
}, {
  start: 11422,
  length: 1,
  convRule: rule21
}, {
  start: 11423,
  length: 1,
  convRule: rule22
}, {
  start: 11424,
  length: 1,
  convRule: rule21
}, {
  start: 11425,
  length: 1,
  convRule: rule22
}, {
  start: 11426,
  length: 1,
  convRule: rule21
}, {
  start: 11427,
  length: 1,
  convRule: rule22
}, {
  start: 11428,
  length: 1,
  convRule: rule21
}, {
  start: 11429,
  length: 1,
  convRule: rule22
}, {
  start: 11430,
  length: 1,
  convRule: rule21
}, {
  start: 11431,
  length: 1,
  convRule: rule22
}, {
  start: 11432,
  length: 1,
  convRule: rule21
}, {
  start: 11433,
  length: 1,
  convRule: rule22
}, {
  start: 11434,
  length: 1,
  convRule: rule21
}, {
  start: 11435,
  length: 1,
  convRule: rule22
}, {
  start: 11436,
  length: 1,
  convRule: rule21
}, {
  start: 11437,
  length: 1,
  convRule: rule22
}, {
  start: 11438,
  length: 1,
  convRule: rule21
}, {
  start: 11439,
  length: 1,
  convRule: rule22
}, {
  start: 11440,
  length: 1,
  convRule: rule21
}, {
  start: 11441,
  length: 1,
  convRule: rule22
}, {
  start: 11442,
  length: 1,
  convRule: rule21
}, {
  start: 11443,
  length: 1,
  convRule: rule22
}, {
  start: 11444,
  length: 1,
  convRule: rule21
}, {
  start: 11445,
  length: 1,
  convRule: rule22
}, {
  start: 11446,
  length: 1,
  convRule: rule21
}, {
  start: 11447,
  length: 1,
  convRule: rule22
}, {
  start: 11448,
  length: 1,
  convRule: rule21
}, {
  start: 11449,
  length: 1,
  convRule: rule22
}, {
  start: 11450,
  length: 1,
  convRule: rule21
}, {
  start: 11451,
  length: 1,
  convRule: rule22
}, {
  start: 11452,
  length: 1,
  convRule: rule21
}, {
  start: 11453,
  length: 1,
  convRule: rule22
}, {
  start: 11454,
  length: 1,
  convRule: rule21
}, {
  start: 11455,
  length: 1,
  convRule: rule22
}, {
  start: 11456,
  length: 1,
  convRule: rule21
}, {
  start: 11457,
  length: 1,
  convRule: rule22
}, {
  start: 11458,
  length: 1,
  convRule: rule21
}, {
  start: 11459,
  length: 1,
  convRule: rule22
}, {
  start: 11460,
  length: 1,
  convRule: rule21
}, {
  start: 11461,
  length: 1,
  convRule: rule22
}, {
  start: 11462,
  length: 1,
  convRule: rule21
}, {
  start: 11463,
  length: 1,
  convRule: rule22
}, {
  start: 11464,
  length: 1,
  convRule: rule21
}, {
  start: 11465,
  length: 1,
  convRule: rule22
}, {
  start: 11466,
  length: 1,
  convRule: rule21
}, {
  start: 11467,
  length: 1,
  convRule: rule22
}, {
  start: 11468,
  length: 1,
  convRule: rule21
}, {
  start: 11469,
  length: 1,
  convRule: rule22
}, {
  start: 11470,
  length: 1,
  convRule: rule21
}, {
  start: 11471,
  length: 1,
  convRule: rule22
}, {
  start: 11472,
  length: 1,
  convRule: rule21
}, {
  start: 11473,
  length: 1,
  convRule: rule22
}, {
  start: 11474,
  length: 1,
  convRule: rule21
}, {
  start: 11475,
  length: 1,
  convRule: rule22
}, {
  start: 11476,
  length: 1,
  convRule: rule21
}, {
  start: 11477,
  length: 1,
  convRule: rule22
}, {
  start: 11478,
  length: 1,
  convRule: rule21
}, {
  start: 11479,
  length: 1,
  convRule: rule22
}, {
  start: 11480,
  length: 1,
  convRule: rule21
}, {
  start: 11481,
  length: 1,
  convRule: rule22
}, {
  start: 11482,
  length: 1,
  convRule: rule21
}, {
  start: 11483,
  length: 1,
  convRule: rule22
}, {
  start: 11484,
  length: 1,
  convRule: rule21
}, {
  start: 11485,
  length: 1,
  convRule: rule22
}, {
  start: 11486,
  length: 1,
  convRule: rule21
}, {
  start: 11487,
  length: 1,
  convRule: rule22
}, {
  start: 11488,
  length: 1,
  convRule: rule21
}, {
  start: 11489,
  length: 1,
  convRule: rule22
}, {
  start: 11490,
  length: 1,
  convRule: rule21
}, {
  start: 11491,
  length: 1,
  convRule: rule22
}, {
  start: 11499,
  length: 1,
  convRule: rule21
}, {
  start: 11500,
  length: 1,
  convRule: rule22
}, {
  start: 11501,
  length: 1,
  convRule: rule21
}, {
  start: 11502,
  length: 1,
  convRule: rule22
}, {
  start: 11520,
  length: 38,
  convRule: rule160
}, {
  start: 42560,
  length: 1,
  convRule: rule21
}, {
  start: 42561,
  length: 1,
  convRule: rule22
}, {
  start: 42562,
  length: 1,
  convRule: rule21
}, {
  start: 42563,
  length: 1,
  convRule: rule22
}, {
  start: 42564,
  length: 1,
  convRule: rule21
}, {
  start: 42565,
  length: 1,
  convRule: rule22
}, {
  start: 42566,
  length: 1,
  convRule: rule21
}, {
  start: 42567,
  length: 1,
  convRule: rule22
}, {
  start: 42568,
  length: 1,
  convRule: rule21
}, {
  start: 42569,
  length: 1,
  convRule: rule22
}, {
  start: 42570,
  length: 1,
  convRule: rule21
}, {
  start: 42571,
  length: 1,
  convRule: rule22
}, {
  start: 42572,
  length: 1,
  convRule: rule21
}, {
  start: 42573,
  length: 1,
  convRule: rule22
}, {
  start: 42574,
  length: 1,
  convRule: rule21
}, {
  start: 42575,
  length: 1,
  convRule: rule22
}, {
  start: 42576,
  length: 1,
  convRule: rule21
}, {
  start: 42577,
  length: 1,
  convRule: rule22
}, {
  start: 42578,
  length: 1,
  convRule: rule21
}, {
  start: 42579,
  length: 1,
  convRule: rule22
}, {
  start: 42580,
  length: 1,
  convRule: rule21
}, {
  start: 42581,
  length: 1,
  convRule: rule22
}, {
  start: 42582,
  length: 1,
  convRule: rule21
}, {
  start: 42583,
  length: 1,
  convRule: rule22
}, {
  start: 42584,
  length: 1,
  convRule: rule21
}, {
  start: 42585,
  length: 1,
  convRule: rule22
}, {
  start: 42586,
  length: 1,
  convRule: rule21
}, {
  start: 42587,
  length: 1,
  convRule: rule22
}, {
  start: 42588,
  length: 1,
  convRule: rule21
}, {
  start: 42589,
  length: 1,
  convRule: rule22
}, {
  start: 42590,
  length: 1,
  convRule: rule21
}, {
  start: 42591,
  length: 1,
  convRule: rule22
}, {
  start: 42592,
  length: 1,
  convRule: rule21
}, {
  start: 42593,
  length: 1,
  convRule: rule22
}, {
  start: 42594,
  length: 1,
  convRule: rule21
}, {
  start: 42595,
  length: 1,
  convRule: rule22
}, {
  start: 42596,
  length: 1,
  convRule: rule21
}, {
  start: 42597,
  length: 1,
  convRule: rule22
}, {
  start: 42598,
  length: 1,
  convRule: rule21
}, {
  start: 42599,
  length: 1,
  convRule: rule22
}, {
  start: 42600,
  length: 1,
  convRule: rule21
}, {
  start: 42601,
  length: 1,
  convRule: rule22
}, {
  start: 42602,
  length: 1,
  convRule: rule21
}, {
  start: 42603,
  length: 1,
  convRule: rule22
}, {
  start: 42604,
  length: 1,
  convRule: rule21
}, {
  start: 42605,
  length: 1,
  convRule: rule22
}, {
  start: 42624,
  length: 1,
  convRule: rule21
}, {
  start: 42625,
  length: 1,
  convRule: rule22
}, {
  start: 42626,
  length: 1,
  convRule: rule21
}, {
  start: 42627,
  length: 1,
  convRule: rule22
}, {
  start: 42628,
  length: 1,
  convRule: rule21
}, {
  start: 42629,
  length: 1,
  convRule: rule22
}, {
  start: 42630,
  length: 1,
  convRule: rule21
}, {
  start: 42631,
  length: 1,
  convRule: rule22
}, {
  start: 42632,
  length: 1,
  convRule: rule21
}, {
  start: 42633,
  length: 1,
  convRule: rule22
}, {
  start: 42634,
  length: 1,
  convRule: rule21
}, {
  start: 42635,
  length: 1,
  convRule: rule22
}, {
  start: 42636,
  length: 1,
  convRule: rule21
}, {
  start: 42637,
  length: 1,
  convRule: rule22
}, {
  start: 42638,
  length: 1,
  convRule: rule21
}, {
  start: 42639,
  length: 1,
  convRule: rule22
}, {
  start: 42640,
  length: 1,
  convRule: rule21
}, {
  start: 42641,
  length: 1,
  convRule: rule22
}, {
  start: 42642,
  length: 1,
  convRule: rule21
}, {
  start: 42643,
  length: 1,
  convRule: rule22
}, {
  start: 42644,
  length: 1,
  convRule: rule21
}, {
  start: 42645,
  length: 1,
  convRule: rule22
}, {
  start: 42646,
  length: 1,
  convRule: rule21
}, {
  start: 42647,
  length: 1,
  convRule: rule22
}, {
  start: 42786,
  length: 1,
  convRule: rule21
}, {
  start: 42787,
  length: 1,
  convRule: rule22
}, {
  start: 42788,
  length: 1,
  convRule: rule21
}, {
  start: 42789,
  length: 1,
  convRule: rule22
}, {
  start: 42790,
  length: 1,
  convRule: rule21
}, {
  start: 42791,
  length: 1,
  convRule: rule22
}, {
  start: 42792,
  length: 1,
  convRule: rule21
}, {
  start: 42793,
  length: 1,
  convRule: rule22
}, {
  start: 42794,
  length: 1,
  convRule: rule21
}, {
  start: 42795,
  length: 1,
  convRule: rule22
}, {
  start: 42796,
  length: 1,
  convRule: rule21
}, {
  start: 42797,
  length: 1,
  convRule: rule22
}, {
  start: 42798,
  length: 1,
  convRule: rule21
}, {
  start: 42799,
  length: 1,
  convRule: rule22
}, {
  start: 42802,
  length: 1,
  convRule: rule21
}, {
  start: 42803,
  length: 1,
  convRule: rule22
}, {
  start: 42804,
  length: 1,
  convRule: rule21
}, {
  start: 42805,
  length: 1,
  convRule: rule22
}, {
  start: 42806,
  length: 1,
  convRule: rule21
}, {
  start: 42807,
  length: 1,
  convRule: rule22
}, {
  start: 42808,
  length: 1,
  convRule: rule21
}, {
  start: 42809,
  length: 1,
  convRule: rule22
}, {
  start: 42810,
  length: 1,
  convRule: rule21
}, {
  start: 42811,
  length: 1,
  convRule: rule22
}, {
  start: 42812,
  length: 1,
  convRule: rule21
}, {
  start: 42813,
  length: 1,
  convRule: rule22
}, {
  start: 42814,
  length: 1,
  convRule: rule21
}, {
  start: 42815,
  length: 1,
  convRule: rule22
}, {
  start: 42816,
  length: 1,
  convRule: rule21
}, {
  start: 42817,
  length: 1,
  convRule: rule22
}, {
  start: 42818,
  length: 1,
  convRule: rule21
}, {
  start: 42819,
  length: 1,
  convRule: rule22
}, {
  start: 42820,
  length: 1,
  convRule: rule21
}, {
  start: 42821,
  length: 1,
  convRule: rule22
}, {
  start: 42822,
  length: 1,
  convRule: rule21
}, {
  start: 42823,
  length: 1,
  convRule: rule22
}, {
  start: 42824,
  length: 1,
  convRule: rule21
}, {
  start: 42825,
  length: 1,
  convRule: rule22
}, {
  start: 42826,
  length: 1,
  convRule: rule21
}, {
  start: 42827,
  length: 1,
  convRule: rule22
}, {
  start: 42828,
  length: 1,
  convRule: rule21
}, {
  start: 42829,
  length: 1,
  convRule: rule22
}, {
  start: 42830,
  length: 1,
  convRule: rule21
}, {
  start: 42831,
  length: 1,
  convRule: rule22
}, {
  start: 42832,
  length: 1,
  convRule: rule21
}, {
  start: 42833,
  length: 1,
  convRule: rule22
}, {
  start: 42834,
  length: 1,
  convRule: rule21
}, {
  start: 42835,
  length: 1,
  convRule: rule22
}, {
  start: 42836,
  length: 1,
  convRule: rule21
}, {
  start: 42837,
  length: 1,
  convRule: rule22
}, {
  start: 42838,
  length: 1,
  convRule: rule21
}, {
  start: 42839,
  length: 1,
  convRule: rule22
}, {
  start: 42840,
  length: 1,
  convRule: rule21
}, {
  start: 42841,
  length: 1,
  convRule: rule22
}, {
  start: 42842,
  length: 1,
  convRule: rule21
}, {
  start: 42843,
  length: 1,
  convRule: rule22
}, {
  start: 42844,
  length: 1,
  convRule: rule21
}, {
  start: 42845,
  length: 1,
  convRule: rule22
}, {
  start: 42846,
  length: 1,
  convRule: rule21
}, {
  start: 42847,
  length: 1,
  convRule: rule22
}, {
  start: 42848,
  length: 1,
  convRule: rule21
}, {
  start: 42849,
  length: 1,
  convRule: rule22
}, {
  start: 42850,
  length: 1,
  convRule: rule21
}, {
  start: 42851,
  length: 1,
  convRule: rule22
}, {
  start: 42852,
  length: 1,
  convRule: rule21
}, {
  start: 42853,
  length: 1,
  convRule: rule22
}, {
  start: 42854,
  length: 1,
  convRule: rule21
}, {
  start: 42855,
  length: 1,
  convRule: rule22
}, {
  start: 42856,
  length: 1,
  convRule: rule21
}, {
  start: 42857,
  length: 1,
  convRule: rule22
}, {
  start: 42858,
  length: 1,
  convRule: rule21
}, {
  start: 42859,
  length: 1,
  convRule: rule22
}, {
  start: 42860,
  length: 1,
  convRule: rule21
}, {
  start: 42861,
  length: 1,
  convRule: rule22
}, {
  start: 42862,
  length: 1,
  convRule: rule21
}, {
  start: 42863,
  length: 1,
  convRule: rule22
}, {
  start: 42873,
  length: 1,
  convRule: rule21
}, {
  start: 42874,
  length: 1,
  convRule: rule22
}, {
  start: 42875,
  length: 1,
  convRule: rule21
}, {
  start: 42876,
  length: 1,
  convRule: rule22
}, {
  start: 42877,
  length: 1,
  convRule: rule161
}, {
  start: 42878,
  length: 1,
  convRule: rule21
}, {
  start: 42879,
  length: 1,
  convRule: rule22
}, {
  start: 42880,
  length: 1,
  convRule: rule21
}, {
  start: 42881,
  length: 1,
  convRule: rule22
}, {
  start: 42882,
  length: 1,
  convRule: rule21
}, {
  start: 42883,
  length: 1,
  convRule: rule22
}, {
  start: 42884,
  length: 1,
  convRule: rule21
}, {
  start: 42885,
  length: 1,
  convRule: rule22
}, {
  start: 42886,
  length: 1,
  convRule: rule21
}, {
  start: 42887,
  length: 1,
  convRule: rule22
}, {
  start: 42891,
  length: 1,
  convRule: rule21
}, {
  start: 42892,
  length: 1,
  convRule: rule22
}, {
  start: 42893,
  length: 1,
  convRule: rule162
}, {
  start: 42896,
  length: 1,
  convRule: rule21
}, {
  start: 42897,
  length: 1,
  convRule: rule22
}, {
  start: 42912,
  length: 1,
  convRule: rule21
}, {
  start: 42913,
  length: 1,
  convRule: rule22
}, {
  start: 42914,
  length: 1,
  convRule: rule21
}, {
  start: 42915,
  length: 1,
  convRule: rule22
}, {
  start: 42916,
  length: 1,
  convRule: rule21
}, {
  start: 42917,
  length: 1,
  convRule: rule22
}, {
  start: 42918,
  length: 1,
  convRule: rule21
}, {
  start: 42919,
  length: 1,
  convRule: rule22
}, {
  start: 42920,
  length: 1,
  convRule: rule21
}, {
  start: 42921,
  length: 1,
  convRule: rule22
}, {
  start: 65313,
  length: 26,
  convRule: rule9
}, {
  start: 65345,
  length: 26,
  convRule: rule12
}, {
  start: 66560,
  length: 40,
  convRule: rule165
}, {
  start: 66600,
  length: 40,
  convRule: rule166
}];

var bsearch = function bsearch(a) {
  return function (array) {
    return function (size) {
      return function (compare) {
        var go = function go($copy_i) {
          return function ($copy_k) {
            var $tco_var_i = $copy_i;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(i, k) {
              if (i > k) {
                $tco_done = true;
                return Data_Maybe.Nothing.value;
              }

              ;

              if (Data_Boolean.otherwise) {
                var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                var v = compare(a)(array[j]);

                if (v instanceof Data_Ordering.EQ) {
                  $tco_done = true;
                  return new Data_Maybe.Just(array[j]);
                }

                ;

                if (v instanceof Data_Ordering.GT) {
                  $tco_var_i = j + 1 | 0;
                  $copy_k = k;
                  return;
                }

                ;
                $tco_var_i = i;
                $copy_k = j - 1 | 0;
                return;
              }

              ;
              throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4783, column 5 - line 4789, column 49): " + [i.constructor.name, k.constructor.name]);
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_i, $copy_k);
            }

            ;
            return $tco_result;
          };
        };

        return go(0)(size);
      };
    };
  };
};

var blkCmp = function blkCmp(v) {
  return function (v1) {
    if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (v.start > v1.start) {
      return Data_Ordering.GT.value;
    }

    ;

    if (Data_Boolean.otherwise) {
      return Data_Ordering.LT.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4760, column 1 - line 4760, column 45): " + [v.constructor.name, v1.constructor.name]);
  };
};

var getRule = function getRule(blocks) {
  return function (unichar) {
    return function (size) {
      var key = {
        start: unichar,
        length: 1,
        convRule: nullrule
      };
      var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);

      if (maybeCharBlock instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Nothing.value;
      }

      ;

      if (maybeCharBlock instanceof Data_Maybe.Just) {
        return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
      }

      ;
      throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4773, column 8 - line 4775, column 62): " + [maybeCharBlock.constructor.name]);
    };
  };
};

var caseConv = function caseConv(f) {
  return function ($$char) {
    var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);

    if (maybeConversionRule instanceof Data_Maybe.Nothing) {
      return $$char;
    }

    ;

    if (maybeConversionRule instanceof Data_Maybe.Just) {
      return $$char + f(maybeConversionRule.value0) | 0;
    }

    ;
    throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4850, column 8 - line 4852, column 55): " + [maybeConversionRule.constructor.name]);
  };
};

var uTowlower = caseConv(function (v) {
  return v.lowdist;
});
var uTowtitle = caseConv(function (v) {
  return v.titledist;
});
var uTowupper = caseConv(function (v) {
  return v.updist;
});

var checkAttrS = function checkAttrS(categories) {
  return function ($$char) {
    var maybeConversionRule = getRule(spacechars)($$char)(numSpaceBlocks);

    if (maybeConversionRule instanceof Data_Maybe.Nothing) {
      return false;
    }

    ;

    if (maybeConversionRule instanceof Data_Maybe.Just) {
      return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
    }

    ;
    throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4807, column 8 - line 4809, column 92): " + [maybeConversionRule.constructor.name]);
  };
};

var uIswspace = checkAttrS([gencatZS]);
var allchars = [{
  start: 0,
  length: 32,
  convRule: rule0
}, {
  start: 32,
  length: 1,
  convRule: rule1
}, {
  start: 33,
  length: 3,
  convRule: rule2
}, {
  start: 36,
  length: 1,
  convRule: rule3
}, {
  start: 37,
  length: 3,
  convRule: rule2
}, {
  start: 40,
  length: 1,
  convRule: rule4
}, {
  start: 41,
  length: 1,
  convRule: rule5
}, {
  start: 42,
  length: 1,
  convRule: rule2
}, {
  start: 43,
  length: 1,
  convRule: rule6
}, {
  start: 44,
  length: 1,
  convRule: rule2
}, {
  start: 45,
  length: 1,
  convRule: rule7
}, {
  start: 46,
  length: 2,
  convRule: rule2
}, {
  start: 48,
  length: 10,
  convRule: rule8
}, {
  start: 58,
  length: 2,
  convRule: rule2
}, {
  start: 60,
  length: 3,
  convRule: rule6
}, {
  start: 63,
  length: 2,
  convRule: rule2
}, {
  start: 65,
  length: 26,
  convRule: rule9
}, {
  start: 91,
  length: 1,
  convRule: rule4
}, {
  start: 92,
  length: 1,
  convRule: rule2
}, {
  start: 93,
  length: 1,
  convRule: rule5
}, {
  start: 94,
  length: 1,
  convRule: rule10
}, {
  start: 95,
  length: 1,
  convRule: rule11
}, {
  start: 96,
  length: 1,
  convRule: rule10
}, {
  start: 97,
  length: 26,
  convRule: rule12
}, {
  start: 123,
  length: 1,
  convRule: rule4
}, {
  start: 124,
  length: 1,
  convRule: rule6
}, {
  start: 125,
  length: 1,
  convRule: rule5
}, {
  start: 126,
  length: 1,
  convRule: rule6
}, {
  start: 127,
  length: 33,
  convRule: rule0
}, {
  start: 160,
  length: 1,
  convRule: rule1
}, {
  start: 161,
  length: 1,
  convRule: rule2
}, {
  start: 162,
  length: 4,
  convRule: rule3
}, {
  start: 166,
  length: 2,
  convRule: rule13
}, {
  start: 168,
  length: 1,
  convRule: rule10
}, {
  start: 169,
  length: 1,
  convRule: rule13
}, {
  start: 170,
  length: 1,
  convRule: rule14
}, {
  start: 171,
  length: 1,
  convRule: rule15
}, {
  start: 172,
  length: 1,
  convRule: rule6
}, {
  start: 173,
  length: 1,
  convRule: rule16
}, {
  start: 174,
  length: 1,
  convRule: rule13
}, {
  start: 175,
  length: 1,
  convRule: rule10
}, {
  start: 176,
  length: 1,
  convRule: rule13
}, {
  start: 177,
  length: 1,
  convRule: rule6
}, {
  start: 178,
  length: 2,
  convRule: rule17
}, {
  start: 180,
  length: 1,
  convRule: rule10
}, {
  start: 181,
  length: 1,
  convRule: rule18
}, {
  start: 182,
  length: 1,
  convRule: rule13
}, {
  start: 183,
  length: 1,
  convRule: rule2
}, {
  start: 184,
  length: 1,
  convRule: rule10
}, {
  start: 185,
  length: 1,
  convRule: rule17
}, {
  start: 186,
  length: 1,
  convRule: rule14
}, {
  start: 187,
  length: 1,
  convRule: rule19
}, {
  start: 188,
  length: 3,
  convRule: rule17
}, {
  start: 191,
  length: 1,
  convRule: rule2
}, {
  start: 192,
  length: 23,
  convRule: rule9
}, {
  start: 215,
  length: 1,
  convRule: rule6
}, {
  start: 216,
  length: 7,
  convRule: rule9
}, {
  start: 223,
  length: 1,
  convRule: rule14
}, {
  start: 224,
  length: 23,
  convRule: rule12
}, {
  start: 247,
  length: 1,
  convRule: rule6
}, {
  start: 248,
  length: 7,
  convRule: rule12
}, {
  start: 255,
  length: 1,
  convRule: rule20
}, {
  start: 256,
  length: 1,
  convRule: rule21
}, {
  start: 257,
  length: 1,
  convRule: rule22
}, {
  start: 258,
  length: 1,
  convRule: rule21
}, {
  start: 259,
  length: 1,
  convRule: rule22
}, {
  start: 260,
  length: 1,
  convRule: rule21
}, {
  start: 261,
  length: 1,
  convRule: rule22
}, {
  start: 262,
  length: 1,
  convRule: rule21
}, {
  start: 263,
  length: 1,
  convRule: rule22
}, {
  start: 264,
  length: 1,
  convRule: rule21
}, {
  start: 265,
  length: 1,
  convRule: rule22
}, {
  start: 266,
  length: 1,
  convRule: rule21
}, {
  start: 267,
  length: 1,
  convRule: rule22
}, {
  start: 268,
  length: 1,
  convRule: rule21
}, {
  start: 269,
  length: 1,
  convRule: rule22
}, {
  start: 270,
  length: 1,
  convRule: rule21
}, {
  start: 271,
  length: 1,
  convRule: rule22
}, {
  start: 272,
  length: 1,
  convRule: rule21
}, {
  start: 273,
  length: 1,
  convRule: rule22
}, {
  start: 274,
  length: 1,
  convRule: rule21
}, {
  start: 275,
  length: 1,
  convRule: rule22
}, {
  start: 276,
  length: 1,
  convRule: rule21
}, {
  start: 277,
  length: 1,
  convRule: rule22
}, {
  start: 278,
  length: 1,
  convRule: rule21
}, {
  start: 279,
  length: 1,
  convRule: rule22
}, {
  start: 280,
  length: 1,
  convRule: rule21
}, {
  start: 281,
  length: 1,
  convRule: rule22
}, {
  start: 282,
  length: 1,
  convRule: rule21
}, {
  start: 283,
  length: 1,
  convRule: rule22
}, {
  start: 284,
  length: 1,
  convRule: rule21
}, {
  start: 285,
  length: 1,
  convRule: rule22
}, {
  start: 286,
  length: 1,
  convRule: rule21
}, {
  start: 287,
  length: 1,
  convRule: rule22
}, {
  start: 288,
  length: 1,
  convRule: rule21
}, {
  start: 289,
  length: 1,
  convRule: rule22
}, {
  start: 290,
  length: 1,
  convRule: rule21
}, {
  start: 291,
  length: 1,
  convRule: rule22
}, {
  start: 292,
  length: 1,
  convRule: rule21
}, {
  start: 293,
  length: 1,
  convRule: rule22
}, {
  start: 294,
  length: 1,
  convRule: rule21
}, {
  start: 295,
  length: 1,
  convRule: rule22
}, {
  start: 296,
  length: 1,
  convRule: rule21
}, {
  start: 297,
  length: 1,
  convRule: rule22
}, {
  start: 298,
  length: 1,
  convRule: rule21
}, {
  start: 299,
  length: 1,
  convRule: rule22
}, {
  start: 300,
  length: 1,
  convRule: rule21
}, {
  start: 301,
  length: 1,
  convRule: rule22
}, {
  start: 302,
  length: 1,
  convRule: rule21
}, {
  start: 303,
  length: 1,
  convRule: rule22
}, {
  start: 304,
  length: 1,
  convRule: rule23
}, {
  start: 305,
  length: 1,
  convRule: rule24
}, {
  start: 306,
  length: 1,
  convRule: rule21
}, {
  start: 307,
  length: 1,
  convRule: rule22
}, {
  start: 308,
  length: 1,
  convRule: rule21
}, {
  start: 309,
  length: 1,
  convRule: rule22
}, {
  start: 310,
  length: 1,
  convRule: rule21
}, {
  start: 311,
  length: 1,
  convRule: rule22
}, {
  start: 312,
  length: 1,
  convRule: rule14
}, {
  start: 313,
  length: 1,
  convRule: rule21
}, {
  start: 314,
  length: 1,
  convRule: rule22
}, {
  start: 315,
  length: 1,
  convRule: rule21
}, {
  start: 316,
  length: 1,
  convRule: rule22
}, {
  start: 317,
  length: 1,
  convRule: rule21
}, {
  start: 318,
  length: 1,
  convRule: rule22
}, {
  start: 319,
  length: 1,
  convRule: rule21
}, {
  start: 320,
  length: 1,
  convRule: rule22
}, {
  start: 321,
  length: 1,
  convRule: rule21
}, {
  start: 322,
  length: 1,
  convRule: rule22
}, {
  start: 323,
  length: 1,
  convRule: rule21
}, {
  start: 324,
  length: 1,
  convRule: rule22
}, {
  start: 325,
  length: 1,
  convRule: rule21
}, {
  start: 326,
  length: 1,
  convRule: rule22
}, {
  start: 327,
  length: 1,
  convRule: rule21
}, {
  start: 328,
  length: 1,
  convRule: rule22
}, {
  start: 329,
  length: 1,
  convRule: rule14
}, {
  start: 330,
  length: 1,
  convRule: rule21
}, {
  start: 331,
  length: 1,
  convRule: rule22
}, {
  start: 332,
  length: 1,
  convRule: rule21
}, {
  start: 333,
  length: 1,
  convRule: rule22
}, {
  start: 334,
  length: 1,
  convRule: rule21
}, {
  start: 335,
  length: 1,
  convRule: rule22
}, {
  start: 336,
  length: 1,
  convRule: rule21
}, {
  start: 337,
  length: 1,
  convRule: rule22
}, {
  start: 338,
  length: 1,
  convRule: rule21
}, {
  start: 339,
  length: 1,
  convRule: rule22
}, {
  start: 340,
  length: 1,
  convRule: rule21
}, {
  start: 341,
  length: 1,
  convRule: rule22
}, {
  start: 342,
  length: 1,
  convRule: rule21
}, {
  start: 343,
  length: 1,
  convRule: rule22
}, {
  start: 344,
  length: 1,
  convRule: rule21
}, {
  start: 345,
  length: 1,
  convRule: rule22
}, {
  start: 346,
  length: 1,
  convRule: rule21
}, {
  start: 347,
  length: 1,
  convRule: rule22
}, {
  start: 348,
  length: 1,
  convRule: rule21
}, {
  start: 349,
  length: 1,
  convRule: rule22
}, {
  start: 350,
  length: 1,
  convRule: rule21
}, {
  start: 351,
  length: 1,
  convRule: rule22
}, {
  start: 352,
  length: 1,
  convRule: rule21
}, {
  start: 353,
  length: 1,
  convRule: rule22
}, {
  start: 354,
  length: 1,
  convRule: rule21
}, {
  start: 355,
  length: 1,
  convRule: rule22
}, {
  start: 356,
  length: 1,
  convRule: rule21
}, {
  start: 357,
  length: 1,
  convRule: rule22
}, {
  start: 358,
  length: 1,
  convRule: rule21
}, {
  start: 359,
  length: 1,
  convRule: rule22
}, {
  start: 360,
  length: 1,
  convRule: rule21
}, {
  start: 361,
  length: 1,
  convRule: rule22
}, {
  start: 362,
  length: 1,
  convRule: rule21
}, {
  start: 363,
  length: 1,
  convRule: rule22
}, {
  start: 364,
  length: 1,
  convRule: rule21
}, {
  start: 365,
  length: 1,
  convRule: rule22
}, {
  start: 366,
  length: 1,
  convRule: rule21
}, {
  start: 367,
  length: 1,
  convRule: rule22
}, {
  start: 368,
  length: 1,
  convRule: rule21
}, {
  start: 369,
  length: 1,
  convRule: rule22
}, {
  start: 370,
  length: 1,
  convRule: rule21
}, {
  start: 371,
  length: 1,
  convRule: rule22
}, {
  start: 372,
  length: 1,
  convRule: rule21
}, {
  start: 373,
  length: 1,
  convRule: rule22
}, {
  start: 374,
  length: 1,
  convRule: rule21
}, {
  start: 375,
  length: 1,
  convRule: rule22
}, {
  start: 376,
  length: 1,
  convRule: rule25
}, {
  start: 377,
  length: 1,
  convRule: rule21
}, {
  start: 378,
  length: 1,
  convRule: rule22
}, {
  start: 379,
  length: 1,
  convRule: rule21
}, {
  start: 380,
  length: 1,
  convRule: rule22
}, {
  start: 381,
  length: 1,
  convRule: rule21
}, {
  start: 382,
  length: 1,
  convRule: rule22
}, {
  start: 383,
  length: 1,
  convRule: rule26
}, {
  start: 384,
  length: 1,
  convRule: rule27
}, {
  start: 385,
  length: 1,
  convRule: rule28
}, {
  start: 386,
  length: 1,
  convRule: rule21
}, {
  start: 387,
  length: 1,
  convRule: rule22
}, {
  start: 388,
  length: 1,
  convRule: rule21
}, {
  start: 389,
  length: 1,
  convRule: rule22
}, {
  start: 390,
  length: 1,
  convRule: rule29
}, {
  start: 391,
  length: 1,
  convRule: rule21
}, {
  start: 392,
  length: 1,
  convRule: rule22
}, {
  start: 393,
  length: 2,
  convRule: rule30
}, {
  start: 395,
  length: 1,
  convRule: rule21
}, {
  start: 396,
  length: 1,
  convRule: rule22
}, {
  start: 397,
  length: 1,
  convRule: rule14
}, {
  start: 398,
  length: 1,
  convRule: rule31
}, {
  start: 399,
  length: 1,
  convRule: rule32
}, {
  start: 400,
  length: 1,
  convRule: rule33
}, {
  start: 401,
  length: 1,
  convRule: rule21
}, {
  start: 402,
  length: 1,
  convRule: rule22
}, {
  start: 403,
  length: 1,
  convRule: rule30
}, {
  start: 404,
  length: 1,
  convRule: rule34
}, {
  start: 405,
  length: 1,
  convRule: rule35
}, {
  start: 406,
  length: 1,
  convRule: rule36
}, {
  start: 407,
  length: 1,
  convRule: rule37
}, {
  start: 408,
  length: 1,
  convRule: rule21
}, {
  start: 409,
  length: 1,
  convRule: rule22
}, {
  start: 410,
  length: 1,
  convRule: rule38
}, {
  start: 411,
  length: 1,
  convRule: rule14
}, {
  start: 412,
  length: 1,
  convRule: rule36
}, {
  start: 413,
  length: 1,
  convRule: rule39
}, {
  start: 414,
  length: 1,
  convRule: rule40
}, {
  start: 415,
  length: 1,
  convRule: rule41
}, {
  start: 416,
  length: 1,
  convRule: rule21
}, {
  start: 417,
  length: 1,
  convRule: rule22
}, {
  start: 418,
  length: 1,
  convRule: rule21
}, {
  start: 419,
  length: 1,
  convRule: rule22
}, {
  start: 420,
  length: 1,
  convRule: rule21
}, {
  start: 421,
  length: 1,
  convRule: rule22
}, {
  start: 422,
  length: 1,
  convRule: rule42
}, {
  start: 423,
  length: 1,
  convRule: rule21
}, {
  start: 424,
  length: 1,
  convRule: rule22
}, {
  start: 425,
  length: 1,
  convRule: rule42
}, {
  start: 426,
  length: 2,
  convRule: rule14
}, {
  start: 428,
  length: 1,
  convRule: rule21
}, {
  start: 429,
  length: 1,
  convRule: rule22
}, {
  start: 430,
  length: 1,
  convRule: rule42
}, {
  start: 431,
  length: 1,
  convRule: rule21
}, {
  start: 432,
  length: 1,
  convRule: rule22
}, {
  start: 433,
  length: 2,
  convRule: rule43
}, {
  start: 435,
  length: 1,
  convRule: rule21
}, {
  start: 436,
  length: 1,
  convRule: rule22
}, {
  start: 437,
  length: 1,
  convRule: rule21
}, {
  start: 438,
  length: 1,
  convRule: rule22
}, {
  start: 439,
  length: 1,
  convRule: rule44
}, {
  start: 440,
  length: 1,
  convRule: rule21
}, {
  start: 441,
  length: 1,
  convRule: rule22
}, {
  start: 442,
  length: 1,
  convRule: rule14
}, {
  start: 443,
  length: 1,
  convRule: rule45
}, {
  start: 444,
  length: 1,
  convRule: rule21
}, {
  start: 445,
  length: 1,
  convRule: rule22
}, {
  start: 446,
  length: 1,
  convRule: rule14
}, {
  start: 447,
  length: 1,
  convRule: rule46
}, {
  start: 448,
  length: 4,
  convRule: rule45
}, {
  start: 452,
  length: 1,
  convRule: rule47
}, {
  start: 453,
  length: 1,
  convRule: rule48
}, {
  start: 454,
  length: 1,
  convRule: rule49
}, {
  start: 455,
  length: 1,
  convRule: rule47
}, {
  start: 456,
  length: 1,
  convRule: rule48
}, {
  start: 457,
  length: 1,
  convRule: rule49
}, {
  start: 458,
  length: 1,
  convRule: rule47
}, {
  start: 459,
  length: 1,
  convRule: rule48
}, {
  start: 460,
  length: 1,
  convRule: rule49
}, {
  start: 461,
  length: 1,
  convRule: rule21
}, {
  start: 462,
  length: 1,
  convRule: rule22
}, {
  start: 463,
  length: 1,
  convRule: rule21
}, {
  start: 464,
  length: 1,
  convRule: rule22
}, {
  start: 465,
  length: 1,
  convRule: rule21
}, {
  start: 466,
  length: 1,
  convRule: rule22
}, {
  start: 467,
  length: 1,
  convRule: rule21
}, {
  start: 468,
  length: 1,
  convRule: rule22
}, {
  start: 469,
  length: 1,
  convRule: rule21
}, {
  start: 470,
  length: 1,
  convRule: rule22
}, {
  start: 471,
  length: 1,
  convRule: rule21
}, {
  start: 472,
  length: 1,
  convRule: rule22
}, {
  start: 473,
  length: 1,
  convRule: rule21
}, {
  start: 474,
  length: 1,
  convRule: rule22
}, {
  start: 475,
  length: 1,
  convRule: rule21
}, {
  start: 476,
  length: 1,
  convRule: rule22
}, {
  start: 477,
  length: 1,
  convRule: rule50
}, {
  start: 478,
  length: 1,
  convRule: rule21
}, {
  start: 479,
  length: 1,
  convRule: rule22
}, {
  start: 480,
  length: 1,
  convRule: rule21
}, {
  start: 481,
  length: 1,
  convRule: rule22
}, {
  start: 482,
  length: 1,
  convRule: rule21
}, {
  start: 483,
  length: 1,
  convRule: rule22
}, {
  start: 484,
  length: 1,
  convRule: rule21
}, {
  start: 485,
  length: 1,
  convRule: rule22
}, {
  start: 486,
  length: 1,
  convRule: rule21
}, {
  start: 487,
  length: 1,
  convRule: rule22
}, {
  start: 488,
  length: 1,
  convRule: rule21
}, {
  start: 489,
  length: 1,
  convRule: rule22
}, {
  start: 490,
  length: 1,
  convRule: rule21
}, {
  start: 491,
  length: 1,
  convRule: rule22
}, {
  start: 492,
  length: 1,
  convRule: rule21
}, {
  start: 493,
  length: 1,
  convRule: rule22
}, {
  start: 494,
  length: 1,
  convRule: rule21
}, {
  start: 495,
  length: 1,
  convRule: rule22
}, {
  start: 496,
  length: 1,
  convRule: rule14
}, {
  start: 497,
  length: 1,
  convRule: rule47
}, {
  start: 498,
  length: 1,
  convRule: rule48
}, {
  start: 499,
  length: 1,
  convRule: rule49
}, {
  start: 500,
  length: 1,
  convRule: rule21
}, {
  start: 501,
  length: 1,
  convRule: rule22
}, {
  start: 502,
  length: 1,
  convRule: rule51
}, {
  start: 503,
  length: 1,
  convRule: rule52
}, {
  start: 504,
  length: 1,
  convRule: rule21
}, {
  start: 505,
  length: 1,
  convRule: rule22
}, {
  start: 506,
  length: 1,
  convRule: rule21
}, {
  start: 507,
  length: 1,
  convRule: rule22
}, {
  start: 508,
  length: 1,
  convRule: rule21
}, {
  start: 509,
  length: 1,
  convRule: rule22
}, {
  start: 510,
  length: 1,
  convRule: rule21
}, {
  start: 511,
  length: 1,
  convRule: rule22
}, {
  start: 512,
  length: 1,
  convRule: rule21
}, {
  start: 513,
  length: 1,
  convRule: rule22
}, {
  start: 514,
  length: 1,
  convRule: rule21
}, {
  start: 515,
  length: 1,
  convRule: rule22
}, {
  start: 516,
  length: 1,
  convRule: rule21
}, {
  start: 517,
  length: 1,
  convRule: rule22
}, {
  start: 518,
  length: 1,
  convRule: rule21
}, {
  start: 519,
  length: 1,
  convRule: rule22
}, {
  start: 520,
  length: 1,
  convRule: rule21
}, {
  start: 521,
  length: 1,
  convRule: rule22
}, {
  start: 522,
  length: 1,
  convRule: rule21
}, {
  start: 523,
  length: 1,
  convRule: rule22
}, {
  start: 524,
  length: 1,
  convRule: rule21
}, {
  start: 525,
  length: 1,
  convRule: rule22
}, {
  start: 526,
  length: 1,
  convRule: rule21
}, {
  start: 527,
  length: 1,
  convRule: rule22
}, {
  start: 528,
  length: 1,
  convRule: rule21
}, {
  start: 529,
  length: 1,
  convRule: rule22
}, {
  start: 530,
  length: 1,
  convRule: rule21
}, {
  start: 531,
  length: 1,
  convRule: rule22
}, {
  start: 532,
  length: 1,
  convRule: rule21
}, {
  start: 533,
  length: 1,
  convRule: rule22
}, {
  start: 534,
  length: 1,
  convRule: rule21
}, {
  start: 535,
  length: 1,
  convRule: rule22
}, {
  start: 536,
  length: 1,
  convRule: rule21
}, {
  start: 537,
  length: 1,
  convRule: rule22
}, {
  start: 538,
  length: 1,
  convRule: rule21
}, {
  start: 539,
  length: 1,
  convRule: rule22
}, {
  start: 540,
  length: 1,
  convRule: rule21
}, {
  start: 541,
  length: 1,
  convRule: rule22
}, {
  start: 542,
  length: 1,
  convRule: rule21
}, {
  start: 543,
  length: 1,
  convRule: rule22
}, {
  start: 544,
  length: 1,
  convRule: rule53
}, {
  start: 545,
  length: 1,
  convRule: rule14
}, {
  start: 546,
  length: 1,
  convRule: rule21
}, {
  start: 547,
  length: 1,
  convRule: rule22
}, {
  start: 548,
  length: 1,
  convRule: rule21
}, {
  start: 549,
  length: 1,
  convRule: rule22
}, {
  start: 550,
  length: 1,
  convRule: rule21
}, {
  start: 551,
  length: 1,
  convRule: rule22
}, {
  start: 552,
  length: 1,
  convRule: rule21
}, {
  start: 553,
  length: 1,
  convRule: rule22
}, {
  start: 554,
  length: 1,
  convRule: rule21
}, {
  start: 555,
  length: 1,
  convRule: rule22
}, {
  start: 556,
  length: 1,
  convRule: rule21
}, {
  start: 557,
  length: 1,
  convRule: rule22
}, {
  start: 558,
  length: 1,
  convRule: rule21
}, {
  start: 559,
  length: 1,
  convRule: rule22
}, {
  start: 560,
  length: 1,
  convRule: rule21
}, {
  start: 561,
  length: 1,
  convRule: rule22
}, {
  start: 562,
  length: 1,
  convRule: rule21
}, {
  start: 563,
  length: 1,
  convRule: rule22
}, {
  start: 564,
  length: 6,
  convRule: rule14
}, {
  start: 570,
  length: 1,
  convRule: rule54
}, {
  start: 571,
  length: 1,
  convRule: rule21
}, {
  start: 572,
  length: 1,
  convRule: rule22
}, {
  start: 573,
  length: 1,
  convRule: rule55
}, {
  start: 574,
  length: 1,
  convRule: rule56
}, {
  start: 575,
  length: 2,
  convRule: rule57
}, {
  start: 577,
  length: 1,
  convRule: rule21
}, {
  start: 578,
  length: 1,
  convRule: rule22
}, {
  start: 579,
  length: 1,
  convRule: rule58
}, {
  start: 580,
  length: 1,
  convRule: rule59
}, {
  start: 581,
  length: 1,
  convRule: rule60
}, {
  start: 582,
  length: 1,
  convRule: rule21
}, {
  start: 583,
  length: 1,
  convRule: rule22
}, {
  start: 584,
  length: 1,
  convRule: rule21
}, {
  start: 585,
  length: 1,
  convRule: rule22
}, {
  start: 586,
  length: 1,
  convRule: rule21
}, {
  start: 587,
  length: 1,
  convRule: rule22
}, {
  start: 588,
  length: 1,
  convRule: rule21
}, {
  start: 589,
  length: 1,
  convRule: rule22
}, {
  start: 590,
  length: 1,
  convRule: rule21
}, {
  start: 591,
  length: 1,
  convRule: rule22
}, {
  start: 592,
  length: 1,
  convRule: rule61
}, {
  start: 593,
  length: 1,
  convRule: rule62
}, {
  start: 594,
  length: 1,
  convRule: rule63
}, {
  start: 595,
  length: 1,
  convRule: rule64
}, {
  start: 596,
  length: 1,
  convRule: rule65
}, {
  start: 597,
  length: 1,
  convRule: rule14
}, {
  start: 598,
  length: 2,
  convRule: rule66
}, {
  start: 600,
  length: 1,
  convRule: rule14
}, {
  start: 601,
  length: 1,
  convRule: rule67
}, {
  start: 602,
  length: 1,
  convRule: rule14
}, {
  start: 603,
  length: 1,
  convRule: rule68
}, {
  start: 604,
  length: 4,
  convRule: rule14
}, {
  start: 608,
  length: 1,
  convRule: rule66
}, {
  start: 609,
  length: 2,
  convRule: rule14
}, {
  start: 611,
  length: 1,
  convRule: rule69
}, {
  start: 612,
  length: 1,
  convRule: rule14
}, {
  start: 613,
  length: 1,
  convRule: rule70
}, {
  start: 614,
  length: 2,
  convRule: rule14
}, {
  start: 616,
  length: 1,
  convRule: rule71
}, {
  start: 617,
  length: 1,
  convRule: rule72
}, {
  start: 618,
  length: 1,
  convRule: rule14
}, {
  start: 619,
  length: 1,
  convRule: rule73
}, {
  start: 620,
  length: 3,
  convRule: rule14
}, {
  start: 623,
  length: 1,
  convRule: rule72
}, {
  start: 624,
  length: 1,
  convRule: rule14
}, {
  start: 625,
  length: 1,
  convRule: rule74
}, {
  start: 626,
  length: 1,
  convRule: rule75
}, {
  start: 627,
  length: 2,
  convRule: rule14
}, {
  start: 629,
  length: 1,
  convRule: rule76
}, {
  start: 630,
  length: 7,
  convRule: rule14
}, {
  start: 637,
  length: 1,
  convRule: rule77
}, {
  start: 638,
  length: 2,
  convRule: rule14
}, {
  start: 640,
  length: 1,
  convRule: rule78
}, {
  start: 641,
  length: 2,
  convRule: rule14
}, {
  start: 643,
  length: 1,
  convRule: rule78
}, {
  start: 644,
  length: 4,
  convRule: rule14
}, {
  start: 648,
  length: 1,
  convRule: rule78
}, {
  start: 649,
  length: 1,
  convRule: rule79
}, {
  start: 650,
  length: 2,
  convRule: rule80
}, {
  start: 652,
  length: 1,
  convRule: rule81
}, {
  start: 653,
  length: 5,
  convRule: rule14
}, {
  start: 658,
  length: 1,
  convRule: rule82
}, {
  start: 659,
  length: 1,
  convRule: rule14
}, {
  start: 660,
  length: 1,
  convRule: rule45
}, {
  start: 661,
  length: 27,
  convRule: rule14
}, {
  start: 688,
  length: 18,
  convRule: rule83
}, {
  start: 706,
  length: 4,
  convRule: rule10
}, {
  start: 710,
  length: 12,
  convRule: rule83
}, {
  start: 722,
  length: 14,
  convRule: rule10
}, {
  start: 736,
  length: 5,
  convRule: rule83
}, {
  start: 741,
  length: 7,
  convRule: rule10
}, {
  start: 748,
  length: 1,
  convRule: rule83
}, {
  start: 749,
  length: 1,
  convRule: rule10
}, {
  start: 750,
  length: 1,
  convRule: rule83
}, {
  start: 751,
  length: 17,
  convRule: rule10
}, {
  start: 768,
  length: 69,
  convRule: rule84
}, {
  start: 837,
  length: 1,
  convRule: rule85
}, {
  start: 838,
  length: 42,
  convRule: rule84
}, {
  start: 880,
  length: 1,
  convRule: rule21
}, {
  start: 881,
  length: 1,
  convRule: rule22
}, {
  start: 882,
  length: 1,
  convRule: rule21
}, {
  start: 883,
  length: 1,
  convRule: rule22
}, {
  start: 884,
  length: 1,
  convRule: rule83
}, {
  start: 885,
  length: 1,
  convRule: rule10
}, {
  start: 886,
  length: 1,
  convRule: rule21
}, {
  start: 887,
  length: 1,
  convRule: rule22
}, {
  start: 890,
  length: 1,
  convRule: rule83
}, {
  start: 891,
  length: 3,
  convRule: rule40
}, {
  start: 894,
  length: 1,
  convRule: rule2
}, {
  start: 900,
  length: 2,
  convRule: rule10
}, {
  start: 902,
  length: 1,
  convRule: rule86
}, {
  start: 903,
  length: 1,
  convRule: rule2
}, {
  start: 904,
  length: 3,
  convRule: rule87
}, {
  start: 908,
  length: 1,
  convRule: rule88
}, {
  start: 910,
  length: 2,
  convRule: rule89
}, {
  start: 912,
  length: 1,
  convRule: rule14
}, {
  start: 913,
  length: 17,
  convRule: rule9
}, {
  start: 931,
  length: 9,
  convRule: rule9
}, {
  start: 940,
  length: 1,
  convRule: rule90
}, {
  start: 941,
  length: 3,
  convRule: rule91
}, {
  start: 944,
  length: 1,
  convRule: rule14
}, {
  start: 945,
  length: 17,
  convRule: rule12
}, {
  start: 962,
  length: 1,
  convRule: rule92
}, {
  start: 963,
  length: 9,
  convRule: rule12
}, {
  start: 972,
  length: 1,
  convRule: rule93
}, {
  start: 973,
  length: 2,
  convRule: rule94
}, {
  start: 975,
  length: 1,
  convRule: rule95
}, {
  start: 976,
  length: 1,
  convRule: rule96
}, {
  start: 977,
  length: 1,
  convRule: rule97
}, {
  start: 978,
  length: 3,
  convRule: rule98
}, {
  start: 981,
  length: 1,
  convRule: rule99
}, {
  start: 982,
  length: 1,
  convRule: rule100
}, {
  start: 983,
  length: 1,
  convRule: rule101
}, {
  start: 984,
  length: 1,
  convRule: rule21
}, {
  start: 985,
  length: 1,
  convRule: rule22
}, {
  start: 986,
  length: 1,
  convRule: rule21
}, {
  start: 987,
  length: 1,
  convRule: rule22
}, {
  start: 988,
  length: 1,
  convRule: rule21
}, {
  start: 989,
  length: 1,
  convRule: rule22
}, {
  start: 990,
  length: 1,
  convRule: rule21
}, {
  start: 991,
  length: 1,
  convRule: rule22
}, {
  start: 992,
  length: 1,
  convRule: rule21
}, {
  start: 993,
  length: 1,
  convRule: rule22
}, {
  start: 994,
  length: 1,
  convRule: rule21
}, {
  start: 995,
  length: 1,
  convRule: rule22
}, {
  start: 996,
  length: 1,
  convRule: rule21
}, {
  start: 997,
  length: 1,
  convRule: rule22
}, {
  start: 998,
  length: 1,
  convRule: rule21
}, {
  start: 999,
  length: 1,
  convRule: rule22
}, {
  start: 1000,
  length: 1,
  convRule: rule21
}, {
  start: 1001,
  length: 1,
  convRule: rule22
}, {
  start: 1002,
  length: 1,
  convRule: rule21
}, {
  start: 1003,
  length: 1,
  convRule: rule22
}, {
  start: 1004,
  length: 1,
  convRule: rule21
}, {
  start: 1005,
  length: 1,
  convRule: rule22
}, {
  start: 1006,
  length: 1,
  convRule: rule21
}, {
  start: 1007,
  length: 1,
  convRule: rule22
}, {
  start: 1008,
  length: 1,
  convRule: rule102
}, {
  start: 1009,
  length: 1,
  convRule: rule103
}, {
  start: 1010,
  length: 1,
  convRule: rule104
}, {
  start: 1011,
  length: 1,
  convRule: rule14
}, {
  start: 1012,
  length: 1,
  convRule: rule105
}, {
  start: 1013,
  length: 1,
  convRule: rule106
}, {
  start: 1014,
  length: 1,
  convRule: rule6
}, {
  start: 1015,
  length: 1,
  convRule: rule21
}, {
  start: 1016,
  length: 1,
  convRule: rule22
}, {
  start: 1017,
  length: 1,
  convRule: rule107
}, {
  start: 1018,
  length: 1,
  convRule: rule21
}, {
  start: 1019,
  length: 1,
  convRule: rule22
}, {
  start: 1020,
  length: 1,
  convRule: rule14
}, {
  start: 1021,
  length: 3,
  convRule: rule53
}, {
  start: 1024,
  length: 16,
  convRule: rule108
}, {
  start: 1040,
  length: 32,
  convRule: rule9
}, {
  start: 1072,
  length: 32,
  convRule: rule12
}, {
  start: 1104,
  length: 16,
  convRule: rule103
}, {
  start: 1120,
  length: 1,
  convRule: rule21
}, {
  start: 1121,
  length: 1,
  convRule: rule22
}, {
  start: 1122,
  length: 1,
  convRule: rule21
}, {
  start: 1123,
  length: 1,
  convRule: rule22
}, {
  start: 1124,
  length: 1,
  convRule: rule21
}, {
  start: 1125,
  length: 1,
  convRule: rule22
}, {
  start: 1126,
  length: 1,
  convRule: rule21
}, {
  start: 1127,
  length: 1,
  convRule: rule22
}, {
  start: 1128,
  length: 1,
  convRule: rule21
}, {
  start: 1129,
  length: 1,
  convRule: rule22
}, {
  start: 1130,
  length: 1,
  convRule: rule21
}, {
  start: 1131,
  length: 1,
  convRule: rule22
}, {
  start: 1132,
  length: 1,
  convRule: rule21
}, {
  start: 1133,
  length: 1,
  convRule: rule22
}, {
  start: 1134,
  length: 1,
  convRule: rule21
}, {
  start: 1135,
  length: 1,
  convRule: rule22
}, {
  start: 1136,
  length: 1,
  convRule: rule21
}, {
  start: 1137,
  length: 1,
  convRule: rule22
}, {
  start: 1138,
  length: 1,
  convRule: rule21
}, {
  start: 1139,
  length: 1,
  convRule: rule22
}, {
  start: 1140,
  length: 1,
  convRule: rule21
}, {
  start: 1141,
  length: 1,
  convRule: rule22
}, {
  start: 1142,
  length: 1,
  convRule: rule21
}, {
  start: 1143,
  length: 1,
  convRule: rule22
}, {
  start: 1144,
  length: 1,
  convRule: rule21
}, {
  start: 1145,
  length: 1,
  convRule: rule22
}, {
  start: 1146,
  length: 1,
  convRule: rule21
}, {
  start: 1147,
  length: 1,
  convRule: rule22
}, {
  start: 1148,
  length: 1,
  convRule: rule21
}, {
  start: 1149,
  length: 1,
  convRule: rule22
}, {
  start: 1150,
  length: 1,
  convRule: rule21
}, {
  start: 1151,
  length: 1,
  convRule: rule22
}, {
  start: 1152,
  length: 1,
  convRule: rule21
}, {
  start: 1153,
  length: 1,
  convRule: rule22
}, {
  start: 1154,
  length: 1,
  convRule: rule13
}, {
  start: 1155,
  length: 5,
  convRule: rule84
}, {
  start: 1160,
  length: 2,
  convRule: rule109
}, {
  start: 1162,
  length: 1,
  convRule: rule21
}, {
  start: 1163,
  length: 1,
  convRule: rule22
}, {
  start: 1164,
  length: 1,
  convRule: rule21
}, {
  start: 1165,
  length: 1,
  convRule: rule22
}, {
  start: 1166,
  length: 1,
  convRule: rule21
}, {
  start: 1167,
  length: 1,
  convRule: rule22
}, {
  start: 1168,
  length: 1,
  convRule: rule21
}, {
  start: 1169,
  length: 1,
  convRule: rule22
}, {
  start: 1170,
  length: 1,
  convRule: rule21
}, {
  start: 1171,
  length: 1,
  convRule: rule22
}, {
  start: 1172,
  length: 1,
  convRule: rule21
}, {
  start: 1173,
  length: 1,
  convRule: rule22
}, {
  start: 1174,
  length: 1,
  convRule: rule21
}, {
  start: 1175,
  length: 1,
  convRule: rule22
}, {
  start: 1176,
  length: 1,
  convRule: rule21
}, {
  start: 1177,
  length: 1,
  convRule: rule22
}, {
  start: 1178,
  length: 1,
  convRule: rule21
}, {
  start: 1179,
  length: 1,
  convRule: rule22
}, {
  start: 1180,
  length: 1,
  convRule: rule21
}, {
  start: 1181,
  length: 1,
  convRule: rule22
}, {
  start: 1182,
  length: 1,
  convRule: rule21
}, {
  start: 1183,
  length: 1,
  convRule: rule22
}, {
  start: 1184,
  length: 1,
  convRule: rule21
}, {
  start: 1185,
  length: 1,
  convRule: rule22
}, {
  start: 1186,
  length: 1,
  convRule: rule21
}, {
  start: 1187,
  length: 1,
  convRule: rule22
}, {
  start: 1188,
  length: 1,
  convRule: rule21
}, {
  start: 1189,
  length: 1,
  convRule: rule22
}, {
  start: 1190,
  length: 1,
  convRule: rule21
}, {
  start: 1191,
  length: 1,
  convRule: rule22
}, {
  start: 1192,
  length: 1,
  convRule: rule21
}, {
  start: 1193,
  length: 1,
  convRule: rule22
}, {
  start: 1194,
  length: 1,
  convRule: rule21
}, {
  start: 1195,
  length: 1,
  convRule: rule22
}, {
  start: 1196,
  length: 1,
  convRule: rule21
}, {
  start: 1197,
  length: 1,
  convRule: rule22
}, {
  start: 1198,
  length: 1,
  convRule: rule21
}, {
  start: 1199,
  length: 1,
  convRule: rule22
}, {
  start: 1200,
  length: 1,
  convRule: rule21
}, {
  start: 1201,
  length: 1,
  convRule: rule22
}, {
  start: 1202,
  length: 1,
  convRule: rule21
}, {
  start: 1203,
  length: 1,
  convRule: rule22
}, {
  start: 1204,
  length: 1,
  convRule: rule21
}, {
  start: 1205,
  length: 1,
  convRule: rule22
}, {
  start: 1206,
  length: 1,
  convRule: rule21
}, {
  start: 1207,
  length: 1,
  convRule: rule22
}, {
  start: 1208,
  length: 1,
  convRule: rule21
}, {
  start: 1209,
  length: 1,
  convRule: rule22
}, {
  start: 1210,
  length: 1,
  convRule: rule21
}, {
  start: 1211,
  length: 1,
  convRule: rule22
}, {
  start: 1212,
  length: 1,
  convRule: rule21
}, {
  start: 1213,
  length: 1,
  convRule: rule22
}, {
  start: 1214,
  length: 1,
  convRule: rule21
}, {
  start: 1215,
  length: 1,
  convRule: rule22
}, {
  start: 1216,
  length: 1,
  convRule: rule110
}, {
  start: 1217,
  length: 1,
  convRule: rule21
}, {
  start: 1218,
  length: 1,
  convRule: rule22
}, {
  start: 1219,
  length: 1,
  convRule: rule21
}, {
  start: 1220,
  length: 1,
  convRule: rule22
}, {
  start: 1221,
  length: 1,
  convRule: rule21
}, {
  start: 1222,
  length: 1,
  convRule: rule22
}, {
  start: 1223,
  length: 1,
  convRule: rule21
}, {
  start: 1224,
  length: 1,
  convRule: rule22
}, {
  start: 1225,
  length: 1,
  convRule: rule21
}, {
  start: 1226,
  length: 1,
  convRule: rule22
}, {
  start: 1227,
  length: 1,
  convRule: rule21
}, {
  start: 1228,
  length: 1,
  convRule: rule22
}, {
  start: 1229,
  length: 1,
  convRule: rule21
}, {
  start: 1230,
  length: 1,
  convRule: rule22
}, {
  start: 1231,
  length: 1,
  convRule: rule111
}, {
  start: 1232,
  length: 1,
  convRule: rule21
}, {
  start: 1233,
  length: 1,
  convRule: rule22
}, {
  start: 1234,
  length: 1,
  convRule: rule21
}, {
  start: 1235,
  length: 1,
  convRule: rule22
}, {
  start: 1236,
  length: 1,
  convRule: rule21
}, {
  start: 1237,
  length: 1,
  convRule: rule22
}, {
  start: 1238,
  length: 1,
  convRule: rule21
}, {
  start: 1239,
  length: 1,
  convRule: rule22
}, {
  start: 1240,
  length: 1,
  convRule: rule21
}, {
  start: 1241,
  length: 1,
  convRule: rule22
}, {
  start: 1242,
  length: 1,
  convRule: rule21
}, {
  start: 1243,
  length: 1,
  convRule: rule22
}, {
  start: 1244,
  length: 1,
  convRule: rule21
}, {
  start: 1245,
  length: 1,
  convRule: rule22
}, {
  start: 1246,
  length: 1,
  convRule: rule21
}, {
  start: 1247,
  length: 1,
  convRule: rule22
}, {
  start: 1248,
  length: 1,
  convRule: rule21
}, {
  start: 1249,
  length: 1,
  convRule: rule22
}, {
  start: 1250,
  length: 1,
  convRule: rule21
}, {
  start: 1251,
  length: 1,
  convRule: rule22
}, {
  start: 1252,
  length: 1,
  convRule: rule21
}, {
  start: 1253,
  length: 1,
  convRule: rule22
}, {
  start: 1254,
  length: 1,
  convRule: rule21
}, {
  start: 1255,
  length: 1,
  convRule: rule22
}, {
  start: 1256,
  length: 1,
  convRule: rule21
}, {
  start: 1257,
  length: 1,
  convRule: rule22
}, {
  start: 1258,
  length: 1,
  convRule: rule21
}, {
  start: 1259,
  length: 1,
  convRule: rule22
}, {
  start: 1260,
  length: 1,
  convRule: rule21
}, {
  start: 1261,
  length: 1,
  convRule: rule22
}, {
  start: 1262,
  length: 1,
  convRule: rule21
}, {
  start: 1263,
  length: 1,
  convRule: rule22
}, {
  start: 1264,
  length: 1,
  convRule: rule21
}, {
  start: 1265,
  length: 1,
  convRule: rule22
}, {
  start: 1266,
  length: 1,
  convRule: rule21
}, {
  start: 1267,
  length: 1,
  convRule: rule22
}, {
  start: 1268,
  length: 1,
  convRule: rule21
}, {
  start: 1269,
  length: 1,
  convRule: rule22
}, {
  start: 1270,
  length: 1,
  convRule: rule21
}, {
  start: 1271,
  length: 1,
  convRule: rule22
}, {
  start: 1272,
  length: 1,
  convRule: rule21
}, {
  start: 1273,
  length: 1,
  convRule: rule22
}, {
  start: 1274,
  length: 1,
  convRule: rule21
}, {
  start: 1275,
  length: 1,
  convRule: rule22
}, {
  start: 1276,
  length: 1,
  convRule: rule21
}, {
  start: 1277,
  length: 1,
  convRule: rule22
}, {
  start: 1278,
  length: 1,
  convRule: rule21
}, {
  start: 1279,
  length: 1,
  convRule: rule22
}, {
  start: 1280,
  length: 1,
  convRule: rule21
}, {
  start: 1281,
  length: 1,
  convRule: rule22
}, {
  start: 1282,
  length: 1,
  convRule: rule21
}, {
  start: 1283,
  length: 1,
  convRule: rule22
}, {
  start: 1284,
  length: 1,
  convRule: rule21
}, {
  start: 1285,
  length: 1,
  convRule: rule22
}, {
  start: 1286,
  length: 1,
  convRule: rule21
}, {
  start: 1287,
  length: 1,
  convRule: rule22
}, {
  start: 1288,
  length: 1,
  convRule: rule21
}, {
  start: 1289,
  length: 1,
  convRule: rule22
}, {
  start: 1290,
  length: 1,
  convRule: rule21
}, {
  start: 1291,
  length: 1,
  convRule: rule22
}, {
  start: 1292,
  length: 1,
  convRule: rule21
}, {
  start: 1293,
  length: 1,
  convRule: rule22
}, {
  start: 1294,
  length: 1,
  convRule: rule21
}, {
  start: 1295,
  length: 1,
  convRule: rule22
}, {
  start: 1296,
  length: 1,
  convRule: rule21
}, {
  start: 1297,
  length: 1,
  convRule: rule22
}, {
  start: 1298,
  length: 1,
  convRule: rule21
}, {
  start: 1299,
  length: 1,
  convRule: rule22
}, {
  start: 1300,
  length: 1,
  convRule: rule21
}, {
  start: 1301,
  length: 1,
  convRule: rule22
}, {
  start: 1302,
  length: 1,
  convRule: rule21
}, {
  start: 1303,
  length: 1,
  convRule: rule22
}, {
  start: 1304,
  length: 1,
  convRule: rule21
}, {
  start: 1305,
  length: 1,
  convRule: rule22
}, {
  start: 1306,
  length: 1,
  convRule: rule21
}, {
  start: 1307,
  length: 1,
  convRule: rule22
}, {
  start: 1308,
  length: 1,
  convRule: rule21
}, {
  start: 1309,
  length: 1,
  convRule: rule22
}, {
  start: 1310,
  length: 1,
  convRule: rule21
}, {
  start: 1311,
  length: 1,
  convRule: rule22
}, {
  start: 1312,
  length: 1,
  convRule: rule21
}, {
  start: 1313,
  length: 1,
  convRule: rule22
}, {
  start: 1314,
  length: 1,
  convRule: rule21
}, {
  start: 1315,
  length: 1,
  convRule: rule22
}, {
  start: 1316,
  length: 1,
  convRule: rule21
}, {
  start: 1317,
  length: 1,
  convRule: rule22
}, {
  start: 1318,
  length: 1,
  convRule: rule21
}, {
  start: 1319,
  length: 1,
  convRule: rule22
}, {
  start: 1329,
  length: 38,
  convRule: rule112
}, {
  start: 1369,
  length: 1,
  convRule: rule83
}, {
  start: 1370,
  length: 6,
  convRule: rule2
}, {
  start: 1377,
  length: 38,
  convRule: rule113
}, {
  start: 1415,
  length: 1,
  convRule: rule14
}, {
  start: 1417,
  length: 1,
  convRule: rule2
}, {
  start: 1418,
  length: 1,
  convRule: rule7
}, {
  start: 1425,
  length: 45,
  convRule: rule84
}, {
  start: 1470,
  length: 1,
  convRule: rule7
}, {
  start: 1471,
  length: 1,
  convRule: rule84
}, {
  start: 1472,
  length: 1,
  convRule: rule2
}, {
  start: 1473,
  length: 2,
  convRule: rule84
}, {
  start: 1475,
  length: 1,
  convRule: rule2
}, {
  start: 1476,
  length: 2,
  convRule: rule84
}, {
  start: 1478,
  length: 1,
  convRule: rule2
}, {
  start: 1479,
  length: 1,
  convRule: rule84
}, {
  start: 1488,
  length: 27,
  convRule: rule45
}, {
  start: 1520,
  length: 3,
  convRule: rule45
}, {
  start: 1523,
  length: 2,
  convRule: rule2
}, {
  start: 1536,
  length: 4,
  convRule: rule16
}, {
  start: 1542,
  length: 3,
  convRule: rule6
}, {
  start: 1545,
  length: 2,
  convRule: rule2
}, {
  start: 1547,
  length: 1,
  convRule: rule3
}, {
  start: 1548,
  length: 2,
  convRule: rule2
}, {
  start: 1550,
  length: 2,
  convRule: rule13
}, {
  start: 1552,
  length: 11,
  convRule: rule84
}, {
  start: 1563,
  length: 1,
  convRule: rule2
}, {
  start: 1566,
  length: 2,
  convRule: rule2
}, {
  start: 1568,
  length: 32,
  convRule: rule45
}, {
  start: 1600,
  length: 1,
  convRule: rule83
}, {
  start: 1601,
  length: 10,
  convRule: rule45
}, {
  start: 1611,
  length: 21,
  convRule: rule84
}, {
  start: 1632,
  length: 10,
  convRule: rule8
}, {
  start: 1642,
  length: 4,
  convRule: rule2
}, {
  start: 1646,
  length: 2,
  convRule: rule45
}, {
  start: 1648,
  length: 1,
  convRule: rule84
}, {
  start: 1649,
  length: 99,
  convRule: rule45
}, {
  start: 1748,
  length: 1,
  convRule: rule2
}, {
  start: 1749,
  length: 1,
  convRule: rule45
}, {
  start: 1750,
  length: 7,
  convRule: rule84
}, {
  start: 1757,
  length: 1,
  convRule: rule16
}, {
  start: 1758,
  length: 1,
  convRule: rule13
}, {
  start: 1759,
  length: 6,
  convRule: rule84
}, {
  start: 1765,
  length: 2,
  convRule: rule83
}, {
  start: 1767,
  length: 2,
  convRule: rule84
}, {
  start: 1769,
  length: 1,
  convRule: rule13
}, {
  start: 1770,
  length: 4,
  convRule: rule84
}, {
  start: 1774,
  length: 2,
  convRule: rule45
}, {
  start: 1776,
  length: 10,
  convRule: rule8
}, {
  start: 1786,
  length: 3,
  convRule: rule45
}, {
  start: 1789,
  length: 2,
  convRule: rule13
}, {
  start: 1791,
  length: 1,
  convRule: rule45
}, {
  start: 1792,
  length: 14,
  convRule: rule2
}, {
  start: 1807,
  length: 1,
  convRule: rule16
}, {
  start: 1808,
  length: 1,
  convRule: rule45
}, {
  start: 1809,
  length: 1,
  convRule: rule84
}, {
  start: 1810,
  length: 30,
  convRule: rule45
}, {
  start: 1840,
  length: 27,
  convRule: rule84
}, {
  start: 1869,
  length: 89,
  convRule: rule45
}, {
  start: 1958,
  length: 11,
  convRule: rule84
}, {
  start: 1969,
  length: 1,
  convRule: rule45
}, {
  start: 1984,
  length: 10,
  convRule: rule8
}, {
  start: 1994,
  length: 33,
  convRule: rule45
}, {
  start: 2027,
  length: 9,
  convRule: rule84
}, {
  start: 2036,
  length: 2,
  convRule: rule83
}, {
  start: 2038,
  length: 1,
  convRule: rule13
}, {
  start: 2039,
  length: 3,
  convRule: rule2
}, {
  start: 2042,
  length: 1,
  convRule: rule83
}, {
  start: 2048,
  length: 22,
  convRule: rule45
}, {
  start: 2070,
  length: 4,
  convRule: rule84
}, {
  start: 2074,
  length: 1,
  convRule: rule83
}, {
  start: 2075,
  length: 9,
  convRule: rule84
}, {
  start: 2084,
  length: 1,
  convRule: rule83
}, {
  start: 2085,
  length: 3,
  convRule: rule84
}, {
  start: 2088,
  length: 1,
  convRule: rule83
}, {
  start: 2089,
  length: 5,
  convRule: rule84
}, {
  start: 2096,
  length: 15,
  convRule: rule2
}, {
  start: 2112,
  length: 25,
  convRule: rule45
}, {
  start: 2137,
  length: 3,
  convRule: rule84
}, {
  start: 2142,
  length: 1,
  convRule: rule2
}, {
  start: 2304,
  length: 3,
  convRule: rule84
}, {
  start: 2307,
  length: 1,
  convRule: rule114
}, {
  start: 2308,
  length: 54,
  convRule: rule45
}, {
  start: 2362,
  length: 1,
  convRule: rule84
}, {
  start: 2363,
  length: 1,
  convRule: rule114
}, {
  start: 2364,
  length: 1,
  convRule: rule84
}, {
  start: 2365,
  length: 1,
  convRule: rule45
}, {
  start: 2366,
  length: 3,
  convRule: rule114
}, {
  start: 2369,
  length: 8,
  convRule: rule84
}, {
  start: 2377,
  length: 4,
  convRule: rule114
}, {
  start: 2381,
  length: 1,
  convRule: rule84
}, {
  start: 2382,
  length: 2,
  convRule: rule114
}, {
  start: 2384,
  length: 1,
  convRule: rule45
}, {
  start: 2385,
  length: 7,
  convRule: rule84
}, {
  start: 2392,
  length: 10,
  convRule: rule45
}, {
  start: 2402,
  length: 2,
  convRule: rule84
}, {
  start: 2404,
  length: 2,
  convRule: rule2
}, {
  start: 2406,
  length: 10,
  convRule: rule8
}, {
  start: 2416,
  length: 1,
  convRule: rule2
}, {
  start: 2417,
  length: 1,
  convRule: rule83
}, {
  start: 2418,
  length: 6,
  convRule: rule45
}, {
  start: 2425,
  length: 7,
  convRule: rule45
}, {
  start: 2433,
  length: 1,
  convRule: rule84
}, {
  start: 2434,
  length: 2,
  convRule: rule114
}, {
  start: 2437,
  length: 8,
  convRule: rule45
}, {
  start: 2447,
  length: 2,
  convRule: rule45
}, {
  start: 2451,
  length: 22,
  convRule: rule45
}, {
  start: 2474,
  length: 7,
  convRule: rule45
}, {
  start: 2482,
  length: 1,
  convRule: rule45
}, {
  start: 2486,
  length: 4,
  convRule: rule45
}, {
  start: 2492,
  length: 1,
  convRule: rule84
}, {
  start: 2493,
  length: 1,
  convRule: rule45
}, {
  start: 2494,
  length: 3,
  convRule: rule114
}, {
  start: 2497,
  length: 4,
  convRule: rule84
}, {
  start: 2503,
  length: 2,
  convRule: rule114
}, {
  start: 2507,
  length: 2,
  convRule: rule114
}, {
  start: 2509,
  length: 1,
  convRule: rule84
}, {
  start: 2510,
  length: 1,
  convRule: rule45
}, {
  start: 2519,
  length: 1,
  convRule: rule114
}, {
  start: 2524,
  length: 2,
  convRule: rule45
}, {
  start: 2527,
  length: 3,
  convRule: rule45
}, {
  start: 2530,
  length: 2,
  convRule: rule84
}, {
  start: 2534,
  length: 10,
  convRule: rule8
}, {
  start: 2544,
  length: 2,
  convRule: rule45
}, {
  start: 2546,
  length: 2,
  convRule: rule3
}, {
  start: 2548,
  length: 6,
  convRule: rule17
}, {
  start: 2554,
  length: 1,
  convRule: rule13
}, {
  start: 2555,
  length: 1,
  convRule: rule3
}, {
  start: 2561,
  length: 2,
  convRule: rule84
}, {
  start: 2563,
  length: 1,
  convRule: rule114
}, {
  start: 2565,
  length: 6,
  convRule: rule45
}, {
  start: 2575,
  length: 2,
  convRule: rule45
}, {
  start: 2579,
  length: 22,
  convRule: rule45
}, {
  start: 2602,
  length: 7,
  convRule: rule45
}, {
  start: 2610,
  length: 2,
  convRule: rule45
}, {
  start: 2613,
  length: 2,
  convRule: rule45
}, {
  start: 2616,
  length: 2,
  convRule: rule45
}, {
  start: 2620,
  length: 1,
  convRule: rule84
}, {
  start: 2622,
  length: 3,
  convRule: rule114
}, {
  start: 2625,
  length: 2,
  convRule: rule84
}, {
  start: 2631,
  length: 2,
  convRule: rule84
}, {
  start: 2635,
  length: 3,
  convRule: rule84
}, {
  start: 2641,
  length: 1,
  convRule: rule84
}, {
  start: 2649,
  length: 4,
  convRule: rule45
}, {
  start: 2654,
  length: 1,
  convRule: rule45
}, {
  start: 2662,
  length: 10,
  convRule: rule8
}, {
  start: 2672,
  length: 2,
  convRule: rule84
}, {
  start: 2674,
  length: 3,
  convRule: rule45
}, {
  start: 2677,
  length: 1,
  convRule: rule84
}, {
  start: 2689,
  length: 2,
  convRule: rule84
}, {
  start: 2691,
  length: 1,
  convRule: rule114
}, {
  start: 2693,
  length: 9,
  convRule: rule45
}, {
  start: 2703,
  length: 3,
  convRule: rule45
}, {
  start: 2707,
  length: 22,
  convRule: rule45
}, {
  start: 2730,
  length: 7,
  convRule: rule45
}, {
  start: 2738,
  length: 2,
  convRule: rule45
}, {
  start: 2741,
  length: 5,
  convRule: rule45
}, {
  start: 2748,
  length: 1,
  convRule: rule84
}, {
  start: 2749,
  length: 1,
  convRule: rule45
}, {
  start: 2750,
  length: 3,
  convRule: rule114
}, {
  start: 2753,
  length: 5,
  convRule: rule84
}, {
  start: 2759,
  length: 2,
  convRule: rule84
}, {
  start: 2761,
  length: 1,
  convRule: rule114
}, {
  start: 2763,
  length: 2,
  convRule: rule114
}, {
  start: 2765,
  length: 1,
  convRule: rule84
}, {
  start: 2768,
  length: 1,
  convRule: rule45
}, {
  start: 2784,
  length: 2,
  convRule: rule45
}, {
  start: 2786,
  length: 2,
  convRule: rule84
}, {
  start: 2790,
  length: 10,
  convRule: rule8
}, {
  start: 2801,
  length: 1,
  convRule: rule3
}, {
  start: 2817,
  length: 1,
  convRule: rule84
}, {
  start: 2818,
  length: 2,
  convRule: rule114
}, {
  start: 2821,
  length: 8,
  convRule: rule45
}, {
  start: 2831,
  length: 2,
  convRule: rule45
}, {
  start: 2835,
  length: 22,
  convRule: rule45
}, {
  start: 2858,
  length: 7,
  convRule: rule45
}, {
  start: 2866,
  length: 2,
  convRule: rule45
}, {
  start: 2869,
  length: 5,
  convRule: rule45
}, {
  start: 2876,
  length: 1,
  convRule: rule84
}, {
  start: 2877,
  length: 1,
  convRule: rule45
}, {
  start: 2878,
  length: 1,
  convRule: rule114
}, {
  start: 2879,
  length: 1,
  convRule: rule84
}, {
  start: 2880,
  length: 1,
  convRule: rule114
}, {
  start: 2881,
  length: 4,
  convRule: rule84
}, {
  start: 2887,
  length: 2,
  convRule: rule114
}, {
  start: 2891,
  length: 2,
  convRule: rule114
}, {
  start: 2893,
  length: 1,
  convRule: rule84
}, {
  start: 2902,
  length: 1,
  convRule: rule84
}, {
  start: 2903,
  length: 1,
  convRule: rule114
}, {
  start: 2908,
  length: 2,
  convRule: rule45
}, {
  start: 2911,
  length: 3,
  convRule: rule45
}, {
  start: 2914,
  length: 2,
  convRule: rule84
}, {
  start: 2918,
  length: 10,
  convRule: rule8
}, {
  start: 2928,
  length: 1,
  convRule: rule13
}, {
  start: 2929,
  length: 1,
  convRule: rule45
}, {
  start: 2930,
  length: 6,
  convRule: rule17
}, {
  start: 2946,
  length: 1,
  convRule: rule84
}, {
  start: 2947,
  length: 1,
  convRule: rule45
}, {
  start: 2949,
  length: 6,
  convRule: rule45
}, {
  start: 2958,
  length: 3,
  convRule: rule45
}, {
  start: 2962,
  length: 4,
  convRule: rule45
}, {
  start: 2969,
  length: 2,
  convRule: rule45
}, {
  start: 2972,
  length: 1,
  convRule: rule45
}, {
  start: 2974,
  length: 2,
  convRule: rule45
}, {
  start: 2979,
  length: 2,
  convRule: rule45
}, {
  start: 2984,
  length: 3,
  convRule: rule45
}, {
  start: 2990,
  length: 12,
  convRule: rule45
}, {
  start: 3006,
  length: 2,
  convRule: rule114
}, {
  start: 3008,
  length: 1,
  convRule: rule84
}, {
  start: 3009,
  length: 2,
  convRule: rule114
}, {
  start: 3014,
  length: 3,
  convRule: rule114
}, {
  start: 3018,
  length: 3,
  convRule: rule114
}, {
  start: 3021,
  length: 1,
  convRule: rule84
}, {
  start: 3024,
  length: 1,
  convRule: rule45
}, {
  start: 3031,
  length: 1,
  convRule: rule114
}, {
  start: 3046,
  length: 10,
  convRule: rule8
}, {
  start: 3056,
  length: 3,
  convRule: rule17
}, {
  start: 3059,
  length: 6,
  convRule: rule13
}, {
  start: 3065,
  length: 1,
  convRule: rule3
}, {
  start: 3066,
  length: 1,
  convRule: rule13
}, {
  start: 3073,
  length: 3,
  convRule: rule114
}, {
  start: 3077,
  length: 8,
  convRule: rule45
}, {
  start: 3086,
  length: 3,
  convRule: rule45
}, {
  start: 3090,
  length: 23,
  convRule: rule45
}, {
  start: 3114,
  length: 10,
  convRule: rule45
}, {
  start: 3125,
  length: 5,
  convRule: rule45
}, {
  start: 3133,
  length: 1,
  convRule: rule45
}, {
  start: 3134,
  length: 3,
  convRule: rule84
}, {
  start: 3137,
  length: 4,
  convRule: rule114
}, {
  start: 3142,
  length: 3,
  convRule: rule84
}, {
  start: 3146,
  length: 4,
  convRule: rule84
}, {
  start: 3157,
  length: 2,
  convRule: rule84
}, {
  start: 3160,
  length: 2,
  convRule: rule45
}, {
  start: 3168,
  length: 2,
  convRule: rule45
}, {
  start: 3170,
  length: 2,
  convRule: rule84
}, {
  start: 3174,
  length: 10,
  convRule: rule8
}, {
  start: 3192,
  length: 7,
  convRule: rule17
}, {
  start: 3199,
  length: 1,
  convRule: rule13
}, {
  start: 3202,
  length: 2,
  convRule: rule114
}, {
  start: 3205,
  length: 8,
  convRule: rule45
}, {
  start: 3214,
  length: 3,
  convRule: rule45
}, {
  start: 3218,
  length: 23,
  convRule: rule45
}, {
  start: 3242,
  length: 10,
  convRule: rule45
}, {
  start: 3253,
  length: 5,
  convRule: rule45
}, {
  start: 3260,
  length: 1,
  convRule: rule84
}, {
  start: 3261,
  length: 1,
  convRule: rule45
}, {
  start: 3262,
  length: 1,
  convRule: rule114
}, {
  start: 3263,
  length: 1,
  convRule: rule84
}, {
  start: 3264,
  length: 5,
  convRule: rule114
}, {
  start: 3270,
  length: 1,
  convRule: rule84
}, {
  start: 3271,
  length: 2,
  convRule: rule114
}, {
  start: 3274,
  length: 2,
  convRule: rule114
}, {
  start: 3276,
  length: 2,
  convRule: rule84
}, {
  start: 3285,
  length: 2,
  convRule: rule114
}, {
  start: 3294,
  length: 1,
  convRule: rule45
}, {
  start: 3296,
  length: 2,
  convRule: rule45
}, {
  start: 3298,
  length: 2,
  convRule: rule84
}, {
  start: 3302,
  length: 10,
  convRule: rule8
}, {
  start: 3313,
  length: 2,
  convRule: rule45
}, {
  start: 3330,
  length: 2,
  convRule: rule114
}, {
  start: 3333,
  length: 8,
  convRule: rule45
}, {
  start: 3342,
  length: 3,
  convRule: rule45
}, {
  start: 3346,
  length: 41,
  convRule: rule45
}, {
  start: 3389,
  length: 1,
  convRule: rule45
}, {
  start: 3390,
  length: 3,
  convRule: rule114
}, {
  start: 3393,
  length: 4,
  convRule: rule84
}, {
  start: 3398,
  length: 3,
  convRule: rule114
}, {
  start: 3402,
  length: 3,
  convRule: rule114
}, {
  start: 3405,
  length: 1,
  convRule: rule84
}, {
  start: 3406,
  length: 1,
  convRule: rule45
}, {
  start: 3415,
  length: 1,
  convRule: rule114
}, {
  start: 3424,
  length: 2,
  convRule: rule45
}, {
  start: 3426,
  length: 2,
  convRule: rule84
}, {
  start: 3430,
  length: 10,
  convRule: rule8
}, {
  start: 3440,
  length: 6,
  convRule: rule17
}, {
  start: 3449,
  length: 1,
  convRule: rule13
}, {
  start: 3450,
  length: 6,
  convRule: rule45
}, {
  start: 3458,
  length: 2,
  convRule: rule114
}, {
  start: 3461,
  length: 18,
  convRule: rule45
}, {
  start: 3482,
  length: 24,
  convRule: rule45
}, {
  start: 3507,
  length: 9,
  convRule: rule45
}, {
  start: 3517,
  length: 1,
  convRule: rule45
}, {
  start: 3520,
  length: 7,
  convRule: rule45
}, {
  start: 3530,
  length: 1,
  convRule: rule84
}, {
  start: 3535,
  length: 3,
  convRule: rule114
}, {
  start: 3538,
  length: 3,
  convRule: rule84
}, {
  start: 3542,
  length: 1,
  convRule: rule84
}, {
  start: 3544,
  length: 8,
  convRule: rule114
}, {
  start: 3570,
  length: 2,
  convRule: rule114
}, {
  start: 3572,
  length: 1,
  convRule: rule2
}, {
  start: 3585,
  length: 48,
  convRule: rule45
}, {
  start: 3633,
  length: 1,
  convRule: rule84
}, {
  start: 3634,
  length: 2,
  convRule: rule45
}, {
  start: 3636,
  length: 7,
  convRule: rule84
}, {
  start: 3647,
  length: 1,
  convRule: rule3
}, {
  start: 3648,
  length: 6,
  convRule: rule45
}, {
  start: 3654,
  length: 1,
  convRule: rule83
}, {
  start: 3655,
  length: 8,
  convRule: rule84
}, {
  start: 3663,
  length: 1,
  convRule: rule2
}, {
  start: 3664,
  length: 10,
  convRule: rule8
}, {
  start: 3674,
  length: 2,
  convRule: rule2
}, {
  start: 3713,
  length: 2,
  convRule: rule45
}, {
  start: 3716,
  length: 1,
  convRule: rule45
}, {
  start: 3719,
  length: 2,
  convRule: rule45
}, {
  start: 3722,
  length: 1,
  convRule: rule45
}, {
  start: 3725,
  length: 1,
  convRule: rule45
}, {
  start: 3732,
  length: 4,
  convRule: rule45
}, {
  start: 3737,
  length: 7,
  convRule: rule45
}, {
  start: 3745,
  length: 3,
  convRule: rule45
}, {
  start: 3749,
  length: 1,
  convRule: rule45
}, {
  start: 3751,
  length: 1,
  convRule: rule45
}, {
  start: 3754,
  length: 2,
  convRule: rule45
}, {
  start: 3757,
  length: 4,
  convRule: rule45
}, {
  start: 3761,
  length: 1,
  convRule: rule84
}, {
  start: 3762,
  length: 2,
  convRule: rule45
}, {
  start: 3764,
  length: 6,
  convRule: rule84
}, {
  start: 3771,
  length: 2,
  convRule: rule84
}, {
  start: 3773,
  length: 1,
  convRule: rule45
}, {
  start: 3776,
  length: 5,
  convRule: rule45
}, {
  start: 3782,
  length: 1,
  convRule: rule83
}, {
  start: 3784,
  length: 6,
  convRule: rule84
}, {
  start: 3792,
  length: 10,
  convRule: rule8
}, {
  start: 3804,
  length: 2,
  convRule: rule45
}, {
  start: 3840,
  length: 1,
  convRule: rule45
}, {
  start: 3841,
  length: 3,
  convRule: rule13
}, {
  start: 3844,
  length: 15,
  convRule: rule2
}, {
  start: 3859,
  length: 5,
  convRule: rule13
}, {
  start: 3864,
  length: 2,
  convRule: rule84
}, {
  start: 3866,
  length: 6,
  convRule: rule13
}, {
  start: 3872,
  length: 10,
  convRule: rule8
}, {
  start: 3882,
  length: 10,
  convRule: rule17
}, {
  start: 3892,
  length: 1,
  convRule: rule13
}, {
  start: 3893,
  length: 1,
  convRule: rule84
}, {
  start: 3894,
  length: 1,
  convRule: rule13
}, {
  start: 3895,
  length: 1,
  convRule: rule84
}, {
  start: 3896,
  length: 1,
  convRule: rule13
}, {
  start: 3897,
  length: 1,
  convRule: rule84
}, {
  start: 3898,
  length: 1,
  convRule: rule4
}, {
  start: 3899,
  length: 1,
  convRule: rule5
}, {
  start: 3900,
  length: 1,
  convRule: rule4
}, {
  start: 3901,
  length: 1,
  convRule: rule5
}, {
  start: 3902,
  length: 2,
  convRule: rule114
}, {
  start: 3904,
  length: 8,
  convRule: rule45
}, {
  start: 3913,
  length: 36,
  convRule: rule45
}, {
  start: 3953,
  length: 14,
  convRule: rule84
}, {
  start: 3967,
  length: 1,
  convRule: rule114
}, {
  start: 3968,
  length: 5,
  convRule: rule84
}, {
  start: 3973,
  length: 1,
  convRule: rule2
}, {
  start: 3974,
  length: 2,
  convRule: rule84
}, {
  start: 3976,
  length: 5,
  convRule: rule45
}, {
  start: 3981,
  length: 11,
  convRule: rule84
}, {
  start: 3993,
  length: 36,
  convRule: rule84
}, {
  start: 4030,
  length: 8,
  convRule: rule13
}, {
  start: 4038,
  length: 1,
  convRule: rule84
}, {
  start: 4039,
  length: 6,
  convRule: rule13
}, {
  start: 4046,
  length: 2,
  convRule: rule13
}, {
  start: 4048,
  length: 5,
  convRule: rule2
}, {
  start: 4053,
  length: 4,
  convRule: rule13
}, {
  start: 4057,
  length: 2,
  convRule: rule2
}, {
  start: 4096,
  length: 43,
  convRule: rule45
}, {
  start: 4139,
  length: 2,
  convRule: rule114
}, {
  start: 4141,
  length: 4,
  convRule: rule84
}, {
  start: 4145,
  length: 1,
  convRule: rule114
}, {
  start: 4146,
  length: 6,
  convRule: rule84
}, {
  start: 4152,
  length: 1,
  convRule: rule114
}, {
  start: 4153,
  length: 2,
  convRule: rule84
}, {
  start: 4155,
  length: 2,
  convRule: rule114
}, {
  start: 4157,
  length: 2,
  convRule: rule84
}, {
  start: 4159,
  length: 1,
  convRule: rule45
}, {
  start: 4160,
  length: 10,
  convRule: rule8
}, {
  start: 4170,
  length: 6,
  convRule: rule2
}, {
  start: 4176,
  length: 6,
  convRule: rule45
}, {
  start: 4182,
  length: 2,
  convRule: rule114
}, {
  start: 4184,
  length: 2,
  convRule: rule84
}, {
  start: 4186,
  length: 4,
  convRule: rule45
}, {
  start: 4190,
  length: 3,
  convRule: rule84
}, {
  start: 4193,
  length: 1,
  convRule: rule45
}, {
  start: 4194,
  length: 3,
  convRule: rule114
}, {
  start: 4197,
  length: 2,
  convRule: rule45
}, {
  start: 4199,
  length: 7,
  convRule: rule114
}, {
  start: 4206,
  length: 3,
  convRule: rule45
}, {
  start: 4209,
  length: 4,
  convRule: rule84
}, {
  start: 4213,
  length: 13,
  convRule: rule45
}, {
  start: 4226,
  length: 1,
  convRule: rule84
}, {
  start: 4227,
  length: 2,
  convRule: rule114
}, {
  start: 4229,
  length: 2,
  convRule: rule84
}, {
  start: 4231,
  length: 6,
  convRule: rule114
}, {
  start: 4237,
  length: 1,
  convRule: rule84
}, {
  start: 4238,
  length: 1,
  convRule: rule45
}, {
  start: 4239,
  length: 1,
  convRule: rule114
}, {
  start: 4240,
  length: 10,
  convRule: rule8
}, {
  start: 4250,
  length: 3,
  convRule: rule114
}, {
  start: 4253,
  length: 1,
  convRule: rule84
}, {
  start: 4254,
  length: 2,
  convRule: rule13
}, {
  start: 4256,
  length: 38,
  convRule: rule115
}, {
  start: 4304,
  length: 43,
  convRule: rule45
}, {
  start: 4347,
  length: 1,
  convRule: rule2
}, {
  start: 4348,
  length: 1,
  convRule: rule83
}, {
  start: 4352,
  length: 329,
  convRule: rule45
}, {
  start: 4682,
  length: 4,
  convRule: rule45
}, {
  start: 4688,
  length: 7,
  convRule: rule45
}, {
  start: 4696,
  length: 1,
  convRule: rule45
}, {
  start: 4698,
  length: 4,
  convRule: rule45
}, {
  start: 4704,
  length: 41,
  convRule: rule45
}, {
  start: 4746,
  length: 4,
  convRule: rule45
}, {
  start: 4752,
  length: 33,
  convRule: rule45
}, {
  start: 4786,
  length: 4,
  convRule: rule45
}, {
  start: 4792,
  length: 7,
  convRule: rule45
}, {
  start: 4800,
  length: 1,
  convRule: rule45
}, {
  start: 4802,
  length: 4,
  convRule: rule45
}, {
  start: 4808,
  length: 15,
  convRule: rule45
}, {
  start: 4824,
  length: 57,
  convRule: rule45
}, {
  start: 4882,
  length: 4,
  convRule: rule45
}, {
  start: 4888,
  length: 67,
  convRule: rule45
}, {
  start: 4957,
  length: 3,
  convRule: rule84
}, {
  start: 4960,
  length: 1,
  convRule: rule13
}, {
  start: 4961,
  length: 8,
  convRule: rule2
}, {
  start: 4969,
  length: 20,
  convRule: rule17
}, {
  start: 4992,
  length: 16,
  convRule: rule45
}, {
  start: 5008,
  length: 10,
  convRule: rule13
}, {
  start: 5024,
  length: 85,
  convRule: rule45
}, {
  start: 5120,
  length: 1,
  convRule: rule7
}, {
  start: 5121,
  length: 620,
  convRule: rule45
}, {
  start: 5741,
  length: 2,
  convRule: rule2
}, {
  start: 5743,
  length: 17,
  convRule: rule45
}, {
  start: 5760,
  length: 1,
  convRule: rule1
}, {
  start: 5761,
  length: 26,
  convRule: rule45
}, {
  start: 5787,
  length: 1,
  convRule: rule4
}, {
  start: 5788,
  length: 1,
  convRule: rule5
}, {
  start: 5792,
  length: 75,
  convRule: rule45
}, {
  start: 5867,
  length: 3,
  convRule: rule2
}, {
  start: 5870,
  length: 3,
  convRule: rule116
}, {
  start: 5888,
  length: 13,
  convRule: rule45
}, {
  start: 5902,
  length: 4,
  convRule: rule45
}, {
  start: 5906,
  length: 3,
  convRule: rule84
}, {
  start: 5920,
  length: 18,
  convRule: rule45
}, {
  start: 5938,
  length: 3,
  convRule: rule84
}, {
  start: 5941,
  length: 2,
  convRule: rule2
}, {
  start: 5952,
  length: 18,
  convRule: rule45
}, {
  start: 5970,
  length: 2,
  convRule: rule84
}, {
  start: 5984,
  length: 13,
  convRule: rule45
}, {
  start: 5998,
  length: 3,
  convRule: rule45
}, {
  start: 6002,
  length: 2,
  convRule: rule84
}, {
  start: 6016,
  length: 52,
  convRule: rule45
}, {
  start: 6068,
  length: 2,
  convRule: rule16
}, {
  start: 6070,
  length: 1,
  convRule: rule114
}, {
  start: 6071,
  length: 7,
  convRule: rule84
}, {
  start: 6078,
  length: 8,
  convRule: rule114
}, {
  start: 6086,
  length: 1,
  convRule: rule84
}, {
  start: 6087,
  length: 2,
  convRule: rule114
}, {
  start: 6089,
  length: 11,
  convRule: rule84
}, {
  start: 6100,
  length: 3,
  convRule: rule2
}, {
  start: 6103,
  length: 1,
  convRule: rule83
}, {
  start: 6104,
  length: 3,
  convRule: rule2
}, {
  start: 6107,
  length: 1,
  convRule: rule3
}, {
  start: 6108,
  length: 1,
  convRule: rule45
}, {
  start: 6109,
  length: 1,
  convRule: rule84
}, {
  start: 6112,
  length: 10,
  convRule: rule8
}, {
  start: 6128,
  length: 10,
  convRule: rule17
}, {
  start: 6144,
  length: 6,
  convRule: rule2
}, {
  start: 6150,
  length: 1,
  convRule: rule7
}, {
  start: 6151,
  length: 4,
  convRule: rule2
}, {
  start: 6155,
  length: 3,
  convRule: rule84
}, {
  start: 6158,
  length: 1,
  convRule: rule1
}, {
  start: 6160,
  length: 10,
  convRule: rule8
}, {
  start: 6176,
  length: 35,
  convRule: rule45
}, {
  start: 6211,
  length: 1,
  convRule: rule83
}, {
  start: 6212,
  length: 52,
  convRule: rule45
}, {
  start: 6272,
  length: 41,
  convRule: rule45
}, {
  start: 6313,
  length: 1,
  convRule: rule84
}, {
  start: 6314,
  length: 1,
  convRule: rule45
}, {
  start: 6320,
  length: 70,
  convRule: rule45
}, {
  start: 6400,
  length: 29,
  convRule: rule45
}, {
  start: 6432,
  length: 3,
  convRule: rule84
}, {
  start: 6435,
  length: 4,
  convRule: rule114
}, {
  start: 6439,
  length: 2,
  convRule: rule84
}, {
  start: 6441,
  length: 3,
  convRule: rule114
}, {
  start: 6448,
  length: 2,
  convRule: rule114
}, {
  start: 6450,
  length: 1,
  convRule: rule84
}, {
  start: 6451,
  length: 6,
  convRule: rule114
}, {
  start: 6457,
  length: 3,
  convRule: rule84
}, {
  start: 6464,
  length: 1,
  convRule: rule13
}, {
  start: 6468,
  length: 2,
  convRule: rule2
}, {
  start: 6470,
  length: 10,
  convRule: rule8
}, {
  start: 6480,
  length: 30,
  convRule: rule45
}, {
  start: 6512,
  length: 5,
  convRule: rule45
}, {
  start: 6528,
  length: 44,
  convRule: rule45
}, {
  start: 6576,
  length: 17,
  convRule: rule114
}, {
  start: 6593,
  length: 7,
  convRule: rule45
}, {
  start: 6600,
  length: 2,
  convRule: rule114
}, {
  start: 6608,
  length: 10,
  convRule: rule8
}, {
  start: 6618,
  length: 1,
  convRule: rule17
}, {
  start: 6622,
  length: 34,
  convRule: rule13
}, {
  start: 6656,
  length: 23,
  convRule: rule45
}, {
  start: 6679,
  length: 2,
  convRule: rule84
}, {
  start: 6681,
  length: 3,
  convRule: rule114
}, {
  start: 6686,
  length: 2,
  convRule: rule2
}, {
  start: 6688,
  length: 53,
  convRule: rule45
}, {
  start: 6741,
  length: 1,
  convRule: rule114
}, {
  start: 6742,
  length: 1,
  convRule: rule84
}, {
  start: 6743,
  length: 1,
  convRule: rule114
}, {
  start: 6744,
  length: 7,
  convRule: rule84
}, {
  start: 6752,
  length: 1,
  convRule: rule84
}, {
  start: 6753,
  length: 1,
  convRule: rule114
}, {
  start: 6754,
  length: 1,
  convRule: rule84
}, {
  start: 6755,
  length: 2,
  convRule: rule114
}, {
  start: 6757,
  length: 8,
  convRule: rule84
}, {
  start: 6765,
  length: 6,
  convRule: rule114
}, {
  start: 6771,
  length: 10,
  convRule: rule84
}, {
  start: 6783,
  length: 1,
  convRule: rule84
}, {
  start: 6784,
  length: 10,
  convRule: rule8
}, {
  start: 6800,
  length: 10,
  convRule: rule8
}, {
  start: 6816,
  length: 7,
  convRule: rule2
}, {
  start: 6823,
  length: 1,
  convRule: rule83
}, {
  start: 6824,
  length: 6,
  convRule: rule2
}, {
  start: 6912,
  length: 4,
  convRule: rule84
}, {
  start: 6916,
  length: 1,
  convRule: rule114
}, {
  start: 6917,
  length: 47,
  convRule: rule45
}, {
  start: 6964,
  length: 1,
  convRule: rule84
}, {
  start: 6965,
  length: 1,
  convRule: rule114
}, {
  start: 6966,
  length: 5,
  convRule: rule84
}, {
  start: 6971,
  length: 1,
  convRule: rule114
}, {
  start: 6972,
  length: 1,
  convRule: rule84
}, {
  start: 6973,
  length: 5,
  convRule: rule114
}, {
  start: 6978,
  length: 1,
  convRule: rule84
}, {
  start: 6979,
  length: 2,
  convRule: rule114
}, {
  start: 6981,
  length: 7,
  convRule: rule45
}, {
  start: 6992,
  length: 10,
  convRule: rule8
}, {
  start: 7002,
  length: 7,
  convRule: rule2
}, {
  start: 7009,
  length: 10,
  convRule: rule13
}, {
  start: 7019,
  length: 9,
  convRule: rule84
}, {
  start: 7028,
  length: 9,
  convRule: rule13
}, {
  start: 7040,
  length: 2,
  convRule: rule84
}, {
  start: 7042,
  length: 1,
  convRule: rule114
}, {
  start: 7043,
  length: 30,
  convRule: rule45
}, {
  start: 7073,
  length: 1,
  convRule: rule114
}, {
  start: 7074,
  length: 4,
  convRule: rule84
}, {
  start: 7078,
  length: 2,
  convRule: rule114
}, {
  start: 7080,
  length: 2,
  convRule: rule84
}, {
  start: 7082,
  length: 1,
  convRule: rule114
}, {
  start: 7086,
  length: 2,
  convRule: rule45
}, {
  start: 7088,
  length: 10,
  convRule: rule8
}, {
  start: 7104,
  length: 38,
  convRule: rule45
}, {
  start: 7142,
  length: 1,
  convRule: rule84
}, {
  start: 7143,
  length: 1,
  convRule: rule114
}, {
  start: 7144,
  length: 2,
  convRule: rule84
}, {
  start: 7146,
  length: 3,
  convRule: rule114
}, {
  start: 7149,
  length: 1,
  convRule: rule84
}, {
  start: 7150,
  length: 1,
  convRule: rule114
}, {
  start: 7151,
  length: 3,
  convRule: rule84
}, {
  start: 7154,
  length: 2,
  convRule: rule114
}, {
  start: 7164,
  length: 4,
  convRule: rule2
}, {
  start: 7168,
  length: 36,
  convRule: rule45
}, {
  start: 7204,
  length: 8,
  convRule: rule114
}, {
  start: 7212,
  length: 8,
  convRule: rule84
}, {
  start: 7220,
  length: 2,
  convRule: rule114
}, {
  start: 7222,
  length: 2,
  convRule: rule84
}, {
  start: 7227,
  length: 5,
  convRule: rule2
}, {
  start: 7232,
  length: 10,
  convRule: rule8
}, {
  start: 7245,
  length: 3,
  convRule: rule45
}, {
  start: 7248,
  length: 10,
  convRule: rule8
}, {
  start: 7258,
  length: 30,
  convRule: rule45
}, {
  start: 7288,
  length: 6,
  convRule: rule83
}, {
  start: 7294,
  length: 2,
  convRule: rule2
}, {
  start: 7376,
  length: 3,
  convRule: rule84
}, {
  start: 7379,
  length: 1,
  convRule: rule2
}, {
  start: 7380,
  length: 13,
  convRule: rule84
}, {
  start: 7393,
  length: 1,
  convRule: rule114
}, {
  start: 7394,
  length: 7,
  convRule: rule84
}, {
  start: 7401,
  length: 4,
  convRule: rule45
}, {
  start: 7405,
  length: 1,
  convRule: rule84
}, {
  start: 7406,
  length: 4,
  convRule: rule45
}, {
  start: 7410,
  length: 1,
  convRule: rule114
}, {
  start: 7424,
  length: 44,
  convRule: rule14
}, {
  start: 7468,
  length: 54,
  convRule: rule83
}, {
  start: 7522,
  length: 22,
  convRule: rule14
}, {
  start: 7544,
  length: 1,
  convRule: rule83
}, {
  start: 7545,
  length: 1,
  convRule: rule117
}, {
  start: 7546,
  length: 3,
  convRule: rule14
}, {
  start: 7549,
  length: 1,
  convRule: rule118
}, {
  start: 7550,
  length: 29,
  convRule: rule14
}, {
  start: 7579,
  length: 37,
  convRule: rule83
}, {
  start: 7616,
  length: 39,
  convRule: rule84
}, {
  start: 7676,
  length: 4,
  convRule: rule84
}, {
  start: 7680,
  length: 1,
  convRule: rule21
}, {
  start: 7681,
  length: 1,
  convRule: rule22
}, {
  start: 7682,
  length: 1,
  convRule: rule21
}, {
  start: 7683,
  length: 1,
  convRule: rule22
}, {
  start: 7684,
  length: 1,
  convRule: rule21
}, {
  start: 7685,
  length: 1,
  convRule: rule22
}, {
  start: 7686,
  length: 1,
  convRule: rule21
}, {
  start: 7687,
  length: 1,
  convRule: rule22
}, {
  start: 7688,
  length: 1,
  convRule: rule21
}, {
  start: 7689,
  length: 1,
  convRule: rule22
}, {
  start: 7690,
  length: 1,
  convRule: rule21
}, {
  start: 7691,
  length: 1,
  convRule: rule22
}, {
  start: 7692,
  length: 1,
  convRule: rule21
}, {
  start: 7693,
  length: 1,
  convRule: rule22
}, {
  start: 7694,
  length: 1,
  convRule: rule21
}, {
  start: 7695,
  length: 1,
  convRule: rule22
}, {
  start: 7696,
  length: 1,
  convRule: rule21
}, {
  start: 7697,
  length: 1,
  convRule: rule22
}, {
  start: 7698,
  length: 1,
  convRule: rule21
}, {
  start: 7699,
  length: 1,
  convRule: rule22
}, {
  start: 7700,
  length: 1,
  convRule: rule21
}, {
  start: 7701,
  length: 1,
  convRule: rule22
}, {
  start: 7702,
  length: 1,
  convRule: rule21
}, {
  start: 7703,
  length: 1,
  convRule: rule22
}, {
  start: 7704,
  length: 1,
  convRule: rule21
}, {
  start: 7705,
  length: 1,
  convRule: rule22
}, {
  start: 7706,
  length: 1,
  convRule: rule21
}, {
  start: 7707,
  length: 1,
  convRule: rule22
}, {
  start: 7708,
  length: 1,
  convRule: rule21
}, {
  start: 7709,
  length: 1,
  convRule: rule22
}, {
  start: 7710,
  length: 1,
  convRule: rule21
}, {
  start: 7711,
  length: 1,
  convRule: rule22
}, {
  start: 7712,
  length: 1,
  convRule: rule21
}, {
  start: 7713,
  length: 1,
  convRule: rule22
}, {
  start: 7714,
  length: 1,
  convRule: rule21
}, {
  start: 7715,
  length: 1,
  convRule: rule22
}, {
  start: 7716,
  length: 1,
  convRule: rule21
}, {
  start: 7717,
  length: 1,
  convRule: rule22
}, {
  start: 7718,
  length: 1,
  convRule: rule21
}, {
  start: 7719,
  length: 1,
  convRule: rule22
}, {
  start: 7720,
  length: 1,
  convRule: rule21
}, {
  start: 7721,
  length: 1,
  convRule: rule22
}, {
  start: 7722,
  length: 1,
  convRule: rule21
}, {
  start: 7723,
  length: 1,
  convRule: rule22
}, {
  start: 7724,
  length: 1,
  convRule: rule21
}, {
  start: 7725,
  length: 1,
  convRule: rule22
}, {
  start: 7726,
  length: 1,
  convRule: rule21
}, {
  start: 7727,
  length: 1,
  convRule: rule22
}, {
  start: 7728,
  length: 1,
  convRule: rule21
}, {
  start: 7729,
  length: 1,
  convRule: rule22
}, {
  start: 7730,
  length: 1,
  convRule: rule21
}, {
  start: 7731,
  length: 1,
  convRule: rule22
}, {
  start: 7732,
  length: 1,
  convRule: rule21
}, {
  start: 7733,
  length: 1,
  convRule: rule22
}, {
  start: 7734,
  length: 1,
  convRule: rule21
}, {
  start: 7735,
  length: 1,
  convRule: rule22
}, {
  start: 7736,
  length: 1,
  convRule: rule21
}, {
  start: 7737,
  length: 1,
  convRule: rule22
}, {
  start: 7738,
  length: 1,
  convRule: rule21
}, {
  start: 7739,
  length: 1,
  convRule: rule22
}, {
  start: 7740,
  length: 1,
  convRule: rule21
}, {
  start: 7741,
  length: 1,
  convRule: rule22
}, {
  start: 7742,
  length: 1,
  convRule: rule21
}, {
  start: 7743,
  length: 1,
  convRule: rule22
}, {
  start: 7744,
  length: 1,
  convRule: rule21
}, {
  start: 7745,
  length: 1,
  convRule: rule22
}, {
  start: 7746,
  length: 1,
  convRule: rule21
}, {
  start: 7747,
  length: 1,
  convRule: rule22
}, {
  start: 7748,
  length: 1,
  convRule: rule21
}, {
  start: 7749,
  length: 1,
  convRule: rule22
}, {
  start: 7750,
  length: 1,
  convRule: rule21
}, {
  start: 7751,
  length: 1,
  convRule: rule22
}, {
  start: 7752,
  length: 1,
  convRule: rule21
}, {
  start: 7753,
  length: 1,
  convRule: rule22
}, {
  start: 7754,
  length: 1,
  convRule: rule21
}, {
  start: 7755,
  length: 1,
  convRule: rule22
}, {
  start: 7756,
  length: 1,
  convRule: rule21
}, {
  start: 7757,
  length: 1,
  convRule: rule22
}, {
  start: 7758,
  length: 1,
  convRule: rule21
}, {
  start: 7759,
  length: 1,
  convRule: rule22
}, {
  start: 7760,
  length: 1,
  convRule: rule21
}, {
  start: 7761,
  length: 1,
  convRule: rule22
}, {
  start: 7762,
  length: 1,
  convRule: rule21
}, {
  start: 7763,
  length: 1,
  convRule: rule22
}, {
  start: 7764,
  length: 1,
  convRule: rule21
}, {
  start: 7765,
  length: 1,
  convRule: rule22
}, {
  start: 7766,
  length: 1,
  convRule: rule21
}, {
  start: 7767,
  length: 1,
  convRule: rule22
}, {
  start: 7768,
  length: 1,
  convRule: rule21
}, {
  start: 7769,
  length: 1,
  convRule: rule22
}, {
  start: 7770,
  length: 1,
  convRule: rule21
}, {
  start: 7771,
  length: 1,
  convRule: rule22
}, {
  start: 7772,
  length: 1,
  convRule: rule21
}, {
  start: 7773,
  length: 1,
  convRule: rule22
}, {
  start: 7774,
  length: 1,
  convRule: rule21
}, {
  start: 7775,
  length: 1,
  convRule: rule22
}, {
  start: 7776,
  length: 1,
  convRule: rule21
}, {
  start: 7777,
  length: 1,
  convRule: rule22
}, {
  start: 7778,
  length: 1,
  convRule: rule21
}, {
  start: 7779,
  length: 1,
  convRule: rule22
}, {
  start: 7780,
  length: 1,
  convRule: rule21
}, {
  start: 7781,
  length: 1,
  convRule: rule22
}, {
  start: 7782,
  length: 1,
  convRule: rule21
}, {
  start: 7783,
  length: 1,
  convRule: rule22
}, {
  start: 7784,
  length: 1,
  convRule: rule21
}, {
  start: 7785,
  length: 1,
  convRule: rule22
}, {
  start: 7786,
  length: 1,
  convRule: rule21
}, {
  start: 7787,
  length: 1,
  convRule: rule22
}, {
  start: 7788,
  length: 1,
  convRule: rule21
}, {
  start: 7789,
  length: 1,
  convRule: rule22
}, {
  start: 7790,
  length: 1,
  convRule: rule21
}, {
  start: 7791,
  length: 1,
  convRule: rule22
}, {
  start: 7792,
  length: 1,
  convRule: rule21
}, {
  start: 7793,
  length: 1,
  convRule: rule22
}, {
  start: 7794,
  length: 1,
  convRule: rule21
}, {
  start: 7795,
  length: 1,
  convRule: rule22
}, {
  start: 7796,
  length: 1,
  convRule: rule21
}, {
  start: 7797,
  length: 1,
  convRule: rule22
}, {
  start: 7798,
  length: 1,
  convRule: rule21
}, {
  start: 7799,
  length: 1,
  convRule: rule22
}, {
  start: 7800,
  length: 1,
  convRule: rule21
}, {
  start: 7801,
  length: 1,
  convRule: rule22
}, {
  start: 7802,
  length: 1,
  convRule: rule21
}, {
  start: 7803,
  length: 1,
  convRule: rule22
}, {
  start: 7804,
  length: 1,
  convRule: rule21
}, {
  start: 7805,
  length: 1,
  convRule: rule22
}, {
  start: 7806,
  length: 1,
  convRule: rule21
}, {
  start: 7807,
  length: 1,
  convRule: rule22
}, {
  start: 7808,
  length: 1,
  convRule: rule21
}, {
  start: 7809,
  length: 1,
  convRule: rule22
}, {
  start: 7810,
  length: 1,
  convRule: rule21
}, {
  start: 7811,
  length: 1,
  convRule: rule22
}, {
  start: 7812,
  length: 1,
  convRule: rule21
}, {
  start: 7813,
  length: 1,
  convRule: rule22
}, {
  start: 7814,
  length: 1,
  convRule: rule21
}, {
  start: 7815,
  length: 1,
  convRule: rule22
}, {
  start: 7816,
  length: 1,
  convRule: rule21
}, {
  start: 7817,
  length: 1,
  convRule: rule22
}, {
  start: 7818,
  length: 1,
  convRule: rule21
}, {
  start: 7819,
  length: 1,
  convRule: rule22
}, {
  start: 7820,
  length: 1,
  convRule: rule21
}, {
  start: 7821,
  length: 1,
  convRule: rule22
}, {
  start: 7822,
  length: 1,
  convRule: rule21
}, {
  start: 7823,
  length: 1,
  convRule: rule22
}, {
  start: 7824,
  length: 1,
  convRule: rule21
}, {
  start: 7825,
  length: 1,
  convRule: rule22
}, {
  start: 7826,
  length: 1,
  convRule: rule21
}, {
  start: 7827,
  length: 1,
  convRule: rule22
}, {
  start: 7828,
  length: 1,
  convRule: rule21
}, {
  start: 7829,
  length: 1,
  convRule: rule22
}, {
  start: 7830,
  length: 5,
  convRule: rule14
}, {
  start: 7835,
  length: 1,
  convRule: rule119
}, {
  start: 7836,
  length: 2,
  convRule: rule14
}, {
  start: 7838,
  length: 1,
  convRule: rule120
}, {
  start: 7839,
  length: 1,
  convRule: rule14
}, {
  start: 7840,
  length: 1,
  convRule: rule21
}, {
  start: 7841,
  length: 1,
  convRule: rule22
}, {
  start: 7842,
  length: 1,
  convRule: rule21
}, {
  start: 7843,
  length: 1,
  convRule: rule22
}, {
  start: 7844,
  length: 1,
  convRule: rule21
}, {
  start: 7845,
  length: 1,
  convRule: rule22
}, {
  start: 7846,
  length: 1,
  convRule: rule21
}, {
  start: 7847,
  length: 1,
  convRule: rule22
}, {
  start: 7848,
  length: 1,
  convRule: rule21
}, {
  start: 7849,
  length: 1,
  convRule: rule22
}, {
  start: 7850,
  length: 1,
  convRule: rule21
}, {
  start: 7851,
  length: 1,
  convRule: rule22
}, {
  start: 7852,
  length: 1,
  convRule: rule21
}, {
  start: 7853,
  length: 1,
  convRule: rule22
}, {
  start: 7854,
  length: 1,
  convRule: rule21
}, {
  start: 7855,
  length: 1,
  convRule: rule22
}, {
  start: 7856,
  length: 1,
  convRule: rule21
}, {
  start: 7857,
  length: 1,
  convRule: rule22
}, {
  start: 7858,
  length: 1,
  convRule: rule21
}, {
  start: 7859,
  length: 1,
  convRule: rule22
}, {
  start: 7860,
  length: 1,
  convRule: rule21
}, {
  start: 7861,
  length: 1,
  convRule: rule22
}, {
  start: 7862,
  length: 1,
  convRule: rule21
}, {
  start: 7863,
  length: 1,
  convRule: rule22
}, {
  start: 7864,
  length: 1,
  convRule: rule21
}, {
  start: 7865,
  length: 1,
  convRule: rule22
}, {
  start: 7866,
  length: 1,
  convRule: rule21
}, {
  start: 7867,
  length: 1,
  convRule: rule22
}, {
  start: 7868,
  length: 1,
  convRule: rule21
}, {
  start: 7869,
  length: 1,
  convRule: rule22
}, {
  start: 7870,
  length: 1,
  convRule: rule21
}, {
  start: 7871,
  length: 1,
  convRule: rule22
}, {
  start: 7872,
  length: 1,
  convRule: rule21
}, {
  start: 7873,
  length: 1,
  convRule: rule22
}, {
  start: 7874,
  length: 1,
  convRule: rule21
}, {
  start: 7875,
  length: 1,
  convRule: rule22
}, {
  start: 7876,
  length: 1,
  convRule: rule21
}, {
  start: 7877,
  length: 1,
  convRule: rule22
}, {
  start: 7878,
  length: 1,
  convRule: rule21
}, {
  start: 7879,
  length: 1,
  convRule: rule22
}, {
  start: 7880,
  length: 1,
  convRule: rule21
}, {
  start: 7881,
  length: 1,
  convRule: rule22
}, {
  start: 7882,
  length: 1,
  convRule: rule21
}, {
  start: 7883,
  length: 1,
  convRule: rule22
}, {
  start: 7884,
  length: 1,
  convRule: rule21
}, {
  start: 7885,
  length: 1,
  convRule: rule22
}, {
  start: 7886,
  length: 1,
  convRule: rule21
}, {
  start: 7887,
  length: 1,
  convRule: rule22
}, {
  start: 7888,
  length: 1,
  convRule: rule21
}, {
  start: 7889,
  length: 1,
  convRule: rule22
}, {
  start: 7890,
  length: 1,
  convRule: rule21
}, {
  start: 7891,
  length: 1,
  convRule: rule22
}, {
  start: 7892,
  length: 1,
  convRule: rule21
}, {
  start: 7893,
  length: 1,
  convRule: rule22
}, {
  start: 7894,
  length: 1,
  convRule: rule21
}, {
  start: 7895,
  length: 1,
  convRule: rule22
}, {
  start: 7896,
  length: 1,
  convRule: rule21
}, {
  start: 7897,
  length: 1,
  convRule: rule22
}, {
  start: 7898,
  length: 1,
  convRule: rule21
}, {
  start: 7899,
  length: 1,
  convRule: rule22
}, {
  start: 7900,
  length: 1,
  convRule: rule21
}, {
  start: 7901,
  length: 1,
  convRule: rule22
}, {
  start: 7902,
  length: 1,
  convRule: rule21
}, {
  start: 7903,
  length: 1,
  convRule: rule22
}, {
  start: 7904,
  length: 1,
  convRule: rule21
}, {
  start: 7905,
  length: 1,
  convRule: rule22
}, {
  start: 7906,
  length: 1,
  convRule: rule21
}, {
  start: 7907,
  length: 1,
  convRule: rule22
}, {
  start: 7908,
  length: 1,
  convRule: rule21
}, {
  start: 7909,
  length: 1,
  convRule: rule22
}, {
  start: 7910,
  length: 1,
  convRule: rule21
}, {
  start: 7911,
  length: 1,
  convRule: rule22
}, {
  start: 7912,
  length: 1,
  convRule: rule21
}, {
  start: 7913,
  length: 1,
  convRule: rule22
}, {
  start: 7914,
  length: 1,
  convRule: rule21
}, {
  start: 7915,
  length: 1,
  convRule: rule22
}, {
  start: 7916,
  length: 1,
  convRule: rule21
}, {
  start: 7917,
  length: 1,
  convRule: rule22
}, {
  start: 7918,
  length: 1,
  convRule: rule21
}, {
  start: 7919,
  length: 1,
  convRule: rule22
}, {
  start: 7920,
  length: 1,
  convRule: rule21
}, {
  start: 7921,
  length: 1,
  convRule: rule22
}, {
  start: 7922,
  length: 1,
  convRule: rule21
}, {
  start: 7923,
  length: 1,
  convRule: rule22
}, {
  start: 7924,
  length: 1,
  convRule: rule21
}, {
  start: 7925,
  length: 1,
  convRule: rule22
}, {
  start: 7926,
  length: 1,
  convRule: rule21
}, {
  start: 7927,
  length: 1,
  convRule: rule22
}, {
  start: 7928,
  length: 1,
  convRule: rule21
}, {
  start: 7929,
  length: 1,
  convRule: rule22
}, {
  start: 7930,
  length: 1,
  convRule: rule21
}, {
  start: 7931,
  length: 1,
  convRule: rule22
}, {
  start: 7932,
  length: 1,
  convRule: rule21
}, {
  start: 7933,
  length: 1,
  convRule: rule22
}, {
  start: 7934,
  length: 1,
  convRule: rule21
}, {
  start: 7935,
  length: 1,
  convRule: rule22
}, {
  start: 7936,
  length: 8,
  convRule: rule121
}, {
  start: 7944,
  length: 8,
  convRule: rule122
}, {
  start: 7952,
  length: 6,
  convRule: rule121
}, {
  start: 7960,
  length: 6,
  convRule: rule122
}, {
  start: 7968,
  length: 8,
  convRule: rule121
}, {
  start: 7976,
  length: 8,
  convRule: rule122
}, {
  start: 7984,
  length: 8,
  convRule: rule121
}, {
  start: 7992,
  length: 8,
  convRule: rule122
}, {
  start: 8000,
  length: 6,
  convRule: rule121
}, {
  start: 8008,
  length: 6,
  convRule: rule122
}, {
  start: 8016,
  length: 1,
  convRule: rule14
}, {
  start: 8017,
  length: 1,
  convRule: rule121
}, {
  start: 8018,
  length: 1,
  convRule: rule14
}, {
  start: 8019,
  length: 1,
  convRule: rule121
}, {
  start: 8020,
  length: 1,
  convRule: rule14
}, {
  start: 8021,
  length: 1,
  convRule: rule121
}, {
  start: 8022,
  length: 1,
  convRule: rule14
}, {
  start: 8023,
  length: 1,
  convRule: rule121
}, {
  start: 8025,
  length: 1,
  convRule: rule122
}, {
  start: 8027,
  length: 1,
  convRule: rule122
}, {
  start: 8029,
  length: 1,
  convRule: rule122
}, {
  start: 8031,
  length: 1,
  convRule: rule122
}, {
  start: 8032,
  length: 8,
  convRule: rule121
}, {
  start: 8040,
  length: 8,
  convRule: rule122
}, {
  start: 8048,
  length: 2,
  convRule: rule123
}, {
  start: 8050,
  length: 4,
  convRule: rule124
}, {
  start: 8054,
  length: 2,
  convRule: rule125
}, {
  start: 8056,
  length: 2,
  convRule: rule126
}, {
  start: 8058,
  length: 2,
  convRule: rule127
}, {
  start: 8060,
  length: 2,
  convRule: rule128
}, {
  start: 8064,
  length: 8,
  convRule: rule121
}, {
  start: 8072,
  length: 8,
  convRule: rule129
}, {
  start: 8080,
  length: 8,
  convRule: rule121
}, {
  start: 8088,
  length: 8,
  convRule: rule129
}, {
  start: 8096,
  length: 8,
  convRule: rule121
}, {
  start: 8104,
  length: 8,
  convRule: rule129
}, {
  start: 8112,
  length: 2,
  convRule: rule121
}, {
  start: 8114,
  length: 1,
  convRule: rule14
}, {
  start: 8115,
  length: 1,
  convRule: rule130
}, {
  start: 8116,
  length: 1,
  convRule: rule14
}, {
  start: 8118,
  length: 2,
  convRule: rule14
}, {
  start: 8120,
  length: 2,
  convRule: rule122
}, {
  start: 8122,
  length: 2,
  convRule: rule131
}, {
  start: 8124,
  length: 1,
  convRule: rule132
}, {
  start: 8125,
  length: 1,
  convRule: rule10
}, {
  start: 8126,
  length: 1,
  convRule: rule133
}, {
  start: 8127,
  length: 3,
  convRule: rule10
}, {
  start: 8130,
  length: 1,
  convRule: rule14
}, {
  start: 8131,
  length: 1,
  convRule: rule130
}, {
  start: 8132,
  length: 1,
  convRule: rule14
}, {
  start: 8134,
  length: 2,
  convRule: rule14
}, {
  start: 8136,
  length: 4,
  convRule: rule134
}, {
  start: 8140,
  length: 1,
  convRule: rule132
}, {
  start: 8141,
  length: 3,
  convRule: rule10
}, {
  start: 8144,
  length: 2,
  convRule: rule121
}, {
  start: 8146,
  length: 2,
  convRule: rule14
}, {
  start: 8150,
  length: 2,
  convRule: rule14
}, {
  start: 8152,
  length: 2,
  convRule: rule122
}, {
  start: 8154,
  length: 2,
  convRule: rule135
}, {
  start: 8157,
  length: 3,
  convRule: rule10
}, {
  start: 8160,
  length: 2,
  convRule: rule121
}, {
  start: 8162,
  length: 3,
  convRule: rule14
}, {
  start: 8165,
  length: 1,
  convRule: rule104
}, {
  start: 8166,
  length: 2,
  convRule: rule14
}, {
  start: 8168,
  length: 2,
  convRule: rule122
}, {
  start: 8170,
  length: 2,
  convRule: rule136
}, {
  start: 8172,
  length: 1,
  convRule: rule107
}, {
  start: 8173,
  length: 3,
  convRule: rule10
}, {
  start: 8178,
  length: 1,
  convRule: rule14
}, {
  start: 8179,
  length: 1,
  convRule: rule130
}, {
  start: 8180,
  length: 1,
  convRule: rule14
}, {
  start: 8182,
  length: 2,
  convRule: rule14
}, {
  start: 8184,
  length: 2,
  convRule: rule137
}, {
  start: 8186,
  length: 2,
  convRule: rule138
}, {
  start: 8188,
  length: 1,
  convRule: rule132
}, {
  start: 8189,
  length: 2,
  convRule: rule10
}, {
  start: 8192,
  length: 11,
  convRule: rule1
}, {
  start: 8203,
  length: 5,
  convRule: rule16
}, {
  start: 8208,
  length: 6,
  convRule: rule7
}, {
  start: 8214,
  length: 2,
  convRule: rule2
}, {
  start: 8216,
  length: 1,
  convRule: rule15
}, {
  start: 8217,
  length: 1,
  convRule: rule19
}, {
  start: 8218,
  length: 1,
  convRule: rule4
}, {
  start: 8219,
  length: 2,
  convRule: rule15
}, {
  start: 8221,
  length: 1,
  convRule: rule19
}, {
  start: 8222,
  length: 1,
  convRule: rule4
}, {
  start: 8223,
  length: 1,
  convRule: rule15
}, {
  start: 8224,
  length: 8,
  convRule: rule2
}, {
  start: 8232,
  length: 1,
  convRule: rule139
}, {
  start: 8233,
  length: 1,
  convRule: rule140
}, {
  start: 8234,
  length: 5,
  convRule: rule16
}, {
  start: 8239,
  length: 1,
  convRule: rule1
}, {
  start: 8240,
  length: 9,
  convRule: rule2
}, {
  start: 8249,
  length: 1,
  convRule: rule15
}, {
  start: 8250,
  length: 1,
  convRule: rule19
}, {
  start: 8251,
  length: 4,
  convRule: rule2
}, {
  start: 8255,
  length: 2,
  convRule: rule11
}, {
  start: 8257,
  length: 3,
  convRule: rule2
}, {
  start: 8260,
  length: 1,
  convRule: rule6
}, {
  start: 8261,
  length: 1,
  convRule: rule4
}, {
  start: 8262,
  length: 1,
  convRule: rule5
}, {
  start: 8263,
  length: 11,
  convRule: rule2
}, {
  start: 8274,
  length: 1,
  convRule: rule6
}, {
  start: 8275,
  length: 1,
  convRule: rule2
}, {
  start: 8276,
  length: 1,
  convRule: rule11
}, {
  start: 8277,
  length: 10,
  convRule: rule2
}, {
  start: 8287,
  length: 1,
  convRule: rule1
}, {
  start: 8288,
  length: 5,
  convRule: rule16
}, {
  start: 8298,
  length: 6,
  convRule: rule16
}, {
  start: 8304,
  length: 1,
  convRule: rule17
}, {
  start: 8305,
  length: 1,
  convRule: rule83
}, {
  start: 8308,
  length: 6,
  convRule: rule17
}, {
  start: 8314,
  length: 3,
  convRule: rule6
}, {
  start: 8317,
  length: 1,
  convRule: rule4
}, {
  start: 8318,
  length: 1,
  convRule: rule5
}, {
  start: 8319,
  length: 1,
  convRule: rule83
}, {
  start: 8320,
  length: 10,
  convRule: rule17
}, {
  start: 8330,
  length: 3,
  convRule: rule6
}, {
  start: 8333,
  length: 1,
  convRule: rule4
}, {
  start: 8334,
  length: 1,
  convRule: rule5
}, {
  start: 8336,
  length: 13,
  convRule: rule83
}, {
  start: 8352,
  length: 26,
  convRule: rule3
}, {
  start: 8400,
  length: 13,
  convRule: rule84
}, {
  start: 8413,
  length: 4,
  convRule: rule109
}, {
  start: 8417,
  length: 1,
  convRule: rule84
}, {
  start: 8418,
  length: 3,
  convRule: rule109
}, {
  start: 8421,
  length: 12,
  convRule: rule84
}, {
  start: 8448,
  length: 2,
  convRule: rule13
}, {
  start: 8450,
  length: 1,
  convRule: rule98
}, {
  start: 8451,
  length: 4,
  convRule: rule13
}, {
  start: 8455,
  length: 1,
  convRule: rule98
}, {
  start: 8456,
  length: 2,
  convRule: rule13
}, {
  start: 8458,
  length: 1,
  convRule: rule14
}, {
  start: 8459,
  length: 3,
  convRule: rule98
}, {
  start: 8462,
  length: 2,
  convRule: rule14
}, {
  start: 8464,
  length: 3,
  convRule: rule98
}, {
  start: 8467,
  length: 1,
  convRule: rule14
}, {
  start: 8468,
  length: 1,
  convRule: rule13
}, {
  start: 8469,
  length: 1,
  convRule: rule98
}, {
  start: 8470,
  length: 2,
  convRule: rule13
}, {
  start: 8472,
  length: 1,
  convRule: rule6
}, {
  start: 8473,
  length: 5,
  convRule: rule98
}, {
  start: 8478,
  length: 6,
  convRule: rule13
}, {
  start: 8484,
  length: 1,
  convRule: rule98
}, {
  start: 8485,
  length: 1,
  convRule: rule13
}, {
  start: 8486,
  length: 1,
  convRule: rule141
}, {
  start: 8487,
  length: 1,
  convRule: rule13
}, {
  start: 8488,
  length: 1,
  convRule: rule98
}, {
  start: 8489,
  length: 1,
  convRule: rule13
}, {
  start: 8490,
  length: 1,
  convRule: rule142
}, {
  start: 8491,
  length: 1,
  convRule: rule143
}, {
  start: 8492,
  length: 2,
  convRule: rule98
}, {
  start: 8494,
  length: 1,
  convRule: rule13
}, {
  start: 8495,
  length: 1,
  convRule: rule14
}, {
  start: 8496,
  length: 2,
  convRule: rule98
}, {
  start: 8498,
  length: 1,
  convRule: rule144
}, {
  start: 8499,
  length: 1,
  convRule: rule98
}, {
  start: 8500,
  length: 1,
  convRule: rule14
}, {
  start: 8501,
  length: 4,
  convRule: rule45
}, {
  start: 8505,
  length: 1,
  convRule: rule14
}, {
  start: 8506,
  length: 2,
  convRule: rule13
}, {
  start: 8508,
  length: 2,
  convRule: rule14
}, {
  start: 8510,
  length: 2,
  convRule: rule98
}, {
  start: 8512,
  length: 5,
  convRule: rule6
}, {
  start: 8517,
  length: 1,
  convRule: rule98
}, {
  start: 8518,
  length: 4,
  convRule: rule14
}, {
  start: 8522,
  length: 1,
  convRule: rule13
}, {
  start: 8523,
  length: 1,
  convRule: rule6
}, {
  start: 8524,
  length: 2,
  convRule: rule13
}, {
  start: 8526,
  length: 1,
  convRule: rule145
}, {
  start: 8527,
  length: 1,
  convRule: rule13
}, {
  start: 8528,
  length: 16,
  convRule: rule17
}, {
  start: 8544,
  length: 16,
  convRule: rule146
}, {
  start: 8560,
  length: 16,
  convRule: rule147
}, {
  start: 8576,
  length: 3,
  convRule: rule116
}, {
  start: 8579,
  length: 1,
  convRule: rule21
}, {
  start: 8580,
  length: 1,
  convRule: rule22
}, {
  start: 8581,
  length: 4,
  convRule: rule116
}, {
  start: 8585,
  length: 1,
  convRule: rule17
}, {
  start: 8592,
  length: 5,
  convRule: rule6
}, {
  start: 8597,
  length: 5,
  convRule: rule13
}, {
  start: 8602,
  length: 2,
  convRule: rule6
}, {
  start: 8604,
  length: 4,
  convRule: rule13
}, {
  start: 8608,
  length: 1,
  convRule: rule6
}, {
  start: 8609,
  length: 2,
  convRule: rule13
}, {
  start: 8611,
  length: 1,
  convRule: rule6
}, {
  start: 8612,
  length: 2,
  convRule: rule13
}, {
  start: 8614,
  length: 1,
  convRule: rule6
}, {
  start: 8615,
  length: 7,
  convRule: rule13
}, {
  start: 8622,
  length: 1,
  convRule: rule6
}, {
  start: 8623,
  length: 31,
  convRule: rule13
}, {
  start: 8654,
  length: 2,
  convRule: rule6
}, {
  start: 8656,
  length: 2,
  convRule: rule13
}, {
  start: 8658,
  length: 1,
  convRule: rule6
}, {
  start: 8659,
  length: 1,
  convRule: rule13
}, {
  start: 8660,
  length: 1,
  convRule: rule6
}, {
  start: 8661,
  length: 31,
  convRule: rule13
}, {
  start: 8692,
  length: 268,
  convRule: rule6
}, {
  start: 8960,
  length: 8,
  convRule: rule13
}, {
  start: 8968,
  length: 4,
  convRule: rule6
}, {
  start: 8972,
  length: 20,
  convRule: rule13
}, {
  start: 8992,
  length: 2,
  convRule: rule6
}, {
  start: 8994,
  length: 7,
  convRule: rule13
}, {
  start: 9001,
  length: 1,
  convRule: rule4
}, {
  start: 9002,
  length: 1,
  convRule: rule5
}, {
  start: 9003,
  length: 81,
  convRule: rule13
}, {
  start: 9084,
  length: 1,
  convRule: rule6
}, {
  start: 9085,
  length: 30,
  convRule: rule13
}, {
  start: 9115,
  length: 25,
  convRule: rule6
}, {
  start: 9140,
  length: 40,
  convRule: rule13
}, {
  start: 9180,
  length: 6,
  convRule: rule6
}, {
  start: 9186,
  length: 18,
  convRule: rule13
}, {
  start: 9216,
  length: 39,
  convRule: rule13
}, {
  start: 9280,
  length: 11,
  convRule: rule13
}, {
  start: 9312,
  length: 60,
  convRule: rule17
}, {
  start: 9372,
  length: 26,
  convRule: rule13
}, {
  start: 9398,
  length: 26,
  convRule: rule148
}, {
  start: 9424,
  length: 26,
  convRule: rule149
}, {
  start: 9450,
  length: 22,
  convRule: rule17
}, {
  start: 9472,
  length: 183,
  convRule: rule13
}, {
  start: 9655,
  length: 1,
  convRule: rule6
}, {
  start: 9656,
  length: 9,
  convRule: rule13
}, {
  start: 9665,
  length: 1,
  convRule: rule6
}, {
  start: 9666,
  length: 54,
  convRule: rule13
}, {
  start: 9720,
  length: 8,
  convRule: rule6
}, {
  start: 9728,
  length: 111,
  convRule: rule13
}, {
  start: 9839,
  length: 1,
  convRule: rule6
}, {
  start: 9840,
  length: 144,
  convRule: rule13
}, {
  start: 9985,
  length: 103,
  convRule: rule13
}, {
  start: 10088,
  length: 1,
  convRule: rule4
}, {
  start: 10089,
  length: 1,
  convRule: rule5
}, {
  start: 10090,
  length: 1,
  convRule: rule4
}, {
  start: 10091,
  length: 1,
  convRule: rule5
}, {
  start: 10092,
  length: 1,
  convRule: rule4
}, {
  start: 10093,
  length: 1,
  convRule: rule5
}, {
  start: 10094,
  length: 1,
  convRule: rule4
}, {
  start: 10095,
  length: 1,
  convRule: rule5
}, {
  start: 10096,
  length: 1,
  convRule: rule4
}, {
  start: 10097,
  length: 1,
  convRule: rule5
}, {
  start: 10098,
  length: 1,
  convRule: rule4
}, {
  start: 10099,
  length: 1,
  convRule: rule5
}, {
  start: 10100,
  length: 1,
  convRule: rule4
}, {
  start: 10101,
  length: 1,
  convRule: rule5
}, {
  start: 10102,
  length: 30,
  convRule: rule17
}, {
  start: 10132,
  length: 44,
  convRule: rule13
}, {
  start: 10176,
  length: 5,
  convRule: rule6
}, {
  start: 10181,
  length: 1,
  convRule: rule4
}, {
  start: 10182,
  length: 1,
  convRule: rule5
}, {
  start: 10183,
  length: 4,
  convRule: rule6
}, {
  start: 10188,
  length: 1,
  convRule: rule6
}, {
  start: 10190,
  length: 24,
  convRule: rule6
}, {
  start: 10214,
  length: 1,
  convRule: rule4
}, {
  start: 10215,
  length: 1,
  convRule: rule5
}, {
  start: 10216,
  length: 1,
  convRule: rule4
}, {
  start: 10217,
  length: 1,
  convRule: rule5
}, {
  start: 10218,
  length: 1,
  convRule: rule4
}, {
  start: 10219,
  length: 1,
  convRule: rule5
}, {
  start: 10220,
  length: 1,
  convRule: rule4
}, {
  start: 10221,
  length: 1,
  convRule: rule5
}, {
  start: 10222,
  length: 1,
  convRule: rule4
}, {
  start: 10223,
  length: 1,
  convRule: rule5
}, {
  start: 10224,
  length: 16,
  convRule: rule6
}, {
  start: 10240,
  length: 256,
  convRule: rule13
}, {
  start: 10496,
  length: 131,
  convRule: rule6
}, {
  start: 10627,
  length: 1,
  convRule: rule4
}, {
  start: 10628,
  length: 1,
  convRule: rule5
}, {
  start: 10629,
  length: 1,
  convRule: rule4
}, {
  start: 10630,
  length: 1,
  convRule: rule5
}, {
  start: 10631,
  length: 1,
  convRule: rule4
}, {
  start: 10632,
  length: 1,
  convRule: rule5
}, {
  start: 10633,
  length: 1,
  convRule: rule4
}, {
  start: 10634,
  length: 1,
  convRule: rule5
}, {
  start: 10635,
  length: 1,
  convRule: rule4
}, {
  start: 10636,
  length: 1,
  convRule: rule5
}, {
  start: 10637,
  length: 1,
  convRule: rule4
}, {
  start: 10638,
  length: 1,
  convRule: rule5
}, {
  start: 10639,
  length: 1,
  convRule: rule4
}, {
  start: 10640,
  length: 1,
  convRule: rule5
}, {
  start: 10641,
  length: 1,
  convRule: rule4
}, {
  start: 10642,
  length: 1,
  convRule: rule5
}, {
  start: 10643,
  length: 1,
  convRule: rule4
}, {
  start: 10644,
  length: 1,
  convRule: rule5
}, {
  start: 10645,
  length: 1,
  convRule: rule4
}, {
  start: 10646,
  length: 1,
  convRule: rule5
}, {
  start: 10647,
  length: 1,
  convRule: rule4
}, {
  start: 10648,
  length: 1,
  convRule: rule5
}, {
  start: 10649,
  length: 63,
  convRule: rule6
}, {
  start: 10712,
  length: 1,
  convRule: rule4
}, {
  start: 10713,
  length: 1,
  convRule: rule5
}, {
  start: 10714,
  length: 1,
  convRule: rule4
}, {
  start: 10715,
  length: 1,
  convRule: rule5
}, {
  start: 10716,
  length: 32,
  convRule: rule6
}, {
  start: 10748,
  length: 1,
  convRule: rule4
}, {
  start: 10749,
  length: 1,
  convRule: rule5
}, {
  start: 10750,
  length: 258,
  convRule: rule6
}, {
  start: 11008,
  length: 48,
  convRule: rule13
}, {
  start: 11056,
  length: 21,
  convRule: rule6
}, {
  start: 11077,
  length: 2,
  convRule: rule13
}, {
  start: 11079,
  length: 6,
  convRule: rule6
}, {
  start: 11088,
  length: 10,
  convRule: rule13
}, {
  start: 11264,
  length: 47,
  convRule: rule112
}, {
  start: 11312,
  length: 47,
  convRule: rule113
}, {
  start: 11360,
  length: 1,
  convRule: rule21
}, {
  start: 11361,
  length: 1,
  convRule: rule22
}, {
  start: 11362,
  length: 1,
  convRule: rule150
}, {
  start: 11363,
  length: 1,
  convRule: rule151
}, {
  start: 11364,
  length: 1,
  convRule: rule152
}, {
  start: 11365,
  length: 1,
  convRule: rule153
}, {
  start: 11366,
  length: 1,
  convRule: rule154
}, {
  start: 11367,
  length: 1,
  convRule: rule21
}, {
  start: 11368,
  length: 1,
  convRule: rule22
}, {
  start: 11369,
  length: 1,
  convRule: rule21
}, {
  start: 11370,
  length: 1,
  convRule: rule22
}, {
  start: 11371,
  length: 1,
  convRule: rule21
}, {
  start: 11372,
  length: 1,
  convRule: rule22
}, {
  start: 11373,
  length: 1,
  convRule: rule155
}, {
  start: 11374,
  length: 1,
  convRule: rule156
}, {
  start: 11375,
  length: 1,
  convRule: rule157
}, {
  start: 11376,
  length: 1,
  convRule: rule158
}, {
  start: 11377,
  length: 1,
  convRule: rule14
}, {
  start: 11378,
  length: 1,
  convRule: rule21
}, {
  start: 11379,
  length: 1,
  convRule: rule22
}, {
  start: 11380,
  length: 1,
  convRule: rule14
}, {
  start: 11381,
  length: 1,
  convRule: rule21
}, {
  start: 11382,
  length: 1,
  convRule: rule22
}, {
  start: 11383,
  length: 6,
  convRule: rule14
}, {
  start: 11389,
  length: 1,
  convRule: rule83
}, {
  start: 11390,
  length: 2,
  convRule: rule159
}, {
  start: 11392,
  length: 1,
  convRule: rule21
}, {
  start: 11393,
  length: 1,
  convRule: rule22
}, {
  start: 11394,
  length: 1,
  convRule: rule21
}, {
  start: 11395,
  length: 1,
  convRule: rule22
}, {
  start: 11396,
  length: 1,
  convRule: rule21
}, {
  start: 11397,
  length: 1,
  convRule: rule22
}, {
  start: 11398,
  length: 1,
  convRule: rule21
}, {
  start: 11399,
  length: 1,
  convRule: rule22
}, {
  start: 11400,
  length: 1,
  convRule: rule21
}, {
  start: 11401,
  length: 1,
  convRule: rule22
}, {
  start: 11402,
  length: 1,
  convRule: rule21
}, {
  start: 11403,
  length: 1,
  convRule: rule22
}, {
  start: 11404,
  length: 1,
  convRule: rule21
}, {
  start: 11405,
  length: 1,
  convRule: rule22
}, {
  start: 11406,
  length: 1,
  convRule: rule21
}, {
  start: 11407,
  length: 1,
  convRule: rule22
}, {
  start: 11408,
  length: 1,
  convRule: rule21
}, {
  start: 11409,
  length: 1,
  convRule: rule22
}, {
  start: 11410,
  length: 1,
  convRule: rule21
}, {
  start: 11411,
  length: 1,
  convRule: rule22
}, {
  start: 11412,
  length: 1,
  convRule: rule21
}, {
  start: 11413,
  length: 1,
  convRule: rule22
}, {
  start: 11414,
  length: 1,
  convRule: rule21
}, {
  start: 11415,
  length: 1,
  convRule: rule22
}, {
  start: 11416,
  length: 1,
  convRule: rule21
}, {
  start: 11417,
  length: 1,
  convRule: rule22
}, {
  start: 11418,
  length: 1,
  convRule: rule21
}, {
  start: 11419,
  length: 1,
  convRule: rule22
}, {
  start: 11420,
  length: 1,
  convRule: rule21
}, {
  start: 11421,
  length: 1,
  convRule: rule22
}, {
  start: 11422,
  length: 1,
  convRule: rule21
}, {
  start: 11423,
  length: 1,
  convRule: rule22
}, {
  start: 11424,
  length: 1,
  convRule: rule21
}, {
  start: 11425,
  length: 1,
  convRule: rule22
}, {
  start: 11426,
  length: 1,
  convRule: rule21
}, {
  start: 11427,
  length: 1,
  convRule: rule22
}, {
  start: 11428,
  length: 1,
  convRule: rule21
}, {
  start: 11429,
  length: 1,
  convRule: rule22
}, {
  start: 11430,
  length: 1,
  convRule: rule21
}, {
  start: 11431,
  length: 1,
  convRule: rule22
}, {
  start: 11432,
  length: 1,
  convRule: rule21
}, {
  start: 11433,
  length: 1,
  convRule: rule22
}, {
  start: 11434,
  length: 1,
  convRule: rule21
}, {
  start: 11435,
  length: 1,
  convRule: rule22
}, {
  start: 11436,
  length: 1,
  convRule: rule21
}, {
  start: 11437,
  length: 1,
  convRule: rule22
}, {
  start: 11438,
  length: 1,
  convRule: rule21
}, {
  start: 11439,
  length: 1,
  convRule: rule22
}, {
  start: 11440,
  length: 1,
  convRule: rule21
}, {
  start: 11441,
  length: 1,
  convRule: rule22
}, {
  start: 11442,
  length: 1,
  convRule: rule21
}, {
  start: 11443,
  length: 1,
  convRule: rule22
}, {
  start: 11444,
  length: 1,
  convRule: rule21
}, {
  start: 11445,
  length: 1,
  convRule: rule22
}, {
  start: 11446,
  length: 1,
  convRule: rule21
}, {
  start: 11447,
  length: 1,
  convRule: rule22
}, {
  start: 11448,
  length: 1,
  convRule: rule21
}, {
  start: 11449,
  length: 1,
  convRule: rule22
}, {
  start: 11450,
  length: 1,
  convRule: rule21
}, {
  start: 11451,
  length: 1,
  convRule: rule22
}, {
  start: 11452,
  length: 1,
  convRule: rule21
}, {
  start: 11453,
  length: 1,
  convRule: rule22
}, {
  start: 11454,
  length: 1,
  convRule: rule21
}, {
  start: 11455,
  length: 1,
  convRule: rule22
}, {
  start: 11456,
  length: 1,
  convRule: rule21
}, {
  start: 11457,
  length: 1,
  convRule: rule22
}, {
  start: 11458,
  length: 1,
  convRule: rule21
}, {
  start: 11459,
  length: 1,
  convRule: rule22
}, {
  start: 11460,
  length: 1,
  convRule: rule21
}, {
  start: 11461,
  length: 1,
  convRule: rule22
}, {
  start: 11462,
  length: 1,
  convRule: rule21
}, {
  start: 11463,
  length: 1,
  convRule: rule22
}, {
  start: 11464,
  length: 1,
  convRule: rule21
}, {
  start: 11465,
  length: 1,
  convRule: rule22
}, {
  start: 11466,
  length: 1,
  convRule: rule21
}, {
  start: 11467,
  length: 1,
  convRule: rule22
}, {
  start: 11468,
  length: 1,
  convRule: rule21
}, {
  start: 11469,
  length: 1,
  convRule: rule22
}, {
  start: 11470,
  length: 1,
  convRule: rule21
}, {
  start: 11471,
  length: 1,
  convRule: rule22
}, {
  start: 11472,
  length: 1,
  convRule: rule21
}, {
  start: 11473,
  length: 1,
  convRule: rule22
}, {
  start: 11474,
  length: 1,
  convRule: rule21
}, {
  start: 11475,
  length: 1,
  convRule: rule22
}, {
  start: 11476,
  length: 1,
  convRule: rule21
}, {
  start: 11477,
  length: 1,
  convRule: rule22
}, {
  start: 11478,
  length: 1,
  convRule: rule21
}, {
  start: 11479,
  length: 1,
  convRule: rule22
}, {
  start: 11480,
  length: 1,
  convRule: rule21
}, {
  start: 11481,
  length: 1,
  convRule: rule22
}, {
  start: 11482,
  length: 1,
  convRule: rule21
}, {
  start: 11483,
  length: 1,
  convRule: rule22
}, {
  start: 11484,
  length: 1,
  convRule: rule21
}, {
  start: 11485,
  length: 1,
  convRule: rule22
}, {
  start: 11486,
  length: 1,
  convRule: rule21
}, {
  start: 11487,
  length: 1,
  convRule: rule22
}, {
  start: 11488,
  length: 1,
  convRule: rule21
}, {
  start: 11489,
  length: 1,
  convRule: rule22
}, {
  start: 11490,
  length: 1,
  convRule: rule21
}, {
  start: 11491,
  length: 1,
  convRule: rule22
}, {
  start: 11492,
  length: 1,
  convRule: rule14
}, {
  start: 11493,
  length: 6,
  convRule: rule13
}, {
  start: 11499,
  length: 1,
  convRule: rule21
}, {
  start: 11500,
  length: 1,
  convRule: rule22
}, {
  start: 11501,
  length: 1,
  convRule: rule21
}, {
  start: 11502,
  length: 1,
  convRule: rule22
}, {
  start: 11503,
  length: 3,
  convRule: rule84
}, {
  start: 11513,
  length: 4,
  convRule: rule2
}, {
  start: 11517,
  length: 1,
  convRule: rule17
}, {
  start: 11518,
  length: 2,
  convRule: rule2
}, {
  start: 11520,
  length: 38,
  convRule: rule160
}, {
  start: 11568,
  length: 54,
  convRule: rule45
}, {
  start: 11631,
  length: 1,
  convRule: rule83
}, {
  start: 11632,
  length: 1,
  convRule: rule2
}, {
  start: 11647,
  length: 1,
  convRule: rule84
}, {
  start: 11648,
  length: 23,
  convRule: rule45
}, {
  start: 11680,
  length: 7,
  convRule: rule45
}, {
  start: 11688,
  length: 7,
  convRule: rule45
}, {
  start: 11696,
  length: 7,
  convRule: rule45
}, {
  start: 11704,
  length: 7,
  convRule: rule45
}, {
  start: 11712,
  length: 7,
  convRule: rule45
}, {
  start: 11720,
  length: 7,
  convRule: rule45
}, {
  start: 11728,
  length: 7,
  convRule: rule45
}, {
  start: 11736,
  length: 7,
  convRule: rule45
}, {
  start: 11744,
  length: 32,
  convRule: rule84
}, {
  start: 11776,
  length: 2,
  convRule: rule2
}, {
  start: 11778,
  length: 1,
  convRule: rule15
}, {
  start: 11779,
  length: 1,
  convRule: rule19
}, {
  start: 11780,
  length: 1,
  convRule: rule15
}, {
  start: 11781,
  length: 1,
  convRule: rule19
}, {
  start: 11782,
  length: 3,
  convRule: rule2
}, {
  start: 11785,
  length: 1,
  convRule: rule15
}, {
  start: 11786,
  length: 1,
  convRule: rule19
}, {
  start: 11787,
  length: 1,
  convRule: rule2
}, {
  start: 11788,
  length: 1,
  convRule: rule15
}, {
  start: 11789,
  length: 1,
  convRule: rule19
}, {
  start: 11790,
  length: 9,
  convRule: rule2
}, {
  start: 11799,
  length: 1,
  convRule: rule7
}, {
  start: 11800,
  length: 2,
  convRule: rule2
}, {
  start: 11802,
  length: 1,
  convRule: rule7
}, {
  start: 11803,
  length: 1,
  convRule: rule2
}, {
  start: 11804,
  length: 1,
  convRule: rule15
}, {
  start: 11805,
  length: 1,
  convRule: rule19
}, {
  start: 11806,
  length: 2,
  convRule: rule2
}, {
  start: 11808,
  length: 1,
  convRule: rule15
}, {
  start: 11809,
  length: 1,
  convRule: rule19
}, {
  start: 11810,
  length: 1,
  convRule: rule4
}, {
  start: 11811,
  length: 1,
  convRule: rule5
}, {
  start: 11812,
  length: 1,
  convRule: rule4
}, {
  start: 11813,
  length: 1,
  convRule: rule5
}, {
  start: 11814,
  length: 1,
  convRule: rule4
}, {
  start: 11815,
  length: 1,
  convRule: rule5
}, {
  start: 11816,
  length: 1,
  convRule: rule4
}, {
  start: 11817,
  length: 1,
  convRule: rule5
}, {
  start: 11818,
  length: 5,
  convRule: rule2
}, {
  start: 11823,
  length: 1,
  convRule: rule83
}, {
  start: 11824,
  length: 2,
  convRule: rule2
}, {
  start: 11904,
  length: 26,
  convRule: rule13
}, {
  start: 11931,
  length: 89,
  convRule: rule13
}, {
  start: 12032,
  length: 214,
  convRule: rule13
}, {
  start: 12272,
  length: 12,
  convRule: rule13
}, {
  start: 12288,
  length: 1,
  convRule: rule1
}, {
  start: 12289,
  length: 3,
  convRule: rule2
}, {
  start: 12292,
  length: 1,
  convRule: rule13
}, {
  start: 12293,
  length: 1,
  convRule: rule83
}, {
  start: 12294,
  length: 1,
  convRule: rule45
}, {
  start: 12295,
  length: 1,
  convRule: rule116
}, {
  start: 12296,
  length: 1,
  convRule: rule4
}, {
  start: 12297,
  length: 1,
  convRule: rule5
}, {
  start: 12298,
  length: 1,
  convRule: rule4
}, {
  start: 12299,
  length: 1,
  convRule: rule5
}, {
  start: 12300,
  length: 1,
  convRule: rule4
}, {
  start: 12301,
  length: 1,
  convRule: rule5
}, {
  start: 12302,
  length: 1,
  convRule: rule4
}, {
  start: 12303,
  length: 1,
  convRule: rule5
}, {
  start: 12304,
  length: 1,
  convRule: rule4
}, {
  start: 12305,
  length: 1,
  convRule: rule5
}, {
  start: 12306,
  length: 2,
  convRule: rule13
}, {
  start: 12308,
  length: 1,
  convRule: rule4
}, {
  start: 12309,
  length: 1,
  convRule: rule5
}, {
  start: 12310,
  length: 1,
  convRule: rule4
}, {
  start: 12311,
  length: 1,
  convRule: rule5
}, {
  start: 12312,
  length: 1,
  convRule: rule4
}, {
  start: 12313,
  length: 1,
  convRule: rule5
}, {
  start: 12314,
  length: 1,
  convRule: rule4
}, {
  start: 12315,
  length: 1,
  convRule: rule5
}, {
  start: 12316,
  length: 1,
  convRule: rule7
}, {
  start: 12317,
  length: 1,
  convRule: rule4
}, {
  start: 12318,
  length: 2,
  convRule: rule5
}, {
  start: 12320,
  length: 1,
  convRule: rule13
}, {
  start: 12321,
  length: 9,
  convRule: rule116
}, {
  start: 12330,
  length: 6,
  convRule: rule84
}, {
  start: 12336,
  length: 1,
  convRule: rule7
}, {
  start: 12337,
  length: 5,
  convRule: rule83
}, {
  start: 12342,
  length: 2,
  convRule: rule13
}, {
  start: 12344,
  length: 3,
  convRule: rule116
}, {
  start: 12347,
  length: 1,
  convRule: rule83
}, {
  start: 12348,
  length: 1,
  convRule: rule45
}, {
  start: 12349,
  length: 1,
  convRule: rule2
}, {
  start: 12350,
  length: 2,
  convRule: rule13
}, {
  start: 12353,
  length: 86,
  convRule: rule45
}, {
  start: 12441,
  length: 2,
  convRule: rule84
}, {
  start: 12443,
  length: 2,
  convRule: rule10
}, {
  start: 12445,
  length: 2,
  convRule: rule83
}, {
  start: 12447,
  length: 1,
  convRule: rule45
}, {
  start: 12448,
  length: 1,
  convRule: rule7
}, {
  start: 12449,
  length: 90,
  convRule: rule45
}, {
  start: 12539,
  length: 1,
  convRule: rule2
}, {
  start: 12540,
  length: 3,
  convRule: rule83
}, {
  start: 12543,
  length: 1,
  convRule: rule45
}, {
  start: 12549,
  length: 41,
  convRule: rule45
}, {
  start: 12593,
  length: 94,
  convRule: rule45
}, {
  start: 12688,
  length: 2,
  convRule: rule13
}, {
  start: 12690,
  length: 4,
  convRule: rule17
}, {
  start: 12694,
  length: 10,
  convRule: rule13
}, {
  start: 12704,
  length: 27,
  convRule: rule45
}, {
  start: 12736,
  length: 36,
  convRule: rule13
}, {
  start: 12784,
  length: 16,
  convRule: rule45
}, {
  start: 12800,
  length: 31,
  convRule: rule13
}, {
  start: 12832,
  length: 10,
  convRule: rule17
}, {
  start: 12842,
  length: 39,
  convRule: rule13
}, {
  start: 12881,
  length: 15,
  convRule: rule17
}, {
  start: 12896,
  length: 32,
  convRule: rule13
}, {
  start: 12928,
  length: 10,
  convRule: rule17
}, {
  start: 12938,
  length: 39,
  convRule: rule13
}, {
  start: 12977,
  length: 15,
  convRule: rule17
}, {
  start: 12992,
  length: 63,
  convRule: rule13
}, {
  start: 13056,
  length: 256,
  convRule: rule13
}, {
  start: 13312,
  length: 6582,
  convRule: rule45
}, {
  start: 19904,
  length: 64,
  convRule: rule13
}, {
  start: 19968,
  length: 20940,
  convRule: rule45
}, {
  start: 40960,
  length: 21,
  convRule: rule45
}, {
  start: 40981,
  length: 1,
  convRule: rule83
}, {
  start: 40982,
  length: 1143,
  convRule: rule45
}, {
  start: 42128,
  length: 55,
  convRule: rule13
}, {
  start: 42192,
  length: 40,
  convRule: rule45
}, {
  start: 42232,
  length: 6,
  convRule: rule83
}, {
  start: 42238,
  length: 2,
  convRule: rule2
}, {
  start: 42240,
  length: 268,
  convRule: rule45
}, {
  start: 42508,
  length: 1,
  convRule: rule83
}, {
  start: 42509,
  length: 3,
  convRule: rule2
}, {
  start: 42512,
  length: 16,
  convRule: rule45
}, {
  start: 42528,
  length: 10,
  convRule: rule8
}, {
  start: 42538,
  length: 2,
  convRule: rule45
}, {
  start: 42560,
  length: 1,
  convRule: rule21
}, {
  start: 42561,
  length: 1,
  convRule: rule22
}, {
  start: 42562,
  length: 1,
  convRule: rule21
}, {
  start: 42563,
  length: 1,
  convRule: rule22
}, {
  start: 42564,
  length: 1,
  convRule: rule21
}, {
  start: 42565,
  length: 1,
  convRule: rule22
}, {
  start: 42566,
  length: 1,
  convRule: rule21
}, {
  start: 42567,
  length: 1,
  convRule: rule22
}, {
  start: 42568,
  length: 1,
  convRule: rule21
}, {
  start: 42569,
  length: 1,
  convRule: rule22
}, {
  start: 42570,
  length: 1,
  convRule: rule21
}, {
  start: 42571,
  length: 1,
  convRule: rule22
}, {
  start: 42572,
  length: 1,
  convRule: rule21
}, {
  start: 42573,
  length: 1,
  convRule: rule22
}, {
  start: 42574,
  length: 1,
  convRule: rule21
}, {
  start: 42575,
  length: 1,
  convRule: rule22
}, {
  start: 42576,
  length: 1,
  convRule: rule21
}, {
  start: 42577,
  length: 1,
  convRule: rule22
}, {
  start: 42578,
  length: 1,
  convRule: rule21
}, {
  start: 42579,
  length: 1,
  convRule: rule22
}, {
  start: 42580,
  length: 1,
  convRule: rule21
}, {
  start: 42581,
  length: 1,
  convRule: rule22
}, {
  start: 42582,
  length: 1,
  convRule: rule21
}, {
  start: 42583,
  length: 1,
  convRule: rule22
}, {
  start: 42584,
  length: 1,
  convRule: rule21
}, {
  start: 42585,
  length: 1,
  convRule: rule22
}, {
  start: 42586,
  length: 1,
  convRule: rule21
}, {
  start: 42587,
  length: 1,
  convRule: rule22
}, {
  start: 42588,
  length: 1,
  convRule: rule21
}, {
  start: 42589,
  length: 1,
  convRule: rule22
}, {
  start: 42590,
  length: 1,
  convRule: rule21
}, {
  start: 42591,
  length: 1,
  convRule: rule22
}, {
  start: 42592,
  length: 1,
  convRule: rule21
}, {
  start: 42593,
  length: 1,
  convRule: rule22
}, {
  start: 42594,
  length: 1,
  convRule: rule21
}, {
  start: 42595,
  length: 1,
  convRule: rule22
}, {
  start: 42596,
  length: 1,
  convRule: rule21
}, {
  start: 42597,
  length: 1,
  convRule: rule22
}, {
  start: 42598,
  length: 1,
  convRule: rule21
}, {
  start: 42599,
  length: 1,
  convRule: rule22
}, {
  start: 42600,
  length: 1,
  convRule: rule21
}, {
  start: 42601,
  length: 1,
  convRule: rule22
}, {
  start: 42602,
  length: 1,
  convRule: rule21
}, {
  start: 42603,
  length: 1,
  convRule: rule22
}, {
  start: 42604,
  length: 1,
  convRule: rule21
}, {
  start: 42605,
  length: 1,
  convRule: rule22
}, {
  start: 42606,
  length: 1,
  convRule: rule45
}, {
  start: 42607,
  length: 1,
  convRule: rule84
}, {
  start: 42608,
  length: 3,
  convRule: rule109
}, {
  start: 42611,
  length: 1,
  convRule: rule2
}, {
  start: 42620,
  length: 2,
  convRule: rule84
}, {
  start: 42622,
  length: 1,
  convRule: rule2
}, {
  start: 42623,
  length: 1,
  convRule: rule83
}, {
  start: 42624,
  length: 1,
  convRule: rule21
}, {
  start: 42625,
  length: 1,
  convRule: rule22
}, {
  start: 42626,
  length: 1,
  convRule: rule21
}, {
  start: 42627,
  length: 1,
  convRule: rule22
}, {
  start: 42628,
  length: 1,
  convRule: rule21
}, {
  start: 42629,
  length: 1,
  convRule: rule22
}, {
  start: 42630,
  length: 1,
  convRule: rule21
}, {
  start: 42631,
  length: 1,
  convRule: rule22
}, {
  start: 42632,
  length: 1,
  convRule: rule21
}, {
  start: 42633,
  length: 1,
  convRule: rule22
}, {
  start: 42634,
  length: 1,
  convRule: rule21
}, {
  start: 42635,
  length: 1,
  convRule: rule22
}, {
  start: 42636,
  length: 1,
  convRule: rule21
}, {
  start: 42637,
  length: 1,
  convRule: rule22
}, {
  start: 42638,
  length: 1,
  convRule: rule21
}, {
  start: 42639,
  length: 1,
  convRule: rule22
}, {
  start: 42640,
  length: 1,
  convRule: rule21
}, {
  start: 42641,
  length: 1,
  convRule: rule22
}, {
  start: 42642,
  length: 1,
  convRule: rule21
}, {
  start: 42643,
  length: 1,
  convRule: rule22
}, {
  start: 42644,
  length: 1,
  convRule: rule21
}, {
  start: 42645,
  length: 1,
  convRule: rule22
}, {
  start: 42646,
  length: 1,
  convRule: rule21
}, {
  start: 42647,
  length: 1,
  convRule: rule22
}, {
  start: 42656,
  length: 70,
  convRule: rule45
}, {
  start: 42726,
  length: 10,
  convRule: rule116
}, {
  start: 42736,
  length: 2,
  convRule: rule84
}, {
  start: 42738,
  length: 6,
  convRule: rule2
}, {
  start: 42752,
  length: 23,
  convRule: rule10
}, {
  start: 42775,
  length: 9,
  convRule: rule83
}, {
  start: 42784,
  length: 2,
  convRule: rule10
}, {
  start: 42786,
  length: 1,
  convRule: rule21
}, {
  start: 42787,
  length: 1,
  convRule: rule22
}, {
  start: 42788,
  length: 1,
  convRule: rule21
}, {
  start: 42789,
  length: 1,
  convRule: rule22
}, {
  start: 42790,
  length: 1,
  convRule: rule21
}, {
  start: 42791,
  length: 1,
  convRule: rule22
}, {
  start: 42792,
  length: 1,
  convRule: rule21
}, {
  start: 42793,
  length: 1,
  convRule: rule22
}, {
  start: 42794,
  length: 1,
  convRule: rule21
}, {
  start: 42795,
  length: 1,
  convRule: rule22
}, {
  start: 42796,
  length: 1,
  convRule: rule21
}, {
  start: 42797,
  length: 1,
  convRule: rule22
}, {
  start: 42798,
  length: 1,
  convRule: rule21
}, {
  start: 42799,
  length: 1,
  convRule: rule22
}, {
  start: 42800,
  length: 2,
  convRule: rule14
}, {
  start: 42802,
  length: 1,
  convRule: rule21
}, {
  start: 42803,
  length: 1,
  convRule: rule22
}, {
  start: 42804,
  length: 1,
  convRule: rule21
}, {
  start: 42805,
  length: 1,
  convRule: rule22
}, {
  start: 42806,
  length: 1,
  convRule: rule21
}, {
  start: 42807,
  length: 1,
  convRule: rule22
}, {
  start: 42808,
  length: 1,
  convRule: rule21
}, {
  start: 42809,
  length: 1,
  convRule: rule22
}, {
  start: 42810,
  length: 1,
  convRule: rule21
}, {
  start: 42811,
  length: 1,
  convRule: rule22
}, {
  start: 42812,
  length: 1,
  convRule: rule21
}, {
  start: 42813,
  length: 1,
  convRule: rule22
}, {
  start: 42814,
  length: 1,
  convRule: rule21
}, {
  start: 42815,
  length: 1,
  convRule: rule22
}, {
  start: 42816,
  length: 1,
  convRule: rule21
}, {
  start: 42817,
  length: 1,
  convRule: rule22
}, {
  start: 42818,
  length: 1,
  convRule: rule21
}, {
  start: 42819,
  length: 1,
  convRule: rule22
}, {
  start: 42820,
  length: 1,
  convRule: rule21
}, {
  start: 42821,
  length: 1,
  convRule: rule22
}, {
  start: 42822,
  length: 1,
  convRule: rule21
}, {
  start: 42823,
  length: 1,
  convRule: rule22
}, {
  start: 42824,
  length: 1,
  convRule: rule21
}, {
  start: 42825,
  length: 1,
  convRule: rule22
}, {
  start: 42826,
  length: 1,
  convRule: rule21
}, {
  start: 42827,
  length: 1,
  convRule: rule22
}, {
  start: 42828,
  length: 1,
  convRule: rule21
}, {
  start: 42829,
  length: 1,
  convRule: rule22
}, {
  start: 42830,
  length: 1,
  convRule: rule21
}, {
  start: 42831,
  length: 1,
  convRule: rule22
}, {
  start: 42832,
  length: 1,
  convRule: rule21
}, {
  start: 42833,
  length: 1,
  convRule: rule22
}, {
  start: 42834,
  length: 1,
  convRule: rule21
}, {
  start: 42835,
  length: 1,
  convRule: rule22
}, {
  start: 42836,
  length: 1,
  convRule: rule21
}, {
  start: 42837,
  length: 1,
  convRule: rule22
}, {
  start: 42838,
  length: 1,
  convRule: rule21
}, {
  start: 42839,
  length: 1,
  convRule: rule22
}, {
  start: 42840,
  length: 1,
  convRule: rule21
}, {
  start: 42841,
  length: 1,
  convRule: rule22
}, {
  start: 42842,
  length: 1,
  convRule: rule21
}, {
  start: 42843,
  length: 1,
  convRule: rule22
}, {
  start: 42844,
  length: 1,
  convRule: rule21
}, {
  start: 42845,
  length: 1,
  convRule: rule22
}, {
  start: 42846,
  length: 1,
  convRule: rule21
}, {
  start: 42847,
  length: 1,
  convRule: rule22
}, {
  start: 42848,
  length: 1,
  convRule: rule21
}, {
  start: 42849,
  length: 1,
  convRule: rule22
}, {
  start: 42850,
  length: 1,
  convRule: rule21
}, {
  start: 42851,
  length: 1,
  convRule: rule22
}, {
  start: 42852,
  length: 1,
  convRule: rule21
}, {
  start: 42853,
  length: 1,
  convRule: rule22
}, {
  start: 42854,
  length: 1,
  convRule: rule21
}, {
  start: 42855,
  length: 1,
  convRule: rule22
}, {
  start: 42856,
  length: 1,
  convRule: rule21
}, {
  start: 42857,
  length: 1,
  convRule: rule22
}, {
  start: 42858,
  length: 1,
  convRule: rule21
}, {
  start: 42859,
  length: 1,
  convRule: rule22
}, {
  start: 42860,
  length: 1,
  convRule: rule21
}, {
  start: 42861,
  length: 1,
  convRule: rule22
}, {
  start: 42862,
  length: 1,
  convRule: rule21
}, {
  start: 42863,
  length: 1,
  convRule: rule22
}, {
  start: 42864,
  length: 1,
  convRule: rule83
}, {
  start: 42865,
  length: 8,
  convRule: rule14
}, {
  start: 42873,
  length: 1,
  convRule: rule21
}, {
  start: 42874,
  length: 1,
  convRule: rule22
}, {
  start: 42875,
  length: 1,
  convRule: rule21
}, {
  start: 42876,
  length: 1,
  convRule: rule22
}, {
  start: 42877,
  length: 1,
  convRule: rule161
}, {
  start: 42878,
  length: 1,
  convRule: rule21
}, {
  start: 42879,
  length: 1,
  convRule: rule22
}, {
  start: 42880,
  length: 1,
  convRule: rule21
}, {
  start: 42881,
  length: 1,
  convRule: rule22
}, {
  start: 42882,
  length: 1,
  convRule: rule21
}, {
  start: 42883,
  length: 1,
  convRule: rule22
}, {
  start: 42884,
  length: 1,
  convRule: rule21
}, {
  start: 42885,
  length: 1,
  convRule: rule22
}, {
  start: 42886,
  length: 1,
  convRule: rule21
}, {
  start: 42887,
  length: 1,
  convRule: rule22
}, {
  start: 42888,
  length: 1,
  convRule: rule83
}, {
  start: 42889,
  length: 2,
  convRule: rule10
}, {
  start: 42891,
  length: 1,
  convRule: rule21
}, {
  start: 42892,
  length: 1,
  convRule: rule22
}, {
  start: 42893,
  length: 1,
  convRule: rule162
}, {
  start: 42894,
  length: 1,
  convRule: rule14
}, {
  start: 42896,
  length: 1,
  convRule: rule21
}, {
  start: 42897,
  length: 1,
  convRule: rule22
}, {
  start: 42912,
  length: 1,
  convRule: rule21
}, {
  start: 42913,
  length: 1,
  convRule: rule22
}, {
  start: 42914,
  length: 1,
  convRule: rule21
}, {
  start: 42915,
  length: 1,
  convRule: rule22
}, {
  start: 42916,
  length: 1,
  convRule: rule21
}, {
  start: 42917,
  length: 1,
  convRule: rule22
}, {
  start: 42918,
  length: 1,
  convRule: rule21
}, {
  start: 42919,
  length: 1,
  convRule: rule22
}, {
  start: 42920,
  length: 1,
  convRule: rule21
}, {
  start: 42921,
  length: 1,
  convRule: rule22
}, {
  start: 43002,
  length: 1,
  convRule: rule14
}, {
  start: 43003,
  length: 7,
  convRule: rule45
}, {
  start: 43010,
  length: 1,
  convRule: rule84
}, {
  start: 43011,
  length: 3,
  convRule: rule45
}, {
  start: 43014,
  length: 1,
  convRule: rule84
}, {
  start: 43015,
  length: 4,
  convRule: rule45
}, {
  start: 43019,
  length: 1,
  convRule: rule84
}, {
  start: 43020,
  length: 23,
  convRule: rule45
}, {
  start: 43043,
  length: 2,
  convRule: rule114
}, {
  start: 43045,
  length: 2,
  convRule: rule84
}, {
  start: 43047,
  length: 1,
  convRule: rule114
}, {
  start: 43048,
  length: 4,
  convRule: rule13
}, {
  start: 43056,
  length: 6,
  convRule: rule17
}, {
  start: 43062,
  length: 2,
  convRule: rule13
}, {
  start: 43064,
  length: 1,
  convRule: rule3
}, {
  start: 43065,
  length: 1,
  convRule: rule13
}, {
  start: 43072,
  length: 52,
  convRule: rule45
}, {
  start: 43124,
  length: 4,
  convRule: rule2
}, {
  start: 43136,
  length: 2,
  convRule: rule114
}, {
  start: 43138,
  length: 50,
  convRule: rule45
}, {
  start: 43188,
  length: 16,
  convRule: rule114
}, {
  start: 43204,
  length: 1,
  convRule: rule84
}, {
  start: 43214,
  length: 2,
  convRule: rule2
}, {
  start: 43216,
  length: 10,
  convRule: rule8
}, {
  start: 43232,
  length: 18,
  convRule: rule84
}, {
  start: 43250,
  length: 6,
  convRule: rule45
}, {
  start: 43256,
  length: 3,
  convRule: rule2
}, {
  start: 43259,
  length: 1,
  convRule: rule45
}, {
  start: 43264,
  length: 10,
  convRule: rule8
}, {
  start: 43274,
  length: 28,
  convRule: rule45
}, {
  start: 43302,
  length: 8,
  convRule: rule84
}, {
  start: 43310,
  length: 2,
  convRule: rule2
}, {
  start: 43312,
  length: 23,
  convRule: rule45
}, {
  start: 43335,
  length: 11,
  convRule: rule84
}, {
  start: 43346,
  length: 2,
  convRule: rule114
}, {
  start: 43359,
  length: 1,
  convRule: rule2
}, {
  start: 43360,
  length: 29,
  convRule: rule45
}, {
  start: 43392,
  length: 3,
  convRule: rule84
}, {
  start: 43395,
  length: 1,
  convRule: rule114
}, {
  start: 43396,
  length: 47,
  convRule: rule45
}, {
  start: 43443,
  length: 1,
  convRule: rule84
}, {
  start: 43444,
  length: 2,
  convRule: rule114
}, {
  start: 43446,
  length: 4,
  convRule: rule84
}, {
  start: 43450,
  length: 2,
  convRule: rule114
}, {
  start: 43452,
  length: 1,
  convRule: rule84
}, {
  start: 43453,
  length: 4,
  convRule: rule114
}, {
  start: 43457,
  length: 13,
  convRule: rule2
}, {
  start: 43471,
  length: 1,
  convRule: rule83
}, {
  start: 43472,
  length: 10,
  convRule: rule8
}, {
  start: 43486,
  length: 2,
  convRule: rule2
}, {
  start: 43520,
  length: 41,
  convRule: rule45
}, {
  start: 43561,
  length: 6,
  convRule: rule84
}, {
  start: 43567,
  length: 2,
  convRule: rule114
}, {
  start: 43569,
  length: 2,
  convRule: rule84
}, {
  start: 43571,
  length: 2,
  convRule: rule114
}, {
  start: 43573,
  length: 2,
  convRule: rule84
}, {
  start: 43584,
  length: 3,
  convRule: rule45
}, {
  start: 43587,
  length: 1,
  convRule: rule84
}, {
  start: 43588,
  length: 8,
  convRule: rule45
}, {
  start: 43596,
  length: 1,
  convRule: rule84
}, {
  start: 43597,
  length: 1,
  convRule: rule114
}, {
  start: 43600,
  length: 10,
  convRule: rule8
}, {
  start: 43612,
  length: 4,
  convRule: rule2
}, {
  start: 43616,
  length: 16,
  convRule: rule45
}, {
  start: 43632,
  length: 1,
  convRule: rule83
}, {
  start: 43633,
  length: 6,
  convRule: rule45
}, {
  start: 43639,
  length: 3,
  convRule: rule13
}, {
  start: 43642,
  length: 1,
  convRule: rule45
}, {
  start: 43643,
  length: 1,
  convRule: rule114
}, {
  start: 43648,
  length: 48,
  convRule: rule45
}, {
  start: 43696,
  length: 1,
  convRule: rule84
}, {
  start: 43697,
  length: 1,
  convRule: rule45
}, {
  start: 43698,
  length: 3,
  convRule: rule84
}, {
  start: 43701,
  length: 2,
  convRule: rule45
}, {
  start: 43703,
  length: 2,
  convRule: rule84
}, {
  start: 43705,
  length: 5,
  convRule: rule45
}, {
  start: 43710,
  length: 2,
  convRule: rule84
}, {
  start: 43712,
  length: 1,
  convRule: rule45
}, {
  start: 43713,
  length: 1,
  convRule: rule84
}, {
  start: 43714,
  length: 1,
  convRule: rule45
}, {
  start: 43739,
  length: 2,
  convRule: rule45
}, {
  start: 43741,
  length: 1,
  convRule: rule83
}, {
  start: 43742,
  length: 2,
  convRule: rule2
}, {
  start: 43777,
  length: 6,
  convRule: rule45
}, {
  start: 43785,
  length: 6,
  convRule: rule45
}, {
  start: 43793,
  length: 6,
  convRule: rule45
}, {
  start: 43808,
  length: 7,
  convRule: rule45
}, {
  start: 43816,
  length: 7,
  convRule: rule45
}, {
  start: 43968,
  length: 35,
  convRule: rule45
}, {
  start: 44003,
  length: 2,
  convRule: rule114
}, {
  start: 44005,
  length: 1,
  convRule: rule84
}, {
  start: 44006,
  length: 2,
  convRule: rule114
}, {
  start: 44008,
  length: 1,
  convRule: rule84
}, {
  start: 44009,
  length: 2,
  convRule: rule114
}, {
  start: 44011,
  length: 1,
  convRule: rule2
}, {
  start: 44012,
  length: 1,
  convRule: rule114
}, {
  start: 44013,
  length: 1,
  convRule: rule84
}, {
  start: 44016,
  length: 10,
  convRule: rule8
}, {
  start: 44032,
  length: 11172,
  convRule: rule45
}, {
  start: 55216,
  length: 23,
  convRule: rule45
}, {
  start: 55243,
  length: 49,
  convRule: rule45
}, {
  start: 55296,
  length: 896,
  convRule: rule163
}, {
  start: 56192,
  length: 128,
  convRule: rule163
}, {
  start: 56320,
  length: 1024,
  convRule: rule163
}, {
  start: 57344,
  length: 6400,
  convRule: rule164
}, {
  start: 63744,
  length: 302,
  convRule: rule45
}, {
  start: 64048,
  length: 62,
  convRule: rule45
}, {
  start: 64112,
  length: 106,
  convRule: rule45
}, {
  start: 64256,
  length: 7,
  convRule: rule14
}, {
  start: 64275,
  length: 5,
  convRule: rule14
}, {
  start: 64285,
  length: 1,
  convRule: rule45
}, {
  start: 64286,
  length: 1,
  convRule: rule84
}, {
  start: 64287,
  length: 10,
  convRule: rule45
}, {
  start: 64297,
  length: 1,
  convRule: rule6
}, {
  start: 64298,
  length: 13,
  convRule: rule45
}, {
  start: 64312,
  length: 5,
  convRule: rule45
}, {
  start: 64318,
  length: 1,
  convRule: rule45
}, {
  start: 64320,
  length: 2,
  convRule: rule45
}, {
  start: 64323,
  length: 2,
  convRule: rule45
}, {
  start: 64326,
  length: 108,
  convRule: rule45
}, {
  start: 64434,
  length: 16,
  convRule: rule10
}, {
  start: 64467,
  length: 363,
  convRule: rule45
}, {
  start: 64830,
  length: 1,
  convRule: rule4
}, {
  start: 64831,
  length: 1,
  convRule: rule5
}, {
  start: 64848,
  length: 64,
  convRule: rule45
}, {
  start: 64914,
  length: 54,
  convRule: rule45
}, {
  start: 65008,
  length: 12,
  convRule: rule45
}, {
  start: 65020,
  length: 1,
  convRule: rule3
}, {
  start: 65021,
  length: 1,
  convRule: rule13
}, {
  start: 65024,
  length: 16,
  convRule: rule84
}, {
  start: 65040,
  length: 7,
  convRule: rule2
}, {
  start: 65047,
  length: 1,
  convRule: rule4
}, {
  start: 65048,
  length: 1,
  convRule: rule5
}, {
  start: 65049,
  length: 1,
  convRule: rule2
}, {
  start: 65056,
  length: 7,
  convRule: rule84
}, {
  start: 65072,
  length: 1,
  convRule: rule2
}, {
  start: 65073,
  length: 2,
  convRule: rule7
}, {
  start: 65075,
  length: 2,
  convRule: rule11
}, {
  start: 65077,
  length: 1,
  convRule: rule4
}, {
  start: 65078,
  length: 1,
  convRule: rule5
}, {
  start: 65079,
  length: 1,
  convRule: rule4
}, {
  start: 65080,
  length: 1,
  convRule: rule5
}, {
  start: 65081,
  length: 1,
  convRule: rule4
}, {
  start: 65082,
  length: 1,
  convRule: rule5
}, {
  start: 65083,
  length: 1,
  convRule: rule4
}, {
  start: 65084,
  length: 1,
  convRule: rule5
}, {
  start: 65085,
  length: 1,
  convRule: rule4
}, {
  start: 65086,
  length: 1,
  convRule: rule5
}, {
  start: 65087,
  length: 1,
  convRule: rule4
}, {
  start: 65088,
  length: 1,
  convRule: rule5
}, {
  start: 65089,
  length: 1,
  convRule: rule4
}, {
  start: 65090,
  length: 1,
  convRule: rule5
}, {
  start: 65091,
  length: 1,
  convRule: rule4
}, {
  start: 65092,
  length: 1,
  convRule: rule5
}, {
  start: 65093,
  length: 2,
  convRule: rule2
}, {
  start: 65095,
  length: 1,
  convRule: rule4
}, {
  start: 65096,
  length: 1,
  convRule: rule5
}, {
  start: 65097,
  length: 4,
  convRule: rule2
}, {
  start: 65101,
  length: 3,
  convRule: rule11
}, {
  start: 65104,
  length: 3,
  convRule: rule2
}, {
  start: 65108,
  length: 4,
  convRule: rule2
}, {
  start: 65112,
  length: 1,
  convRule: rule7
}, {
  start: 65113,
  length: 1,
  convRule: rule4
}, {
  start: 65114,
  length: 1,
  convRule: rule5
}, {
  start: 65115,
  length: 1,
  convRule: rule4
}, {
  start: 65116,
  length: 1,
  convRule: rule5
}, {
  start: 65117,
  length: 1,
  convRule: rule4
}, {
  start: 65118,
  length: 1,
  convRule: rule5
}, {
  start: 65119,
  length: 3,
  convRule: rule2
}, {
  start: 65122,
  length: 1,
  convRule: rule6
}, {
  start: 65123,
  length: 1,
  convRule: rule7
}, {
  start: 65124,
  length: 3,
  convRule: rule6
}, {
  start: 65128,
  length: 1,
  convRule: rule2
}, {
  start: 65129,
  length: 1,
  convRule: rule3
}, {
  start: 65130,
  length: 2,
  convRule: rule2
}, {
  start: 65136,
  length: 5,
  convRule: rule45
}, {
  start: 65142,
  length: 135,
  convRule: rule45
}, {
  start: 65279,
  length: 1,
  convRule: rule16
}, {
  start: 65281,
  length: 3,
  convRule: rule2
}, {
  start: 65284,
  length: 1,
  convRule: rule3
}, {
  start: 65285,
  length: 3,
  convRule: rule2
}, {
  start: 65288,
  length: 1,
  convRule: rule4
}, {
  start: 65289,
  length: 1,
  convRule: rule5
}, {
  start: 65290,
  length: 1,
  convRule: rule2
}, {
  start: 65291,
  length: 1,
  convRule: rule6
}, {
  start: 65292,
  length: 1,
  convRule: rule2
}, {
  start: 65293,
  length: 1,
  convRule: rule7
}, {
  start: 65294,
  length: 2,
  convRule: rule2
}, {
  start: 65296,
  length: 10,
  convRule: rule8
}, {
  start: 65306,
  length: 2,
  convRule: rule2
}, {
  start: 65308,
  length: 3,
  convRule: rule6
}, {
  start: 65311,
  length: 2,
  convRule: rule2
}, {
  start: 65313,
  length: 26,
  convRule: rule9
}, {
  start: 65339,
  length: 1,
  convRule: rule4
}, {
  start: 65340,
  length: 1,
  convRule: rule2
}, {
  start: 65341,
  length: 1,
  convRule: rule5
}, {
  start: 65342,
  length: 1,
  convRule: rule10
}, {
  start: 65343,
  length: 1,
  convRule: rule11
}, {
  start: 65344,
  length: 1,
  convRule: rule10
}, {
  start: 65345,
  length: 26,
  convRule: rule12
}, {
  start: 65371,
  length: 1,
  convRule: rule4
}, {
  start: 65372,
  length: 1,
  convRule: rule6
}, {
  start: 65373,
  length: 1,
  convRule: rule5
}, {
  start: 65374,
  length: 1,
  convRule: rule6
}, {
  start: 65375,
  length: 1,
  convRule: rule4
}, {
  start: 65376,
  length: 1,
  convRule: rule5
}, {
  start: 65377,
  length: 1,
  convRule: rule2
}, {
  start: 65378,
  length: 1,
  convRule: rule4
}, {
  start: 65379,
  length: 1,
  convRule: rule5
}, {
  start: 65380,
  length: 2,
  convRule: rule2
}, {
  start: 65382,
  length: 10,
  convRule: rule45
}, {
  start: 65392,
  length: 1,
  convRule: rule83
}, {
  start: 65393,
  length: 45,
  convRule: rule45
}, {
  start: 65438,
  length: 2,
  convRule: rule83
}, {
  start: 65440,
  length: 31,
  convRule: rule45
}, {
  start: 65474,
  length: 6,
  convRule: rule45
}, {
  start: 65482,
  length: 6,
  convRule: rule45
}, {
  start: 65490,
  length: 6,
  convRule: rule45
}, {
  start: 65498,
  length: 3,
  convRule: rule45
}, {
  start: 65504,
  length: 2,
  convRule: rule3
}, {
  start: 65506,
  length: 1,
  convRule: rule6
}, {
  start: 65507,
  length: 1,
  convRule: rule10
}, {
  start: 65508,
  length: 1,
  convRule: rule13
}, {
  start: 65509,
  length: 2,
  convRule: rule3
}, {
  start: 65512,
  length: 1,
  convRule: rule13
}, {
  start: 65513,
  length: 4,
  convRule: rule6
}, {
  start: 65517,
  length: 2,
  convRule: rule13
}, {
  start: 65529,
  length: 3,
  convRule: rule16
}, {
  start: 65532,
  length: 2,
  convRule: rule13
}, {
  start: 65536,
  length: 12,
  convRule: rule45
}, {
  start: 65549,
  length: 26,
  convRule: rule45
}, {
  start: 65576,
  length: 19,
  convRule: rule45
}, {
  start: 65596,
  length: 2,
  convRule: rule45
}, {
  start: 65599,
  length: 15,
  convRule: rule45
}, {
  start: 65616,
  length: 14,
  convRule: rule45
}, {
  start: 65664,
  length: 123,
  convRule: rule45
}, {
  start: 65792,
  length: 2,
  convRule: rule2
}, {
  start: 65794,
  length: 1,
  convRule: rule13
}, {
  start: 65799,
  length: 45,
  convRule: rule17
}, {
  start: 65847,
  length: 9,
  convRule: rule13
}, {
  start: 65856,
  length: 53,
  convRule: rule116
}, {
  start: 65909,
  length: 4,
  convRule: rule17
}, {
  start: 65913,
  length: 17,
  convRule: rule13
}, {
  start: 65930,
  length: 1,
  convRule: rule17
}, {
  start: 65936,
  length: 12,
  convRule: rule13
}, {
  start: 66000,
  length: 45,
  convRule: rule13
}, {
  start: 66045,
  length: 1,
  convRule: rule84
}, {
  start: 66176,
  length: 29,
  convRule: rule45
}, {
  start: 66208,
  length: 49,
  convRule: rule45
}, {
  start: 66304,
  length: 31,
  convRule: rule45
}, {
  start: 66336,
  length: 4,
  convRule: rule17
}, {
  start: 66352,
  length: 17,
  convRule: rule45
}, {
  start: 66369,
  length: 1,
  convRule: rule116
}, {
  start: 66370,
  length: 8,
  convRule: rule45
}, {
  start: 66378,
  length: 1,
  convRule: rule116
}, {
  start: 66432,
  length: 30,
  convRule: rule45
}, {
  start: 66463,
  length: 1,
  convRule: rule2
}, {
  start: 66464,
  length: 36,
  convRule: rule45
}, {
  start: 66504,
  length: 8,
  convRule: rule45
}, {
  start: 66512,
  length: 1,
  convRule: rule2
}, {
  start: 66513,
  length: 5,
  convRule: rule116
}, {
  start: 66560,
  length: 40,
  convRule: rule165
}, {
  start: 66600,
  length: 40,
  convRule: rule166
}, {
  start: 66640,
  length: 78,
  convRule: rule45
}, {
  start: 66720,
  length: 10,
  convRule: rule8
}, {
  start: 67584,
  length: 6,
  convRule: rule45
}, {
  start: 67592,
  length: 1,
  convRule: rule45
}, {
  start: 67594,
  length: 44,
  convRule: rule45
}, {
  start: 67639,
  length: 2,
  convRule: rule45
}, {
  start: 67644,
  length: 1,
  convRule: rule45
}, {
  start: 67647,
  length: 23,
  convRule: rule45
}, {
  start: 67671,
  length: 1,
  convRule: rule2
}, {
  start: 67672,
  length: 8,
  convRule: rule17
}, {
  start: 67840,
  length: 22,
  convRule: rule45
}, {
  start: 67862,
  length: 6,
  convRule: rule17
}, {
  start: 67871,
  length: 1,
  convRule: rule2
}, {
  start: 67872,
  length: 26,
  convRule: rule45
}, {
  start: 67903,
  length: 1,
  convRule: rule2
}, {
  start: 68096,
  length: 1,
  convRule: rule45
}, {
  start: 68097,
  length: 3,
  convRule: rule84
}, {
  start: 68101,
  length: 2,
  convRule: rule84
}, {
  start: 68108,
  length: 4,
  convRule: rule84
}, {
  start: 68112,
  length: 4,
  convRule: rule45
}, {
  start: 68117,
  length: 3,
  convRule: rule45
}, {
  start: 68121,
  length: 27,
  convRule: rule45
}, {
  start: 68152,
  length: 3,
  convRule: rule84
}, {
  start: 68159,
  length: 1,
  convRule: rule84
}, {
  start: 68160,
  length: 8,
  convRule: rule17
}, {
  start: 68176,
  length: 9,
  convRule: rule2
}, {
  start: 68192,
  length: 29,
  convRule: rule45
}, {
  start: 68221,
  length: 2,
  convRule: rule17
}, {
  start: 68223,
  length: 1,
  convRule: rule2
}, {
  start: 68352,
  length: 54,
  convRule: rule45
}, {
  start: 68409,
  length: 7,
  convRule: rule2
}, {
  start: 68416,
  length: 22,
  convRule: rule45
}, {
  start: 68440,
  length: 8,
  convRule: rule17
}, {
  start: 68448,
  length: 19,
  convRule: rule45
}, {
  start: 68472,
  length: 8,
  convRule: rule17
}, {
  start: 68608,
  length: 73,
  convRule: rule45
}, {
  start: 69216,
  length: 31,
  convRule: rule17
}, {
  start: 69632,
  length: 1,
  convRule: rule114
}, {
  start: 69633,
  length: 1,
  convRule: rule84
}, {
  start: 69634,
  length: 1,
  convRule: rule114
}, {
  start: 69635,
  length: 53,
  convRule: rule45
}, {
  start: 69688,
  length: 15,
  convRule: rule84
}, {
  start: 69703,
  length: 7,
  convRule: rule2
}, {
  start: 69714,
  length: 20,
  convRule: rule17
}, {
  start: 69734,
  length: 10,
  convRule: rule8
}, {
  start: 69760,
  length: 2,
  convRule: rule84
}, {
  start: 69762,
  length: 1,
  convRule: rule114
}, {
  start: 69763,
  length: 45,
  convRule: rule45
}, {
  start: 69808,
  length: 3,
  convRule: rule114
}, {
  start: 69811,
  length: 4,
  convRule: rule84
}, {
  start: 69815,
  length: 2,
  convRule: rule114
}, {
  start: 69817,
  length: 2,
  convRule: rule84
}, {
  start: 69819,
  length: 2,
  convRule: rule2
}, {
  start: 69821,
  length: 1,
  convRule: rule16
}, {
  start: 69822,
  length: 4,
  convRule: rule2
}, {
  start: 73728,
  length: 879,
  convRule: rule45
}, {
  start: 74752,
  length: 99,
  convRule: rule116
}, {
  start: 74864,
  length: 4,
  convRule: rule2
}, {
  start: 77824,
  length: 1071,
  convRule: rule45
}, {
  start: 92160,
  length: 569,
  convRule: rule45
}, {
  start: 110592,
  length: 2,
  convRule: rule45
}, {
  start: 118784,
  length: 246,
  convRule: rule13
}, {
  start: 119040,
  length: 39,
  convRule: rule13
}, {
  start: 119081,
  length: 60,
  convRule: rule13
}, {
  start: 119141,
  length: 2,
  convRule: rule114
}, {
  start: 119143,
  length: 3,
  convRule: rule84
}, {
  start: 119146,
  length: 3,
  convRule: rule13
}, {
  start: 119149,
  length: 6,
  convRule: rule114
}, {
  start: 119155,
  length: 8,
  convRule: rule16
}, {
  start: 119163,
  length: 8,
  convRule: rule84
}, {
  start: 119171,
  length: 2,
  convRule: rule13
}, {
  start: 119173,
  length: 7,
  convRule: rule84
}, {
  start: 119180,
  length: 30,
  convRule: rule13
}, {
  start: 119210,
  length: 4,
  convRule: rule84
}, {
  start: 119214,
  length: 48,
  convRule: rule13
}, {
  start: 119296,
  length: 66,
  convRule: rule13
}, {
  start: 119362,
  length: 3,
  convRule: rule84
}, {
  start: 119365,
  length: 1,
  convRule: rule13
}, {
  start: 119552,
  length: 87,
  convRule: rule13
}, {
  start: 119648,
  length: 18,
  convRule: rule17
}, {
  start: 119808,
  length: 26,
  convRule: rule98
}, {
  start: 119834,
  length: 26,
  convRule: rule14
}, {
  start: 119860,
  length: 26,
  convRule: rule98
}, {
  start: 119886,
  length: 7,
  convRule: rule14
}, {
  start: 119894,
  length: 18,
  convRule: rule14
}, {
  start: 119912,
  length: 26,
  convRule: rule98
}, {
  start: 119938,
  length: 26,
  convRule: rule14
}, {
  start: 119964,
  length: 1,
  convRule: rule98
}, {
  start: 119966,
  length: 2,
  convRule: rule98
}, {
  start: 119970,
  length: 1,
  convRule: rule98
}, {
  start: 119973,
  length: 2,
  convRule: rule98
}, {
  start: 119977,
  length: 4,
  convRule: rule98
}, {
  start: 119982,
  length: 8,
  convRule: rule98
}, {
  start: 119990,
  length: 4,
  convRule: rule14
}, {
  start: 119995,
  length: 1,
  convRule: rule14
}, {
  start: 119997,
  length: 7,
  convRule: rule14
}, {
  start: 120005,
  length: 11,
  convRule: rule14
}, {
  start: 120016,
  length: 26,
  convRule: rule98
}, {
  start: 120042,
  length: 26,
  convRule: rule14
}, {
  start: 120068,
  length: 2,
  convRule: rule98
}, {
  start: 120071,
  length: 4,
  convRule: rule98
}, {
  start: 120077,
  length: 8,
  convRule: rule98
}, {
  start: 120086,
  length: 7,
  convRule: rule98
}, {
  start: 120094,
  length: 26,
  convRule: rule14
}, {
  start: 120120,
  length: 2,
  convRule: rule98
}, {
  start: 120123,
  length: 4,
  convRule: rule98
}, {
  start: 120128,
  length: 5,
  convRule: rule98
}, {
  start: 120134,
  length: 1,
  convRule: rule98
}, {
  start: 120138,
  length: 7,
  convRule: rule98
}, {
  start: 120146,
  length: 26,
  convRule: rule14
}, {
  start: 120172,
  length: 26,
  convRule: rule98
}, {
  start: 120198,
  length: 26,
  convRule: rule14
}, {
  start: 120224,
  length: 26,
  convRule: rule98
}, {
  start: 120250,
  length: 26,
  convRule: rule14
}, {
  start: 120276,
  length: 26,
  convRule: rule98
}, {
  start: 120302,
  length: 26,
  convRule: rule14
}, {
  start: 120328,
  length: 26,
  convRule: rule98
}, {
  start: 120354,
  length: 26,
  convRule: rule14
}, {
  start: 120380,
  length: 26,
  convRule: rule98
}, {
  start: 120406,
  length: 26,
  convRule: rule14
}, {
  start: 120432,
  length: 26,
  convRule: rule98
}, {
  start: 120458,
  length: 28,
  convRule: rule14
}, {
  start: 120488,
  length: 25,
  convRule: rule98
}, {
  start: 120513,
  length: 1,
  convRule: rule6
}, {
  start: 120514,
  length: 25,
  convRule: rule14
}, {
  start: 120539,
  length: 1,
  convRule: rule6
}, {
  start: 120540,
  length: 6,
  convRule: rule14
}, {
  start: 120546,
  length: 25,
  convRule: rule98
}, {
  start: 120571,
  length: 1,
  convRule: rule6
}, {
  start: 120572,
  length: 25,
  convRule: rule14
}, {
  start: 120597,
  length: 1,
  convRule: rule6
}, {
  start: 120598,
  length: 6,
  convRule: rule14
}, {
  start: 120604,
  length: 25,
  convRule: rule98
}, {
  start: 120629,
  length: 1,
  convRule: rule6
}, {
  start: 120630,
  length: 25,
  convRule: rule14
}, {
  start: 120655,
  length: 1,
  convRule: rule6
}, {
  start: 120656,
  length: 6,
  convRule: rule14
}, {
  start: 120662,
  length: 25,
  convRule: rule98
}, {
  start: 120687,
  length: 1,
  convRule: rule6
}, {
  start: 120688,
  length: 25,
  convRule: rule14
}, {
  start: 120713,
  length: 1,
  convRule: rule6
}, {
  start: 120714,
  length: 6,
  convRule: rule14
}, {
  start: 120720,
  length: 25,
  convRule: rule98
}, {
  start: 120745,
  length: 1,
  convRule: rule6
}, {
  start: 120746,
  length: 25,
  convRule: rule14
}, {
  start: 120771,
  length: 1,
  convRule: rule6
}, {
  start: 120772,
  length: 6,
  convRule: rule14
}, {
  start: 120778,
  length: 1,
  convRule: rule98
}, {
  start: 120779,
  length: 1,
  convRule: rule14
}, {
  start: 120782,
  length: 50,
  convRule: rule8
}, {
  start: 126976,
  length: 44,
  convRule: rule13
}, {
  start: 127024,
  length: 100,
  convRule: rule13
}, {
  start: 127136,
  length: 15,
  convRule: rule13
}, {
  start: 127153,
  length: 14,
  convRule: rule13
}, {
  start: 127169,
  length: 15,
  convRule: rule13
}, {
  start: 127185,
  length: 15,
  convRule: rule13
}, {
  start: 127232,
  length: 11,
  convRule: rule17
}, {
  start: 127248,
  length: 31,
  convRule: rule13
}, {
  start: 127280,
  length: 58,
  convRule: rule13
}, {
  start: 127344,
  length: 43,
  convRule: rule13
}, {
  start: 127462,
  length: 29,
  convRule: rule13
}, {
  start: 127504,
  length: 43,
  convRule: rule13
}, {
  start: 127552,
  length: 9,
  convRule: rule13
}, {
  start: 127568,
  length: 2,
  convRule: rule13
}, {
  start: 127744,
  length: 33,
  convRule: rule13
}, {
  start: 127792,
  length: 6,
  convRule: rule13
}, {
  start: 127799,
  length: 70,
  convRule: rule13
}, {
  start: 127872,
  length: 20,
  convRule: rule13
}, {
  start: 127904,
  length: 37,
  convRule: rule13
}, {
  start: 127942,
  length: 5,
  convRule: rule13
}, {
  start: 127968,
  length: 17,
  convRule: rule13
}, {
  start: 128000,
  length: 63,
  convRule: rule13
}, {
  start: 128064,
  length: 1,
  convRule: rule13
}, {
  start: 128066,
  length: 182,
  convRule: rule13
}, {
  start: 128249,
  length: 4,
  convRule: rule13
}, {
  start: 128256,
  length: 62,
  convRule: rule13
}, {
  start: 128336,
  length: 24,
  convRule: rule13
}, {
  start: 128507,
  length: 5,
  convRule: rule13
}, {
  start: 128513,
  length: 16,
  convRule: rule13
}, {
  start: 128530,
  length: 3,
  convRule: rule13
}, {
  start: 128534,
  length: 1,
  convRule: rule13
}, {
  start: 128536,
  length: 1,
  convRule: rule13
}, {
  start: 128538,
  length: 1,
  convRule: rule13
}, {
  start: 128540,
  length: 3,
  convRule: rule13
}, {
  start: 128544,
  length: 6,
  convRule: rule13
}, {
  start: 128552,
  length: 4,
  convRule: rule13
}, {
  start: 128557,
  length: 1,
  convRule: rule13
}, {
  start: 128560,
  length: 4,
  convRule: rule13
}, {
  start: 128565,
  length: 12,
  convRule: rule13
}, {
  start: 128581,
  length: 11,
  convRule: rule13
}, {
  start: 128640,
  length: 70,
  convRule: rule13
}, {
  start: 128768,
  length: 116,
  convRule: rule13
}, {
  start: 131072,
  length: 42711,
  convRule: rule45
}, {
  start: 173824,
  length: 4149,
  convRule: rule45
}, {
  start: 177984,
  length: 222,
  convRule: rule45
}, {
  start: 194560,
  length: 542,
  convRule: rule45
}, {
  start: 917505,
  length: 1,
  convRule: rule16
}, {
  start: 917536,
  length: 96,
  convRule: rule16
}, {
  start: 917760,
  length: 240,
  convRule: rule84
}, {
  start: 983040,
  length: 65534,
  convRule: rule164
}, {
  start: 1048576,
  length: 65534,
  convRule: rule164
}];

var checkAttr = function checkAttr(categories) {
  return function ($$char) {
    var numOfBlocks = function () {
      var $28 = $$char < 256;

      if ($28) {
        return numLat1Blocks;
      }

      ;
      return numBlocks;
    }();

    var maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);

    if (maybeConversionRule instanceof Data_Maybe.Nothing) {
      return false;
    }

    ;

    if (maybeConversionRule instanceof Data_Maybe.Just) {
      return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
    }

    ;
    throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4800, column 8 - line 4802, column 92): " + [maybeConversionRule.constructor.name]);
  };
};

var uIswalnum = checkAttr([gencatLT, gencatLU, gencatLL, gencatLM, gencatLO, gencatMC, gencatME, gencatMN, gencatNO, gencatND, gencatNL]);
var uIswalpha = checkAttr([gencatLL, gencatLU, gencatLT, gencatLM, gencatLO]);
var uIswcntrl = checkAttr([gencatCC]);
var uIswdigit = checkAttr([gencatND]);
var uIswlower = checkAttr([gencatLL]);
var uIswprint = checkAttr([gencatMC, gencatNO, gencatSK, gencatME, gencatND, gencatPO, gencatLT, gencatPC, gencatSM, gencatZS, gencatLU, gencatPD, gencatSO, gencatPE, gencatPF, gencatPS, gencatSC, gencatLL, gencatLM, gencatPI, gencatNL, gencatMN, gencatLO]);
var uIswupper = checkAttr([gencatLU, gencatLT]);

var uGencat = function uGencat($$char) {
  var conversionRule = getRule(allchars)($$char)(numBlocks);
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return v.unicodeCat;
  })(conversionRule);
};

module.exports = {
  NUMCAT_LU: NUMCAT_LU,
  NUMCAT_LL: NUMCAT_LL,
  NUMCAT_LT: NUMCAT_LT,
  NUMCAT_LM: NUMCAT_LM,
  NUMCAT_LO: NUMCAT_LO,
  NUMCAT_MN: NUMCAT_MN,
  NUMCAT_MC: NUMCAT_MC,
  NUMCAT_ME: NUMCAT_ME,
  NUMCAT_ND: NUMCAT_ND,
  NUMCAT_NL: NUMCAT_NL,
  NUMCAT_NO: NUMCAT_NO,
  NUMCAT_PC: NUMCAT_PC,
  NUMCAT_PD: NUMCAT_PD,
  NUMCAT_PS: NUMCAT_PS,
  NUMCAT_PE: NUMCAT_PE,
  NUMCAT_PI: NUMCAT_PI,
  NUMCAT_PF: NUMCAT_PF,
  NUMCAT_PO: NUMCAT_PO,
  NUMCAT_SM: NUMCAT_SM,
  NUMCAT_SC: NUMCAT_SC,
  NUMCAT_SK: NUMCAT_SK,
  NUMCAT_SO: NUMCAT_SO,
  NUMCAT_ZS: NUMCAT_ZS,
  NUMCAT_ZL: NUMCAT_ZL,
  NUMCAT_ZP: NUMCAT_ZP,
  NUMCAT_CC: NUMCAT_CC,
  NUMCAT_CF: NUMCAT_CF,
  NUMCAT_CS: NUMCAT_CS,
  NUMCAT_CO: NUMCAT_CO,
  NUMCAT_CN: NUMCAT_CN,
  ConversionRule: ConversionRule,
  CharBlock: CharBlock,
  gencatPF: gencatPF,
  gencatSM: gencatSM,
  gencatSO: gencatSO,
  gencatPI: gencatPI,
  gencatMC: gencatMC,
  gencatCO: gencatCO,
  gencatME: gencatME,
  gencatPO: gencatPO,
  gencatCS: gencatCS,
  gencatPS: gencatPS,
  gencatMN: gencatMN,
  gencatZL: gencatZL,
  gencatZP: gencatZP,
  gencatZS: gencatZS,
  gencatLL: gencatLL,
  gencatLM: gencatLM,
  gencatLO: gencatLO,
  gencatND: gencatND,
  gencatLT: gencatLT,
  gencatSC: gencatSC,
  gencatLU: gencatLU,
  gencatNL: gencatNL,
  gencatCC: gencatCC,
  gencatNO: gencatNO,
  gencatCF: gencatCF,
  gencatPC: gencatPC,
  gencatSK: gencatSK,
  gencatPD: gencatPD,
  gencatPE: gencatPE,
  maxUniChar: maxUniChar,
  numBlocks: numBlocks,
  numConvBlocks: numConvBlocks,
  numSpaceBlocks: numSpaceBlocks,
  numLat1Blocks: numLat1Blocks,
  numRules: numRules,
  rule165: rule165,
  rule63: rule63,
  rule126: rule126,
  rule162: rule162,
  rule71: rule71,
  rule21: rule21,
  rule128: rule128,
  rule44: rule44,
  rule161: rule161,
  rule105: rule105,
  rule101: rule101,
  rule43: rule43,
  rule77: rule77,
  rule143: rule143,
  rule39: rule39,
  rule41: rule41,
  rule72: rule72,
  rule28: rule28,
  rule31: rule31,
  rule36: rule36,
  rule102: rule102,
  rule80: rule80,
  rule5: rule5,
  rule113: rule113,
  rule142: rule142,
  rule145: rule145,
  rule104: rule104,
  rule61: rule61,
  rule93: rule93,
  rule62: rule62,
  rule103: rule103,
  rule60: rule60,
  rule96: rule96,
  rule51: rule51,
  rule87: rule87,
  rule86: rule86,
  rule123: rule123,
  rule164: rule164,
  rule166: rule166,
  rule27: rule27,
  rule158: rule158,
  rule157: rule157,
  rule9: rule9,
  rule159: rule159,
  rule138: rule138,
  rule4: rule4,
  rule133: rule133,
  rule155: rule155,
  rule132: rule132,
  rule153: rule153,
  rule24: rule24,
  rule26: rule26,
  rule16: rule16,
  rule74: rule74,
  rule122: rule122,
  rule25: rule25,
  rule127: rule127,
  rule40: rule40,
  rule30: rule30,
  rule29: rule29,
  rule69: rule69,
  rule3: rule3,
  rule135: rule135,
  rule23: rule23,
  rule32: rule32,
  rule33: rule33,
  rule50: rule50,
  rule154: rule154,
  rule58: rule58,
  rule67: rule67,
  rule76: rule76,
  rule119: rule119,
  rule57: rule57,
  rule97: rule97,
  rule108: rule108,
  rule100: rule100,
  rule70: rule70,
  rule141: rule141,
  rule139: rule139,
  rule45: rule45,
  rule91: rule91,
  rule121: rule121,
  rule117: rule117,
  rule12: rule12,
  rule85: rule85,
  rule163: rule163,
  rule17: rule17,
  rule134: rule134,
  rule147: rule147,
  rule64: rule64,
  rule2: rule2,
  rule84: rule84,
  rule38: rule38,
  rule42: rule42,
  rule53: rule53,
  rule83: rule83,
  rule98: rule98,
  rule136: rule136,
  rule120: rule120,
  rule20: rule20,
  rule115: rule115,
  rule109: rule109,
  rule13: rule13,
  rule19: rule19,
  rule125: rule125,
  rule49: rule49,
  rule79: rule79,
  rule14: rule14,
  rule148: rule148,
  rule66: rule66,
  rule99: rule99,
  rule140: rule140,
  rule116: rule116,
  rule8: rule8,
  rule94: rule94,
  rule114: rule114,
  rule6: rule6,
  rule7: rule7,
  rule55: rule55,
  rule54: rule54,
  rule124: rule124,
  rule65: rule65,
  rule78: rule78,
  rule56: rule56,
  rule137: rule137,
  rule131: rule131,
  rule130: rule130,
  rule110: rule110,
  rule48: rule48,
  rule52: rule52,
  rule156: rule156,
  rule75: rule75,
  rule11: rule11,
  rule129: rule129,
  rule37: rule37,
  rule18: rule18,
  rule152: rule152,
  rule35: rule35,
  rule46: rule46,
  rule82: rule82,
  rule10: rule10,
  rule34: rule34,
  rule150: rule150,
  rule107: rule107,
  rule47: rule47,
  rule160: rule160,
  rule73: rule73,
  rule59: rule59,
  rule106: rule106,
  rule151: rule151,
  rule15: rule15,
  rule112: rule112,
  rule90: rule90,
  rule146: rule146,
  rule89: rule89,
  rule81: rule81,
  rule88: rule88,
  rule149: rule149,
  rule111: rule111,
  rule144: rule144,
  rule92: rule92,
  rule118: rule118,
  rule22: rule22,
  rule68: rule68,
  rule95: rule95,
  rule0: rule0,
  rule1: rule1,
  allchars: allchars,
  convchars: convchars,
  spacechars: spacechars,
  nullrule: nullrule,
  blkCmp: blkCmp,
  getRule: getRule,
  bsearch: bsearch,
  checkAttr: checkAttr,
  checkAttrS: checkAttrS,
  uIswcntrl: uIswcntrl,
  uIswprint: uIswprint,
  uIswupper: uIswupper,
  uIswlower: uIswlower,
  uIswalpha: uIswalpha,
  uIswdigit: uIswdigit,
  uIswalnum: uIswalnum,
  uIswspace: uIswspace,
  caseConv: caseConv,
  uTowupper: uTowupper,
  uTowlower: uTowlower,
  uTowtitle: uTowtitle,
  uGencat: uGencat,
  showUnicodeCategory: showUnicodeCategory,
  showConversionRule: showConversionRule,
  showCharBlock: showCharBlock
};
},{"../Data.Array/index.js":"output/Data.Array/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Int/index.js":"output/Data.Int/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Char.Unicode/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Char = require("../Data.Char/index.js");

var Data_Char_Unicode_Internal = require("../Data.Char.Unicode.Internal/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var UppercaseLetter = function () {
  function UppercaseLetter() {}

  ;
  UppercaseLetter.value = new UppercaseLetter();
  return UppercaseLetter;
}();

var LowercaseLetter = function () {
  function LowercaseLetter() {}

  ;
  LowercaseLetter.value = new LowercaseLetter();
  return LowercaseLetter;
}();

var TitlecaseLetter = function () {
  function TitlecaseLetter() {}

  ;
  TitlecaseLetter.value = new TitlecaseLetter();
  return TitlecaseLetter;
}();

var ModifierLetter = function () {
  function ModifierLetter() {}

  ;
  ModifierLetter.value = new ModifierLetter();
  return ModifierLetter;
}();

var OtherLetter = function () {
  function OtherLetter() {}

  ;
  OtherLetter.value = new OtherLetter();
  return OtherLetter;
}();

var NonSpacingMark = function () {
  function NonSpacingMark() {}

  ;
  NonSpacingMark.value = new NonSpacingMark();
  return NonSpacingMark;
}();

var SpacingCombiningMark = function () {
  function SpacingCombiningMark() {}

  ;
  SpacingCombiningMark.value = new SpacingCombiningMark();
  return SpacingCombiningMark;
}();

var EnclosingMark = function () {
  function EnclosingMark() {}

  ;
  EnclosingMark.value = new EnclosingMark();
  return EnclosingMark;
}();

var DecimalNumber = function () {
  function DecimalNumber() {}

  ;
  DecimalNumber.value = new DecimalNumber();
  return DecimalNumber;
}();

var LetterNumber = function () {
  function LetterNumber() {}

  ;
  LetterNumber.value = new LetterNumber();
  return LetterNumber;
}();

var OtherNumber = function () {
  function OtherNumber() {}

  ;
  OtherNumber.value = new OtherNumber();
  return OtherNumber;
}();

var ConnectorPunctuation = function () {
  function ConnectorPunctuation() {}

  ;
  ConnectorPunctuation.value = new ConnectorPunctuation();
  return ConnectorPunctuation;
}();

var DashPunctuation = function () {
  function DashPunctuation() {}

  ;
  DashPunctuation.value = new DashPunctuation();
  return DashPunctuation;
}();

var OpenPunctuation = function () {
  function OpenPunctuation() {}

  ;
  OpenPunctuation.value = new OpenPunctuation();
  return OpenPunctuation;
}();

var ClosePunctuation = function () {
  function ClosePunctuation() {}

  ;
  ClosePunctuation.value = new ClosePunctuation();
  return ClosePunctuation;
}();

var InitialQuote = function () {
  function InitialQuote() {}

  ;
  InitialQuote.value = new InitialQuote();
  return InitialQuote;
}();

var FinalQuote = function () {
  function FinalQuote() {}

  ;
  FinalQuote.value = new FinalQuote();
  return FinalQuote;
}();

var OtherPunctuation = function () {
  function OtherPunctuation() {}

  ;
  OtherPunctuation.value = new OtherPunctuation();
  return OtherPunctuation;
}();

var MathSymbol = function () {
  function MathSymbol() {}

  ;
  MathSymbol.value = new MathSymbol();
  return MathSymbol;
}();

var CurrencySymbol = function () {
  function CurrencySymbol() {}

  ;
  CurrencySymbol.value = new CurrencySymbol();
  return CurrencySymbol;
}();

var ModifierSymbol = function () {
  function ModifierSymbol() {}

  ;
  ModifierSymbol.value = new ModifierSymbol();
  return ModifierSymbol;
}();

var OtherSymbol = function () {
  function OtherSymbol() {}

  ;
  OtherSymbol.value = new OtherSymbol();
  return OtherSymbol;
}();

var Space = function () {
  function Space() {}

  ;
  Space.value = new Space();
  return Space;
}();

var LineSeparator = function () {
  function LineSeparator() {}

  ;
  LineSeparator.value = new LineSeparator();
  return LineSeparator;
}();

var ParagraphSeparator = function () {
  function ParagraphSeparator() {}

  ;
  ParagraphSeparator.value = new ParagraphSeparator();
  return ParagraphSeparator;
}();

var Control = function () {
  function Control() {}

  ;
  Control.value = new Control();
  return Control;
}();

var Format = function () {
  function Format() {}

  ;
  Format.value = new Format();
  return Format;
}();

var Surrogate = function () {
  function Surrogate() {}

  ;
  Surrogate.value = new Surrogate();
  return Surrogate;
}();

var PrivateUse = function () {
  function PrivateUse() {}

  ;
  PrivateUse.value = new PrivateUse();
  return PrivateUse;
}();

var NotAssigned = function () {
  function NotAssigned() {}

  ;
  NotAssigned.value = new NotAssigned();
  return NotAssigned;
}();

var unicodeCatToGeneralCat = function unicodeCatToGeneralCat(v) {
  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LU) {
    return UppercaseLetter.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LL) {
    return LowercaseLetter.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LT) {
    return TitlecaseLetter.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LM) {
    return ModifierLetter.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LO) {
    return OtherLetter.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_MN) {
    return NonSpacingMark.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_MC) {
    return SpacingCombiningMark.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ME) {
    return EnclosingMark.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ND) {
    return DecimalNumber.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_NL) {
    return LetterNumber.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_NO) {
    return OtherNumber.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PC) {
    return ConnectorPunctuation.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PD) {
    return DashPunctuation.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PS) {
    return OpenPunctuation.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PE) {
    return ClosePunctuation.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PI) {
    return InitialQuote.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PF) {
    return FinalQuote.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PO) {
    return OtherPunctuation.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SM) {
    return MathSymbol.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SC) {
    return CurrencySymbol.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SK) {
    return ModifierSymbol.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SO) {
    return OtherSymbol.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZS) {
    return Space.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZL) {
    return LineSeparator.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZP) {
    return ParagraphSeparator.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CC) {
    return Control.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CF) {
    return Format.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CS) {
    return Surrogate.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CO) {
    return PrivateUse.value;
  }

  ;

  if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CN) {
    return NotAssigned.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Char.Unicode (line 192, column 1 - line 192, column 61): " + [v.constructor.name]);
};

var toUpper = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowupper);
var toTitle = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowtitle);
var toLower = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowlower);
var showGeneralCategory = new Data_Show.Show(function (v) {
  if (v instanceof UppercaseLetter) {
    return "UppercaseLetter";
  }

  ;

  if (v instanceof LowercaseLetter) {
    return "LowercaseLetter";
  }

  ;

  if (v instanceof TitlecaseLetter) {
    return "TitlecaseLetter";
  }

  ;

  if (v instanceof ModifierLetter) {
    return "ModifierLetter";
  }

  ;

  if (v instanceof OtherLetter) {
    return "OtherLetter";
  }

  ;

  if (v instanceof NonSpacingMark) {
    return "NonSpacingMark";
  }

  ;

  if (v instanceof SpacingCombiningMark) {
    return "SpacingCombiningMark";
  }

  ;

  if (v instanceof EnclosingMark) {
    return "EnclosingMark";
  }

  ;

  if (v instanceof DecimalNumber) {
    return "DecimalNumber";
  }

  ;

  if (v instanceof LetterNumber) {
    return "LetterNumber";
  }

  ;

  if (v instanceof OtherNumber) {
    return "OtherNumber";
  }

  ;

  if (v instanceof ConnectorPunctuation) {
    return "ConnectorPunctuation";
  }

  ;

  if (v instanceof DashPunctuation) {
    return "DashPunctuation";
  }

  ;

  if (v instanceof OpenPunctuation) {
    return "OpenPunctuation";
  }

  ;

  if (v instanceof ClosePunctuation) {
    return "ClosePunctuation";
  }

  ;

  if (v instanceof InitialQuote) {
    return "InitialQuote";
  }

  ;

  if (v instanceof FinalQuote) {
    return "FinalQuote";
  }

  ;

  if (v instanceof OtherPunctuation) {
    return "OtherPunctuation";
  }

  ;

  if (v instanceof MathSymbol) {
    return "MathSymbol";
  }

  ;

  if (v instanceof CurrencySymbol) {
    return "CurrencySymbol";
  }

  ;

  if (v instanceof ModifierSymbol) {
    return "ModifierSymbol";
  }

  ;

  if (v instanceof OtherSymbol) {
    return "OtherSymbol";
  }

  ;

  if (v instanceof Space) {
    return "Space";
  }

  ;

  if (v instanceof LineSeparator) {
    return "LineSeparator";
  }

  ;

  if (v instanceof ParagraphSeparator) {
    return "ParagraphSeparator";
  }

  ;

  if (v instanceof Control) {
    return "Control";
  }

  ;

  if (v instanceof Format) {
    return "Format";
  }

  ;

  if (v instanceof Surrogate) {
    return "Surrogate";
  }

  ;

  if (v instanceof PrivateUse) {
    return "PrivateUse";
  }

  ;

  if (v instanceof NotAssigned) {
    return "NotAssigned";
  }

  ;
  throw new Error("Failed pattern match at Data.Char.Unicode (line 224, column 1 - line 254, column 37): " + [v.constructor.name]);
});

var isUpper = function isUpper($50) {
  return Data_Char_Unicode_Internal.uIswupper(Data_Char.toCharCode($50));
};

var isSpace = function isSpace(c) {
  var uc = Data_Char.toCharCode(c);
  var $14 = uc <= 823;

  if ($14) {
    return uc === 32 || uc >= 9 && uc <= 13 || uc === 160;
  }

  ;
  return Data_Char_Unicode_Internal.uIswspace(Data_Char.toCharCode(c));
};

var isPrint = function isPrint($51) {
  return Data_Char_Unicode_Internal.uIswprint(Data_Char.toCharCode($51));
};

var isOctDigit = function isOctDigit(c) {
  var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
  return diff <= 7 && diff >= 0;
};

var isLower = function isLower($52) {
  return Data_Char_Unicode_Internal.uIswlower(Data_Char.toCharCode($52));
};

var isLatin1 = function isLatin1(c) {
  return c <= "\xff";
};

var isDigit = function isDigit(c) {
  var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
  return diff <= 9 && diff >= 0;
};

var isHexDigit = function isHexDigit(c) {
  return isDigit(c) || function () {
    var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
    return diff <= 5 && diff >= 0;
  }() || function () {
    var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
    return diff <= 5 && diff >= 0;
  }();
};

var isControl = function isControl($53) {
  return Data_Char_Unicode_Internal.uIswcntrl(Data_Char.toCharCode($53));
};

var isAsciiUpper = function isAsciiUpper(c) {
  return c >= "A" && c <= "Z";
};

var isAsciiLower = function isAsciiLower(c) {
  return c >= "a" && c <= "z";
};

var isAscii = function isAscii(c) {
  return c < "\x80";
};

var isAlphaNum = function isAlphaNum($54) {
  return Data_Char_Unicode_Internal.uIswalnum(Data_Char.toCharCode($54));
};

var isAlpha = function isAlpha($55) {
  return Data_Char_Unicode_Internal.uIswalpha(Data_Char.toCharCode($55));
};

var generalCategory = function () {
  var $56 = Data_Functor.map(Data_Maybe.functorMaybe)(unicodeCatToGeneralCat);
  return function ($57) {
    return $56(Data_Char_Unicode_Internal.uGencat(Data_Char.toCharCode($57)));
  };
}();

var isLetter = function isLetter(c) {
  var v = generalCategory(c);

  if (v instanceof Data_Maybe.Just && v.value0 instanceof UppercaseLetter) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof LowercaseLetter) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof TitlecaseLetter) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof ModifierLetter) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherLetter) {
    return true;
  }

  ;
  return false;
};

var isMark = function isMark(c) {
  var v = generalCategory(c);

  if (v instanceof Data_Maybe.Just && v.value0 instanceof NonSpacingMark) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof SpacingCombiningMark) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof EnclosingMark) {
    return true;
  }

  ;
  return false;
};

var isNumber = function isNumber(c) {
  var v = generalCategory(c);

  if (v instanceof Data_Maybe.Just && v.value0 instanceof DecimalNumber) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof LetterNumber) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherNumber) {
    return true;
  }

  ;
  return false;
};

var isPunctuation = function isPunctuation(c) {
  var v = generalCategory(c);

  if (v instanceof Data_Maybe.Just && v.value0 instanceof ConnectorPunctuation) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof DashPunctuation) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof OpenPunctuation) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof ClosePunctuation) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof InitialQuote) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof FinalQuote) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherPunctuation) {
    return true;
  }

  ;
  return false;
};

var isSeparator = function isSeparator(c) {
  var v = generalCategory(c);

  if (v instanceof Data_Maybe.Just && v.value0 instanceof Space) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof LineSeparator) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof ParagraphSeparator) {
    return true;
  }

  ;
  return false;
};

var isSymbol = function isSymbol(c) {
  var v = generalCategory(c);

  if (v instanceof Data_Maybe.Just && v.value0 instanceof MathSymbol) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof CurrencySymbol) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof ModifierSymbol) {
    return true;
  }

  ;

  if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherSymbol) {
    return true;
  }

  ;
  return false;
};

var generalCatToUnicodeCat = function generalCatToUnicodeCat(v) {
  if (v instanceof UppercaseLetter) {
    return Data_Char_Unicode_Internal.NUMCAT_LU.value;
  }

  ;

  if (v instanceof LowercaseLetter) {
    return Data_Char_Unicode_Internal.NUMCAT_LL.value;
  }

  ;

  if (v instanceof TitlecaseLetter) {
    return Data_Char_Unicode_Internal.NUMCAT_LT.value;
  }

  ;

  if (v instanceof ModifierLetter) {
    return Data_Char_Unicode_Internal.NUMCAT_LM.value;
  }

  ;

  if (v instanceof OtherLetter) {
    return Data_Char_Unicode_Internal.NUMCAT_LO.value;
  }

  ;

  if (v instanceof NonSpacingMark) {
    return Data_Char_Unicode_Internal.NUMCAT_MN.value;
  }

  ;

  if (v instanceof SpacingCombiningMark) {
    return Data_Char_Unicode_Internal.NUMCAT_MC.value;
  }

  ;

  if (v instanceof EnclosingMark) {
    return Data_Char_Unicode_Internal.NUMCAT_ME.value;
  }

  ;

  if (v instanceof DecimalNumber) {
    return Data_Char_Unicode_Internal.NUMCAT_ND.value;
  }

  ;

  if (v instanceof LetterNumber) {
    return Data_Char_Unicode_Internal.NUMCAT_NL.value;
  }

  ;

  if (v instanceof OtherNumber) {
    return Data_Char_Unicode_Internal.NUMCAT_NO.value;
  }

  ;

  if (v instanceof ConnectorPunctuation) {
    return Data_Char_Unicode_Internal.NUMCAT_PC.value;
  }

  ;

  if (v instanceof DashPunctuation) {
    return Data_Char_Unicode_Internal.NUMCAT_PD.value;
  }

  ;

  if (v instanceof OpenPunctuation) {
    return Data_Char_Unicode_Internal.NUMCAT_PS.value;
  }

  ;

  if (v instanceof ClosePunctuation) {
    return Data_Char_Unicode_Internal.NUMCAT_PE.value;
  }

  ;

  if (v instanceof InitialQuote) {
    return Data_Char_Unicode_Internal.NUMCAT_PI.value;
  }

  ;

  if (v instanceof FinalQuote) {
    return Data_Char_Unicode_Internal.NUMCAT_PF.value;
  }

  ;

  if (v instanceof OtherPunctuation) {
    return Data_Char_Unicode_Internal.NUMCAT_PO.value;
  }

  ;

  if (v instanceof MathSymbol) {
    return Data_Char_Unicode_Internal.NUMCAT_SM.value;
  }

  ;

  if (v instanceof CurrencySymbol) {
    return Data_Char_Unicode_Internal.NUMCAT_SC.value;
  }

  ;

  if (v instanceof ModifierSymbol) {
    return Data_Char_Unicode_Internal.NUMCAT_SK.value;
  }

  ;

  if (v instanceof OtherSymbol) {
    return Data_Char_Unicode_Internal.NUMCAT_SO.value;
  }

  ;

  if (v instanceof Space) {
    return Data_Char_Unicode_Internal.NUMCAT_ZS.value;
  }

  ;

  if (v instanceof LineSeparator) {
    return Data_Char_Unicode_Internal.NUMCAT_ZL.value;
  }

  ;

  if (v instanceof ParagraphSeparator) {
    return Data_Char_Unicode_Internal.NUMCAT_ZP.value;
  }

  ;

  if (v instanceof Control) {
    return Data_Char_Unicode_Internal.NUMCAT_CC.value;
  }

  ;

  if (v instanceof Format) {
    return Data_Char_Unicode_Internal.NUMCAT_CF.value;
  }

  ;

  if (v instanceof Surrogate) {
    return Data_Char_Unicode_Internal.NUMCAT_CS.value;
  }

  ;

  if (v instanceof PrivateUse) {
    return Data_Char_Unicode_Internal.NUMCAT_CO.value;
  }

  ;

  if (v instanceof NotAssigned) {
    return Data_Char_Unicode_Internal.NUMCAT_CN.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Char.Unicode (line 160, column 1 - line 160, column 61): " + [v.constructor.name]);
};

var generalCatToInt = function generalCatToInt(v) {
  if (v instanceof UppercaseLetter) {
    return 1;
  }

  ;

  if (v instanceof LowercaseLetter) {
    return 2;
  }

  ;

  if (v instanceof TitlecaseLetter) {
    return 3;
  }

  ;

  if (v instanceof ModifierLetter) {
    return 4;
  }

  ;

  if (v instanceof OtherLetter) {
    return 5;
  }

  ;

  if (v instanceof NonSpacingMark) {
    return 6;
  }

  ;

  if (v instanceof SpacingCombiningMark) {
    return 7;
  }

  ;

  if (v instanceof EnclosingMark) {
    return 8;
  }

  ;

  if (v instanceof DecimalNumber) {
    return 9;
  }

  ;

  if (v instanceof LetterNumber) {
    return 10;
  }

  ;

  if (v instanceof OtherNumber) {
    return 11;
  }

  ;

  if (v instanceof ConnectorPunctuation) {
    return 12;
  }

  ;

  if (v instanceof DashPunctuation) {
    return 13;
  }

  ;

  if (v instanceof OpenPunctuation) {
    return 14;
  }

  ;

  if (v instanceof ClosePunctuation) {
    return 15;
  }

  ;

  if (v instanceof InitialQuote) {
    return 16;
  }

  ;

  if (v instanceof FinalQuote) {
    return 17;
  }

  ;

  if (v instanceof OtherPunctuation) {
    return 18;
  }

  ;

  if (v instanceof MathSymbol) {
    return 19;
  }

  ;

  if (v instanceof CurrencySymbol) {
    return 20;
  }

  ;

  if (v instanceof ModifierSymbol) {
    return 21;
  }

  ;

  if (v instanceof OtherSymbol) {
    return 22;
  }

  ;

  if (v instanceof Space) {
    return 23;
  }

  ;

  if (v instanceof LineSeparator) {
    return 24;
  }

  ;

  if (v instanceof ParagraphSeparator) {
    return 25;
  }

  ;

  if (v instanceof Control) {
    return 26;
  }

  ;

  if (v instanceof Format) {
    return 27;
  }

  ;

  if (v instanceof Surrogate) {
    return 28;
  }

  ;

  if (v instanceof PrivateUse) {
    return 29;
  }

  ;

  if (v instanceof NotAssigned) {
    return 30;
  }

  ;
  throw new Error("Failed pattern match at Data.Char.Unicode (line 128, column 1 - line 128, column 42): " + [v.constructor.name]);
};

var eqGeneralCategory = new Data_Eq.Eq(function (v) {
  return function (v1) {
    if (v instanceof UppercaseLetter && v1 instanceof UppercaseLetter) {
      return true;
    }

    ;

    if (v instanceof LowercaseLetter && v1 instanceof LowercaseLetter) {
      return true;
    }

    ;

    if (v instanceof TitlecaseLetter && v1 instanceof TitlecaseLetter) {
      return true;
    }

    ;

    if (v instanceof ModifierLetter && v1 instanceof ModifierLetter) {
      return true;
    }

    ;

    if (v instanceof OtherLetter && v1 instanceof OtherLetter) {
      return true;
    }

    ;

    if (v instanceof NonSpacingMark && v1 instanceof NonSpacingMark) {
      return true;
    }

    ;

    if (v instanceof SpacingCombiningMark && v1 instanceof SpacingCombiningMark) {
      return true;
    }

    ;

    if (v instanceof EnclosingMark && v1 instanceof EnclosingMark) {
      return true;
    }

    ;

    if (v instanceof DecimalNumber && v1 instanceof DecimalNumber) {
      return true;
    }

    ;

    if (v instanceof LetterNumber && v1 instanceof LetterNumber) {
      return true;
    }

    ;

    if (v instanceof OtherNumber && v1 instanceof OtherNumber) {
      return true;
    }

    ;

    if (v instanceof ConnectorPunctuation && v1 instanceof ConnectorPunctuation) {
      return true;
    }

    ;

    if (v instanceof DashPunctuation && v1 instanceof DashPunctuation) {
      return true;
    }

    ;

    if (v instanceof OpenPunctuation && v1 instanceof OpenPunctuation) {
      return true;
    }

    ;

    if (v instanceof ClosePunctuation && v1 instanceof ClosePunctuation) {
      return true;
    }

    ;

    if (v instanceof InitialQuote && v1 instanceof InitialQuote) {
      return true;
    }

    ;

    if (v instanceof FinalQuote && v1 instanceof FinalQuote) {
      return true;
    }

    ;

    if (v instanceof OtherPunctuation && v1 instanceof OtherPunctuation) {
      return true;
    }

    ;

    if (v instanceof MathSymbol && v1 instanceof MathSymbol) {
      return true;
    }

    ;

    if (v instanceof CurrencySymbol && v1 instanceof CurrencySymbol) {
      return true;
    }

    ;

    if (v instanceof ModifierSymbol && v1 instanceof ModifierSymbol) {
      return true;
    }

    ;

    if (v instanceof OtherSymbol && v1 instanceof OtherSymbol) {
      return true;
    }

    ;

    if (v instanceof Space && v1 instanceof Space) {
      return true;
    }

    ;

    if (v instanceof LineSeparator && v1 instanceof LineSeparator) {
      return true;
    }

    ;

    if (v instanceof ParagraphSeparator && v1 instanceof ParagraphSeparator) {
      return true;
    }

    ;

    if (v instanceof Control && v1 instanceof Control) {
      return true;
    }

    ;

    if (v instanceof Format && v1 instanceof Format) {
      return true;
    }

    ;

    if (v instanceof Surrogate && v1 instanceof Surrogate) {
      return true;
    }

    ;

    if (v instanceof PrivateUse && v1 instanceof PrivateUse) {
      return true;
    }

    ;

    if (v instanceof NotAssigned && v1 instanceof NotAssigned) {
      return true;
    }

    ;
    return false;
  };
});
var ordGeneralCategory = new Data_Ord.Ord(function () {
  return eqGeneralCategory;
}, function (catA) {
  return function (catB) {
    return Data_Ord.compare(Data_Ord.ordInt)(generalCatToInt(catA))(generalCatToInt(catB));
  };
});

var digitToInt = function digitToInt(c) {
  var hexUpper = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
  var hexLower = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
  var dec = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;

  var result = function () {
    if (dec <= 9 && dec >= 0) {
      return new Data_Maybe.Just(dec);
    }

    ;

    if (hexLower <= 5 && hexLower >= 0) {
      return Data_Maybe.Just.create(hexLower + 10 | 0);
    }

    ;

    if (hexUpper <= 5 && hexUpper >= 0) {
      return Data_Maybe.Just.create(hexUpper + 10 | 0);
    }

    ;

    if (Data_Boolean.otherwise) {
      return Data_Maybe.Nothing.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Char.Unicode (line 547, column 5 - line 547, column 24): " + []);
  }();

  return result;
};

var boundedGeneralCategory = new Data_Bounded.Bounded(function () {
  return ordGeneralCategory;
}, UppercaseLetter.value, NotAssigned.value);
module.exports = {
  isAscii: isAscii,
  isAsciiLower: isAsciiLower,
  isAsciiUpper: isAsciiUpper,
  isLatin1: isLatin1,
  isLower: isLower,
  isUpper: isUpper,
  isAlpha: isAlpha,
  isAlphaNum: isAlphaNum,
  isLetter: isLetter,
  isDigit: isDigit,
  isOctDigit: isOctDigit,
  isHexDigit: isHexDigit,
  isControl: isControl,
  isPrint: isPrint,
  isSpace: isSpace,
  isSymbol: isSymbol,
  isSeparator: isSeparator,
  isPunctuation: isPunctuation,
  isMark: isMark,
  isNumber: isNumber,
  digitToInt: digitToInt,
  toLower: toLower,
  toUpper: toUpper,
  toTitle: toTitle,
  UppercaseLetter: UppercaseLetter,
  LowercaseLetter: LowercaseLetter,
  TitlecaseLetter: TitlecaseLetter,
  ModifierLetter: ModifierLetter,
  OtherLetter: OtherLetter,
  NonSpacingMark: NonSpacingMark,
  SpacingCombiningMark: SpacingCombiningMark,
  EnclosingMark: EnclosingMark,
  DecimalNumber: DecimalNumber,
  LetterNumber: LetterNumber,
  OtherNumber: OtherNumber,
  ConnectorPunctuation: ConnectorPunctuation,
  DashPunctuation: DashPunctuation,
  OpenPunctuation: OpenPunctuation,
  ClosePunctuation: ClosePunctuation,
  InitialQuote: InitialQuote,
  FinalQuote: FinalQuote,
  OtherPunctuation: OtherPunctuation,
  MathSymbol: MathSymbol,
  CurrencySymbol: CurrencySymbol,
  ModifierSymbol: ModifierSymbol,
  OtherSymbol: OtherSymbol,
  Space: Space,
  LineSeparator: LineSeparator,
  ParagraphSeparator: ParagraphSeparator,
  Control: Control,
  Format: Format,
  Surrogate: Surrogate,
  PrivateUse: PrivateUse,
  NotAssigned: NotAssigned,
  unicodeCatToGeneralCat: unicodeCatToGeneralCat,
  generalCatToInt: generalCatToInt,
  generalCatToUnicodeCat: generalCatToUnicodeCat,
  generalCategory: generalCategory,
  showGeneralCategory: showGeneralCategory,
  eqGeneralCategory: eqGeneralCategory,
  ordGeneralCategory: ordGeneralCategory,
  boundedGeneralCategory: boundedGeneralCategory
};
},{"./foreign.js":"output/Data.Char.Unicode/foreign.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Char/index.js":"output/Data.Char/index.js","../Data.Char.Unicode.Internal/index.js":"output/Data.Char.Unicode.Internal/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.XML.Types/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var XMLNode = function () {
  function XMLNode(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  XMLNode.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new XMLNode(value0, value1, value2);
      };
    };
  };

  return XMLNode;
}();

var XMLContent = function () {
  function XMLContent(value0) {
    this.value0 = value0;
  }

  ;

  XMLContent.create = function (value0) {
    return new XMLContent(value0);
  };

  return XMLContent;
}();

var NameTest = function () {
  function NameTest(value0) {
    this.value0 = value0;
  }

  ;

  NameTest.create = function (value0) {
    return new NameTest(value0);
  };

  return NameTest;
}();

var TextNodeType = function () {
  function TextNodeType() {}

  ;
  TextNodeType.value = new TextNodeType();
  return TextNodeType;
}();

var AnyNodeType = function () {
  function AnyNodeType() {}

  ;
  AnyNodeType.value = new AnyNodeType();
  return AnyNodeType;
}();

var Child = function () {
  function Child() {}

  ;
  Child.value = new Child();
  return Child;
}();

var LocationStep = function () {
  function LocationStep(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  LocationStep.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new LocationStep(value0, value1, value2);
      };
    };
  };

  return LocationStep;
}();

var LocationPath = function () {
  function LocationPath(value0) {
    this.value0 = value0;
  }

  ;

  LocationPath.create = function (value0) {
    return new LocationPath(value0);
  };

  return LocationPath;
}();

module.exports = {
  XMLNode: XMLNode,
  XMLContent: XMLContent,
  LocationPath: LocationPath,
  LocationStep: LocationStep,
  Child: Child,
  NameTest: NameTest,
  TextNodeType: TextNodeType,
  AnyNodeType: AnyNodeType
};
},{}],"output/Data.String.Pattern/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var Replacement = function Replacement(x) {
  return x;
};

var Pattern = function Pattern(x) {
  return x;
};

var showReplacement = new Data_Show.Show(function (v) {
  return "(Replacement " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var showPattern = new Data_Show.Show(function (v) {
  return "(Pattern " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var newtypeReplacement = new Data_Newtype.Newtype(function (n) {
  return n;
}, Replacement);
var newtypePattern = new Data_Newtype.Newtype(function (n) {
  return n;
}, Pattern);
var eqReplacement = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x === y;
  };
});
var ordReplacement = new Data_Ord.Ord(function () {
  return eqReplacement;
}, function (x) {
  return function (y) {
    return Data_Ord.compare(Data_Ord.ordString)(x)(y);
  };
});
var eqPattern = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x === y;
  };
});
var ordPattern = new Data_Ord.Ord(function () {
  return eqPattern;
}, function (x) {
  return function (y) {
    return Data_Ord.compare(Data_Ord.ordString)(x)(y);
  };
});
module.exports = {
  Pattern: Pattern,
  Replacement: Replacement,
  eqPattern: eqPattern,
  ordPattern: ordPattern,
  newtypePattern: newtypePattern,
  showPattern: showPattern,
  eqReplacement: eqReplacement,
  ordReplacement: ordReplacement,
  newtypeReplacement: newtypeReplacement,
  showReplacement: showReplacement
};
},{"../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Text.Parsing.Parser.Pos/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_String_Common = require("../Data.String.Common/index.js");

var Data_String_Pattern = require("../Data.String.Pattern/index.js");

var Position = function Position(x) {
  return x;
};

var updatePosString = function updatePosString(pos$prime) {
  return function (str) {
    var updatePosChar = function updatePosChar(v) {
      return function (c) {
        if (c === "\x0a") {
          return {
            line: v.line + 1 | 0,
            column: 1
          };
        }

        ;

        if (c === "\x0d") {
          return {
            line: v.line + 1 | 0,
            column: 1
          };
        }

        ;

        if (c === "\x09") {
          return {
            line: v.line,
            column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
          };
        }

        ;
        return {
          line: v.line,
          column: v.column + 1 | 0
        };
      };
    };

    return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(""))(str));
  };
};

var showPosition = new Data_Show.Show(function (v) {
  return "(Position { line: " + (Data_Show.show(Data_Show.showInt)(v.line) + (", column: " + (Data_Show.show(Data_Show.showInt)(v.column) + " })")));
});
var initialPos = {
  line: 1,
  column: 1
};
var eqPosition = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x.column === y.column && x.line === y.line;
  };
});
var ordPosition = new Data_Ord.Ord(function () {
  return eqPosition;
}, function (x) {
  return function (y) {
    var v = Data_Ord.compare(Data_Ord.ordInt)(x.column)(y.column);

    if (v instanceof Data_Ordering.LT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v instanceof Data_Ordering.GT) {
      return Data_Ordering.GT.value;
    }

    ;
    return Data_Ord.compare(Data_Ord.ordInt)(x.line)(y.line);
  };
});
module.exports = {
  Position: Position,
  initialPos: initialPos,
  updatePosString: updatePosString,
  showPosition: showPosition,
  eqPosition: eqPosition,
  ordPosition: ordPosition
};
},{"../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.EuclideanRing/index.js":"output/Data.EuclideanRing/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.String.Common/index.js":"output/Data.String.Common/index.js","../Data.String.Pattern/index.js":"output/Data.String.Pattern/index.js"}],"output/Text.Parsing.Parser/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Text_Parsing_Parser_Pos = require("../Text.Parsing.Parser.Pos/index.js");

var ParseState = function () {
  function ParseState(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  ParseState.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new ParseState(value0, value1, value2);
      };
    };
  };

  return ParseState;
}();

var ParseError = function () {
  function ParseError(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  ParseError.create = function (value0) {
    return function (value1) {
      return new ParseError(value0, value1);
    };
  };

  return ParseError;
}();

var ParserT = function ParserT(x) {
  return x;
};

var showParseError = new Data_Show.Show(function (v) {
  return "(ParseError " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value1) + ")")));
});

var parseErrorPosition = function parseErrorPosition(v) {
  return v.value1;
};

var parseErrorMessage = function parseErrorMessage(v) {
  return v.value0;
};

var newtypeParserT = new Data_Newtype.Newtype(function (n) {
  return n;
}, ParserT);

var runParserT = function runParserT(dictMonad) {
  return function (s) {
    return function (p) {
      var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
      return Control_Monad_State_Trans.evalStateT(dictMonad.Bind1().Apply0().Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
    };
  };
};

var runParser = function runParser(s) {
  var $90 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
  var $91 = runParserT(Data_Identity.monadIdentity)(s);
  return function ($92) {
    return $90($91($92));
  };
};

var monadTransParserT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  var $93 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(dictMonad));
  var $94 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad);
  return function ($95) {
    return ParserT($93($94($95)));
  };
});

var monadThrowParserT = function monadThrowParserT(dictMonad) {
  return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};

var monadStateParserT = function monadStateParserT(dictMonad) {
  return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
};

var position = function position(dictMonad) {
  return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
    return v.value1;
  });
};

var monadRecParserT = function monadRecParserT(dictMonadRec) {
  return Control_Monad_Except_Trans.monadRecExceptT(Control_Monad_State_Trans.monadRecStateT(dictMonadRec));
};

var monadParserT = function monadParserT(dictMonad) {
  return Control_Monad_Except_Trans.monadExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};

var monadErrorParserT = function monadErrorParserT(dictMonad) {
  return Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};

var mapParserT = function () {
  var $96 = Data_Newtype.over(newtypeParserT)(newtypeParserT)(ParserT);
  return function ($97) {
    return $96(Control_Monad_Except_Trans.mapExceptT(Control_Monad_State_Trans.mapStateT($97)));
  };
}();

var lazyParserT = new Control_Lazy.Lazy(function (f) {
  return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)(function () {
    var $98 = Data_Newtype.unwrap(newtypeParserT);
    return function ($99) {
      return Control_Monad_Except_Trans.runExceptT($98(f($99)));
    };
  }());
});
var hoistParserT = mapParserT;

var functorParserT = function functorParserT(dictFunctor) {
  return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
};

var failWithPosition = function failWithPosition(dictMonad) {
  return function (message) {
    return function (pos) {
      return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
    };
  };
};

var eqParseError = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x.value0 === y.value0 && Data_Eq.eq(Text_Parsing_Parser_Pos.eqPosition)(x.value1)(y.value1);
  };
});
var ordParseError = new Data_Ord.Ord(function () {
  return eqParseError;
}, function (x) {
  return function (y) {
    var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);

    if (v instanceof Data_Ordering.LT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v instanceof Data_Ordering.GT) {
      return Data_Ordering.GT.value;
    }

    ;
    return Data_Ord.compare(Text_Parsing_Parser_Pos.ordPosition)(x.value1)(y.value1);
  };
});

var consume = function consume(dictMonad) {
  return Control_Monad_State_Class.modify_(monadStateParserT(dictMonad))(function (v) {
    return new ParseState(v.value0, v.value1, true);
  });
};

var bindParserT = function bindParserT(dictMonad) {
  return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};

var fail = function fail(dictMonad) {
  return function (message) {
    return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
  };
};

var applyParserT = function applyParserT(dictMonad) {
  return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};

var semigroupParserT = function semigroupParserT(dictMonad) {
  return function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParserT(dictMonad))(Data_Semigroup.append(dictSemigroup)));
  };
};

var applicativeParserT = function applicativeParserT(dictMonad) {
  return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};

var monoidParserT = function monoidParserT(dictMonad) {
  return function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
      return semigroupParserT(dictMonad)(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeParserT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
  };
};

var altParserT = function altParserT(dictMonad) {
  return new Control_Alt.Alt(function () {
    return functorParserT(dictMonad.Bind1().Apply0().Functor0());
  }, function (p1) {
    return function (p2) {
      return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
        return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
          if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
            return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
          }

          ;
          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
        });
      })));
    };
  });
};

var plusParserT = function plusParserT(dictMonad) {
  return new Control_Plus.Plus(function () {
    return altParserT(dictMonad);
  }, fail(dictMonad)("No alternative"));
};

var alternativeParserT = function alternativeParserT(dictMonad) {
  return new Control_Alternative.Alternative(function () {
    return applicativeParserT(dictMonad);
  }, function () {
    return plusParserT(dictMonad);
  });
};

var monadZeroParserT = function monadZeroParserT(dictMonad) {
  return new Control_MonadZero.MonadZero(function () {
    return alternativeParserT(dictMonad);
  }, function () {
    return monadParserT(dictMonad);
  });
};

var monadPlusParserT = function monadPlusParserT(dictMonad) {
  return new Control_MonadPlus.MonadPlus(function () {
    return monadZeroParserT(dictMonad);
  });
};

module.exports = {
  ParseError: ParseError,
  parseErrorMessage: parseErrorMessage,
  parseErrorPosition: parseErrorPosition,
  ParseState: ParseState,
  ParserT: ParserT,
  runParser: runParser,
  runParserT: runParserT,
  hoistParserT: hoistParserT,
  mapParserT: mapParserT,
  consume: consume,
  position: position,
  fail: fail,
  failWithPosition: failWithPosition,
  showParseError: showParseError,
  eqParseError: eqParseError,
  ordParseError: ordParseError,
  newtypeParserT: newtypeParserT,
  lazyParserT: lazyParserT,
  semigroupParserT: semigroupParserT,
  monoidParserT: monoidParserT,
  functorParserT: functorParserT,
  applyParserT: applyParserT,
  applicativeParserT: applicativeParserT,
  bindParserT: bindParserT,
  monadParserT: monadParserT,
  monadRecParserT: monadRecParserT,
  monadStateParserT: monadStateParserT,
  monadThrowParserT: monadThrowParserT,
  monadErrorParserT: monadErrorParserT,
  altParserT: altParserT,
  plusParserT: plusParserT,
  alternativeParserT: alternativeParserT,
  monadZeroParserT: monadZeroParserT,
  monadPlusParserT: monadPlusParserT,
  monadTransParserT: monadTransParserT
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Alternative/index.js":"output/Control.Alternative/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Lazy/index.js":"output/Control.Lazy/index.js","../Control.Monad.Error.Class/index.js":"output/Control.Monad.Error.Class/index.js","../Control.Monad.Except.Trans/index.js":"output/Control.Monad.Except.Trans/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Control.Monad.State.Trans/index.js":"output/Control.Monad.State.Trans/index.js","../Control.Monad.Trans.Class/index.js":"output/Control.Monad.Trans.Class/index.js","../Control.MonadPlus/index.js":"output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"output/Control.MonadZero/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Identity/index.js":"output/Data.Identity/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Text.Parsing.Parser.Pos/index.js":"output/Text.Parsing.Parser.Pos/index.js"}],"output/Text.Parsing.Parser.Combinators/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");

var withErrorMessage = function withErrorMessage(dictMonad) {
  return function (p) {
    return function (msg) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
    };
  };
};

var tryRethrow = function tryRethrow(dictMonad) {
  return function (p) {
    return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
      return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
        if (v1.value0 instanceof Data_Either.Left) {
          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
        }

        ;
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
      });
    })));
  };
};

var $$try = function $$try(dictMonad) {
  return function (p) {
    return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
      return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
        if (v1.value0 instanceof Data_Either.Left) {
          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
        }

        ;
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
      });
    })));
  };
};

var skipMany1 = function skipMany1(dictMonad) {
  return function (p) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (x) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(skipMany(dictMonad)(p))(function (xs) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
      });
    });
  };
};

var skipMany = function skipMany(dictMonad) {
  return function (p) {
    return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(skipMany1(dictMonad)(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
  };
};

var sepEndBy1 = function sepEndBy1(dictMonad) {
  return function (p) {
    return function (sep) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sep)(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sepEndBy(dictMonad)(p)(sep))(function (as) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(a, as));
          });
        }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.singleton(a)));
      });
    };
  };
};

var sepEndBy = function sepEndBy(dictMonad) {
  return function (p) {
    return function (sep) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepEndBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
    };
  };
};

var sepBy1 = function sepBy1(dictMonad) {
  return function (p) {
    return function (sep) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (as) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(a, as));
        });
      });
    };
  };
};

var sepBy = function sepBy(dictMonad) {
  return function (p) {
    return function (sep) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
    };
  };
};

var optional = function optional(dictMonad) {
  return function (p) {
    return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(dictMonad.Bind1().Apply0().Functor0()))(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
  };
};

var option = function option(dictMonad) {
  return function (a) {
    return function (p) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
    };
  };
};

var optionMaybe = function optionMaybe(dictMonad) {
  return function (p) {
    return option(dictMonad)(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_Parser.functorParserT(dictMonad.Bind1().Apply0().Functor0()))(Data_Maybe.Just.create)(p));
  };
};

var notFollowedBy = function notFollowedBy(dictMonad) {
  return function (p) {
    return $$try(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))($$try(dictMonad)(p))(Text_Parsing_Parser.fail(dictMonad)("Negated parser succeeded")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit)));
  };
};

var manyTill = function manyTill(dictMonad) {
  return function (p) {
    return function (end) {
      var scan = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(dictMonad.Bind1().Apply0().Functor0()))(end)(Data_List_Types.Nil.value))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (x) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(scan)(function (xs) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(x, xs));
        });
      }));
      return scan;
    };
  };
};

var many1Till = function many1Till(dictMonad) {
  return function (p) {
    return function (end) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (x) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(manyTill(dictMonad)(p)(end))(function (xs) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(x, xs));
        });
      });
    };
  };
};

var lookAhead = function lookAhead(dictMonad) {
  return function (p) {
    return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (s) {
      return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(s))(function (v) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v.value0, s));
      });
    })));
  };
};

var endBy1 = function endBy1(dictMonad) {
  return function (p) {
    return function (sep) {
      return Data_List.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(sep));
    };
  };
};

var endBy = function endBy(dictMonad) {
  return function (p) {
    return function (sep) {
      return Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(sep));
    };
  };
};

var choice = function choice(dictFoldable) {
  return function (dictMonad) {
    return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad)))(Control_Plus.empty(Text_Parsing_Parser.plusParserT(dictMonad)));
  };
};

var chainr1$prime = function chainr1$prime(dictMonad) {
  return function (p) {
    return function (f) {
      return function (a) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(f)(function (f$prime) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(chainr1(dictMonad)(p)(f))(function (a$prime) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f$prime(a)(a$prime));
          });
        }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
      };
    };
  };
};

var chainr1 = function chainr1(dictMonad) {
  return function (p) {
    return function (f) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
        return chainr1$prime(dictMonad)(p)(f)(a);
      });
    };
  };
};

var chainr = function chainr(dictMonad) {
  return function (p) {
    return function (f) {
      return function (a) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(chainr1(dictMonad)(p)(f))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
      };
    };
  };
};

var chainl1$prime = function chainl1$prime(dictMonad) {
  return function (p) {
    return function (f) {
      return function (a) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(f)(function (f$prime) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a$prime) {
            return chainl1$prime(dictMonad)(p)(f)(f$prime(a)(a$prime));
          });
        }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
      };
    };
  };
};

var chainl1 = function chainl1(dictMonad) {
  return function (p) {
    return function (f) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
        return chainl1$prime(dictMonad)(p)(f)(a);
      });
    };
  };
};

var chainl = function chainl(dictMonad) {
  return function (p) {
    return function (f) {
      return function (a) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(chainl1(dictMonad)(p)(f))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
      };
    };
  };
};

var between = function between(dictMonad) {
  return function (open) {
    return function (close) {
      return function (p) {
        return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(open)(p))(close);
      };
    };
  };
};

var asErrorMessage = function asErrorMessage(dictMonad) {
  return Data_Function.flip(withErrorMessage(dictMonad));
};

module.exports = {
  withErrorMessage: withErrorMessage,
  asErrorMessage: asErrorMessage,
  between: between,
  option: option,
  optional: optional,
  optionMaybe: optionMaybe,
  "try": $$try,
  tryRethrow: tryRethrow,
  lookAhead: lookAhead,
  sepBy: sepBy,
  sepBy1: sepBy1,
  sepEndBy: sepEndBy,
  sepEndBy1: sepEndBy1,
  endBy1: endBy1,
  endBy: endBy,
  chainr: chainr,
  chainl: chainl,
  chainl1: chainl1,
  "chainl1'": chainl1$prime,
  chainr1: chainr1,
  "chainr1'": chainr1$prime,
  choice: choice,
  skipMany: skipMany,
  skipMany1: skipMany1,
  notFollowedBy: notFollowedBy,
  manyTill: manyTill,
  many1Till: many1Till
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad.Except.Trans/index.js":"output/Control.Monad.Except.Trans/index.js","../Control.Monad.State.Trans/index.js":"output/Control.Monad.State.Trans/index.js","../Control.Plus/index.js":"output/Control.Plus/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.List/index.js":"output/Data.List/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Text.Parsing.Parser/index.js":"output/Text.Parsing.Parser/index.js"}],"output/Data.String.CodePoints/foreign.js":[function(require,module,exports) {
"use strict";
/* global Symbol */

var hasArrayFrom = typeof Array.from === "function";
var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
var hasCodePointAt = typeof String.prototype.codePointAt === "function";

exports._unsafeCodePointAt0 = function (fallback) {
  return hasCodePointAt ? function (str) {
    return str.codePointAt(0);
  } : fallback;
};

exports._codePointAt = function (fallback) {
  return function (Just) {
    return function (Nothing) {
      return function (unsafeCodePointAt0) {
        return function (index) {
          return function (str) {
            var length = str.length;
            if (index < 0 || index >= length) return Nothing;

            if (hasStringIterator) {
              var iter = str[Symbol.iterator]();

              for (var i = index;; --i) {
                var o = iter.next();
                if (o.done) return Nothing;
                if (i === 0) return Just(unsafeCodePointAt0(o.value));
              }
            }

            return fallback(index)(str);
          };
        };
      };
    };
  };
};

exports._countPrefix = function (fallback) {
  return function (unsafeCodePointAt0) {
    if (hasStringIterator) {
      return function (pred) {
        return function (str) {
          var iter = str[Symbol.iterator]();

          for (var cpCount = 0;; ++cpCount) {
            var o = iter.next();
            if (o.done) return cpCount;
            var cp = unsafeCodePointAt0(o.value);
            if (!pred(cp)) return cpCount;
          }
        };
      };
    }

    return fallback;
  };
};

exports._fromCodePointArray = function (singleton) {
  return hasFromCodePoint ? function (cps) {
    // Function.prototype.apply will fail for very large second parameters,
    // so we don't use it for arrays with 10,000 or more entries.
    if (cps.length < 10e3) {
      return String.fromCodePoint.apply(String, cps);
    }

    return cps.map(singleton).join("");
  } : function (cps) {
    return cps.map(singleton).join("");
  };
};

exports._singleton = function (fallback) {
  return hasFromCodePoint ? String.fromCodePoint : fallback;
};

exports._take = function (fallback) {
  return function (n) {
    if (hasStringIterator) {
      return function (str) {
        var accum = "";
        var iter = str[Symbol.iterator]();

        for (var i = 0; i < n; ++i) {
          var o = iter.next();
          if (o.done) return accum;
          accum += o.value;
        }

        return accum;
      };
    }

    return fallback(n);
  };
};

exports._toCodePointArray = function (fallback) {
  return function (unsafeCodePointAt0) {
    if (hasArrayFrom) {
      return function (str) {
        return Array.from(str, unsafeCodePointAt0);
      };
    }

    return fallback;
  };
};
},{}],"output/Data.String.CodePoints/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");

var Data_String_Common = require("../Data.String.Common/index.js");

var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var CodePoint = function CodePoint(x) {
  return x;
};

var unsurrogate = function unsurrogate(lead) {
  return function (trail) {
    return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
  };
};

var showCodePoint = new Data_Show.Show(function (v) {
  return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
});

var isTrail = function isTrail(cu) {
  return 56320 <= cu && cu <= 57343;
};

var isLead = function isLead(cu) {
  return 55296 <= cu && cu <= 56319;
};

var uncons = function uncons(s) {
  var v = Data_String_CodeUnits.length(s);

  if (v === 0) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v === 1) {
    return new Data_Maybe.Just({
      head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
      tail: ""
    });
  }

  ;
  var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
  var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
  var $21 = isLead(cu0) && isTrail(cu1);

  if ($21) {
    return new Data_Maybe.Just({
      head: unsurrogate(cu0)(cu1),
      tail: Data_String_CodeUnits.drop(2)(s)
    });
  }

  ;
  return new Data_Maybe.Just({
    head: cu0,
    tail: Data_String_CodeUnits.drop(1)(s)
  });
};

var unconsButWithTuple = function unconsButWithTuple(s) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return new Data_Tuple.Tuple(v.head, v.tail);
  })(uncons(s));
};

var toCodePointArrayFallback = function toCodePointArrayFallback(s) {
  return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
};

var unsafeCodePointAt0Fallback = function unsafeCodePointAt0Fallback(s) {
  var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
  var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;

  if ($25) {
    var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
    var $26 = isTrail(cu1);

    if ($26) {
      return unsurrogate(cu0)(cu1);
    }

    ;
    return cu0;
  }

  ;
  return cu0;
};

var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);

var length = function length($52) {
  return Data_Array.length(toCodePointArray($52));
};

var lastIndexOf = function lastIndexOf(p) {
  return function (s) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
      return length(Data_String_CodeUnits.take(i)(s));
    })(Data_String_CodeUnits.lastIndexOf(p)(s));
  };
};

var indexOf = function indexOf(p) {
  return function (s) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
      return length(Data_String_CodeUnits.take(i)(s));
    })(Data_String_CodeUnits.indexOf(p)(s));
  };
};

var fromCharCode = function () {
  var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
  return function ($54) {
    return Data_String_CodeUnits.singleton($53($54));
  };
}();

var singletonFallback = function singletonFallback(v) {
  if (v <= 65535) {
    return fromCharCode(v);
  }

  ;
  var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
  var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
  return fromCharCode(lead) + fromCharCode(trail);
};

var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
var singleton = $foreign["_singleton"](singletonFallback);

var takeFallback = function takeFallback(n) {
  return function (v) {
    if (n < 1) {
      return "";
    }

    ;
    var v1 = uncons(v);

    if (v1 instanceof Data_Maybe.Just) {
      return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
    }

    ;
    return v;
  };
};

var take = $foreign["_take"](takeFallback);

var lastIndexOf$prime = function lastIndexOf$prime(p) {
  return function (i) {
    return function (s) {
      var i$prime = Data_String_CodeUnits.length(take(i)(s));
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
        return length(Data_String_CodeUnits.take(k)(s));
      })(Data_String_CodeUnits["lastIndexOf'"](p)(i$prime)(s));
    };
  };
};

var splitAt = function splitAt(i) {
  return function (s) {
    var before = take(i)(s);
    return {
      before: before,
      after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
    };
  };
};

var eqCodePoint = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x === y;
  };
});
var ordCodePoint = new Data_Ord.Ord(function () {
  return eqCodePoint;
}, function (x) {
  return function (y) {
    return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
  };
});

var drop = function drop(n) {
  return function (s) {
    return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
  };
};

var indexOf$prime = function indexOf$prime(p) {
  return function (i) {
    return function (s) {
      var s$prime = drop(i)(s);
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
        return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
      })(Data_String_CodeUnits.indexOf(p)(s$prime));
    };
  };
};

var countTail = function countTail($copy_p) {
  return function ($copy_s) {
    return function ($copy_accum) {
      var $tco_var_p = $copy_p;
      var $tco_var_s = $copy_s;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(p, s, accum) {
        var v = uncons(s);

        if (v instanceof Data_Maybe.Just) {
          var $39 = p(v.value0.head);

          if ($39) {
            $tco_var_p = p;
            $tco_var_s = v.value0.tail;
            $copy_accum = accum + 1 | 0;
            return;
          }

          ;
          $tco_done = true;
          return accum;
        }

        ;
        $tco_done = true;
        return accum;
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
      }

      ;
      return $tco_result;
    };
  };
};

var countFallback = function countFallback(p) {
  return function (s) {
    return countTail(p)(s)(0);
  };
};

var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);

var dropWhile = function dropWhile(p) {
  return function (s) {
    return drop(countPrefix(p)(s))(s);
  };
};

var takeWhile = function takeWhile(p) {
  return function (s) {
    return take(countPrefix(p)(s))(s);
  };
};

var codePointFromChar = function () {
  var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  return function ($56) {
    return CodePoint($55($56));
  };
}();

var codePointAtFallback = function codePointAtFallback($copy_n) {
  return function ($copy_s) {
    var $tco_var_n = $copy_n;
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(n, s) {
      var v = uncons(s);

      if (v instanceof Data_Maybe.Just) {
        var $44 = n === 0;

        if ($44) {
          $tco_done = true;
          return new Data_Maybe.Just(v.value0.head);
        }

        ;
        $tco_var_n = n - 1 | 0;
        $copy_s = v.value0.tail;
        return;
      }

      ;
      $tco_done = true;
      return Data_Maybe.Nothing.value;
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($tco_var_n, $copy_s);
    }

    ;
    return $tco_result;
  };
};

var codePointAt = function codePointAt(v) {
  return function (v1) {
    if (v < 0) {
      return Data_Maybe.Nothing.value;
    }

    ;

    if (v === 0 && v1 === "") {
      return Data_Maybe.Nothing.value;
    }

    ;

    if (v === 0) {
      return new Data_Maybe.Just(unsafeCodePointAt0(v1));
    }

    ;
    return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
  };
};

var boundedCodePoint = new Data_Bounded.Bounded(function () {
  return ordCodePoint;
}, 0, 1114111);
var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
  return boundedCodePoint;
}, function () {
  return enumCodePoint;
}, 1114111 + 1 | 0, function (v) {
  return v;
}, function (n) {
  if (n >= 0 && n <= 1114111) {
    return new Data_Maybe.Just(n);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [n.constructor.name]);
});
var enumCodePoint = new Data_Enum.Enum(function () {
  return ordCodePoint;
}, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
module.exports = {
  codePointFromChar: codePointFromChar,
  singleton: singleton,
  fromCodePointArray: fromCodePointArray,
  toCodePointArray: toCodePointArray,
  codePointAt: codePointAt,
  uncons: uncons,
  length: length,
  countPrefix: countPrefix,
  indexOf: indexOf,
  "indexOf'": indexOf$prime,
  lastIndexOf: lastIndexOf,
  "lastIndexOf'": lastIndexOf$prime,
  take: take,
  takeWhile: takeWhile,
  drop: drop,
  dropWhile: dropWhile,
  splitAt: splitAt,
  eqCodePoint: eqCodePoint,
  ordCodePoint: ordCodePoint,
  showCodePoint: showCodePoint,
  boundedCodePoint: boundedCodePoint,
  enumCodePoint: enumCodePoint,
  boundedEnumCodePoint: boundedEnumCodePoint
};
},{"./foreign.js":"output/Data.String.CodePoints/foreign.js","../Data.Array/index.js":"output/Data.Array/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.EuclideanRing/index.js":"output/Data.EuclideanRing/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Int/index.js":"output/Data.Int/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.String.CodeUnits/index.js":"output/Data.String.CodeUnits/index.js","../Data.String.Common/index.js":"output/Data.String.Common/index.js","../Data.String.Unsafe/index.js":"output/Data.String.Unsafe/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"output/Data.Unfoldable/index.js"}],"output/Text.Parsing.Parser.String/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");

var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");

var Data_String_Common = require("../Data.String.Common/index.js");

var Data_String_Pattern = require("../Data.String.Pattern/index.js");

var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");

var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");

var Text_Parsing_Parser_Pos = require("../Text.Parsing.Parser.Pos/index.js");

var StringLike = function StringLike(drop, indexOf, $$null, uncons) {
  this.drop = drop;
  this.indexOf = indexOf;
  this["null"] = $$null;
  this.uncons = uncons;
};

var uncons = function uncons(dict) {
  return dict.uncons;
};

var stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_CodePoints.indexOf, Data_String_Common["null"], Data_String_CodeUnits.uncons);

var $$null = function $$null(dict) {
  return dict["null"];
};

var indexOf = function indexOf(dict) {
  return dict.indexOf;
};

var eof = function eof(dictStringLike) {
  return function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
      return v.value0;
    }))(function (input) {
      return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))($$null(dictStringLike)(input))(Text_Parsing_Parser.fail(dictMonad)("Expected EOF"));
    });
  };
};

var drop = function drop(dict) {
  return dict.drop;
};

var string = function string(dictStringLike) {
  return function (dictMonad) {
    return function (str) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
        return v.value0;
      }))(function (input) {
        var v = indexOf(dictStringLike)(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(str))(input);

        if (v instanceof Data_Maybe.Just && v.value0 === 0) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
            return new Text_Parsing_Parser.ParseState(drop(dictStringLike)(Data_String_CodePoints.length(str))(input), Text_Parsing_Parser_Pos.updatePosString(v1.value1)(str), true);
          }))(function () {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
          });
        }

        ;
        return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
      });
    };
  };
};

var anyChar = function anyChar(dictStringLike) {
  return function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
      return v.value0;
    }))(function (input) {
      var v = uncons(dictStringLike)(input);

      if (v instanceof Data_Maybe.Nothing) {
        return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
      }

      ;

      if (v instanceof Data_Maybe.Just) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
          return new Text_Parsing_Parser.ParseState(v.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(Data_String_CodeUnits.singleton(v.value0.head)), true);
        }))(function () {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value0.head);
        });
      }

      ;
      throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): " + [v.constructor.name]);
    });
  };
};

var satisfy = function satisfy(dictStringLike) {
  return function (dictMonad) {
    return function (f) {
      return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (c) {
        var $52 = f(c);

        if ($52) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
        }

        ;
        return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String_CodeUnits.singleton(c) + "' did not satisfy predicate"));
      }));
    };
  };
};

var $$char = function $$char(dictStringLike) {
  return function (dictMonad) {
    return function (c) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function (v) {
        return v === c;
      }))(Data_Show.show(Data_Show.showChar)(c));
    };
  };
};

var noneOf = function noneOf(dictStringLike) {
  return function (dictMonad) {
    return function (ss) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
    };
  };
};

var oneOf = function oneOf(dictStringLike) {
  return function (dictMonad) {
    return function (ss) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
    };
  };
};

var whiteSpace = function whiteSpace(dictStringLike) {
  return function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(satisfy(dictStringLike)(dictMonad)(function (c) {
      return c === "\x0a" || c === "\x0d" || c === " " || c === "\x09";
    })))(function (cs) {
      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.fromCharArray(cs));
    });
  };
};

var skipSpaces = function skipSpaces(dictStringLike) {
  return function (dictMonad) {
    return Data_Functor["void"](Text_Parsing_Parser.functorParserT(dictMonad.Bind1().Apply0().Functor0()))(whiteSpace(dictStringLike)(dictMonad));
  };
};

module.exports = {
  drop: drop,
  indexOf: indexOf,
  "null": $$null,
  uncons: uncons,
  StringLike: StringLike,
  eof: eof,
  string: string,
  anyChar: anyChar,
  satisfy: satisfy,
  "char": $$char,
  whiteSpace: whiteSpace,
  skipSpaces: skipSpaces,
  oneOf: oneOf,
  noneOf: noneOf,
  stringLikeString: stringLikeString
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Data.Array/index.js":"output/Data.Array/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Foldable/index.js":"output/Data.Foldable/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.String.CodePoints/index.js":"output/Data.String.CodePoints/index.js","../Data.String.CodeUnits/index.js":"output/Data.String.CodeUnits/index.js","../Data.String.Common/index.js":"output/Data.String.Common/index.js","../Data.String.Pattern/index.js":"output/Data.String.Pattern/index.js","../Text.Parsing.Parser/index.js":"output/Text.Parsing.Parser/index.js","../Text.Parsing.Parser.Combinators/index.js":"output/Text.Parsing.Parser.Combinators/index.js","../Text.Parsing.Parser.Pos/index.js":"output/Text.Parsing.Parser.Pos/index.js"}],"output/Data.XML.Parse/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Char_Unicode = require("../Data.Char.Unicode/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");

var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Data_XML_Types = require("../Data.XML.Types/index.js");

var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");

var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");

var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");

var many1Till = function many1Till(p) {
  return function (end) {
    var ending = function ending(acc) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(end)(function () {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Control_Monad_Rec_Class.Done(Data_List.reverse(acc)));
      });
    };

    var $$continue = function $$continue(acc) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(p)(function (c) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Control_Monad_Rec_Class.Loop(new Data_List_Types.Cons(c, acc)));
      });
    };

    var inner = function inner(acc) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(ending(acc))($$continue(acc));
    };

    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(p)(function (x) {
      return Control_Monad_Rec_Class.tailRecM(Text_Parsing_Parser.monadRecParserT(Control_Monad_Rec_Class.monadRecIdentity))(inner)(Control_Applicative.pure(Data_List_Types.applicativeList)(x));
    });
  };
};

var manyTill = function manyTill(p) {
  return function (end) {
    return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(end)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_List_Types.Nil.value)))(many1Till(p)(end));
  };
};

var parseCDATA = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("<![CDATA["))(function () {
  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function () {
    var $5 = Data_Array.fromFoldable(Data_List_Types.foldableList);
    return function ($6) {
      return Data_String_CodeUnits.fromCharArray($5($6));
    };
  }())(manyTill(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.lookAhead(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("]]>")))))(function (cdata) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("]]>"))(function () {
      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_XML_Types.XMLContent(cdata));
    });
  });
});
var logPos = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(Data_Identity.monadIdentity)))(function (v) {
  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(v.value0))(function () {
    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Unit.unit);
  });
});
var ch = Data_String_Unsafe["char"];

var parseAttribute = function () {
  var name = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isAlphaNum))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ch("-"), ch("_"), ch(":"), ch(".")]))));
  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(name)("attribute name to contain only alphanumeric characters, dashes, underscores, colons, and periods"))(function (n) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("=\""))(function () {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ch("\"")]))))(function (v) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\""))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(n, v));
          });
        });
      });
    });
  });
}();

var parseAttributes = manyTill(parseAttribute)(Text_Parsing_Parser_Combinators.lookAhead(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("?>"))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/>")))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(">"))));
var parseXmlDeclaration = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("<?xml"))(function () {
  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseAttributes)(function (attrs) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("?>"))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_XML_Types.XMLNode("xml", attrs, Data_List_Types.Nil.value));
          });
        });
      });
    });
  });
});
var parseContent = Control_Bind.bindFlipped(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(function () {
  var $7 = Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity));
  return function ($8) {
    return $7(Data_XML_Types.XMLContent.create($8));
  };
}())(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ch("<")]))));
var parseTagName = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isAlpha))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(ch("_"))))("tag name to begin with alpha character or underscore"))(function (a) {
  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isAlphaNum))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ch("-"), ch("_"), ch(":"), ch(".")]))))("tag name to contain only alphanumeric characters, dashes, underscores, colons, and periods"))(function (as) {
    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_String_CodeUnits.fromCharArray(Data_Array.cons(a)(as)));
  });
});
var parseEmptyTag = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("<"))(function () {
  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseTagName)(function (n) {
    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseAttributes)(function (attrs) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/>"))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_XML_Types.XMLNode(n, attrs, Data_List_Types.Nil.value));
            });
          });
        });
      });
    });
  });
});
var parseClosedTag = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("<"))(function () {
  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseTagName)(function (n) {
    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseAttributes)(function (attrs) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(">"))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(manyTill(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parseCDATA)(parseEmptyTag))(parseClosedTag))(parseContent))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("</")))(function (kids) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(n))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(">"))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_XML_Types.XMLNode(n, attrs, kids));
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
var parseXML = Data_Function.flip(Text_Parsing_Parser.runParser)(Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseXmlDeclaration))(function () {
    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseEmptyTag))(parseClosedTag))(function (x) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(x);
        });
      });
    });
  });
}));
module.exports = {
  parseXML: parseXML
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad.Rec.Class/index.js":"output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../Data.Array/index.js":"output/Data.Array/index.js","../Data.Char.Unicode/index.js":"output/Data.Char.Unicode/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Identity/index.js":"output/Data.Identity/index.js","../Data.List/index.js":"output/Data.List/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.String.CodeUnits/index.js":"output/Data.String.CodeUnits/index.js","../Data.String.Unsafe/index.js":"output/Data.String.Unsafe/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Data.XML.Types/index.js":"output/Data.XML.Types/index.js","../Text.Parsing.Parser/index.js":"output/Text.Parsing.Parser/index.js","../Text.Parsing.Parser.Combinators/index.js":"output/Text.Parsing.Parser.Combinators/index.js","../Text.Parsing.Parser.String/index.js":"output/Text.Parsing.Parser.String/index.js"}],"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/ieee754/index.js":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/base64-js/index.js","ieee754":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/ieee754/index.js","isarray":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/isarray/index.js","buffer":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/buffer/index.js"}],"output/Node.Encoding/foreign.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
/* global exports */

/* global Buffer */
"use strict";

exports.byteLengthImpl = function (str) {
  return function (enc) {
    return Buffer.byteLength(str, enc);
  };
};
},{"buffer":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/buffer/index.js"}],"output/Node.Encoding/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Show = require("../Data.Show/index.js");

var ASCII = function () {
  function ASCII() {}

  ;
  ASCII.value = new ASCII();
  return ASCII;
}();

var UTF8 = function () {
  function UTF8() {}

  ;
  UTF8.value = new UTF8();
  return UTF8;
}();

var UTF16LE = function () {
  function UTF16LE() {}

  ;
  UTF16LE.value = new UTF16LE();
  return UTF16LE;
}();

var UCS2 = function () {
  function UCS2() {}

  ;
  UCS2.value = new UCS2();
  return UCS2;
}();

var Base64 = function () {
  function Base64() {}

  ;
  Base64.value = new Base64();
  return Base64;
}();

var Latin1 = function () {
  function Latin1() {}

  ;
  Latin1.value = new Latin1();
  return Latin1;
}();

var Binary = function () {
  function Binary() {}

  ;
  Binary.value = new Binary();
  return Binary;
}();

var Hex = function () {
  function Hex() {}

  ;
  Hex.value = new Hex();
  return Hex;
}();

var showEncoding = new Data_Show.Show(function (v) {
  if (v instanceof ASCII) {
    return "ASCII";
  }

  ;

  if (v instanceof UTF8) {
    return "UTF8";
  }

  ;

  if (v instanceof UTF16LE) {
    return "UTF16LE";
  }

  ;

  if (v instanceof UCS2) {
    return "UCS2";
  }

  ;

  if (v instanceof Base64) {
    return "Base64";
  }

  ;

  if (v instanceof Latin1) {
    return "Latin1";
  }

  ;

  if (v instanceof Binary) {
    return "Binary";
  }

  ;

  if (v instanceof Hex) {
    return "Hex";
  }

  ;
  throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [v.constructor.name]);
});

var encodingToNode = function encodingToNode(v) {
  if (v instanceof ASCII) {
    return "ascii";
  }

  ;

  if (v instanceof UTF8) {
    return "utf8";
  }

  ;

  if (v instanceof UTF16LE) {
    return "utf16le";
  }

  ;

  if (v instanceof UCS2) {
    return "ucs2";
  }

  ;

  if (v instanceof Base64) {
    return "base64";
  }

  ;

  if (v instanceof Latin1) {
    return "latin1";
  }

  ;

  if (v instanceof Binary) {
    return "binary";
  }

  ;

  if (v instanceof Hex) {
    return "hex";
  }

  ;
  throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [v.constructor.name]);
};

var byteLength = function byteLength(str) {
  return function (enc) {
    return $foreign.byteLengthImpl(str)(encodingToNode(enc));
  };
};

module.exports = {
  ASCII: ASCII,
  UTF8: UTF8,
  UTF16LE: UTF16LE,
  UCS2: UCS2,
  Base64: Base64,
  Latin1: Latin1,
  Binary: Binary,
  Hex: Hex,
  encodingToNode: encodingToNode,
  byteLength: byteLength,
  showEncoding: showEncoding
};
},{"./foreign.js":"output/Node.Encoding/foreign.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.DateTime.Instant/foreign.js":[function(require,module,exports) {
"use strict";

var createDateTime = function createDateTime(y, m, d, h, mi, s, ms) {
  var dateTime = new Date(Date.UTC(y, m, d, h, mi, s, ms));

  if (y >= 0 && y < 100) {
    dateTime.setUTCFullYear(y);
  }

  return dateTime;
};

exports.fromDateTimeImpl = function (y, mo, d, h, mi, s, ms) {
  return createDateTime(y, mo - 1, d, h, mi, s, ms).getTime();
};

exports.toDateTimeImpl = function (ctor) {
  return function (instant) {
    var dt = new Date(instant);
    return ctor(dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
  };
};
},{}],"output/Data.Date/foreign.js":[function(require,module,exports) {
"use strict";

var createDate = function createDate(y, m, d) {
  var date = new Date(Date.UTC(y, m, d));

  if (y >= 0 && y < 100) {
    date.setUTCFullYear(y);
  }

  return date;
};

exports.canonicalDateImpl = function (ctor, y, m, d) {
  var date = createDate(y, m - 1, d);
  return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
};

exports.calcWeekday = function (y, m, d) {
  return createDate(y, m - 1, d).getUTCDay();
};

exports.calcDiff = function (y1, m1, d1, y2, m2, d2) {
  var dt1 = createDate(y1, m1 - 1, d1);
  var dt2 = createDate(y2, m2 - 1, d2);
  return dt1.getTime() - dt2.getTime();
};
},{}],"output/Data.Date.Component/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Year = function Year(x) {
  return x;
};

var Monday = function () {
  function Monday() {}

  ;
  Monday.value = new Monday();
  return Monday;
}();

var Tuesday = function () {
  function Tuesday() {}

  ;
  Tuesday.value = new Tuesday();
  return Tuesday;
}();

var Wednesday = function () {
  function Wednesday() {}

  ;
  Wednesday.value = new Wednesday();
  return Wednesday;
}();

var Thursday = function () {
  function Thursday() {}

  ;
  Thursday.value = new Thursday();
  return Thursday;
}();

var Friday = function () {
  function Friday() {}

  ;
  Friday.value = new Friday();
  return Friday;
}();

var Saturday = function () {
  function Saturday() {}

  ;
  Saturday.value = new Saturday();
  return Saturday;
}();

var Sunday = function () {
  function Sunday() {}

  ;
  Sunday.value = new Sunday();
  return Sunday;
}();

var January = function () {
  function January() {}

  ;
  January.value = new January();
  return January;
}();

var February = function () {
  function February() {}

  ;
  February.value = new February();
  return February;
}();

var March = function () {
  function March() {}

  ;
  March.value = new March();
  return March;
}();

var April = function () {
  function April() {}

  ;
  April.value = new April();
  return April;
}();

var May = function () {
  function May() {}

  ;
  May.value = new May();
  return May;
}();

var June = function () {
  function June() {}

  ;
  June.value = new June();
  return June;
}();

var July = function () {
  function July() {}

  ;
  July.value = new July();
  return July;
}();

var August = function () {
  function August() {}

  ;
  August.value = new August();
  return August;
}();

var September = function () {
  function September() {}

  ;
  September.value = new September();
  return September;
}();

var October = function () {
  function October() {}

  ;
  October.value = new October();
  return October;
}();

var November = function () {
  function November() {}

  ;
  November.value = new November();
  return November;
}();

var December = function () {
  function December() {}

  ;
  December.value = new December();
  return December;
}();

var Day = function Day(x) {
  return x;
};

var showYear = new Data_Show.Show(function (v) {
  return "(Year " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showWeekday = new Data_Show.Show(function (v) {
  if (v instanceof Monday) {
    return "Monday";
  }

  ;

  if (v instanceof Tuesday) {
    return "Tuesday";
  }

  ;

  if (v instanceof Wednesday) {
    return "Wednesday";
  }

  ;

  if (v instanceof Thursday) {
    return "Thursday";
  }

  ;

  if (v instanceof Friday) {
    return "Friday";
  }

  ;

  if (v instanceof Saturday) {
    return "Saturday";
  }

  ;

  if (v instanceof Sunday) {
    return "Sunday";
  }

  ;
  throw new Error("Failed pattern match at Data.Date.Component (line 184, column 1 - line 191, column 25): " + [v.constructor.name]);
});
var showMonth = new Data_Show.Show(function (v) {
  if (v instanceof January) {
    return "January";
  }

  ;

  if (v instanceof February) {
    return "February";
  }

  ;

  if (v instanceof March) {
    return "March";
  }

  ;

  if (v instanceof April) {
    return "April";
  }

  ;

  if (v instanceof May) {
    return "May";
  }

  ;

  if (v instanceof June) {
    return "June";
  }

  ;

  if (v instanceof July) {
    return "July";
  }

  ;

  if (v instanceof August) {
    return "August";
  }

  ;

  if (v instanceof September) {
    return "September";
  }

  ;

  if (v instanceof October) {
    return "October";
  }

  ;

  if (v instanceof November) {
    return "November";
  }

  ;

  if (v instanceof December) {
    return "December";
  }

  ;
  throw new Error("Failed pattern match at Data.Date.Component (line 101, column 1 - line 113, column 29): " + [v.constructor.name]);
});
var showDay = new Data_Show.Show(function (v) {
  return "(Day " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var ordYear = Data_Ord.ordInt;
var ordDay = Data_Ord.ordInt;
var eqYear = Data_Eq.eqInt;
var eqWeekday = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof Monday && y instanceof Monday) {
      return true;
    }

    ;

    if (x instanceof Tuesday && y instanceof Tuesday) {
      return true;
    }

    ;

    if (x instanceof Wednesday && y instanceof Wednesday) {
      return true;
    }

    ;

    if (x instanceof Thursday && y instanceof Thursday) {
      return true;
    }

    ;

    if (x instanceof Friday && y instanceof Friday) {
      return true;
    }

    ;

    if (x instanceof Saturday && y instanceof Saturday) {
      return true;
    }

    ;

    if (x instanceof Sunday && y instanceof Sunday) {
      return true;
    }

    ;
    return false;
  };
});
var ordWeekday = new Data_Ord.Ord(function () {
  return eqWeekday;
}, function (x) {
  return function (y) {
    if (x instanceof Monday && y instanceof Monday) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Monday) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Monday) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Tuesday && y instanceof Tuesday) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Tuesday) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Tuesday) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Wednesday && y instanceof Wednesday) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Wednesday) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Wednesday) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Thursday && y instanceof Thursday) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Thursday) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Thursday) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Friday && y instanceof Friday) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Friday) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Friday) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Saturday && y instanceof Saturday) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Saturday) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Saturday) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Sunday && y instanceof Sunday) {
      return Data_Ordering.EQ.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Date.Component (line 154, column 1 - line 154, column 42): " + [x.constructor.name, y.constructor.name]);
  };
});
var eqMonth = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof January && y instanceof January) {
      return true;
    }

    ;

    if (x instanceof February && y instanceof February) {
      return true;
    }

    ;

    if (x instanceof March && y instanceof March) {
      return true;
    }

    ;

    if (x instanceof April && y instanceof April) {
      return true;
    }

    ;

    if (x instanceof May && y instanceof May) {
      return true;
    }

    ;

    if (x instanceof June && y instanceof June) {
      return true;
    }

    ;

    if (x instanceof July && y instanceof July) {
      return true;
    }

    ;

    if (x instanceof August && y instanceof August) {
      return true;
    }

    ;

    if (x instanceof September && y instanceof September) {
      return true;
    }

    ;

    if (x instanceof October && y instanceof October) {
      return true;
    }

    ;

    if (x instanceof November && y instanceof November) {
      return true;
    }

    ;

    if (x instanceof December && y instanceof December) {
      return true;
    }

    ;
    return false;
  };
});
var ordMonth = new Data_Ord.Ord(function () {
  return eqMonth;
}, function (x) {
  return function (y) {
    if (x instanceof January && y instanceof January) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof January) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof January) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof February && y instanceof February) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof February) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof February) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof March && y instanceof March) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof March) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof March) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof April && y instanceof April) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof April) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof April) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof May && y instanceof May) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof May) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof May) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof June && y instanceof June) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof June) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof June) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof July && y instanceof July) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof July) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof July) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof August && y instanceof August) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof August) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof August) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof September && y instanceof September) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof September) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof September) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof October && y instanceof October) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof October) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof October) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof November && y instanceof November) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof November) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof November) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof December && y instanceof December) {
      return Data_Ordering.EQ.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Date.Component (line 61, column 1 - line 61, column 38): " + [x.constructor.name, y.constructor.name]);
  };
});
var eqDay = Data_Eq.eqInt;
var boundedYear = new Data_Bounded.Bounded(function () {
  return ordYear;
}, -271820 | 0, 275759);
var boundedWeekday = new Data_Bounded.Bounded(function () {
  return ordWeekday;
}, Monday.value, Sunday.value);
var boundedMonth = new Data_Bounded.Bounded(function () {
  return ordMonth;
}, January.value, December.value);
var boundedEnumYear = new Data_Enum.BoundedEnum(function () {
  return boundedYear;
}, function () {
  return enumYear;
}, 547580, function (v) {
  return v;
}, function (n) {
  if (n >= (-271820 | 0) && n <= 275759) {
    return new Data_Maybe.Just(n);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 40, column 24): " + [n.constructor.name]);
});
var enumYear = new Data_Enum.Enum(function () {
  return ordYear;
}, function () {
  var $46 = Data_Enum.toEnum(boundedEnumYear);
  var $47 = Data_Enum.fromEnum(boundedEnumYear);
  return function ($48) {
    return $46(function (v) {
      return v - 1 | 0;
    }($47($48)));
  };
}(), function () {
  var $49 = Data_Enum.toEnum(boundedEnumYear);
  var $50 = Data_Enum.fromEnum(boundedEnumYear);
  return function ($51) {
    return $49(function (v) {
      return v + 1 | 0;
    }($50($51)));
  };
}());
var boundedEnumWeekday = new Data_Enum.BoundedEnum(function () {
  return boundedWeekday;
}, function () {
  return enumWeekday;
}, 7, function (v) {
  if (v instanceof Monday) {
    return 1;
  }

  ;

  if (v instanceof Tuesday) {
    return 2;
  }

  ;

  if (v instanceof Wednesday) {
    return 3;
  }

  ;

  if (v instanceof Thursday) {
    return 4;
  }

  ;

  if (v instanceof Friday) {
    return 5;
  }

  ;

  if (v instanceof Saturday) {
    return 6;
  }

  ;

  if (v instanceof Sunday) {
    return 7;
  }

  ;
  throw new Error("Failed pattern match at Data.Date.Component (line 175, column 14 - line 182, column 16): " + [v.constructor.name]);
}, function (v) {
  if (v === 1) {
    return new Data_Maybe.Just(Monday.value);
  }

  ;

  if (v === 2) {
    return new Data_Maybe.Just(Tuesday.value);
  }

  ;

  if (v === 3) {
    return new Data_Maybe.Just(Wednesday.value);
  }

  ;

  if (v === 4) {
    return new Data_Maybe.Just(Thursday.value);
  }

  ;

  if (v === 5) {
    return new Data_Maybe.Just(Friday.value);
  }

  ;

  if (v === 6) {
    return new Data_Maybe.Just(Saturday.value);
  }

  ;

  if (v === 7) {
    return new Data_Maybe.Just(Sunday.value);
  }

  ;
  return Data_Maybe.Nothing.value;
});
var enumWeekday = new Data_Enum.Enum(function () {
  return ordWeekday;
}, function () {
  var $52 = Data_Enum.toEnum(boundedEnumWeekday);
  var $53 = Data_Enum.fromEnum(boundedEnumWeekday);
  return function ($54) {
    return $52(function (v) {
      return v - 1 | 0;
    }($53($54)));
  };
}(), function () {
  var $55 = Data_Enum.toEnum(boundedEnumWeekday);
  var $56 = Data_Enum.fromEnum(boundedEnumWeekday);
  return function ($57) {
    return $55(function (v) {
      return v + 1 | 0;
    }($56($57)));
  };
}());
var boundedEnumMonth = new Data_Enum.BoundedEnum(function () {
  return boundedMonth;
}, function () {
  return enumMonth;
}, 12, function (v) {
  if (v instanceof January) {
    return 1;
  }

  ;

  if (v instanceof February) {
    return 2;
  }

  ;

  if (v instanceof March) {
    return 3;
  }

  ;

  if (v instanceof April) {
    return 4;
  }

  ;

  if (v instanceof May) {
    return 5;
  }

  ;

  if (v instanceof June) {
    return 6;
  }

  ;

  if (v instanceof July) {
    return 7;
  }

  ;

  if (v instanceof August) {
    return 8;
  }

  ;

  if (v instanceof September) {
    return 9;
  }

  ;

  if (v instanceof October) {
    return 10;
  }

  ;

  if (v instanceof November) {
    return 11;
  }

  ;

  if (v instanceof December) {
    return 12;
  }

  ;
  throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [v.constructor.name]);
}, function (v) {
  if (v === 1) {
    return new Data_Maybe.Just(January.value);
  }

  ;

  if (v === 2) {
    return new Data_Maybe.Just(February.value);
  }

  ;

  if (v === 3) {
    return new Data_Maybe.Just(March.value);
  }

  ;

  if (v === 4) {
    return new Data_Maybe.Just(April.value);
  }

  ;

  if (v === 5) {
    return new Data_Maybe.Just(May.value);
  }

  ;

  if (v === 6) {
    return new Data_Maybe.Just(June.value);
  }

  ;

  if (v === 7) {
    return new Data_Maybe.Just(July.value);
  }

  ;

  if (v === 8) {
    return new Data_Maybe.Just(August.value);
  }

  ;

  if (v === 9) {
    return new Data_Maybe.Just(September.value);
  }

  ;

  if (v === 10) {
    return new Data_Maybe.Just(October.value);
  }

  ;

  if (v === 11) {
    return new Data_Maybe.Just(November.value);
  }

  ;

  if (v === 12) {
    return new Data_Maybe.Just(December.value);
  }

  ;
  return Data_Maybe.Nothing.value;
});
var enumMonth = new Data_Enum.Enum(function () {
  return ordMonth;
}, function () {
  var $58 = Data_Enum.toEnum(boundedEnumMonth);
  var $59 = Data_Enum.fromEnum(boundedEnumMonth);
  return function ($60) {
    return $58(function (v) {
      return v - 1 | 0;
    }($59($60)));
  };
}(), function () {
  var $61 = Data_Enum.toEnum(boundedEnumMonth);
  var $62 = Data_Enum.fromEnum(boundedEnumMonth);
  return function ($63) {
    return $61(function (v) {
      return v + 1 | 0;
    }($62($63)));
  };
}());
var boundedDay = new Data_Bounded.Bounded(function () {
  return ordDay;
}, 1, 31);
var boundedEnumDay = new Data_Enum.BoundedEnum(function () {
  return boundedDay;
}, function () {
  return enumDay;
}, 31, function (v) {
  return v;
}, function (n) {
  if (n >= 1 && n <= 31) {
    return new Data_Maybe.Just(n);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 138, column 23): " + [n.constructor.name]);
});
var enumDay = new Data_Enum.Enum(function () {
  return ordDay;
}, function () {
  var $64 = Data_Enum.toEnum(boundedEnumDay);
  var $65 = Data_Enum.fromEnum(boundedEnumDay);
  return function ($66) {
    return $64(function (v) {
      return v - 1 | 0;
    }($65($66)));
  };
}(), function () {
  var $67 = Data_Enum.toEnum(boundedEnumDay);
  var $68 = Data_Enum.fromEnum(boundedEnumDay);
  return function ($69) {
    return $67(function (v) {
      return v + 1 | 0;
    }($68($69)));
  };
}());
module.exports = {
  January: January,
  February: February,
  March: March,
  April: April,
  May: May,
  June: June,
  July: July,
  August: August,
  September: September,
  October: October,
  November: November,
  December: December,
  Monday: Monday,
  Tuesday: Tuesday,
  Wednesday: Wednesday,
  Thursday: Thursday,
  Friday: Friday,
  Saturday: Saturday,
  Sunday: Sunday,
  eqYear: eqYear,
  ordYear: ordYear,
  boundedYear: boundedYear,
  enumYear: enumYear,
  boundedEnumYear: boundedEnumYear,
  showYear: showYear,
  eqMonth: eqMonth,
  ordMonth: ordMonth,
  boundedMonth: boundedMonth,
  enumMonth: enumMonth,
  boundedEnumMonth: boundedEnumMonth,
  showMonth: showMonth,
  eqDay: eqDay,
  ordDay: ordDay,
  boundedDay: boundedDay,
  enumDay: enumDay,
  boundedEnumDay: boundedEnumDay,
  showDay: showDay,
  eqWeekday: eqWeekday,
  ordWeekday: ordWeekday,
  boundedWeekday: boundedWeekday,
  enumWeekday: enumWeekday,
  boundedEnumWeekday: boundedEnumWeekday,
  showWeekday: showWeekday
};
},{"../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Time.Duration/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Seconds = function Seconds(x) {
  return x;
};

var Minutes = function Minutes(x) {
  return x;
};

var Milliseconds = function Milliseconds(x) {
  return x;
};

var Hours = function Hours(x) {
  return x;
};

var Days = function Days(x) {
  return x;
};

var Duration = function Duration(fromDuration, toDuration) {
  this.fromDuration = fromDuration;
  this.toDuration = toDuration;
};

var toDuration = function toDuration(dict) {
  return dict.toDuration;
};

var showSeconds = new Data_Show.Show(function (v) {
  return "(Seconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showMinutes = new Data_Show.Show(function (v) {
  return "(Minutes " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showMilliseconds = new Data_Show.Show(function (v) {
  return "(Milliseconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showHours = new Data_Show.Show(function (v) {
  return "(Hours " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showDays = new Data_Show.Show(function (v) {
  return "(Days " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var semigroupSeconds = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return v + v1;
  };
});
var semigroupMinutes = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return v + v1;
  };
});
var semigroupMilliseconds = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return v + v1;
  };
});
var semigroupHours = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return v + v1;
  };
});
var semigroupDays = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return v + v1;
  };
});
var ordSeconds = Data_Ord.ordNumber;
var ordMinutes = Data_Ord.ordNumber;
var ordMilliseconds = Data_Ord.ordNumber;
var ordHours = Data_Ord.ordNumber;
var ordDays = Data_Ord.ordNumber;
var newtypeSeconds = new Data_Newtype.Newtype(function (n) {
  return n;
}, Seconds);
var newtypeMinutes = new Data_Newtype.Newtype(function (n) {
  return n;
}, Minutes);
var newtypeMilliseconds = new Data_Newtype.Newtype(function (n) {
  return n;
}, Milliseconds);
var newtypeHours = new Data_Newtype.Newtype(function (n) {
  return n;
}, Hours);
var newtypeDays = new Data_Newtype.Newtype(function (n) {
  return n;
}, Days);
var monoidSeconds = new Data_Monoid.Monoid(function () {
  return semigroupSeconds;
}, 0.0);
var monoidMinutes = new Data_Monoid.Monoid(function () {
  return semigroupMinutes;
}, 0.0);
var monoidMilliseconds = new Data_Monoid.Monoid(function () {
  return semigroupMilliseconds;
}, 0.0);
var monoidHours = new Data_Monoid.Monoid(function () {
  return semigroupHours;
}, 0.0);
var monoidDays = new Data_Monoid.Monoid(function () {
  return semigroupDays;
}, 0.0);

var fromDuration = function fromDuration(dict) {
  return dict.fromDuration;
};

var negateDuration = function negateDuration(dictDuration) {
  var $56 = toDuration(dictDuration);
  var $57 = Data_Newtype.over(newtypeMilliseconds)(newtypeMilliseconds)(Milliseconds)(Data_Ring.negate(Data_Ring.ringNumber));
  var $58 = fromDuration(dictDuration);
  return function ($59) {
    return $56($57($58($59)));
  };
};

var eqSeconds = Data_Eq.eqNumber;
var eqMinutes = Data_Eq.eqNumber;
var eqMilliseconds = Data_Eq.eqNumber;
var eqHours = Data_Eq.eqNumber;
var eqDays = Data_Eq.eqNumber;
var durationSeconds = new Duration(Data_Newtype.over(newtypeSeconds)(newtypeMilliseconds)(Seconds)(function (v) {
  return v * 1000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeSeconds)(Milliseconds)(function (v) {
  return v / 1000.0;
}));
var durationMinutes = new Duration(Data_Newtype.over(newtypeMinutes)(newtypeMilliseconds)(Minutes)(function (v) {
  return v * 60000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeMinutes)(Milliseconds)(function (v) {
  return v / 60000.0;
}));
var durationMilliseconds = new Duration(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));
var durationHours = new Duration(Data_Newtype.over(newtypeHours)(newtypeMilliseconds)(Hours)(function (v) {
  return v * 3600000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeHours)(Milliseconds)(function (v) {
  return v / 3600000.0;
}));
var durationDays = new Duration(Data_Newtype.over(newtypeDays)(newtypeMilliseconds)(Days)(function (v) {
  return v * 8.64e7;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeDays)(Milliseconds)(function (v) {
  return v / 8.64e7;
}));

var convertDuration = function convertDuration(dictDuration) {
  return function (dictDuration1) {
    var $60 = toDuration(dictDuration1);
    var $61 = fromDuration(dictDuration);
    return function ($62) {
      return $60($61($62));
    };
  };
};

module.exports = {
  fromDuration: fromDuration,
  toDuration: toDuration,
  Milliseconds: Milliseconds,
  Seconds: Seconds,
  Minutes: Minutes,
  Hours: Hours,
  Days: Days,
  Duration: Duration,
  convertDuration: convertDuration,
  negateDuration: negateDuration,
  newtypeMilliseconds: newtypeMilliseconds,
  eqMilliseconds: eqMilliseconds,
  ordMilliseconds: ordMilliseconds,
  semigroupMilliseconds: semigroupMilliseconds,
  monoidMilliseconds: monoidMilliseconds,
  showMilliseconds: showMilliseconds,
  newtypeSeconds: newtypeSeconds,
  eqSeconds: eqSeconds,
  ordSeconds: ordSeconds,
  semigroupSeconds: semigroupSeconds,
  monoidSeconds: monoidSeconds,
  showSeconds: showSeconds,
  newtypeMinutes: newtypeMinutes,
  eqMinutes: eqMinutes,
  ordMinutes: ordMinutes,
  semigroupMinutes: semigroupMinutes,
  monoidMinutes: monoidMinutes,
  showMinutes: showMinutes,
  newtypeHours: newtypeHours,
  eqHours: eqHours,
  ordHours: ordHours,
  semigroupHours: semigroupHours,
  monoidHours: monoidHours,
  showHours: showHours,
  newtypeDays: newtypeDays,
  eqDays: eqDays,
  ordDays: ordDays,
  semigroupDays: semigroupDays,
  monoidDays: monoidDays,
  showDays: showDays,
  durationMilliseconds: durationMilliseconds,
  durationSeconds: durationSeconds,
  durationMinutes: durationMinutes,
  durationHours: durationHours,
  durationDays: durationDays
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ring/index.js":"output/Data.Ring/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Date/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Date_Component = require("../Data.Date.Component/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Time_Duration = require("../Data.Time.Duration/index.js");

var $$Date = function () {
  function $$Date(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  $$Date.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new $$Date(value0, value1, value2);
      };
    };
  };

  return $$Date;
}();

var year = function year(v) {
  return v.value0;
};

var weekday = function weekday(v) {
  var n = $foreign.calcWeekday(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2);
  var $41 = n === 0;

  if ($41) {
    return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(7));
  }

  ;
  return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(n));
};

var showDate = new Data_Show.Show(function (v) {
  return "(Date " + (Data_Show.show(Data_Date_Component.showYear)(v.value0) + (" " + (Data_Show.show(Data_Date_Component.showMonth)(v.value1) + (" " + (Data_Show.show(Data_Date_Component.showDay)(v.value2) + ")")))));
});

var month = function month(v) {
  return v.value1;
};

var isLeapYear = function isLeapYear(y) {
  var y$prime = Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(y);
  return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(4) === 0 && (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(400) === 0 || !(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(100) === 0));
};

var lastDayOfMonth = function lastDayOfMonth(y) {
  return function (m) {
    var unsafeDay = function () {
      var $108 = Data_Maybe.fromJust();
      var $109 = Data_Enum.toEnum(Data_Date_Component.boundedEnumDay);
      return function ($110) {
        return $108($109($110));
      };
    }();

    if (m instanceof Data_Date_Component.January) {
      return unsafeDay(31);
    }

    ;

    if (m instanceof Data_Date_Component.February) {
      if (isLeapYear(y)) {
        return unsafeDay(29);
      }

      ;

      if (Data_Boolean.otherwise) {
        return unsafeDay(28);
      }

      ;
    }

    ;

    if (m instanceof Data_Date_Component.March) {
      return unsafeDay(31);
    }

    ;

    if (m instanceof Data_Date_Component.April) {
      return unsafeDay(30);
    }

    ;

    if (m instanceof Data_Date_Component.May) {
      return unsafeDay(31);
    }

    ;

    if (m instanceof Data_Date_Component.June) {
      return unsafeDay(30);
    }

    ;

    if (m instanceof Data_Date_Component.July) {
      return unsafeDay(31);
    }

    ;

    if (m instanceof Data_Date_Component.August) {
      return unsafeDay(31);
    }

    ;

    if (m instanceof Data_Date_Component.September) {
      return unsafeDay(30);
    }

    ;

    if (m instanceof Data_Date_Component.October) {
      return unsafeDay(31);
    }

    ;

    if (m instanceof Data_Date_Component.November) {
      return unsafeDay(30);
    }

    ;

    if (m instanceof Data_Date_Component.December) {
      return unsafeDay(31);
    }

    ;
    throw new Error("Failed pattern match at Data.Date (line 127, column 22 - line 141, column 27): " + [m.constructor.name]);
  };
};

var eqDate = new Data_Eq.Eq(function (x) {
  return function (y) {
    return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
  };
});
var ordDate = new Data_Ord.Ord(function () {
  return eqDate;
}, function (x) {
  return function (y) {
    var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);

    if (v instanceof Data_Ordering.LT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v instanceof Data_Ordering.GT) {
      return Data_Ordering.GT.value;
    }

    ;
    var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);

    if (v1 instanceof Data_Ordering.LT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v1 instanceof Data_Ordering.GT) {
      return Data_Ordering.GT.value;
    }

    ;
    return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
  };
});
var enumDate = new Data_Enum.Enum(function () {
  return ordDate;
}, function (v) {
  var pm = Data_Enum.pred(Data_Date_Component.enumMonth)(v.value1);
  var pd = Data_Enum.pred(Data_Date_Component.enumDay)(v.value2);

  var y$prime = function () {
    var $73 = Data_Maybe.isNothing(pd) && Data_Maybe.isNothing(pm);

    if ($73) {
      return Data_Enum.pred(Data_Date_Component.enumYear)(v.value0);
    }

    ;
    return new Data_Maybe.Just(v.value0);
  }();

  var m$prime = function () {
    var $74 = Data_Maybe.isNothing(pd);

    if ($74) {
      return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(pm);
    }

    ;
    return v.value1;
  }();

  var l = lastDayOfMonth(v.value0)(m$prime);

  var d$prime = function () {
    var $75 = Data_Maybe.isNothing(pd);

    if ($75) {
      return new Data_Maybe.Just(l);
    }

    ;
    return pd;
  }();

  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
}, function (v) {
  var sm = Data_Enum.succ(Data_Date_Component.enumMonth)(v.value1);
  var l = lastDayOfMonth(v.value0)(v.value1);

  var sd = function () {
    var v1 = Data_Enum.succ(Data_Date_Component.enumDay)(v.value2);
    var $80 = Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Date_Component.ordDay))(v1)(new Data_Maybe.Just(l));

    if ($80) {
      return Data_Maybe.Nothing.value;
    }

    ;
    return v1;
  }();

  var m$prime = function () {
    var $81 = Data_Maybe.isNothing(sd);

    if ($81) {
      return Data_Maybe.fromMaybe(Data_Date_Component.January.value)(sm);
    }

    ;
    return v.value1;
  }();

  var y$prime = function () {
    var $82 = Data_Maybe.isNothing(sd) && Data_Maybe.isNothing(sm);

    if ($82) {
      return Data_Enum.succ(Data_Date_Component.enumYear)(v.value0);
    }

    ;
    return new Data_Maybe.Just(v.value0);
  }();

  var d$prime = function () {
    var $83 = Data_Maybe.isNothing(sd);

    if ($83) {
      return Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1);
    }

    ;
    return sd;
  }();

  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
});

var diff = function diff(dictDuration) {
  return function (v) {
    return function (v1) {
      return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2, v1.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v1.value1), v1.value2));
    };
  };
};

var day = function day(v) {
  return v.value2;
};

var canonicalDate = function canonicalDate(y) {
  return function (m) {
    return function (d) {
      var mkDate = function mkDate(y$prime) {
        return function (m$prime) {
          return function (d$prime) {
            return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
          };
        };
      };

      return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
    };
  };
};

var exactDate = function exactDate(y) {
  return function (m) {
    return function (d) {
      var dt = new $$Date(y, m, d);
      var $99 = Data_Eq.eq(eqDate)(canonicalDate(y)(m)(d))(dt);

      if ($99) {
        return new Data_Maybe.Just(dt);
      }

      ;
      return Data_Maybe.Nothing.value;
    };
  };
};

var boundedDate = new Data_Bounded.Bounded(function () {
  return ordDate;
}, new $$Date(Data_Bounded.bottom(Data_Date_Component.boundedYear), Data_Bounded.bottom(Data_Date_Component.boundedMonth), Data_Bounded.bottom(Data_Date_Component.boundedDay)), new $$Date(Data_Bounded.top(Data_Date_Component.boundedYear), Data_Bounded.top(Data_Date_Component.boundedMonth), Data_Bounded.top(Data_Date_Component.boundedDay)));

var adjust = function adjust(v) {
  return function (date) {
    var adj = function adj(v1) {
      return function (v2) {
        if (v1 === 0) {
          return new Data_Maybe.Just(v2);
        }

        ;
        var j = v1 + Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(v2.value2) | 0;
        var low = j < 1;
        var l = lastDayOfMonth(v2.value0)(function () {
          if (low) {
            return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(Data_Enum.pred(Data_Date_Component.enumMonth)(v2.value1));
          }

          ;
          return v2.value1;
        }());
        var hi = j > Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l);

        var i$prime = function () {
          if (low) {
            return j;
          }

          ;

          if (hi) {
            return (j - Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l) | 0) - 1 | 0;
          }

          ;

          if (Data_Boolean.otherwise) {
            return 0;
          }

          ;
          throw new Error("Failed pattern match at Data.Date (line 101, column 9 - line 103, column 28): " + []);
        }();

        var dt$prime = function () {
          if (low) {
            return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.pred(enumDate))(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1)));
          }

          ;

          if (hi) {
            return Data_Enum.succ(enumDate)(new $$Date(v2.value0, v2.value1, l));
          }

          ;

          if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(j));
          }

          ;
          throw new Error("Failed pattern match at Data.Date (line 104, column 9 - line 106, column 48): " + []);
        }();

        return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(adj(i$prime))(dt$prime);
      };
    };

    return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromNumber(v))(Data_Function.flip(adj)(date));
  };
};

module.exports = {
  canonicalDate: canonicalDate,
  exactDate: exactDate,
  year: year,
  month: month,
  day: day,
  weekday: weekday,
  diff: diff,
  isLeapYear: isLeapYear,
  lastDayOfMonth: lastDayOfMonth,
  adjust: adjust,
  eqDate: eqDate,
  ordDate: ordDate,
  boundedDate: boundedDate,
  showDate: showDate,
  enumDate: enumDate
};
},{"./foreign.js":"output/Data.Date/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Date.Component/index.js":"output/Data.Date.Component/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.EuclideanRing/index.js":"output/Data.EuclideanRing/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Int/index.js":"output/Data.Int/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Time.Duration/index.js":"output/Data.Time.Duration/index.js"}],"output/Data.DateTime/foreign.js":[function(require,module,exports) {
"use strict";

var createUTC = function createUTC(y, mo, d, h, m, s, ms) {
  var date = new Date(Date.UTC(y, mo, d, h, m, s, ms));

  if (y >= 0 && y < 100) {
    date.setUTCFullYear(y);
  }

  return date.getTime();
};

exports.calcDiff = function (rec1, rec2) {
  var msUTC1 = createUTC(rec1.year, rec1.month - 1, rec1.day, rec1.hour, rec1.minute, rec1.second, rec1.millisecond);
  var msUTC2 = createUTC(rec2.year, rec2.month - 1, rec2.day, rec2.hour, rec2.minute, rec2.second, rec2.millisecond);
  return msUTC1 - msUTC2;
};

exports.adjustImpl = function (just) {
  return function (nothing) {
    return function (offset) {
      return function (rec) {
        var msUTC = createUTC(rec.year, rec.month - 1, rec.day, rec.hour, rec.minute, rec.second, rec.millisecond);
        var dt = new Date(msUTC + offset);
        return isNaN(dt.getTime()) ? nothing : just({
          year: dt.getUTCFullYear(),
          month: dt.getUTCMonth() + 1,
          day: dt.getUTCDate(),
          hour: dt.getUTCHours(),
          minute: dt.getUTCMinutes(),
          second: dt.getUTCSeconds(),
          millisecond: dt.getUTCMilliseconds()
        });
      };
    };
  };
};
},{}],"output/Data.Time.Component/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var Second = function Second(x) {
  return x;
};

var Minute = function Minute(x) {
  return x;
};

var Millisecond = function Millisecond(x) {
  return x;
};

var Hour = function Hour(x) {
  return x;
};

var showSecond = new Data_Show.Show(function (v) {
  return "(Second " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showMinute = new Data_Show.Show(function (v) {
  return "(Minute " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showMillisecond = new Data_Show.Show(function (v) {
  return "(Millisecond " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showHour = new Data_Show.Show(function (v) {
  return "(Hour " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var ordSecond = Data_Ord.ordInt;
var ordMinute = Data_Ord.ordInt;
var ordMillisecond = Data_Ord.ordInt;
var ordHour = Data_Ord.ordInt;
var eqSecond = Data_Eq.eqInt;
var eqMinute = Data_Eq.eqInt;
var eqMillisecond = Data_Eq.eqInt;
var eqHour = Data_Eq.eqInt;
var boundedSecond = new Data_Bounded.Bounded(function () {
  return ordSecond;
}, 0, 59);
var boundedMinute = new Data_Bounded.Bounded(function () {
  return ordMinute;
}, 0, 59);
var boundedMillisecond = new Data_Bounded.Bounded(function () {
  return ordMillisecond;
}, 0, 999);
var boundedHour = new Data_Bounded.Bounded(function () {
  return ordHour;
}, 0, 23);
var boundedEnumSecond = new Data_Enum.BoundedEnum(function () {
  return boundedSecond;
}, function () {
  return enumSecond;
}, 60, function (v) {
  return v;
}, function (n) {
  if (n >= 0 && n <= 59) {
    return new Data_Maybe.Just(n);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [n.constructor.name]);
});
var enumSecond = new Data_Enum.Enum(function () {
  return ordSecond;
}, function () {
  var $28 = Data_Enum.toEnum(boundedEnumSecond);
  var $29 = Data_Enum.fromEnum(boundedEnumSecond);
  return function ($30) {
    return $28(function (v) {
      return v - 1 | 0;
    }($29($30)));
  };
}(), function () {
  var $31 = Data_Enum.toEnum(boundedEnumSecond);
  var $32 = Data_Enum.fromEnum(boundedEnumSecond);
  return function ($33) {
    return $31(function (v) {
      return v + 1 | 0;
    }($32($33)));
  };
}());
var boundedEnumMinute = new Data_Enum.BoundedEnum(function () {
  return boundedMinute;
}, function () {
  return enumMinute;
}, 60, function (v) {
  return v;
}, function (n) {
  if (n >= 0 && n <= 59) {
    return new Data_Maybe.Just(n);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [n.constructor.name]);
});
var enumMinute = new Data_Enum.Enum(function () {
  return ordMinute;
}, function () {
  var $34 = Data_Enum.toEnum(boundedEnumMinute);
  var $35 = Data_Enum.fromEnum(boundedEnumMinute);
  return function ($36) {
    return $34(function (v) {
      return v - 1 | 0;
    }($35($36)));
  };
}(), function () {
  var $37 = Data_Enum.toEnum(boundedEnumMinute);
  var $38 = Data_Enum.fromEnum(boundedEnumMinute);
  return function ($39) {
    return $37(function (v) {
      return v + 1 | 0;
    }($38($39)));
  };
}());
var boundedEnumMillisecond = new Data_Enum.BoundedEnum(function () {
  return boundedMillisecond;
}, function () {
  return enumMillisecond;
}, 1000, function (v) {
  return v;
}, function (n) {
  if (n >= 0 && n <= 999) {
    return new Data_Maybe.Just(n);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [n.constructor.name]);
});
var enumMillisecond = new Data_Enum.Enum(function () {
  return ordMillisecond;
}, function () {
  var $40 = Data_Enum.toEnum(boundedEnumMillisecond);
  var $41 = Data_Enum.fromEnum(boundedEnumMillisecond);
  return function ($42) {
    return $40(function (v) {
      return v - 1 | 0;
    }($41($42)));
  };
}(), function () {
  var $43 = Data_Enum.toEnum(boundedEnumMillisecond);
  var $44 = Data_Enum.fromEnum(boundedEnumMillisecond);
  return function ($45) {
    return $43(function (v) {
      return v + 1 | 0;
    }($44($45)));
  };
}());
var boundedEnumHour = new Data_Enum.BoundedEnum(function () {
  return boundedHour;
}, function () {
  return enumHour;
}, 24, function (v) {
  return v;
}, function (n) {
  if (n >= 0 && n <= 23) {
    return new Data_Maybe.Just(n);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [n.constructor.name]);
});
var enumHour = new Data_Enum.Enum(function () {
  return ordHour;
}, function () {
  var $46 = Data_Enum.toEnum(boundedEnumHour);
  var $47 = Data_Enum.fromEnum(boundedEnumHour);
  return function ($48) {
    return $46(function (v) {
      return v - 1 | 0;
    }($47($48)));
  };
}(), function () {
  var $49 = Data_Enum.toEnum(boundedEnumHour);
  var $50 = Data_Enum.fromEnum(boundedEnumHour);
  return function ($51) {
    return $49(function (v) {
      return v + 1 | 0;
    }($50($51)));
  };
}());
module.exports = {
  eqHour: eqHour,
  ordHour: ordHour,
  boundedHour: boundedHour,
  enumHour: enumHour,
  boundedEnumHour: boundedEnumHour,
  showHour: showHour,
  eqMinute: eqMinute,
  ordMinute: ordMinute,
  boundedMinute: boundedMinute,
  enumMinute: enumMinute,
  boundedEnumMinute: boundedEnumMinute,
  showMinute: showMinute,
  eqSecond: eqSecond,
  ordSecond: ordSecond,
  boundedSecond: boundedSecond,
  enumSecond: enumSecond,
  boundedEnumSecond: boundedEnumSecond,
  showSecond: showSecond,
  eqMillisecond: eqMillisecond,
  ordMillisecond: ordMillisecond,
  boundedMillisecond: boundedMillisecond,
  enumMillisecond: enumMillisecond,
  boundedEnumMillisecond: boundedEnumMillisecond,
  showMillisecond: showMillisecond
};
},{"../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Data.Time/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Apply = require("../Control.Apply/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Time_Component = require("../Data.Time.Component/index.js");

var Data_Time_Duration = require("../Data.Time.Duration/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var $$Math = require("../Math/index.js");

var Time = function () {
  function Time(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  ;

  Time.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return new Time(value0, value1, value2, value3);
        };
      };
    };
  };

  return Time;
}();

var showTime = new Data_Show.Show(function (v) {
  return "(Time " + (Data_Show.show(Data_Time_Component.showHour)(v.value0) + (" " + (Data_Show.show(Data_Time_Component.showMinute)(v.value1) + (" " + (Data_Show.show(Data_Time_Component.showSecond)(v.value2) + (" " + (Data_Show.show(Data_Time_Component.showMillisecond)(v.value3) + ")")))))));
});

var setSecond = function setSecond(s) {
  return function (v) {
    return new Time(v.value0, v.value1, s, v.value3);
  };
};

var setMinute = function setMinute(m) {
  return function (v) {
    return new Time(v.value0, m, v.value2, v.value3);
  };
};

var setMillisecond = function setMillisecond(ms) {
  return function (v) {
    return new Time(v.value0, v.value1, v.value2, ms);
  };
};

var setHour = function setHour(h) {
  return function (v) {
    return new Time(h, v.value1, v.value2, v.value3);
  };
};

var second = function second(v) {
  return v.value2;
};

var minute = function minute(v) {
  return v.value1;
};

var millisecond = function millisecond(v) {
  return v.value3;
};

var millisToTime = function millisToTime(v) {
  var hours = $$Math.floor(v / 3600000.0);
  var minutes = $$Math.floor((v - hours * 3600000.0) / 60000.0);
  var seconds = $$Math.floor((v - (hours * 3600000.0 + minutes * 60000.0)) / 1000.0);
  var milliseconds = v - (hours * 3600000.0 + minutes * 60000.0 + seconds * 1000.0);
  return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(Data_Int.floor(hours))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(Data_Int.floor(minutes))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(Data_Int.floor(seconds))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Int.floor(milliseconds))));
};

var hour = function hour(v) {
  return v.value0;
};

var timeToMillis = function timeToMillis(t) {
  return Data_Time_Duration.Milliseconds(3600000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(hour(t))) + 60000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(minute(t))) + 1000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(second(t))) + Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(millisecond(t))));
};

var eqTime = new Data_Eq.Eq(function (x) {
  return function (y) {
    return Data_Eq.eq(Data_Time_Component.eqHour)(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Component.eqMinute)(x.value1)(y.value1) && Data_Eq.eq(Data_Time_Component.eqSecond)(x.value2)(y.value2) && Data_Eq.eq(Data_Time_Component.eqMillisecond)(x.value3)(y.value3);
  };
});
var ordTime = new Data_Ord.Ord(function () {
  return eqTime;
}, function (x) {
  return function (y) {
    var v = Data_Ord.compare(Data_Time_Component.ordHour)(x.value0)(y.value0);

    if (v instanceof Data_Ordering.LT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v instanceof Data_Ordering.GT) {
      return Data_Ordering.GT.value;
    }

    ;
    var v1 = Data_Ord.compare(Data_Time_Component.ordMinute)(x.value1)(y.value1);

    if (v1 instanceof Data_Ordering.LT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v1 instanceof Data_Ordering.GT) {
      return Data_Ordering.GT.value;
    }

    ;
    var v2 = Data_Ord.compare(Data_Time_Component.ordSecond)(x.value2)(y.value2);

    if (v2 instanceof Data_Ordering.LT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v2 instanceof Data_Ordering.GT) {
      return Data_Ordering.GT.value;
    }

    ;
    return Data_Ord.compare(Data_Time_Component.ordMillisecond)(x.value3)(y.value3);
  };
});

var diff = function diff(dictDuration) {
  return function (t1) {
    return function (t2) {
      return Data_Time_Duration.toDuration(dictDuration)(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(timeToMillis(t1))(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(timeToMillis(t2))));
    };
  };
};

var boundedTime = new Data_Bounded.Bounded(function () {
  return ordTime;
}, new Time(Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond)), new Time(Data_Bounded.top(Data_Time_Component.boundedHour), Data_Bounded.top(Data_Time_Component.boundedMinute), Data_Bounded.top(Data_Time_Component.boundedSecond), Data_Bounded.top(Data_Time_Component.boundedMillisecond)));
var maxTime = timeToMillis(Data_Bounded.top(boundedTime));
var minTime = timeToMillis(Data_Bounded.bottom(boundedTime));

var adjust = function adjust(dictDuration) {
  return function (d) {
    return function (t) {
      var tLength = timeToMillis(t);
      var d$prime = Data_Time_Duration.fromDuration(dictDuration)(d);
      var wholeDays = Data_Time_Duration.Days($$Math.floor(Data_Newtype.unwrap(Data_Time_Duration.newtypeMilliseconds)(d$prime) / 8.64e7));
      var msAdjust = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(d$prime)(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(Data_Time_Duration.fromDuration(Data_Time_Duration.durationDays)(wholeDays)));
      var msAdjusted = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(tLength)(msAdjust);

      var wrap = function () {
        var $112 = Data_Ord.greaterThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(maxTime);

        if ($112) {
          return 1.0;
        }

        ;
        var $113 = Data_Ord.lessThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(minTime);

        if ($113) {
          return -1.0;
        }

        ;
        return 0.0;
      }();

      return new Data_Tuple.Tuple(Data_Semigroup.append(Data_Time_Duration.semigroupDays)(wholeDays)(wrap), millisToTime(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(msAdjusted)(8.64e7 * -wrap)));
    };
  };
};

module.exports = {
  Time: Time,
  hour: hour,
  setHour: setHour,
  minute: minute,
  setMinute: setMinute,
  second: second,
  setSecond: setSecond,
  millisecond: millisecond,
  setMillisecond: setMillisecond,
  adjust: adjust,
  diff: diff,
  eqTime: eqTime,
  ordTime: ordTime,
  boundedTime: boundedTime,
  showTime: showTime
};
},{"../Control.Apply/index.js":"output/Control.Apply/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Int/index.js":"output/Data.Int/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Newtype/index.js":"output/Data.Newtype/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Time.Component/index.js":"output/Data.Time.Component/index.js","../Data.Time.Duration/index.js":"output/Data.Time.Duration/index.js","../Data.Tuple/index.js":"output/Data.Tuple/index.js","../Math/index.js":"output/Math/index.js"}],"output/Data.DateTime/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Date = require("../Data.Date/index.js");

var Data_Date_Component = require("../Data.Date.Component/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Time = require("../Data.Time/index.js");

var Data_Time_Component = require("../Data.Time.Component/index.js");

var Data_Time_Duration = require("../Data.Time.Duration/index.js");

var DateTime = function () {
  function DateTime(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  DateTime.create = function (value0) {
    return function (value1) {
      return new DateTime(value0, value1);
    };
  };

  return DateTime;
}();

var toRecord = function toRecord(v) {
  return {
    year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)),
    month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)),
    day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)),
    hour: Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)),
    minute: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)),
    second: Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)),
    millisecond: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))
  };
};

var time = function time(v) {
  return v.value1;
};

var showDateTime = new Data_Show.Show(function (v) {
  return "(DateTime " + (Data_Show.show(Data_Date.showDate)(v.value0) + (" " + (Data_Show.show(Data_Time.showTime)(v.value1) + ")")));
});

var modifyTimeF = function modifyTimeF(dictFunctor) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictFunctor)(DateTime.create(v.value0))(f(v.value1));
    };
  };
};

var modifyTime = function modifyTime(f) {
  return function (v) {
    return new DateTime(v.value0, f(v.value1));
  };
};

var modifyDateF = function modifyDateF(dictFunctor) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictFunctor)(Data_Function.flip(DateTime.create)(v.value1))(f(v.value0));
    };
  };
};

var modifyDate = function modifyDate(f) {
  return function (v) {
    return new DateTime(f(v.value0), v.value1);
  };
};

var eqDateTime = new Data_Eq.Eq(function (x) {
  return function (y) {
    return Data_Eq.eq(Data_Date.eqDate)(x.value0)(y.value0) && Data_Eq.eq(Data_Time.eqTime)(x.value1)(y.value1);
  };
});
var ordDateTime = new Data_Ord.Ord(function () {
  return eqDateTime;
}, function (x) {
  return function (y) {
    var v = Data_Ord.compare(Data_Date.ordDate)(x.value0)(y.value0);

    if (v instanceof Data_Ordering.LT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v instanceof Data_Ordering.GT) {
      return Data_Ordering.GT.value;
    }

    ;
    return Data_Ord.compare(Data_Time.ordTime)(x.value1)(y.value1);
  };
});

var diff = function diff(dictDuration) {
  return function (dt1) {
    return function (dt2) {
      return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(toRecord(dt1), toRecord(dt2)));
    };
  };
};

var date = function date(v) {
  return v.value0;
};

var boundedDateTime = new Data_Bounded.Bounded(function () {
  return ordDateTime;
}, new DateTime(Data_Bounded.bottom(Data_Date.boundedDate), Data_Bounded.bottom(Data_Time.boundedTime)), new DateTime(Data_Bounded.top(Data_Date.boundedDate), Data_Bounded.top(Data_Time.boundedTime)));

var adjust = function adjust(dictDuration) {
  return function (d) {
    return function (dt) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.adjustImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(Data_Time_Duration.fromDuration(dictDuration)(d))(toRecord(dt)))(function (rec) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(DateTime.create)(Control_Bind.join(Data_Maybe.bindMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Date.exactDate)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(rec.year)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(rec.month)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(rec.day)))))(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(rec.hour)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(rec.minute)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(rec.second)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(rec.millisecond)));
      });
    };
  };
};

module.exports = {
  DateTime: DateTime,
  date: date,
  modifyDate: modifyDate,
  modifyDateF: modifyDateF,
  time: time,
  modifyTime: modifyTime,
  modifyTimeF: modifyTimeF,
  adjust: adjust,
  diff: diff,
  eqDateTime: eqDateTime,
  ordDateTime: ordDateTime,
  boundedDateTime: boundedDateTime,
  showDateTime: showDateTime
};
},{"./foreign.js":"output/Data.DateTime/foreign.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Date/index.js":"output/Data.Date/index.js","../Data.Date.Component/index.js":"output/Data.Date.Component/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Time/index.js":"output/Data.Time/index.js","../Data.Time.Component/index.js":"output/Data.Time.Component/index.js","../Data.Time.Duration/index.js":"output/Data.Time.Duration/index.js"}],"output/Data.DateTime.Instant/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Date = require("../Data.Date/index.js");

var Data_Date_Component = require("../Data.Date.Component/index.js");

var Data_DateTime = require("../Data.DateTime/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Time = require("../Data.Time/index.js");

var Data_Time_Component = require("../Data.Time.Component/index.js");

var Data_Time_Duration = require("../Data.Time.Duration/index.js");

var Instant = function Instant(x) {
  return x;
};

var unInstant = function unInstant(v) {
  return v;
};

var toDateTime = function () {
  var mkDateTime = function mkDateTime(y) {
    return function (mo) {
      return function (d) {
        return function (h) {
          return function (mi) {
            return function (s) {
              return function (ms) {
                return new Data_DateTime.DateTime(Data_Date.canonicalDate(y)(Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(mo)))(d), new Data_Time.Time(h, mi, s, ms));
              };
            };
          };
        };
      };
    };
  };

  return $foreign.toDateTimeImpl(mkDateTime);
}();

var showInstant = new Data_Show.Show(function (v) {
  return "(Instant " + (Data_Show.show(Data_Time_Duration.showMilliseconds)(v) + ")");
});
var ordDateTime = Data_Time_Duration.ordMilliseconds;

var instant = function instant(v) {
  if (v >= -8.6399778816e15 && v <= 8.639977881599999e15) {
    return new Data_Maybe.Just(v);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.DateTime.Instant (line 44, column 1 - line 44, column 41): " + [v.constructor.name]);
};

var fromDateTime = function fromDateTime(v) {
  return $foreign.fromDateTimeImpl(Data_Date.year(v.value0), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)), Data_Date.day(v.value0), Data_Time.hour(v.value1), Data_Time.minute(v.value1), Data_Time.second(v.value1), Data_Time.millisecond(v.value1));
};

var fromDate = function fromDate(d) {
  return $foreign.fromDateTimeImpl(Data_Date.year(d), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(d)), Data_Date.day(d), Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond));
};

var eqDateTime = Data_Time_Duration.eqMilliseconds;
var boundedInstant = new Data_Bounded.Bounded(function () {
  return ordDateTime;
}, -8.6399778816e15, 8.639977881599999e15);
module.exports = {
  instant: instant,
  unInstant: unInstant,
  fromDateTime: fromDateTime,
  fromDate: fromDate,
  toDateTime: toDateTime,
  eqDateTime: eqDateTime,
  ordDateTime: ordDateTime,
  boundedInstant: boundedInstant,
  showInstant: showInstant
};
},{"./foreign.js":"output/Data.DateTime.Instant/foreign.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Date/index.js":"output/Data.Date/index.js","../Data.Date.Component/index.js":"output/Data.Date.Component/index.js","../Data.DateTime/index.js":"output/Data.DateTime/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Time/index.js":"output/Data.Time/index.js","../Data.Time.Component/index.js":"output/Data.Time.Component/index.js","../Data.Time.Duration/index.js":"output/Data.Time.Duration/index.js"}],"output/Node.Buffer.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var MutableBuffer = function MutableBuffer(Monad0, concat, concat$prime, copy, create, fill, freeze, fromArray, fromArrayBuffer, fromString, getAtOffset, read, readString, setAtOffset, size, slice, thaw, toArray, toArrayBuffer, toString, unsafeFreeze, unsafeThaw, write, writeString) {
  this.Monad0 = Monad0;
  this.concat = concat;
  this["concat'"] = concat$prime;
  this.copy = copy;
  this.create = create;
  this.fill = fill;
  this.freeze = freeze;
  this.fromArray = fromArray;
  this.fromArrayBuffer = fromArrayBuffer;
  this.fromString = fromString;
  this.getAtOffset = getAtOffset;
  this.read = read;
  this.readString = readString;
  this.setAtOffset = setAtOffset;
  this.size = size;
  this.slice = slice;
  this.thaw = thaw;
  this.toArray = toArray;
  this.toArrayBuffer = toArrayBuffer;
  this.toString = toString;
  this.unsafeFreeze = unsafeFreeze;
  this.unsafeThaw = unsafeThaw;
  this.write = write;
  this.writeString = writeString;
};

var writeString = function writeString(dict) {
  return dict.writeString;
};

var write = function write(dict) {
  return dict.write;
};

var unsafeThaw = function unsafeThaw(dict) {
  return dict.unsafeThaw;
};

var unsafeFreeze = function unsafeFreeze(dict) {
  return dict.unsafeFreeze;
};

var toString = function toString(dict) {
  return dict.toString;
};

var toArrayBuffer = function toArrayBuffer(dict) {
  return dict.toArrayBuffer;
};

var toArray = function toArray(dict) {
  return dict.toArray;
};

var thaw = function thaw(dict) {
  return dict.thaw;
};

var slice = function slice(dict) {
  return dict.slice;
};

var size = function size(dict) {
  return dict.size;
};

var setAtOffset = function setAtOffset(dict) {
  return dict.setAtOffset;
};

var readString = function readString(dict) {
  return dict.readString;
};

var read = function read(dict) {
  return dict.read;
};

var getAtOffset = function getAtOffset(dict) {
  return dict.getAtOffset;
};

var fromString = function fromString(dict) {
  return dict.fromString;
};

var fromArrayBuffer = function fromArrayBuffer(dict) {
  return dict.fromArrayBuffer;
};

var fromArray = function fromArray(dict) {
  return dict.fromArray;
};

var freeze = function freeze(dict) {
  return dict.freeze;
};

var fill = function fill(dict) {
  return dict.fill;
};

var create = function create(dict) {
  return dict.create;
};

var copy = function copy(dict) {
  return dict.copy;
};

var concat$prime = function concat$prime(dict) {
  return dict["concat'"];
};

var concat = function concat(dict) {
  return dict.concat;
};

module.exports = {
  MutableBuffer: MutableBuffer,
  create: create,
  freeze: freeze,
  unsafeFreeze: unsafeFreeze,
  thaw: thaw,
  unsafeThaw: unsafeThaw,
  fromArray: fromArray,
  fromString: fromString,
  fromArrayBuffer: fromArrayBuffer,
  toArrayBuffer: toArrayBuffer,
  read: read,
  readString: readString,
  toString: toString,
  write: write,
  writeString: writeString,
  toArray: toArray,
  getAtOffset: getAtOffset,
  setAtOffset: setAtOffset,
  slice: slice,
  size: size,
  concat: concat,
  "concat'": concat$prime,
  copy: copy,
  fill: fill
};
},{}],"output/Node.Buffer.Internal/foreign.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
/* global exports */

/* global Buffer */
"use strict";

exports.copyAll = function (a) {
  return function () {
    return Buffer.from(a);
  };
};

exports.writeInternal = function (ty) {
  return function (value) {
    return function (offset) {
      return function (buf) {
        return function () {
          buf['write' + ty](value, offset);
          return {};
        };
      };
    };
  };
};

exports.writeStringInternal = function (encoding) {
  return function (offset) {
    return function (length) {
      return function (value) {
        return function (buff) {
          return function () {
            return buff.write(value, offset, length, encoding);
          };
        };
      };
    };
  };
};

exports.setAtOffset = function (value) {
  return function (offset) {
    return function (buff) {
      return function () {
        buff[offset] = value;
        return {};
      };
    };
  };
};

exports.copy = function (srcStart) {
  return function (srcEnd) {
    return function (src) {
      return function (targStart) {
        return function (targ) {
          return function () {
            return src.copy(targ, targStart, srcStart, srcEnd);
          };
        };
      };
    };
  };
};

exports.fill = function (octet) {
  return function (start) {
    return function (end) {
      return function (buf) {
        return function () {
          buf.fill(octet, start, end);
          return {};
        };
      };
    };
  };
};
},{"buffer":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/buffer/index.js"}],"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports) {
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/util/node_modules/inherits/inherits_browser.js":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/util/util.js":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
  var keys = Object.keys(obj);
  var descriptors = {};

  for (var i = 0; i < keys.length; i++) {
    descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
  }

  return descriptors;
};

var formatRegExp = /%[sdj%]/g;

exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];

    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }

    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;

    switch (x) {
      case '%s':
        return String(args[i++]);

      case '%d':
        return Number(args[i++]);

      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }

      default:
        return x;
    }
  });

  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }

  return str;
}; // Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.


exports.deprecate = function (fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  } // Allow for deprecating things in the process of starting up.


  if (typeof process === 'undefined') {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
};

var debugs = {};
var debugEnviron;

exports.debuglog = function (set) {
  if (isUndefined(debugEnviron)) debugEnviron = undefined || '';
  set = set.toUpperCase();

  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;

      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }

  return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */

/* legacy: obj, showHidden, depth, colors*/


function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

  if (isNull(value)) return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = JSON.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
} // NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.


function isArray(ar) {
  return Array.isArray(ar);
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
} // log is just a thin wrapper to console.log that prepends a timestamp


exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */


exports.inherits = require('inherits');

exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];

    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }

    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn,
    enumerable: false,
    writable: false,
    configurable: true
  });
  return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};

exports.promisify.custom = kCustomPromisifiedSymbol;

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }

  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  } // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.


  function callbackified() {
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();

    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }

    var self = this;

    var cb = function () {
      return maybeCb.apply(self, arguments);
    }; // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)


    original.apply(this, args).then(function (ret) {
      process.nextTick(cb, null, ret);
    }, function (rej) {
      process.nextTick(callbackifyOnRejected, rej, cb);
    });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}

exports.callbackify = callbackify;
},{"./support/isBuffer":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/util/support/isBufferBrowser.js","inherits":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/util/node_modules/inherits/inherits_browser.js","process":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/process/browser.js"}],"output/Node.Buffer.Immutable/foreign.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
/* global exports */

/* global Buffer */

/* global require */
"use strict";

exports.showImpl = require('util').inspect;

exports.eqImpl = function (a) {
  return function (b) {
    return a.equals(b);
  };
};

exports.compareImpl = function (a) {
  return function (b) {
    return a.compare(b);
  };
};

exports.create = function (size) {
  return Buffer.alloc(size);
};

exports.fromArray = function (octets) {
  return Buffer.from(octets);
};

exports.size = function (buff) {
  return buff.length;
};

exports.toArray = function (buff) {
  var json = buff.toJSON();
  return json.data || json;
};

exports.toArrayBuffer = function (buff) {
  return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
};

exports.fromArrayBuffer = function (ab) {
  return Buffer.from(ab);
};

exports.fromStringImpl = function (str) {
  return function (encoding) {
    return Buffer.from(str, encoding);
  };
};

exports.readImpl = function (ty) {
  return function (offset) {
    return function (buf) {
      return buf['read' + ty](offset);
    };
  };
};

exports.readStringImpl = function (enc) {
  return function (start) {
    return function (end) {
      return function (buff) {
        return buff.toString(enc, start, end);
      };
    };
  };
};

exports.getAtOffsetImpl = function (just) {
  return function (nothing) {
    return function (offset) {
      return function (buff) {
        var octet = buff[offset];
        return octet == null ? nothing : just(octet);
      };
    };
  };
};

exports.toStringImpl = function (enc) {
  return function (buff) {
    return buff.toString(enc);
  };
};

exports.slice = function (start) {
  return function (end) {
    return function (buff) {
      return buff.slice(start, end);
    };
  };
};

exports.concat = function (buffs) {
  return Buffer.concat(buffs);
};

exports["concat'"] = function (buffs) {
  return function (totalLength) {
    return Buffer.concat(buffs, totalLength);
  };
};
},{"util":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/util/util.js","buffer":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/buffer/index.js"}],"output/Node.Buffer.Types/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Show = require("../Data.Show/index.js");

var UInt8 = function () {
  function UInt8() {}

  ;
  UInt8.value = new UInt8();
  return UInt8;
}();

var UInt16LE = function () {
  function UInt16LE() {}

  ;
  UInt16LE.value = new UInt16LE();
  return UInt16LE;
}();

var UInt16BE = function () {
  function UInt16BE() {}

  ;
  UInt16BE.value = new UInt16BE();
  return UInt16BE;
}();

var UInt32LE = function () {
  function UInt32LE() {}

  ;
  UInt32LE.value = new UInt32LE();
  return UInt32LE;
}();

var UInt32BE = function () {
  function UInt32BE() {}

  ;
  UInt32BE.value = new UInt32BE();
  return UInt32BE;
}();

var Int8 = function () {
  function Int8() {}

  ;
  Int8.value = new Int8();
  return Int8;
}();

var Int16LE = function () {
  function Int16LE() {}

  ;
  Int16LE.value = new Int16LE();
  return Int16LE;
}();

var Int16BE = function () {
  function Int16BE() {}

  ;
  Int16BE.value = new Int16BE();
  return Int16BE;
}();

var Int32LE = function () {
  function Int32LE() {}

  ;
  Int32LE.value = new Int32LE();
  return Int32LE;
}();

var Int32BE = function () {
  function Int32BE() {}

  ;
  Int32BE.value = new Int32BE();
  return Int32BE;
}();

var FloatLE = function () {
  function FloatLE() {}

  ;
  FloatLE.value = new FloatLE();
  return FloatLE;
}();

var FloatBE = function () {
  function FloatBE() {}

  ;
  FloatBE.value = new FloatBE();
  return FloatBE;
}();

var DoubleLE = function () {
  function DoubleLE() {}

  ;
  DoubleLE.value = new DoubleLE();
  return DoubleLE;
}();

var DoubleBE = function () {
  function DoubleBE() {}

  ;
  DoubleBE.value = new DoubleBE();
  return DoubleBE;
}();

var showBufferValueType = new Data_Show.Show(function (v) {
  if (v instanceof UInt8) {
    return "UInt8";
  }

  ;

  if (v instanceof UInt16LE) {
    return "UInt16LE";
  }

  ;

  if (v instanceof UInt16BE) {
    return "UInt16BE";
  }

  ;

  if (v instanceof UInt32LE) {
    return "UInt32LE";
  }

  ;

  if (v instanceof UInt32BE) {
    return "UInt32BE";
  }

  ;

  if (v instanceof Int8) {
    return "Int8";
  }

  ;

  if (v instanceof Int16LE) {
    return "Int16LE";
  }

  ;

  if (v instanceof Int16BE) {
    return "Int16BE";
  }

  ;

  if (v instanceof Int32LE) {
    return "Int32LE";
  }

  ;

  if (v instanceof Int32BE) {
    return "Int32BE";
  }

  ;

  if (v instanceof FloatLE) {
    return "FloatLE";
  }

  ;

  if (v instanceof FloatBE) {
    return "FloatBE";
  }

  ;

  if (v instanceof DoubleLE) {
    return "DoubleLE";
  }

  ;

  if (v instanceof DoubleBE) {
    return "DoubleBE";
  }

  ;
  throw new Error("Failed pattern match at Node.Buffer.Types (line 33, column 1 - line 47, column 29): " + [v.constructor.name]);
});
module.exports = {
  UInt8: UInt8,
  UInt16LE: UInt16LE,
  UInt16BE: UInt16BE,
  UInt32LE: UInt32LE,
  UInt32BE: UInt32BE,
  Int8: Int8,
  Int16LE: Int16LE,
  Int16BE: Int16BE,
  Int32LE: Int32LE,
  Int32BE: Int32BE,
  FloatLE: FloatLE,
  FloatBE: FloatBE,
  DoubleLE: DoubleLE,
  DoubleBE: DoubleBE,
  showBufferValueType: showBufferValueType
};
},{"../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Node.Buffer.Immutable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Node_Buffer_Types = require("../Node.Buffer.Types/index.js");

var Node_Encoding = require("../Node.Encoding/index.js");

var toString = function toString($3) {
  return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
};

var showBuffer = new Data_Show.Show($foreign.showImpl);

var readString = function readString($4) {
  return $foreign.readStringImpl(Node_Encoding.encodingToNode($4));
};

var read = function () {
  var $5 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
  return function ($6) {
    return $foreign.readImpl($5($6));
  };
}();

var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var fromString = function fromString(str) {
  var $7 = $foreign.fromStringImpl(str);
  return function ($8) {
    return $7(Node_Encoding.encodingToNode($8));
  };
};

var eqBuffer = new Data_Eq.Eq($foreign.eqImpl);
var ordBuffer = new Data_Ord.Ord(function () {
  return eqBuffer;
}, function (a) {
  return function (b) {
    var v = $foreign.compareImpl(a)(b);

    if (v < 0) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v > 0) {
      return Data_Ordering.GT.value;
    }

    ;
    return Data_Ordering.EQ.value;
  };
});
module.exports = {
  fromString: fromString,
  read: read,
  readString: readString,
  toString: toString,
  getAtOffset: getAtOffset,
  showBuffer: showBuffer,
  eqBuffer: eqBuffer,
  ordBuffer: ordBuffer,
  create: $foreign.create,
  fromArray: $foreign.fromArray,
  fromArrayBuffer: $foreign.fromArrayBuffer,
  toArray: $foreign.toArray,
  toArrayBuffer: $foreign.toArrayBuffer,
  concat: $foreign.concat,
  "concat'": $foreign["concat'"],
  slice: $foreign.slice,
  size: $foreign.size
};
},{"./foreign.js":"output/Node.Buffer.Immutable/foreign.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Node.Buffer.Types/index.js":"output/Node.Buffer.Types/index.js","../Node.Encoding/index.js":"output/Node.Encoding/index.js"}],"output/Node.Buffer.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Show = require("../Data.Show/index.js");

var Node_Buffer_Immutable = require("../Node.Buffer.Immutable/index.js");

var Node_Buffer_Types = require("../Node.Buffer.Types/index.js");

var Node_Encoding = require("../Node.Encoding/index.js");

var writeString = function writeString(dictMonad) {
  return function ($20) {
    return $foreign.writeStringInternal(Node_Encoding.encodingToNode($20));
  };
};

var write = function write(dictMonad) {
  var $21 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
  return function ($22) {
    return $foreign.writeInternal($21($22));
  };
};

var unsafeThaw = function unsafeThaw(dictMonad) {
  var $23 = Control_Applicative.pure(dictMonad.Applicative0());
  return function ($24) {
    return $23($24);
  };
};

var usingToImmutable = function usingToImmutable(dictMonad) {
  return function (f) {
    return function (x) {
      return unsafeThaw(dictMonad)(f(x));
    };
  };
};

var unsafeFreeze = function unsafeFreeze(dictMonad) {
  var $25 = Control_Applicative.pure(dictMonad.Applicative0());
  return function ($26) {
    return $25($26);
  };
};

var usingFromImmutable = function usingFromImmutable(dictMonad) {
  return function (f) {
    return function (buf) {
      return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(f)(unsafeFreeze(dictMonad)(buf));
    };
  };
};

var toString = function toString(dictMonad) {
  return function (m) {
    return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toString(m));
  };
};

var toArrayBuffer = function toArrayBuffer(dictMonad) {
  return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArrayBuffer);
};

var toArray = function toArray(dictMonad) {
  return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArray);
};

var slice = Node_Buffer_Immutable.slice;

var size = function size(dictMonad) {
  return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.size);
};

var readString = function readString(dictMonad) {
  return function (m) {
    return function (o) {
      return function (o$prime) {
        return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.readString(m)(o)(o$prime));
      };
    };
  };
};

var read = function read(dictMonad) {
  return function (t) {
    return function (o) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.read(t)(o));
    };
  };
};

var getAtOffset = function getAtOffset(dictMonad) {
  return function (o) {
    return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.getAtOffset(o));
  };
};

var fromString = function fromString(dictMonad) {
  return function (s) {
    return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromString(s));
  };
};

var fromArrayBuffer = function fromArrayBuffer(dictMonad) {
  return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArrayBuffer);
};

var fromArray = function fromArray(dictMonad) {
  return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArray);
};

var create = function create(dictMonad) {
  return usingToImmutable(dictMonad)(Node_Buffer_Immutable.create);
};

var concat$prime = function concat$prime(dictMonad) {
  return function (arrs) {
    return function (n) {
      return function (v) {
        return Node_Buffer_Immutable["concat'"](arrs)(n);
      };
    };
  };
};

var concat = function concat(arrs) {
  return function (v) {
    return Node_Buffer_Immutable.concat(arrs);
  };
};

module.exports = {
  unsafeFreeze: unsafeFreeze,
  unsafeThaw: unsafeThaw,
  usingFromImmutable: usingFromImmutable,
  usingToImmutable: usingToImmutable,
  create: create,
  fromArray: fromArray,
  fromString: fromString,
  fromArrayBuffer: fromArrayBuffer,
  toArrayBuffer: toArrayBuffer,
  read: read,
  readString: readString,
  toString: toString,
  write: write,
  writeString: writeString,
  toArray: toArray,
  getAtOffset: getAtOffset,
  slice: slice,
  size: size,
  concat: concat,
  "concat'": concat$prime,
  copyAll: $foreign.copyAll,
  setAtOffset: $foreign.setAtOffset,
  copy: $foreign.copy,
  fill: $foreign.fill
};
},{"./foreign.js":"output/Node.Buffer.Internal/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Node.Buffer.Immutable/index.js":"output/Node.Buffer.Immutable/index.js","../Node.Buffer.Types/index.js":"output/Node.Buffer.Types/index.js","../Node.Encoding/index.js":"output/Node.Encoding/index.js"}],"output/Node.Buffer/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Effect = require("../Effect/index.js");

var Node_Buffer_Class = require("../Node.Buffer.Class/index.js");

var Node_Buffer_Internal = require("../Node.Buffer.Internal/index.js");

var mutableBufferEffect = new Node_Buffer_Class.MutableBuffer(function () {
  return Effect.monadEffect;
}, Node_Buffer_Internal.concat, Node_Buffer_Internal["concat'"](Effect.monadEffect), Node_Buffer_Internal.copy, Node_Buffer_Internal.create(Effect.monadEffect), Node_Buffer_Internal.fill, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.fromArray(Effect.monadEffect), Node_Buffer_Internal.fromArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.fromString(Effect.monadEffect), Node_Buffer_Internal.getAtOffset(Effect.monadEffect), Node_Buffer_Internal.read(Effect.monadEffect), Node_Buffer_Internal.readString(Effect.monadEffect), Node_Buffer_Internal.setAtOffset, Node_Buffer_Internal.size(Effect.monadEffect), Node_Buffer_Internal.slice, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.toArray(Effect.monadEffect), Node_Buffer_Internal.toArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.toString(Effect.monadEffect), Node_Buffer_Internal.unsafeFreeze(Effect.monadEffect), Node_Buffer_Internal.unsafeThaw(Effect.monadEffect), Node_Buffer_Internal.write(Effect.monadEffect), Node_Buffer_Internal.writeString(Effect.monadEffect));
module.exports = {
  mutableBufferEffect: mutableBufferEffect
};
},{"../Effect/index.js":"output/Effect/index.js","../Node.Buffer.Class/index.js":"output/Node.Buffer.Class/index.js","../Node.Buffer.Internal/index.js":"output/Node.Buffer.Internal/index.js"}],"output/Node.FS/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Show = require("../Data.Show/index.js");

var FileLink = function () {
  function FileLink() {}

  ;
  FileLink.value = new FileLink();
  return FileLink;
}();

var DirLink = function () {
  function DirLink() {}

  ;
  DirLink.value = new DirLink();
  return DirLink;
}();

var JunctionLink = function () {
  function JunctionLink() {}

  ;
  JunctionLink.value = new JunctionLink();
  return JunctionLink;
}();

var R = function () {
  function R() {}

  ;
  R.value = new R();
  return R;
}();

var R_PLUS = function () {
  function R_PLUS() {}

  ;
  R_PLUS.value = new R_PLUS();
  return R_PLUS;
}();

var RS = function () {
  function RS() {}

  ;
  RS.value = new RS();
  return RS;
}();

var RS_PLUS = function () {
  function RS_PLUS() {}

  ;
  RS_PLUS.value = new RS_PLUS();
  return RS_PLUS;
}();

var W = function () {
  function W() {}

  ;
  W.value = new W();
  return W;
}();

var WX = function () {
  function WX() {}

  ;
  WX.value = new WX();
  return WX;
}();

var W_PLUS = function () {
  function W_PLUS() {}

  ;
  W_PLUS.value = new W_PLUS();
  return W_PLUS;
}();

var WX_PLUS = function () {
  function WX_PLUS() {}

  ;
  WX_PLUS.value = new WX_PLUS();
  return WX_PLUS;
}();

var A = function () {
  function A() {}

  ;
  A.value = new A();
  return A;
}();

var AX = function () {
  function AX() {}

  ;
  AX.value = new AX();
  return AX;
}();

var A_PLUS = function () {
  function A_PLUS() {}

  ;
  A_PLUS.value = new A_PLUS();
  return A_PLUS;
}();

var AX_PLUS = function () {
  function AX_PLUS() {}

  ;
  AX_PLUS.value = new AX_PLUS();
  return AX_PLUS;
}();

var symlinkTypeToNode = function symlinkTypeToNode(ty) {
  if (ty instanceof FileLink) {
    return "file";
  }

  ;

  if (ty instanceof DirLink) {
    return "dir";
  }

  ;

  if (ty instanceof JunctionLink) {
    return "junction";
  }

  ;
  throw new Error("Failed pattern match at Node.FS (line 68, column 24 - line 71, column 29): " + [ty.constructor.name]);
};

var showSymlinkType = new Data_Show.Show(function (v) {
  if (v instanceof FileLink) {
    return "FileLink";
  }

  ;

  if (v instanceof DirLink) {
    return "DirLink";
  }

  ;

  if (v instanceof JunctionLink) {
    return "JunctionLink";
  }

  ;
  throw new Error("Failed pattern match at Node.FS (line 73, column 1 - line 76, column 37): " + [v.constructor.name]);
});
var showFileFlags = new Data_Show.Show(function (v) {
  if (v instanceof R) {
    return "R";
  }

  ;

  if (v instanceof R_PLUS) {
    return "R_PLUS";
  }

  ;

  if (v instanceof RS) {
    return "RS";
  }

  ;

  if (v instanceof RS_PLUS) {
    return "RS_PLUS";
  }

  ;

  if (v instanceof W) {
    return "W";
  }

  ;

  if (v instanceof WX) {
    return "WX";
  }

  ;

  if (v instanceof W_PLUS) {
    return "W_PLUS";
  }

  ;

  if (v instanceof WX_PLUS) {
    return "WX_PLUS";
  }

  ;

  if (v instanceof A) {
    return "A";
  }

  ;

  if (v instanceof AX) {
    return "AX";
  }

  ;

  if (v instanceof A_PLUS) {
    return "A_PLUS";
  }

  ;

  if (v instanceof AX_PLUS) {
    return "AX_PLUS";
  }

  ;
  throw new Error("Failed pattern match at Node.FS (line 22, column 1 - line 34, column 27): " + [v.constructor.name]);
});

var fileFlagsToNode = function fileFlagsToNode(ff) {
  if (ff instanceof R) {
    return "r";
  }

  ;

  if (ff instanceof R_PLUS) {
    return "r+";
  }

  ;

  if (ff instanceof RS) {
    return "rs";
  }

  ;

  if (ff instanceof RS_PLUS) {
    return "rs+";
  }

  ;

  if (ff instanceof W) {
    return "w";
  }

  ;

  if (ff instanceof WX) {
    return "wx";
  }

  ;

  if (ff instanceof W_PLUS) {
    return "w+";
  }

  ;

  if (ff instanceof WX_PLUS) {
    return "wx+";
  }

  ;

  if (ff instanceof A) {
    return "a";
  }

  ;

  if (ff instanceof AX) {
    return "ax";
  }

  ;

  if (ff instanceof A_PLUS) {
    return "a+";
  }

  ;

  if (ff instanceof AX_PLUS) {
    return "ax+";
  }

  ;
  throw new Error("Failed pattern match at Node.FS (line 42, column 22 - line 54, column 19): " + [ff.constructor.name]);
};

var eqSymlinkType = new Data_Eq.Eq(function (v) {
  return function (v1) {
    if (v instanceof FileLink && v1 instanceof FileLink) {
      return true;
    }

    ;

    if (v instanceof DirLink && v1 instanceof DirLink) {
      return true;
    }

    ;

    if (v instanceof JunctionLink && v1 instanceof JunctionLink) {
      return true;
    }

    ;
    return false;
  };
});
var eqFileFlags = new Data_Eq.Eq(function (x) {
  return function (y) {
    return Data_Show.show(showFileFlags)(x) === Data_Show.show(showFileFlags)(y);
  };
});
module.exports = {
  R: R,
  R_PLUS: R_PLUS,
  RS: RS,
  RS_PLUS: RS_PLUS,
  W: W,
  WX: WX,
  W_PLUS: W_PLUS,
  WX_PLUS: WX_PLUS,
  A: A,
  AX: AX,
  A_PLUS: A_PLUS,
  AX_PLUS: AX_PLUS,
  FileLink: FileLink,
  DirLink: DirLink,
  JunctionLink: JunctionLink,
  symlinkTypeToNode: symlinkTypeToNode,
  fileFlagsToNode: fileFlagsToNode,
  showFileFlags: showFileFlags,
  eqFileFlags: eqFileFlags,
  showSymlinkType: showSymlinkType,
  eqSymlinkType: eqSymlinkType
};
},{"../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"../../../.npm/_npx/41625/lib/node_modules/parcel/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"output/Node.FS.Internal/foreign.js":[function(require,module,exports) {
"use strict";

exports.unsafeRequireFS = require("fs");
},{"fs":"../../../.npm/_npx/41625/lib/node_modules/parcel/src/builtins/_empty.js"}],"output/Node.FS.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var mkEffect = Unsafe_Coerce.unsafeCoerce;
module.exports = {
  mkEffect: mkEffect,
  unsafeRequireFS: $foreign.unsafeRequireFS
};
},{"./foreign.js":"output/Node.FS.Internal/foreign.js","../Unsafe.Coerce/index.js":"output/Unsafe.Coerce/index.js"}],"output/Node.FS.Perms/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Apply = require("../Control.Apply/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");

var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");

var Data_String_Common = require("../Data.String.Common/index.js");

var Global = require("../Global/index.js");

var Perm = function Perm(x) {
  return x;
};

var Perms = function Perms(x) {
  return x;
};

var write = {
  r: false,
  w: true,
  x: false
};
var semiringPerm = new Data_Semiring.Semiring(function (v) {
  return function (v1) {
    return {
      r: v.r || v1.r,
      w: v.w || v1.w,
      x: v.x || v1.x
    };
  };
}, function (v) {
  return function (v1) {
    return {
      r: v.r && v1.r,
      w: v.w && v1.w,
      x: v.x && v1.x
    };
  };
}, {
  r: true,
  w: true,
  x: true
}, {
  r: false,
  w: false,
  x: false
});
var read = {
  r: true,
  w: false,
  x: false
};

var permToInt = function permToInt(v) {
  return (function () {
    if (v.r) {
      return 4;
    }

    ;
    return 0;
  }() + function () {
    if (v.w) {
      return 2;
    }

    ;
    return 0;
  }() | 0) + function () {
    if (v.x) {
      return 1;
    }

    ;
    return 0;
  }() | 0;
};

var permToString = function () {
  var $97 = Data_Show.show(Data_Show.showInt);
  return function ($98) {
    return $97(permToInt($98));
  };
}();

var permsToString = function permsToString(v) {
  return "0" + (permToString(v.u) + (permToString(v.g) + permToString(v.o)));
};

var permsToInt = function (dictPartial) {
  var $99 = Data_Maybe.fromJust();
  var $100 = Global.readInt(8);
  return function ($101) {
    return $99(Data_Int.fromNumber($100(permsToString($101))));
  };
}();

var none = Data_Semiring.zero(semiringPerm);

var mkPerms = function mkPerms(u) {
  return function (g) {
    return function (o) {
      return {
        u: u,
        g: g,
        o: o
      };
    };
  };
};

var mkPerm = function mkPerm(r) {
  return function (w) {
    return function (x) {
      return {
        r: r,
        w: w,
        x: x
      };
    };
  };
};

var execute = {
  r: false,
  w: false,
  x: true
};

var permFromChar = function permFromChar(c) {
  if (c === "0") {
    return Data_Maybe.Just.create(none);
  }

  ;

  if (c === "1") {
    return Data_Maybe.Just.create(execute);
  }

  ;

  if (c === "2") {
    return Data_Maybe.Just.create(write);
  }

  ;

  if (c === "3") {
    return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(write)(execute));
  }

  ;

  if (c === "4") {
    return Data_Maybe.Just.create(read);
  }

  ;

  if (c === "5") {
    return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(read)(execute));
  }

  ;

  if (c === "6") {
    return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(read)(write));
  }

  ;

  if (c === "7") {
    return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(Data_Semiring.add(semiringPerm)(read)(write))(execute));
  }

  ;
  return Data_Maybe.Nothing.value;
};

var permsFromString = function () {
  var zeroChar = Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Enum.boundedEnumChar)(48));

  var dropPrefix = function dropPrefix(x) {
    return function (xs) {
      if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqChar))(Data_String_CodeUnits.charAt(0)(xs))(new Data_Maybe.Just(x))) {
        return Data_String_CodePoints.drop(1)(xs);
      }

      ;

      if (Data_Boolean.otherwise) {
        return xs;
      }

      ;
      throw new Error("Failed pattern match at Node.FS.Perms (line 126, column 5 - line 128, column 35): " + [x.constructor.name, xs.constructor.name]);
    };
  };

  var _perms = function _perms(v) {
    if (v.length === 3) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(mkPerms)(permFromChar(v[0])))(permFromChar(v[1])))(permFromChar(v[2]));
    }

    ;
    return Data_Maybe.Nothing.value;
  };

  var $102 = dropPrefix(zeroChar);
  return function ($103) {
    return _perms(Data_String_CodeUnits.toCharArray($102($103)));
  };
}();

var eqPerm = new Data_Eq.Eq(function (v) {
  return function (v1) {
    return v.r === v1.r && v.w === v1.w && v.x === v1.x;
  };
});
var eqPerms = new Data_Eq.Eq(function (v) {
  return function (v1) {
    return Data_Eq.eq(eqPerm)(v.u)(v1.u) && Data_Eq.eq(eqPerm)(v.g)(v1.g) && Data_Eq.eq(eqPerm)(v.o)(v1.o);
  };
});
var ordPerm = new Data_Ord.Ord(function () {
  return eqPerm;
}, function (v) {
  return function (v1) {
    return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordBoolean))([v.r, v.w, v.x])([v1.r, v1.w, v1.x]);
  };
});
var ordPerms = new Data_Ord.Ord(function () {
  return eqPerms;
}, function (v) {
  return function (v1) {
    return Data_Ord.compare(Data_Ord.ordArray(ordPerm))([v.u, v.g, v.o])([v1.u, v1.g, v1.o]);
  };
});
var all = Data_Semiring.one(semiringPerm);
var showPerm = new Data_Show.Show(function (v) {
  if (Data_Eq.eq(eqPerm)(v)(none)) {
    return "none";
  }

  ;

  if (Data_Eq.eq(eqPerm)(v)(all)) {
    return "all";
  }

  ;
  var ps = Data_Semigroup.append(Data_Semigroup.semigroupArray)(function () {
    if (v.r) {
      return ["read"];
    }

    ;
    return [];
  }())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(function () {
    if (v.w) {
      return ["write"];
    }

    ;
    return [];
  }())(function () {
    if (v.x) {
      return ["execute"];
    }

    ;
    return [];
  }()));
  return Data_String_Common.joinWith(" + ")(ps);
});
var showPerms = new Data_Show.Show(function (v) {
  var f = function f(perm) {
    var str = Data_Show.show(showPerm)(perm);
    var $93 = Data_Maybe.isNothing(Data_String_CodePoints.indexOf(" ")(str));

    if ($93) {
      return str;
    }

    ;
    return "(" + (str + ")");
  };

  return "mkPerms " + Data_String_Common.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(f)([v.u, v.g, v.o]));
});
module.exports = {
  none: none,
  read: read,
  write: write,
  execute: execute,
  all: all,
  mkPerms: mkPerms,
  permsFromString: permsFromString,
  permsToString: permsToString,
  permsToInt: permsToInt,
  eqPerm: eqPerm,
  ordPerm: ordPerm,
  showPerm: showPerm,
  semiringPerm: semiringPerm,
  eqPerms: eqPerms,
  ordPerms: ordPerms,
  showPerms: showPerms
};
},{"../Control.Apply/index.js":"output/Control.Apply/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Int/index.js":"output/Data.Int/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.String.CodePoints/index.js":"output/Data.String.CodePoints/index.js","../Data.String.CodeUnits/index.js":"output/Data.String.CodeUnits/index.js","../Data.String.Common/index.js":"output/Data.String.Common/index.js","../Global/index.js":"output/Global/index.js"}],"output/Node.FS.Stats/foreign.js":[function(require,module,exports) {
"use strict";

exports.showStatsObj = require("util").inspect;

exports.statsMethod = function (m, s) {
  return s[m]();
};
},{"util":"../../../.npm/_npx/41625/lib/node_modules/parcel/node_modules/util/util.js"}],"output/Data.JSDate/foreign.js":[function(require,module,exports) {
/* global exports */
"use strict";

var createDate = function createDate(y, m, d, h, mi, s, ms) {
  var date = new Date(Date.UTC(y, m, d, h, mi, s, ms));

  if (y >= 0 && y < 100) {
    date.setUTCFullYear(y);
  }

  return date;
};

var createLocalDate = function createLocalDate(y, m, d, h, mi, s, ms) {
  var date = new Date(y, m, d, h, mi, s, ms);

  if (y >= 0 && y < 100) {
    date.setFullYear(y);
  }

  return date;
};

exports.now = function () {
  return new Date();
};

exports.isValid = function (date) {
  return !isNaN(date.getTime());
};

exports.toInstantImpl = function (just) {
  return function (nothing) {
    return function (date) {
      var t = date.getTime();
      return isNaN(t) ? nothing : just(t);
    };
  };
};

exports.fromInstant = function (instant) {
  return new Date(instant);
};

exports.jsdate = function (parts) {
  return createDate(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
};

exports.jsdateLocal = function (parts) {
  return function () {
    return createLocalDate(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
  };
};

exports.dateMethod = function (method, date) {
  return date[method]();
};

exports.dateMethodEff = function (method, date) {
  return function () {
    return date[method]();
  };
};

exports.parse = function (dateString) {
  return function () {
    return new Date(dateString);
  };
};

exports.fromTime = function (time) {
  return new Date(time);
};
},{}],"output/Data.JSDate/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Date = require("../Data.Date/index.js");

var Data_Date_Component = require("../Data.Date.Component/index.js");

var Data_DateTime = require("../Data.DateTime/index.js");

var Data_DateTime_Instant = require("../Data.DateTime.Instant/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Time = require("../Data.Time/index.js");

var Data_Time_Component = require("../Data.Time.Component/index.js");

var Data_Time_Duration = require("../Data.Time.Duration/index.js");

var Foreign = require("../Foreign/index.js");

var toUTCString = function toUTCString(dt) {
  return $foreign.dateMethod("toUTCString", dt);
};

var toTimeString = function toTimeString(dt) {
  return $foreign.dateMethod("toTimeString", dt);
};

var toString = function toString(dt) {
  return $foreign.dateMethod("toString", dt);
};

var toInstant = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(function ($4) {
  return Data_DateTime_Instant.instant(Data_Time_Duration.Milliseconds($4));
})($foreign.toInstantImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value));

var toISOString = function toISOString(dt) {
  return $foreign.dateMethodEff("toISOString", dt);
};

var toDateTime = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime_Instant.toDateTime))(toInstant);

var toDateString = function toDateString(dt) {
  return $foreign.dateMethod("toDateString", dt);
};

var toDate = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime.date))(toDateTime);
var readDate = Foreign.unsafeReadTagged("Date");

var getUTCSeconds = function getUTCSeconds(dt) {
  return $foreign.dateMethod("getUTCSeconds", dt);
};

var getUTCMonth = function getUTCMonth(dt) {
  return $foreign.dateMethod("getUTCMonth", dt);
};

var getUTCMinutes = function getUTCMinutes(dt) {
  return $foreign.dateMethod("getUTCMinutes", dt);
};

var getUTCMilliseconds = function getUTCMilliseconds(dt) {
  return $foreign.dateMethod("getUTCMilliseconds", dt);
};

var getUTCHours = function getUTCHours(dt) {
  return $foreign.dateMethod("getUTCHours", dt);
};

var getUTCFullYear = function getUTCFullYear(dt) {
  return $foreign.dateMethod("getUTCFullYear", dt);
};

var getUTCDay = function getUTCDay(dt) {
  return $foreign.dateMethod("getUTCDay", dt);
};

var getUTCDate = function getUTCDate(dt) {
  return $foreign.dateMethod("getUTCDate", dt);
};

var getTimezoneOffset = function getTimezoneOffset(dt) {
  return $foreign.dateMethodEff("getTimezoneOffset", dt);
};

var getTime = function getTime(dt) {
  return $foreign.dateMethod("getTime", dt);
};

var showJSDate = new Data_Show.Show(function (a) {
  return "(fromTime " + (Data_Show.show(Data_Show.showNumber)(getTime(a)) + ")");
});

var getSeconds = function getSeconds(dt) {
  return $foreign.dateMethodEff("getSeconds", dt);
};

var getMonth = function getMonth(dt) {
  return $foreign.dateMethodEff("getMonth", dt);
};

var getMinutes = function getMinutes(dt) {
  return $foreign.dateMethodEff("getMinutes", dt);
};

var getMilliseconds = function getMilliseconds(dt) {
  return $foreign.dateMethodEff("getMilliseconds", dt);
};

var getHours = function getHours(dt) {
  return $foreign.dateMethodEff("getHours", dt);
};

var getFullYear = function getFullYear(dt) {
  return $foreign.dateMethodEff("getFullYear", dt);
};

var getDay = function getDay(dt) {
  return $foreign.dateMethodEff("getDay", dt);
};

var getDate = function getDate(dt) {
  return $foreign.dateMethodEff("getDate", dt);
};

var fromDateTime = function fromDateTime(v) {
  return $foreign.jsdate({
    year: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0))),
    month: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)) - 1 | 0),
    day: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0))),
    hour: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1))),
    minute: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1))),
    second: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1))),
    millisecond: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1)))
  });
};

var eqJSDate = new Data_Eq.Eq(function (a) {
  return function (b) {
    return getTime(a) === getTime(b);
  };
});
var ordJSDate = new Data_Ord.Ord(function () {
  return eqJSDate;
}, function (a) {
  return function (b) {
    return Data_Ord.compare(Data_Ord.ordNumber)(getTime(a))(getTime(b));
  };
});
module.exports = {
  readDate: readDate,
  fromDateTime: fromDateTime,
  toDateTime: toDateTime,
  toDate: toDate,
  toInstant: toInstant,
  getTime: getTime,
  getUTCDate: getUTCDate,
  getUTCDay: getUTCDay,
  getUTCFullYear: getUTCFullYear,
  getUTCHours: getUTCHours,
  getUTCMilliseconds: getUTCMilliseconds,
  getUTCMinutes: getUTCMinutes,
  getUTCMonth: getUTCMonth,
  getUTCSeconds: getUTCSeconds,
  getDate: getDate,
  getDay: getDay,
  getFullYear: getFullYear,
  getHours: getHours,
  getMilliseconds: getMilliseconds,
  getMinutes: getMinutes,
  getMonth: getMonth,
  getSeconds: getSeconds,
  getTimezoneOffset: getTimezoneOffset,
  toDateString: toDateString,
  toISOString: toISOString,
  toString: toString,
  toTimeString: toTimeString,
  toUTCString: toUTCString,
  eqJSDate: eqJSDate,
  ordJSDate: ordJSDate,
  showJSDate: showJSDate,
  isValid: $foreign.isValid,
  fromInstant: $foreign.fromInstant,
  jsdate: $foreign.jsdate,
  jsdateLocal: $foreign.jsdateLocal,
  now: $foreign.now,
  parse: $foreign.parse,
  fromTime: $foreign.fromTime
};
},{"./foreign.js":"output/Data.JSDate/foreign.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Data.Date/index.js":"output/Data.Date/index.js","../Data.Date.Component/index.js":"output/Data.Date.Component/index.js","../Data.DateTime/index.js":"output/Data.DateTime/index.js","../Data.DateTime.Instant/index.js":"output/Data.DateTime.Instant/index.js","../Data.Enum/index.js":"output/Data.Enum/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Int/index.js":"output/Data.Int/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Time/index.js":"output/Data.Time/index.js","../Data.Time.Component/index.js":"output/Data.Time.Component/index.js","../Data.Time.Duration/index.js":"output/Data.Time.Duration/index.js","../Foreign/index.js":"output/Foreign/index.js"}],"output/Node.FS.Stats/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_JSDate = require("../Data.JSDate/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Show = require("../Data.Show/index.js");

var Stats = function () {
  function Stats(value0) {
    this.value0 = value0;
  }

  ;

  Stats.create = function (value0) {
    return new Stats(value0);
  };

  return Stats;
}();

var statusChangedTime = function statusChangedTime(v) {
  return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.ctime));
};

var showStats = new Data_Show.Show(function (v) {
  return "Stats " + $foreign.showStatsObj(v.value0);
});

var modifiedTime = function modifiedTime(v) {
  return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.mtime));
};

var isSymbolicLink = function isSymbolicLink(v) {
  return $foreign.statsMethod("isSymbolicLink", v.value0);
};

var isSocket = function isSocket(v) {
  return $foreign.statsMethod("isSocket", v.value0);
};

var isFile = function isFile(v) {
  return $foreign.statsMethod("isFile", v.value0);
};

var isFIFO = function isFIFO(v) {
  return $foreign.statsMethod("isFIFO", v.value0);
};

var isDirectory = function isDirectory(v) {
  return $foreign.statsMethod("isDirectory", v.value0);
};

var isCharacterDevice = function isCharacterDevice(v) {
  return $foreign.statsMethod("isCharacterDevice", v.value0);
};

var isBlockDevice = function isBlockDevice(v) {
  return $foreign.statsMethod("isBlockDevice", v.value0);
};

var accessedTime = function accessedTime(v) {
  return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.atime));
};

module.exports = {
  Stats: Stats,
  isFile: isFile,
  isDirectory: isDirectory,
  isBlockDevice: isBlockDevice,
  isCharacterDevice: isCharacterDevice,
  isFIFO: isFIFO,
  isSocket: isSocket,
  isSymbolicLink: isSymbolicLink,
  accessedTime: accessedTime,
  modifiedTime: modifiedTime,
  statusChangedTime: statusChangedTime,
  showStats: showStats
};
},{"./foreign.js":"output/Node.FS.Stats/foreign.js","../Data.JSDate/index.js":"output/Data.JSDate/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/Node.FS.Sync/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_DateTime_Instant = require("../Data.DateTime.Instant/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Data_Show = require("../Data.Show/index.js");

var Effect = require("../Effect/index.js");

var Node_Buffer = require("../Node.Buffer/index.js");

var Node_Buffer_Class = require("../Node.Buffer.Class/index.js");

var Node_Encoding = require("../Node.Encoding/index.js");

var Node_FS = require("../Node.FS/index.js");

var Node_FS_Internal = require("../Node.FS.Internal/index.js");

var Node_FS_Perms = require("../Node.FS.Perms/index.js");

var Node_FS_Stats = require("../Node.FS.Stats/index.js");

var fs = Node_FS_Internal.unsafeRequireFS;

var link = function link(src) {
  return function (dst) {
    return Node_FS_Internal.mkEffect(function (v) {
      return fs.linkSync(src, dst);
    });
  };
};

var mkdir$prime = function mkdir$prime(file) {
  return function (perms) {
    return Node_FS_Internal.mkEffect(function (v) {
      return fs.mkdirSync(file, Node_FS_Perms.permsToString(perms));
    });
  };
};

var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));

var readFile = function readFile(file) {
  return Node_FS_Internal.mkEffect(function (v) {
    return fs.readFileSync(file, {});
  });
};

var readTextFile = function readTextFile(encoding) {
  return function (file) {
    return Node_FS_Internal.mkEffect(function (v) {
      return fs.readFileSync(file, {
        encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
      });
    });
  };
};

var readdir = function readdir(file) {
  return Node_FS_Internal.mkEffect(function (v) {
    return fs.readdirSync(file);
  });
};

var readlink = function readlink(path) {
  return Node_FS_Internal.mkEffect(function (v) {
    return fs.readlinkSync(path);
  });
};

var realpath = function realpath(path) {
  return Node_FS_Internal.mkEffect(function (v) {
    return fs.realpathSync(path, {});
  });
};

var realpath$prime = function realpath$prime(path) {
  return function (cache) {
    return Node_FS_Internal.mkEffect(function (v) {
      return fs.realpathSync(path, cache);
    });
  };
};

var rename = function rename(oldFile) {
  return function (newFile) {
    return Node_FS_Internal.mkEffect(function (v) {
      return fs.renameSync(oldFile, newFile);
    });
  };
};

var rmdir = function rmdir(file) {
  return Node_FS_Internal.mkEffect(function (v) {
    return fs.rmdirSync(file);
  });
};

var stat = function stat(file) {
  return Data_Functor.map(Effect.functorEffect)(Node_FS_Stats.Stats.create)(Node_FS_Internal.mkEffect(function (v) {
    return fs.statSync(file);
  }));
};

var symlink = function symlink(src) {
  return function (dst) {
    return function (ty) {
      return Node_FS_Internal.mkEffect(function (v) {
        return fs.symlinkSync(src, dst, Node_FS.symlinkTypeToNode(ty));
      });
    };
  };
};

var truncate = function truncate(file) {
  return function (len) {
    return Node_FS_Internal.mkEffect(function (v) {
      return fs.truncateSync(file, len);
    });
  };
};

var unlink = function unlink(file) {
  return Node_FS_Internal.mkEffect(function (v) {
    return fs.unlinkSync(file);
  });
};

var utimes = function utimes(file) {
  return function (atime) {
    return function (mtime) {
      var toEpochMilliseconds = function toEpochMilliseconds($29) {
        return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($29));
      };

      var ms = function ms(v) {
        return Data_Int.round(v);
      };

      var fromDate = function fromDate(date) {
        return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms(toEpochMilliseconds(date)))(1000);
      };

      return Node_FS_Internal.mkEffect(function (v) {
        return fs.utimesSync(file, fromDate(atime), fromDate(mtime));
      });
    };
  };
};

var writeFile = function writeFile(file) {
  return function (buff) {
    return Node_FS_Internal.mkEffect(function (v) {
      return fs.writeFileSync(file, buff, {});
    });
  };
};

var writeTextFile = function writeTextFile(encoding) {
  return function (file) {
    return function (text) {
      return Node_FS_Internal.mkEffect(function (v) {
        return fs.writeFileSync(file, text, {
          encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
        });
      });
    };
  };
};

var fdWrite = function fdWrite(fd) {
  return function (buff) {
    return function (off) {
      return function (len) {
        return function (pos) {
          return Node_FS_Internal.mkEffect(function (v) {
            return fs.writeSync(fd, buff, off, len, Data_Nullable.toNullable(pos));
          });
        };
      };
    };
  };
};

var fdRead = function fdRead(fd) {
  return function (buff) {
    return function (off) {
      return function (len) {
        return function (pos) {
          return Node_FS_Internal.mkEffect(function (v) {
            return fs.readSync(fd, buff, off, len, Data_Nullable.toNullable(pos));
          });
        };
      };
    };
  };
};

var fdOpen = function fdOpen(file) {
  return function (flags) {
    return function (mode) {
      return Node_FS_Internal.mkEffect(function (v) {
        return fs.openSync(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode));
      });
    };
  };
};

var fdNext = function fdNext(fd) {
  return function (buff) {
    return function __do() {
      var sz = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
      return fdRead(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)();
    };
  };
};

var fdFlush = function fdFlush(fd) {
  return Node_FS_Internal.mkEffect(function (v) {
    return fs.fsyncSync(fd);
  });
};

var fdClose = function fdClose(fd) {
  return Node_FS_Internal.mkEffect(function (v) {
    return fs.closeSync(fd);
  });
};

var fdAppend = function fdAppend(fd) {
  return function (buff) {
    return function __do() {
      var sz = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
      return fdWrite(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)();
    };
  };
};

var exists = function exists(file) {
  return Node_FS_Internal.mkEffect(function (v) {
    return fs.existsSync(file);
  });
};

var chown = function chown(file) {
  return function (uid) {
    return function (gid) {
      return Node_FS_Internal.mkEffect(function (v) {
        return fs.chownSync(file, uid, gid);
      });
    };
  };
};

var chmod = function chmod(file) {
  return function (perms) {
    return Node_FS_Internal.mkEffect(function (v) {
      return fs.chmodSync(file, Node_FS_Perms.permsToString(perms));
    });
  };
};

var appendTextFile = function appendTextFile(encoding) {
  return function (file) {
    return function (buff) {
      return Node_FS_Internal.mkEffect(function (v) {
        return fs.appendFileSync(file, buff, {
          encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
        });
      });
    };
  };
};

var appendFile = function appendFile(file) {
  return function (buff) {
    return Node_FS_Internal.mkEffect(function (v) {
      return fs.appendFileSync(file, buff, {});
    });
  };
};

module.exports = {
  rename: rename,
  truncate: truncate,
  chown: chown,
  chmod: chmod,
  stat: stat,
  link: link,
  symlink: symlink,
  readlink: readlink,
  realpath: realpath,
  "realpath'": realpath$prime,
  unlink: unlink,
  rmdir: rmdir,
  mkdir: mkdir,
  "mkdir'": mkdir$prime,
  readdir: readdir,
  utimes: utimes,
  readFile: readFile,
  readTextFile: readTextFile,
  writeFile: writeFile,
  writeTextFile: writeTextFile,
  appendFile: appendFile,
  appendTextFile: appendTextFile,
  exists: exists,
  fdOpen: fdOpen,
  fdRead: fdRead,
  fdNext: fdNext,
  fdWrite: fdWrite,
  fdAppend: fdAppend,
  fdFlush: fdFlush,
  fdClose: fdClose
};
},{"../Data.DateTime.Instant/index.js":"output/Data.DateTime.Instant/index.js","../Data.EuclideanRing/index.js":"output/Data.EuclideanRing/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Int/index.js":"output/Data.Int/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Effect/index.js":"output/Effect/index.js","../Node.Buffer/index.js":"output/Node.Buffer/index.js","../Node.Buffer.Class/index.js":"output/Node.Buffer.Class/index.js","../Node.Encoding/index.js":"output/Node.Encoding/index.js","../Node.FS/index.js":"output/Node.FS/index.js","../Node.FS.Internal/index.js":"output/Node.FS.Internal/index.js","../Node.FS.Perms/index.js":"output/Node.FS.Perms/index.js","../Node.FS.Stats/index.js":"output/Node.FS.Stats/index.js"}],"../output/Waypoint/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");

var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");

var Data_HashMap = require("../Data.HashMap/index.js");

var Data_Hashable = require("../Data.Hashable/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_String_Common = require("../Data.String.Common/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_XML_Parse = require("../Data.XML.Parse/index.js");

var Data_XML_Types = require("../Data.XML.Types/index.js");

var Effect_Console = require("../Effect.Console/index.js");

var Node_Encoding = require("../Node.Encoding/index.js");

var Node_FS_Sync = require("../Node.FS.Sync/index.js");

var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");

var Waypoint = function Waypoint(x) {
  return x;
};

var toUrl = function toUrl(waypoints) {
  var waypointToUrl = function waypointToUrl(v) {
    return "'" + (v.lat + ("," + (v["long"] + "'")));
  };

  return "https://www.google.com/maps/dir/" + Data_String_Common.joinWith("/")(Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(waypointToUrl)(waypoints)));
};

var toUrls = function toUrls(v) {
  if (v instanceof Data_List_Types.Nil) {
    return Data_List_Types.Nil.value;
  }

  ;
  return new Data_List_Types.Cons(toUrl(Data_List.take(9)(v)), toUrls(Data_List.drop(9 - 1 | 0)(v)));
};

var maybeToEither = function maybeToEither(v) {
  return function (v1) {
    if (v1 instanceof Data_Maybe.Nothing) {
      return new Data_Either.Left(v);
    }

    ;

    if (v1 instanceof Data_Maybe.Just) {
      return new Data_Either.Right(v1.value0);
    }

    ;
    throw new Error("Failed pattern match at Waypoint (line 61, column 1 - line 61, column 59): " + [v.constructor.name, v1.constructor.name]);
  };
};

var parseWaypoint = function parseWaypoint(v) {
  if (v instanceof Data_XML_Types.XMLNode && v.value0 === "wpt") {
    var m = Data_HashMap.fromFoldable(Data_List_Types.foldableList)(Data_Hashable.hashableString)(v.value1);
    return Control_Bind.bind(Data_Either.bindEither)(maybeToEither("lat not found")(Data_HashMap.lookup(Data_Hashable.hashableString)("lat")(m)))(function (lat) {
      return Control_Bind.bind(Data_Either.bindEither)(maybeToEither("long not found")(Data_HashMap.lookup(Data_Hashable.hashableString)("lon")(m)))(function ($$long) {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Just.create({
          lat: lat,
          "long": $$long
        }));
      });
    });
  }

  ;

  if (v instanceof Data_XML_Types.XMLNode && v.value0 === "metadata") {
    return new Data_Either.Right(Data_Maybe.Nothing.value);
  }

  ;
  return new Data_Either.Right(Data_Maybe.Nothing.value);
};

var parseWaypoints = function parseWaypoints(v) {
  if (v instanceof Data_XML_Types.XMLNode && v.value0 === "gpx") {
    return Data_Functor.map(Data_Either.functorEither)(Data_List.catMaybes)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_List_Types.traversableList)(v.value2)(parseWaypoint));
  }

  ;
  return new Data_Either.Right(Data_Monoid.mempty(Data_List_Types.monoidList));
};

var parseFromString = function parseFromString(str) {
  var v = Data_XML_Parse.parseXML(str);

  if (v instanceof Data_Either.Left) {
    return Data_Either.Left.create(Data_Show.show(Text_Parsing_Parser.showParseError)(v.value0));
  }

  ;

  if (v instanceof Data_Either.Right) {
    return parseWaypoints(v.value0);
  }

  ;
  throw new Error("Failed pattern match at Waypoint (line 52, column 23 - line 54, column 34): " + [v.constructor.name]);
};

var genericWaypoint = new Data_Generic_Rep.Generic(function (x) {
  return x;
}, function (x) {
  return x;
});
var showWaypoint = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericWaypoint)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
  return "lat";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
  return "long";
}))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
  return "Waypoint";
}))));

var testParse = function testParse(str) {
  var v = Data_XML_Parse.parseXML(str);

  if (v instanceof Data_Either.Left) {
    return Effect_Console.logShow(Text_Parsing_Parser.showParseError)(v.value0);
  }

  ;

  if (v instanceof Data_Either.Right) {
    return Effect_Console.logShow(Data_Either.showEither(Data_Show.showString)(Data_List_Types.showList(showWaypoint)))(parseWaypoints(v.value0));
  }

  ;
  throw new Error("Failed pattern match at Waypoint (line 57, column 17 - line 59, column 44): " + [v.constructor.name]);
};

var cli = function __do() {
  var content = Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)("file.gpx")();
  var url = Data_Functor.map(Data_Either.functorEither)(toUrl)(parseFromString(content));

  if (url instanceof Data_Either.Left) {
    return Effect_Console.log(url.value0)();
  }

  ;

  if (url instanceof Data_Either.Right) {
    return Effect_Console.log(url.value0)();
  }

  ;
  throw new Error("Failed pattern match at Waypoint (line 85, column 3 - line 87, column 25): " + [url.constructor.name]);
};

module.exports = {
  Waypoint: Waypoint,
  parseWaypoint: parseWaypoint,
  parseWaypoints: parseWaypoints,
  parseFromString: parseFromString,
  testParse: testParse,
  maybeToEither: maybeToEither,
  toUrl: toUrl,
  toUrls: toUrls,
  cli: cli,
  genericWaypoint: genericWaypoint,
  showWaypoint: showWaypoint
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Data.Array/index.js":"output/Data.Array/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Generic.Rep/index.js":"output/Data.Generic.Rep/index.js","../Data.Generic.Rep.Show/index.js":"output/Data.Generic.Rep.Show/index.js","../Data.HashMap/index.js":"output/Data.HashMap/index.js","../Data.Hashable/index.js":"output/Data.Hashable/index.js","../Data.List/index.js":"output/Data.List/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.String.Common/index.js":"output/Data.String.Common/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Traversable/index.js":"output/Data.Traversable/index.js","../Data.XML.Parse/index.js":"output/Data.XML.Parse/index.js","../Data.XML.Types/index.js":"output/Data.XML.Types/index.js","../Effect.Console/index.js":"output/Effect.Console/index.js","../Node.Encoding/index.js":"output/Node.Encoding/index.js","../Node.FS.Sync/index.js":"output/Node.FS.Sync/index.js","../Text.Parsing.Parser/index.js":"output/Text.Parsing.Parser/index.js"}],"../output/Main/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");

var Effect_Aff_Compat = require("../Effect.Aff.Compat/index.js");

var Halogen_Aff_Util = require("../Halogen.Aff.Util/index.js");

var Halogen_Component = require("../Halogen.Component/index.js");

var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");

var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");

var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");

var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");

var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");

var Halogen_VDom_Driver = require("../Halogen.VDom.Driver/index.js");

var Waypoint = require("../Waypoint/index.js");

var Waiting = function () {
  function Waiting() {}

  ;
  Waiting.value = new Waiting();
  return Waiting;
}();

var LoadingFile = function () {
  function LoadingFile() {}

  ;
  LoadingFile.value = new LoadingFile();
  return LoadingFile;
}();

var Loaded = function () {
  function Loaded(value0) {
    this.value0 = value0;
  }

  ;

  Loaded.create = function (value0) {
    return new Loaded(value0);
  };

  return Loaded;
}();

var Failed = function () {
  function Failed(value0) {
    this.value0 = value0;
  }

  ;

  Failed.create = function (value0) {
    return new Failed(value0);
  };

  return Failed;
}();

var LoadFile = function () {
  function LoadFile(value0) {
    this.value0 = value0;
  }

  ;

  LoadFile.create = function (value0) {
    return new LoadFile(value0);
  };

  return LoadFile;
}();

var fileFromInput = function fileFromInput($14) {
  return Effect_Aff_Compat.fromEffectFnAff($foreign["_fileFromInput"]($14));
};

var component = function component(dictMonadAff) {
  var renderUrl = function renderUrl(url) {
    return Halogen_HTML_Elements.a([Halogen_HTML_Properties.classes(["maps-link"]), Halogen_HTML_Properties.href(url)])([Halogen_HTML_Core.text(url)]);
  };

  var render = function render(state) {
    return Halogen_HTML_Elements.div([Halogen_HTML_Properties.classes(["main"])])([Halogen_HTML_Elements.h1_([Halogen_HTML_Core.text("Convert GPX File to Google Maps route")]), Halogen_HTML_Elements.input([Halogen_HTML_Properties.classes(["gpx-input"]), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputFile.value), Halogen_HTML_Events.onChange(function ($15) {
      return Data_Maybe.Just.create(LoadFile.create($15));
    })]), Halogen_HTML_Elements.div_(function () {
      if (state instanceof Waiting) {
        return [Halogen_HTML_Core.text("")];
      }

      ;

      if (state instanceof Loaded) {
        return Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(renderUrl)(Waypoint.toUrls(state.value0)));
      }

      ;

      if (state instanceof LoadingFile) {
        return [Halogen_HTML_Elements.div([Halogen_HTML_Properties.classes(["loader"])])([])];
      }

      ;

      if (state instanceof Failed) {
        return [Halogen_HTML_Core.text(state.value0)];
      }

      ;
      throw new Error("Failed pattern match at Main (line 67, column 12 - line 71, column 42): " + [state.constructor.name]);
    }())]);
  };

  var initialState = function initialState(v) {
    return Waiting.value;
  };

  var handleAction = function handleAction(v) {
    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
      return LoadingFile.value;
    }))(function () {
      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(fileFromInput(v.value0)))(function (file) {
        var v1 = Waypoint.parseFromString(file);

        if (v1 instanceof Data_Either.Left) {
          return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
            return new Failed(v1.value0);
          });
        }

        ;

        if (v1 instanceof Data_Either.Right) {
          return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
            return new Loaded(v1.value0);
          });
        }

        ;
        throw new Error("Failed pattern match at Main (line 80, column 7 - line 82, column 64): " + [v1.constructor.name]);
      });
    });
  };

  return Halogen_Component.mkComponent({
    initialState: initialState,
    render: render,
    "eval": Halogen_Component.mkEval({
      handleAction: handleAction,
      handleQuery: Halogen_Component.defaultEval.handleQuery,
      receive: Halogen_Component.defaultEval.receive,
      initialize: Halogen_Component.defaultEval.initialize,
      finalize: Halogen_Component.defaultEval.finalize
    })
  });
};

var main = Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Effect_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(function (body) {
  return Halogen_VDom_Driver.runUI(component(Effect_Aff_Class.monadAffAff))(Data_Unit.unit)(body);
}));
module.exports = {
  fileFromInput: fileFromInput,
  main: main,
  Waiting: Waiting,
  LoadingFile: LoadingFile,
  Loaded: Loaded,
  Failed: Failed,
  LoadFile: LoadFile,
  component: component,
  "_fileFromInput": $foreign["_fileFromInput"]
};
},{"./foreign.js":"../output/Main/foreign.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Control.Monad.State.Class/index.js":"output/Control.Monad.State.Class/index.js","../DOM.HTML.Indexed.InputType/index.js":"output/DOM.HTML.Indexed.InputType/index.js","../Data.Array/index.js":"output/Data.Array/index.js","../Data.Either/index.js":"output/Data.Either/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.List.Types/index.js":"output/Data.List.Types/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Effect.Aff/index.js":"output/Effect.Aff/index.js","../Effect.Aff.Class/index.js":"output/Effect.Aff.Class/index.js","../Effect.Aff.Compat/index.js":"../output/Effect.Aff.Compat/index.js","../Halogen.Aff.Util/index.js":"output/Halogen.Aff.Util/index.js","../Halogen.Component/index.js":"output/Halogen.Component/index.js","../Halogen.HTML.Core/index.js":"output/Halogen.HTML.Core/index.js","../Halogen.HTML.Elements/index.js":"output/Halogen.HTML.Elements/index.js","../Halogen.HTML.Events/index.js":"output/Halogen.HTML.Events/index.js","../Halogen.HTML.Properties/index.js":"../output/Halogen.HTML.Properties/index.js","../Halogen.Query.HalogenM/index.js":"output/Halogen.Query.HalogenM/index.js","../Halogen.VDom.Driver/index.js":"output/Halogen.VDom.Driver/index.js","../Waypoint/index.js":"../output/Waypoint/index.js"}],"index.js":[function(require,module,exports) {
"use strict";

var _index = require("../output/Main/index");

(0, _index.main)();
},{"../output/Main/index":"../output/Main/index.js"}],"../../../../.npm/_npx/43200/lib/node_modules/parcel/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "46717" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../../../.npm/_npx/43200/lib/node_modules/parcel/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=/public.e31bb0bc.js.map